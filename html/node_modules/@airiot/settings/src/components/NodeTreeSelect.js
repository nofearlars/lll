import { TreeSelect } from 'antd';
import _ from 'lodash';
import React from 'react';
import { useNodeTree } from './NodeTree';
import { api, use, app } from 'xadmin';
import { getFormValues, useScriptVal } from './util'

let i = 0

export default props => {
  const multiple = false
  const { t: _t1 } = useI18n()
  const { input, field, relateSchema = {} } = props
  const [value, setValue] = React.useState(undefined)
  const { loadData, onSearch, notFoundContent, children, nodes, ModelQuery } = useNodeTree(props, multiple, true)

  // 工作表字段脚本
  let values = getFormValues(relateSchema)
  React.useEffect(() => {
    if (relateSchema.fieldScript && values) {
      onChange && onChange(useScriptVal({ value: input.value, values, props }))
    }
  }, [JSON.stringify(values)])

  const onChange = (node, label, extra) => {
    const { input: { onChange } } = props
    const dataRef = extra.triggerNode && extra.triggerNode.props && extra.triggerNode.props.dataRef
    if (!node) {
      onChange(null)
    } else {
      onChange({ id: node.value || '', name: node.label || '' })
    }
  }
  const placeholder = field && field.placeholder
  React.useEffect(() => {
    const value = input && input.value
    if (value) {
      if (_.isObject(value)) {
        setValue({ label: value.name || '', value: value.id || '' })
      }
      if (typeof value == 'string') {
        api('Node').get(value)
          .then(node => setValue({ label: node.name || '', value: node.id || '' }))
      }
    } else {
      setValue(undefined)
    }
  }, [input.value])

  const onDropdownVisibleChange = (v) => {
    if (v && i == 0 ) ModelQuery(field.model)
    i++
  }

  return (
    <TreeSelect
      showLine
      treeIcon
      allowClear
      labelInValue
      value={value}
      showSearch={true}
      onChange={onChange}
      loadData={loadData}
      onSearch={onSearch}
      filterTreeNode={false}
      notFoundContent={notFoundContent}
      searchPlaceholder={_t1('输入资产名称或编号')}
      style={{ minWidth: 160, width: '100%' }}
      onDropdownVisibleChange={onDropdownVisibleChange}
      dropdownStyle={{ maxHeight: 400, overflow: 'auto',width:'100%'  }}
      placeholder={placeholder ? placeholder : '请选择资产'}
    // getPopupContainer={triggerNode => triggerNode.parentNode || document.body}
    >
      {children}
    </TreeSelect>
  )
}
