import _ from 'lodash';
import React from 'react';
import { TreeSelect, Select } from 'antd';
import { useNodeTree } from './NodeTree';
import { use, api, app } from 'xadmin';
import NoData from './NoData'
import { getFormValues, useScriptVal } from './util'
const { Option } = Select

// model 当配置时 获取上下文model模型如果存在则变为List形式

export default props => {
  const multiple = true
  const { t: _t1 } = useI18n()
  const [Cascade, setCascade] = React.useState(false)
  const [options, setOptions] = React.useState([])
  const [data, setData] = React.useState([])
  const [disabled, setDisabled] = React.useState(false)
  const { input: { onChange, value }, field: { schema = {}, filter }, project, field, relateSchema = {} } = props
  const [values, setValues] = React.useState([])
  let model = []
  let department = null
  const { loadData, onSearch, notFoundContent, children, nodes, ModelQuery, datas } = useNodeTree(props, multiple, true, project || [])
  const IdToLabel = (data = []) => data.map(opt => ({
    'value': (opt.id || opt.nodeKey), 'label': opt.name || opt.title || opt.label, 'key': (opt.id || opt.nodeKey),
  }))
  const IdToKey = (data = []) => data.map(opt => ({
    'key': (opt.id || opt.nodeKey), 'label': opt.name || opt.title,
  }))
  const LabelToId = (data = []) => data.map(opt => {
    return { 'id': opt?.value || '', 'name': opt?.label, 'uid': opt?.value || '', ...opt, }
  })

  const getFieldName = (field, key) => {
    let fieldName = schema[key]
    if (_.includes(field?.name, '.')) {
      const fieldPaths = field?.name.split('.')
      const fieldLast = fieldPaths[fieldPaths.length - 1]
      if (_.includes(schema[key], '.')) {  //处理已配置的schema 比如 setting.model 直接取
        fieldName = schema[key]
      } else {
        fieldName = field?.name?.replace(fieldLast, schema[key])
      }
    }
    return fieldName
  }

  if (schema && schema.model) {
    try {
      model = use('form', state => ({
        model: state.values && _.get(state.values, getFieldName(field, 'model'))
      }))['model']
    } catch (error) {
      console.log(error)
    }
  }
  if (schema && schema.department) {
    try {
      department = use('form', state => ({
        department: state.values && _.get(state.values, getFieldName(field, 'department'))
      }))['department']
    } catch (error) {
      console.log(error)
    }
  }

  // 工作表字段脚本
  let values1 = getFormValues(relateSchema)
  React.useEffect(() => {
    if (relateSchema.fieldScript && values) {
      onChange && onChange(useScriptVal({ value, values: values1, props }))
    }
  }, [JSON.stringify(values)])

  const onSelectChange = value => {
    if (value && value.length > 0) {
      onChange(LabelToId(value.map(item => ({ 'value': item.key, 'label': item.label }))))
    } else {
      onChange([])
    }
  }
  const onChanges = value => {
    if (filter) {
      onChange({ '$in': LabelToId(value).map(item => item.id) })
      setValues(value)
    } else {
      const vals = value.map(item => ({ ...item, 'id': item.value, 'uid': item.value }))
      const vs = _.intersectionBy([...data, ...datas, ...vals], vals, 'id')
      const value_s = vs.map(item => item && ({ ...item, id: item.id, name: item.name || item.label, uid: item.id }))
      //事件管理处理
      const eventvalues = schema.cascade && vs.map(item => item && (
        {
          id: item.id || item.value,
          name: item.name,
          uid: item.id,
          modelid: item.model.id,
          warning: item.warning || {}
        }
      ))
      onChange(schema.cascade ? eventvalues : value_s)
    }
  }

  const querynode = (node) => {
    if (schema.cascade && node && node.length > 0) {
      api({ name: 'core/node' })
        .query({ fields: ['modelId', 'icon', 'model.icon', ...(project || [])] },
          { where: { 'id': { '$in': node.map(item => item.id) } } }
        )
        .then(({ items }) => { setData(items) })
    }
  }

  React.useEffect(() => {
    setCascade(false)
    if (schema && (schema.model || schema.department)) {
      setDisabled(false)
      if ((model) || (department && _.isArray(department) && department.length > 0)) {
        if (schema.cascade == false) {
          setDisabled(true)
        } else {
          const model_ids = _.isArray(model) ? model.map(item => item.id) : [model?.id]
          const department_ids = department && department.map(item => item.id) || []
          let where = {}
          if (schema.model && model_ids.length > 0) where = { where: { 'modelId': { '$in': model_ids }, } }
          if (schema.department && department_ids.length > 0) where = { where: { 'departmentId': { '$in': department_ids } } }
          if (schema.model && schema.department && model_ids.length > 0 && department_ids.length > 0) where = {
            where: { 'modelId': { '$in': model_ids }, 'departmentId': { '$in': department_ids } }
          }
          queryData(where)
          setCascade(true)
        }
      } else {
        setCascade(false)
        if (schema.cascade || model && model.length < 1) {
          if (model && model.length < 1) {
            onChange([])
            setOptions([])
            setValues([])
          }
        }
      }
    }

  }, [ JSON.stringify(model), JSON.stringify(department) ])

  const queryData = (where = {}) => {
    api({ name: 'core/node' })
      .query({ fields: ['modelId', 'icon', 'model.icon', ...(project || [])] }, where)
      .then(({ items }) => {
        // 去除新nodes不存在的node
        onChange(_.intersectionBy(items, value, 'id')?.length ? _.intersectionBy(items, value, 'id') : undefined)
        if (items && items.length > 0) {
          setOptions(items)
        } else {
          setOptions([])
          // onChange([])
        }
      })
  }

  React.useEffect(() => {
    // model 可能是对象 
    setCascade(false)
    if (!_.isEmpty(model)) setCascade(true)
  }, [])

  const onDropdownVisibleChange = (v) => {
    if (v) ModelQuery(field.model)
  }

  React.useEffect(() => {
    if (value) {
      // arr object
      if (_.isArray(value)) {
        querynode(value)
        // if (Cascade) {
        //   setValues(IdToKey(value))
        // } else {
        setValues(IdToLabel(value))
        // }
      }
      // $in filter
      if (_.isObject(value)) {
        if (filter && value['$in']) {
          let ids = Array.from(new Set(value['$in'])) || []
          const data = datas.filter(item => ids.some(id => item.nodeKey == id))
          if (data.length == 0) {
            api(app.get('models')['Node'])
              .query({ fields: ['model'] }, { where: { 'id': { '$in': ids } } })
              .then(({ items }) => {
                if (items) setValues(IdToLabel(items))
              })
          }
        }
      }

    } else {
      // onChange([])
      setValues([])
    }
  }, [value, Cascade])

  return Cascade ? (
    <Select
      mode="multiple"
      style={{ width: '100%' }}
      placeholder={_t1('请选择资产')}
      notFoundContent={<NoData />}
      labelInValue
      disabled={disabled}
      optionFilterProp={'children'}
      value={values}
      onChange={onSelectChange}
    >
      {options && options.length > 0 && options.map(item => (
        <Option value={item.id} >{item.name}</Option>
      ))}
    </Select>
  ) : (
    <TreeSelect
      treeIcon
      multiple
      disabled={disabled}
      labelInValue
      allowClear
      value={values}
      placeholder={_t1('请选择资产')}
      style={{ minWidth: 160, width: '100%' }}
      onChange={onChanges}
      loadData={loadData}
      onSearch={onSearch}
      treeNodeFilterProp={'title'}
      dropdownStyle={{ maxHeight: 400, overflow: 'auto',width:'100%'  }}
      notFoundContent={notFoundContent}
      onDropdownVisibleChange={onDropdownVisibleChange}
    >
      {children}
    </TreeSelect>
  )
}
