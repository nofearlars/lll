import { Avatar, Tree, Spin, Input, Empty, TreeSelect } from 'antd';
import React from 'react';
import { api, app, config } from 'xadmin';
import { C, Loading } from 'xadmin-ui';
import NoData from './NoData'

import _ from 'lodash';

const AvatarIcon = ({ icon, node }) => {
  if (icon) {
    return <Avatar size={20} shape="square" src={config('mediaUrl') + icon} style={{ margin: '0 10px 3px 0' }} />
  } else {
    return <Avatar size={20} shape="square" style={{ margin: '0 10px 3px 0' }}>
      {node ? 'N' : "M"}
    </Avatar>
  }
}
function uuid() {
  var s = [];
  var hexDigits = "0123456789abcdef";
  for (var i = 0; i < 36; i++) {
    s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
  }
  s[14] = "4";  // bits 12-15 of the time_hi_and_version field to 0010
  s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);  // bits 6-7 of the clock_seq_hi_and_reserved to 01
  s[8] = s[13] = s[18] = s[23] = "-";

  var uuid = s.join("");
  return uuid;
}

const dataFun = (data = [], parentId) => {
  return data.map(item => ({
    ...item,
    title: item.name,
    nodeKey: item.id,
    id: item.id || '',
    modelId: item.model && item.model.id,
    mark_node: (item.model && item.model.id) ? true : false,
    key: item.id + '_' + uuid(),
    parent_id: parentId,
    showicon: true,
    icon: item.icon || (item.model && item.model.icon)
  }))
}


//models 过滤根节点数据
const modelsRootNodeFn = (data = []) => {
  const node = []
  data.map(item => {
    if (item.relations && item.relations.parent && item.relations.parent.length == 0) {
      node.push({
        key: item.id + '_' + uuid(),
        nodeKey: item.id, title: item.name,
        showicon: true,
        ...item
      })
    }
  })
  return node
}

const modelsNodeFn = (data = []) => {
  const node = []
  const _data = _.isArray(data)?data:[data]
  _data.map(item => {
    node.push({
      key: item.id + '_' + uuid(),
      nodeKey: item.id, title: item.name,
      showicon: true,
      ...item
    })
  })
  return node
}

const renderTreeNodes = (data, multiple, TreeSelects) => {
  let TreeNode = Tree.TreeNode
  if (TreeSelects) TreeNode = TreeSelect.TreeNode
  return data.map((item) => {
    if (item.children) {
      return (
        <TreeNode
          key={item.key}
          dataRef={item}
          title={item.title}
          nodeKey={item.nodeKey}
          value={item.id}
          disabled={!item.mark_node}
          icon={item.showicon ? <AvatarIcon icon={item.icon} node={item.mark_node} /> : ''}
        >
          {renderTreeNodes(item.children, multiple, TreeSelects)}
        </TreeNode>
      )
    }
    return (<TreeNode
      dataRef={item}
      key={item.key}
      title={item.title}
      nodeKey={item.nodeKey}
      value={item.id}
      disabled={!item.mark_node}
      icon={item.showicon ? <AvatarIcon icon={item.icon} node={item.mark_node} /> : ''}
    />
    )
  })
}

const useNodeTree = (props, multiple, TreeSelect, project = []) => {
  const [nodes, setNodes] = React.useState([])
  const [datas, setDatas] = React.useState([])
  const [searching, setSearching] = React.useState(false)
  const [searchNodes, setSearchNodes] = React.useState(null)
  const [searchValue, setSearchValue] = React.useState(null)
  const [Loadings, setLoadings] = React.useState(false)

  //异步加载
  const loadData = React.useCallback((treeNode) => {
    return new Promise((resolve) => {
      if (treeNode.props.children) {
        resolve()
        return
      }
      // mark_node为资产标识 true时是models查询
      const { dataRef: { mark_node }, dataRef } = treeNode.props
      const parentId = dataRef.nodeKey
      const Type = mark_node ? 'Model' : 'Node'
      const Where = mark_node ? { 'relations.parentId': dataRef.modelId } : { 'modelId': dataRef.nodeKey, ...(dataRef.parent_id ? { 'parentId': dataRef.parent_id } : {}) }
      api(app.get('models')[Type])
        .query({ fields: mark_node ? ['icon'] : ['modelId', 'id', 'icon', 'model.icon', 'gis', ...project] }, { where: Where })
        .then(({ items }) => {
          dataRef.children = dataFun(items, parentId)
          setNodes([...nodes])
          setDatas([...dataFun(items, parentId)])
          resolve()
        })
    })
  })

  const onSearch = value => {
    setSearchValue(value)
    onDoSearch(value)
  }
  const onDoSearch = React.useCallback(_.debounce(value => {
    if (value) {
      setSearching(true)
      setSearchNodes([])
      const or = [{ id: { like: value } }, { name: { like: value } }]

      api('Node').query({ limit: 200, fields: ['model.icon', 'id', 'gis', ...project] }, { where: { or } })
        .then(({ items }) => {
          setSearching(false)
          setSearchNodes(dataFun(items))
          setDatas([...dataFun(items)])
        }).catch(err => {
          console.log(err)
          setSearching(false)
          setSearchNodes([])
        })
    } else {
      setSearching(false)
      setSearchNodes(null)
      setSearchValue([])
    }
  }, 500), [])

  React.useEffect(() => {
    if (props.value) {
      setNodes(dataFun([props.value]))
    }
  }, [props.value])

  React.useEffect(() => {
    const { initialValue: node } = props
    setLoadings(true)
    if (node) {
      setSearchValue(node.name || [])
      if (node.model) {
        setSearchNodes(dataFun([node]))
      } else {
        node.id && api('Node').get(node.id).then(node => setSearchNodes(dataFun([node])))
      }
    }
    // 点击输入请求
    if (TreeSelect) return
    ModelQuery()
  }, [])

  const ModelQuery = (model) => {
    api(app.get('models').Model)
      .query({ fields: ['relations', 'id', 'icon', 'device', 'warning'] }, {})
      .then(({ items }) => {
        if (model) {
          setNodes(modelsNodeFn(model))
        } else {
          setNodes(modelsRootNodeFn(items))
        }
        setLoadings(false)
      })
  }

  const children = renderTreeNodes(searchNodes != null ? searchNodes : (nodes || []), multiple, TreeSelect)
  const notFoundContent = searching ? <div style={{ textAlign: 'center' }}><Spin size="small" /></div> : <NoData />

  return { loadData, onSearch, notFoundContent, children, searchValue, nodes, ModelQuery, datas, Loadings }
}

export default props => {
  const { loadData, onSearch, notFoundContent, children, searchValue, nodes, Loadings } = useNodeTree(props)
  return (<>
    {
      props.showSearch ? <Input.Search
        allowClear
        style={{ marginBottom: 5 }}
        value={searchValue}
        placeholder={_t1('输入资产名称或编号')}
        onChange={e => onSearch(e.target.value)} />
        : null
    }

    {
      props.showSearch ? Loadings ? <Loading /> : children.length > 0 ? (
        <Tree showLine showIcon onSelect={props.onSelect}
          loadData={loadData} notFoundContent={notFoundContent}
        >
          {children}
        </Tree>
      ) : <NoData />
        : (<Tree showLine showIcon defaultExpandAll onSelect={props.onSelect} loadData={loadData}
          notFoundContent={notFoundContent}
        >
          {children}
        </Tree>)
    }

  </>
  )
}

export { useNodeTree }
