/**
 * [
 *  { id, title, url, icon, permission, children: [
 *    ...
 * ] }
 * ]
 *
 */

/**
 * Add Item Form
 * ---- 菜单项选择器 ----
 * 系统内置
 * 模块菜单 - 静态， 动态
 * 书签(保存的搜索条件)
 * ---- 菜单项选择器 ----
 * 自定义
 */
import React from 'react';
import _ from 'lodash'
import reduce from 'async/reduce';
import { Tree, Button, Modal, Layout, Card, Form, Row, Col, TreeSelect, message } from 'antd';
import { SchemaForm } from 'xadmin-form';
import { Icon, C, Loading } from 'xadmin-ui';
import { _t } from 'xadmin-i18n';
import { app, use, api } from 'xadmin';
import IconPicker from './IconPicker'
import './MenuEditTree.css';
import { HasPermission } from 'xadmin-auth'

const { Content, Sider } = Layout
const { TreeNode } = Tree;

let menuForm = {
  type: 'object',
  properties: {
    title: {
      type: 'string',
      title: _r('菜单名称')
    },
    url: {
      type: 'string',
      title: '菜单url'
    },
    iframUrl: {
      type: 'boolean',
      title: '是否控制iframe'
    },
    icon: {
      type: 'string',
      title: _r('图标'),
      description: '可上传PNG/JPG/SVG/GIF格式, 图标大小不可超过500kb'
    },
    permission: {
      type: 'string',
      title: _r('菜单权限')
    }
  },
  required: ['title'],
  form: ['*', {
    key: 'icon', component: IconPicker, category: 'icon'
  }]
}

const travelTree = ts => {
  return ts ? ts.map(t => ({
    selectable: Boolean(t.url),
    ...t,
    ...(t.children ? { children: travelTree(t.children) } : {}),
    value: t.value || t.key || t.url || t.title,
  })) : null
}

const findTree = (ts, value) => {
  for (let i = 0; i < ts.length; i++) {
    const t = ts[i]
    if (t.value == value) {
      return t
    } else if (t.children) {
      const t1 = findTree(t.children, value)
      if (t1) {
        return t1
      }
    }
  }
  return null
}

const MenuItemSelect = ({ change, values, limits }) => {
  const { form } = use('form')
  const { t: _t1 } = useI18n()
  const [{ treeData, loading, values: { title }, sign }, setState] = React.useState({
    treeData: [], loading: false, values, sign: false
  })

  const onLoad = () => {
    if (sign) return
    setState(state => ({ ...state, loading: true }))
    reduce(app.get('frontMenuItems'), [], (prev, item, cb) => {
      if (_.isFunction(item)) {
        item(prev, cb)
      } else if (_.isArray(item)) {
        cb(null, [...prev, ...item])
      } else {
        cb(null, [...prev, item])
      }
    }, (err, treeData) => {
      if (err) {
        message.error('读取系统内置菜单项错误')
      } else {
        if (values) {
          const initData = treeData.filter(item => {
            return title == item.title
          })
          if (initData.length > 0) {
            handleMenu(title, treeData, initData)
          } else {
            setState({ treeData: travelTree(treeData), loading: false, values: { title: '' }, sign: true })
          }
        } else {
          setState({ treeData: travelTree(treeData), loading: false, values: { title: '' }, sign: true })
        }
      }
    })
  }

  const handleMenu = (title, treeData, initData) => {
    setState({
      treeData: travelTree(treeData), loading: false,
      values: { title: initData && initData.length > 0 && initData[0] || '' }
    })
    let input = document.getElementsByTagName('input')
    for (let i = 0; i < input.length; i++) {
      if (input[i].name == 'url') {
        input[i].setAttribute('disabled', 'disabled')
      }
    }
  }

  const onChange = value => {
    const item = findTree(treeData, value)
    const initData = treeData.filter(val => {
      return item.title == val.title
    })
    initData.length > 0 && handleMenu(item.title, treeData, initData)

    if (item && item.url) {
      form.change('title', item.title)
      form.change('url', item.url)
      form.change('icon', item.icon)
      form.change('permission', item.permission)
    }
  }

  let renderTreeData = treeData
  // 如果有限制条件
  if (limits && treeData && !_.isEmpty(treeData)) {
    if (_.isArray(limits) && !_.isEmpty(limits)) {
      const ls = limits.map(item => ({ title: item }))
      renderTreeData = _.intersectionBy(treeData, ls, 'title')
    }
    if (_.isString(limits)) {
      renderTreeData = _.intersectionBy(treeData, [{ 'title': limits }], 'title')
    }
  }
  const onDropdownVisibleChange = (open) => {
    if (open) onLoad()
  }

  return (
    <TreeSelect
      showSearch
      filterTreeNode
      loading={loading}
      onChange={onChange}
      treeDefaultExpandAll
      // notFoundContent={<Loading/>}
      notFoundContent={loading ?
        <Icon type="loading" style={{ width: 14, display: 'block', margin: '0 auto' }} /> :
        <C is="NoData" />
      }
      onDropdownVisibleChange={onDropdownVisibleChange}
      treeNodeFilterProp="title"
      treeData={renderTreeData}
      placeholder={_t1('选择系统内置的菜单项')}
      dropdownStyle={{ maxHeight: 400, overflow: 'auto', width: '100%' }}
    />
  )
}

const loop = (data, key, callback) => {
  data.forEach((item, index, arr) => {
    if (item.key == key) {
      return callback(item, index, arr);
    }
    if (item.children) {
      return loop(item.children, key, callback);
    }
  });
};

const treeMap = (data, key, callback) => {
  return data.map((item, index, arr) => {
    if (item.key == key) {
      return callback(item, index, arr);
    }
    if (item.children) {
      return {
        ...item,
        children: treeMap(item.children, key, callback)
      }
    }
    return item
  }).filter(Boolean);
};

const newKey = (v, item) => {
  return (Math.random() * 1000).toString()
}

const FormLayout = ({ children, change, invalid, handleSubmit, submitting, onCancel, limits, handleCancel, flag }) => {
  const { formState: { values } } = use('form')
  const { t: _t1 } = useI18n()
  return (
    <Form onSubmit={handleSubmit}>
      <C is="Form.FieldGroup" label={_t1('系统菜单')} meta={{}} field={{}}>
        <MenuItemSelect change={change} values={values || ''} limits={limits} />
      </C>
      {children}
      <Form.Item wrapperCol={{
        xs: { span: 24, offset: 0 },
        sm: { span: 18, offset: 5 }
      }}>
        <HasPermission FailureComponent={null} permission={`frontSystemMenu.${flag}`}>
          <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>{_t1('确定')}</Button>{' '}
          <Button onClick={() => {
            onCancel()
            handleCancel && handleCancel()
          }}>{_t('Cancel')}</Button>
        </HasPermission>
      </Form.Item>
    </Form>
  )
}

const MenuEditTree = ({ input, settings, limits, handleCancel, type }) => {
  const { value, onChange } = input
  const { t: _t1 } = useI18n()
  const [selectKey, setSelect] = React.useState(null)
  const [parentKey, setParentKey] = React.useState(null)
  const [title, setTitle] = React.useState(null)
  const update = app?.context?.recoil?.useDataSet('customVar')
  // const data = app?.context?.recoil?.useDataValue('customVar')
  //拖拽功能
  const onDrop = info => {
    const dropKey = info.node.props.eventKey; //拖拽元素到达的位置元素
    const dragKey = info.dragNode.props.eventKey; //被拖拽元素
    const dropPos = info.node.props.pos.split('-');
    const dropPosition =
      info.dropPosition - Number(dropPos[dropPos.length - 1]);

    const data = [...value];

    // Find dragObject
    let dragObj;
    loop(data, dragKey, (item, index, arr) => {
      arr.splice(index, 1);
      dragObj = item;
    });
    // console.log(dragObj)
    if (!info.dropToGap) {
      // Drop on the content
      loop(data, dropKey, item => {
        item.children = item.children || [];
        // where to insert 示例添加到尾部，可以是随意位置
        item.children.push(dragObj);
      });
    } else if (
      (info.node.props.children || []).length > 0 && // Has children
      info.node.props.expanded && // Is expanded
      dropPosition == 1 // On the bottom gap
    ) {
      loop(data, dropKey, item => {
        item.children = item.children || [];
        // where to insert 示例添加到尾部，可以是随意位置
        item.children.unshift(dragObj);
      });
    } else {
      let ar;
      let i;
      loop(data, dropKey, (item, index, arr) => {
        ar = arr;
        i = index;
      });
      if (dropPosition == -1) {
        ar.splice(i, 0, dragObj);
      } else {
        ar.splice(i + 1, 0, dragObj);
      }
    }
    onChange(data);
  };

  //点击树显示编辑区域(查看菜单项)
  const onSelect = (selectedKeys, e) => {
    const { eventKey, title } = e.node && e.node.props;
    setSelect(eventKey)
    setTitle(title)
  };

  //删除菜单项
  const deleteTreeNode = () => {
    const newData = treeMap(value, selectKey, () => null)
    setSelect(null)
    onChange(newData)
  };

  //添加子级菜单
  const addMenu = (values) => {
    let newData = value
    if (parentKey == '') {
      // 添加主菜单
      newData = [...value, { key: newKey(values), ...values }]
    } else {
      newData = treeMap(value, parentKey, (item) => {
        item.children = [
          ...(item.children || []),
          { key: newKey(values, item), ...values }
        ]
        return item
      })
    }

    onChange(newData)
    setParentKey(null)
    setSelect(null)
  };

  //修改后更新树结构
  const updateData = (values) => {
    const newData = treeMap(value, selectKey, (item) => ({ ...item, ...values }))
    newData && onChange(newData)
    // 关闭弹出框
    handleCancel && handleCancel()
  };

  const selectItem = React.useMemo(() => {
    if (selectKey) {
      let data = null
      loop(value, selectKey, (item) => {
        data = { ...item }
      })
      return data
    } else {
      return null
    }
  }, [value, selectKey])

  //树形结构子级菜单
  const MenuDate = (data) =>
    data && data.map(item => {
      if (item.children && item.children.length) {
        return (
          <TreeNode
            key={item.key}
            title={item.title}
            url={item.url}
          >
            {MenuDate(item.children)}
          </TreeNode>
        );
      }
      return (
        <TreeNode
          key={item.key}
          title={item.title}
          url={item.url}
        />
      );
    });


  const CardTitle = (<div style={{ display: 'flex' }}>
    <span style={{ flex: 1 }}>{_t1('菜单管理')}</span>
    <HasPermission FailureComponent={null} permission="frontSystemMenu.add">
      <Icon style={{ fontSize: 22 }} name="folder-add" onClick={() => setParentKey('')} />
    </HasPermission>
  </div>)

  menuForm.form = type == 'front' ? ['title', 'url', 'permission', {
    key: 'icon', component: IconPicker, category: 'icon'
  }] : menuForm.form
  return (
    <Row>
      <Col span={6}>
        <Card style={{ minHeight: 300 }} title={CardTitle} >
          {
            value && value.length > 0 ? <Tree className="draggable-tree"
              draggable showLine autoExpandParent
              onDrop={onDrop}
              onSelect={onSelect}
            >
              {MenuDate(value)}
            </Tree>
              : <C is="NoData" description={_t1('请添加菜单')}
                style={{
                  position: 'absolute', top: '50%', right: '50%', marginTop: '-50px', marginRight: '-53px'
                }} />
          }
        </Card>
      </Col>
      <Col span={18}>
        <Card style={{ marginLeft: '1rem', height: '100%' }} title={selectKey != null ? (
          <>
            <HasPermission FailureComponent={null} permission="frontSystemMenu.add">
              <Button onClick={() => { setParentKey(selectKey) }} size="small"  >
                添加子菜单
              </Button>
            </HasPermission>{' '}
            <HasPermission FailureComponent={null} permission="frontSystemMenu.delete">
              <Button onClick={() => Modal.confirm({
                title: '确定要删除该菜单项吗？删除后不可撤回！', onOk: deleteTreeNode
              })} size="small">
                删除
              </Button>
            </HasPermission>
          </>
        ) : null} >
          {
            selectKey != null ? <C is="I18nSchemaForm"
              formKey={'menuForm.r' + selectKey}
              schema={menuForm}
              initialValues={selectItem}
              onSubmit={values => updateData(values)}
              onCancel={() => setSelect(null)}
              component={props => <FormLayout  {...props} limits={limits} handleCancel={handleCancel} flag={'edit'} />}
            /> : <C is="NoData" description={_t1('请选择或添加菜单')} style={{
              position: 'absolute',
              top: '50%', right: '50%', marginTop: '-100px', marginRight: '-53px'
            }} />
          }

        </Card>
      </Col>
      <Modal
        title={parentKey == '' ? '添加主菜单' : '添加子菜单'}
        destroyOnClose={true}
        footer={null}
        width={'40%'}
        visible={parentKey != null}
        onCancel={() => setParentKey(null)}
      >
        <C is="I18nSchemaForm"
          formKey={'menuForm.child.r' + parentKey}
          schema={menuForm}
          onSubmit={values => addMenu(values)}
          onCancel={() => setParentKey(null)}
          component={props => <FormLayout  {...props} limits={limits} flag={'add'} />}
        />
      </Modal>
    </Row>
  )
}

export default MenuEditTree;
