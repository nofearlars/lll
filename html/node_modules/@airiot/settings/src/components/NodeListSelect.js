import { Select, Spin, Empty } from 'antd';
import React from 'react';
import { api, use, app } from 'xadmin';
import debounce from 'lodash/debounce';
import NoData from './../components/NoData'
import _ from 'lodash'
import { getFormValues, useScriptVal } from './util'
const Option = Select.Option;

const NodeSelect = (props) => {
  let { input, field: { department, multiple, model, placeholder, insideFilter },
    project = [], defaultValue, relateSchema = {}, initValue } = props
  const [nodes, setNodes] = React.useState([])
  const [allNodes, setAllNodes] = React.useState([])
  const [loading, setLoading] = React.useState(false)
  const [searchId, onSearch] = React.useState(null)
  let defaults = defaultValue?.id
  // 工作表字段脚本
  let values = getFormValues(relateSchema)
  React.useEffect(() => {
    if (relateSchema.fieldScript && values) {
      onChange && onChange(useScriptVal({ value: input.value, values, props }))
    }
  }, [JSON.stringify(values)])

  React.useEffect(() => {
    setLoading(true)
    const where = insideFilter || {} // 在 schema 上配置内置查询

    if (!_.isEmpty(department)) {
      if (_.isArray(department)) {
        let d = department && department.length === 0 ? undefined : department // 空数组转 undefined
        d = d ? { "$in": d.map(item => item.id) } : undefined
        where['department'] = d
      } else {
        where['department'] = department
      }
    }
    if (model) {
      if (_.isArray(model)) {
        const model_ids = model.map(item => item.id)
        if (model_ids.length > 0) where['modelId'] = { '$in': model_ids }
      } else {
        where['model'] = model
      }
    }
    if (searchId) where['or'] = [{ id: { like: searchId } }, { name: { like: searchId } }]
    if (nodes && nodes.length > 0) {
      if (input.value && _.isString(input.value) && nodes.filter(n => n.id != input.value).length > 0) {
        setNodes([])
        input.onChange(null)
      }
    }
    api('Node').query({ fields: project || [] }, { where })
      .then(({ items }) => {
        setLoading(false)
        if (items.length > 0) {
          if (!searchId) setAllNodes(items)
          setNodes(items)
        } else {
          setNodes([])
          input.onChange(null)
        }
      }).catch(err => {
        setLoading(false)
      })
  }, [JSON.stringify(department), JSON.stringify(model), JSON.stringify(insideFilter), searchId,])

  React.useEffect(() => {
    if (!initValue && _.isFunction(input?.onChange)) { input?.onChange(defaultValue); return }
    if (nodes.length && initValue && !defaultValue) {
      let id = multiple ? [nodes?.[0]?.id] : nodes?.[0]?.id
      onChange(id)
    }
  }, [JSON.stringify(nodes), initValue, defaultValue])

  const onChange = (id) => {
    onSearch(null)
    if (multiple) {
      const ids = id?.map(item => {
        return item ? allNodes.filter(n => n.id == item)[0] : null
      })
      input.onChange(ids)
    } else {
      input.onChange(id ? nodes.filter(n => n.id == id)[0] : null)
    }
  }

  const prop = {}

  if (input?.value) {
    prop['value'] = multiple ?
      (input.value && input.value instanceof Array ? input.value.map(v => v?.id || v)?.filter(Boolean) : [input.value.id] || null) :
      input.value instanceof Array ? input.value[0]?.id || input.value[0] : _.isPlainObject(input.value) ? input.value.id : input.value
  }

  return nodes?.length ? (
    <Select
      showSearch
      style={{ minWidth: 160, width: '100%' }}
      placeholder={placeholder || "请选择资产"}
      onChange={onChange}
      onSearch={debounce(onSearch, 700)}
      notFoundContent={loading ? <div style={{ textAlign: 'center' }}><Spin size="small" /></div> : <NoData />}
      filterOption={false}
      loading={loading}
      allowClear={true}
      mode={multiple ? "multiple" : null}
      defaultValue={defaults}
      {...prop}
    >
      {nodes.map(node => <Option value={node.id}>{node.name}</Option>)}
    </Select>
  ) : null

}

export default NodeSelect
