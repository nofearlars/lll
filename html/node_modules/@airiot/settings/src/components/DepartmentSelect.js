import React from 'react';
import { ModelWrap } from 'xadmin-model';
import BaseSelect from './BaseSelect'
import { formatDepartment } from './util'
import _ from 'lodash'
import { use, api, app } from 'xadmin';
import { Empty } from 'antd'
import { getFormValues, useScriptVal } from './util'

class DepartmentSelect extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      value: []
    }
  }
  onChange = (value) => {
    if (value && !_.isEmpty(value)) {
      const { onChange } = this.props
      if (onChange && _.isFunction(onChange)) {
        onChange(value)
      }
      this.setState({ value })
    } else {
      this.setState({ value: [] })
    }
  }
  render() {
    const props = {
      multiple: true,
      onChange: this.onChange,
      value: this.state.value,
      filter: this.props.filter,
      width: this.props.width
    }
    return (
      <BaseSelect
        {...props}
        showIcon={false}
        project={this.props?.project || ['parent']}
        modelName={'Department'}
        dataFilter={formatDepartment}
        placeholder={'请选择部门'}
        notFoundContent={<C is='NoData' style={{ padding: 20 }} />}
        // notFoundContent={<Empty image={require('./../icon/homeIcon/noData.png')} imageStyle={{ height: 100 }} description={_t1('暂无数据')}></Empty>}
      />
    )
  }
}

const DepartmentMultipleSelectField = props => {
  let assetsSelect = null
  const [disabled, setDisabled] = React.useState(false)
  const { input: { name, value, onChange }, label, meta, field, relateSchema = {}, treeCheckable, maxTagCount, filterDepartment, selectDepartment, project } = props
  const placeholder = field && field.placeholder
  const schema = field && field.schema
  if (schema && schema.cascade) {
    try {
      assetsSelect = use('form', state => ({ [schema.cascade]: state.values && state.values[schema.cascade] }))[schema.cascade]
    } catch (error) {
      console.log(error)
    }
  }

  // 工作表字段脚本
  let values = getFormValues(relateSchema)
  React.useEffect(() => {
    if (relateSchema.fieldScript && values) {
      onChange && onChange(useScriptVal({ value, values, props }))
    }
  }, [JSON.stringify(values)])
  
  const onChanges = value => {
    onChange(value)
  }

  React.useEffect(() => {
    if (assetsSelect && assetsSelect.length > 0) {
      setDisabled(true)
    } else {
      setDisabled(false)
    }
  }, [assetsSelect])

  const dataFilter = (items) => {
    if (filterDepartment && selectDepartment) {
      items = filterDepartment(items, selectDepartment)
    }
    const result = formatDepartment(items)
    return result
  }

  return (
    <BaseSelect
      value={value}
      multiple={true}
      treeCheckable={treeCheckable}
      maxTagCount={maxTagCount}
      disabled={disabled}
      project={project || ['parent']}
      insideFilter={field?.insideFilter}
      onChange={onChanges}
      modelName={'Department'}
      dataFilter={dataFilter}
      placeholder={placeholder ? placeholder : '请选择部门'}
      // getPopupContainer={triggerNode => triggerNode.parentNode || document.body}
      notFoundContent={<C is='NoData' style={{ padding: 20 }} />}
      // notFoundContent={<Empty image={require('./../icon/homeIcon/noData.png')} imageStyle={{ height: 100 }} description={_t1('暂无数据')}></Empty>}
    />
  )
}

const DepartmentSelectField = (props) => {
  const { input: { value, onChange }, field, relateSchema = {}, filterDepartment, selectDepartment, project } = props

  // 工作表字段脚本
  let values = getFormValues(relateSchema)
  React.useEffect(() => {
    if (relateSchema.fieldScript && values) {
      onChange && onChange(useScriptVal({ value, values, props }))
    }
  }, [JSON.stringify(values)])

  const handleChange = (v) => {
    if (!v) {
      onChange(null)
    }
    if (v && _.isArray(v)) {
      onChange(v[0])
    }
  }

  const dataFilter = items => {
    if (filterDepartment && selectDepartment) {
      items = filterDepartment(items, selectDepartment)
    }
    const option = props.option
    if (option) {
      const form = option && option.form
      const formState = form && form.getState()
      // 获取表单id, 如果是部门添加表单，则过滤掉所属部门中的该条数据
      const id = formState && formState.values && formState.values.id
      const filterData = id ? items.filter(item => item.id != id) : items
      return formatDepartment(filterData)
    } else {
      return formatDepartment(items)
    }
  }
  const placeholder = field && field.placeholder

  return (
    <BaseSelect
      project={project || ['parent']}
      insideFilter={field?.insideFilter}
      placeholder={placeholder ? placeholder : '请选择部门'}
      onChange={handleChange}
      value={value}
      showIcon={false}
      modelName={'Department'}
      dataFilter={dataFilter}
      notFoundContent={<C is='NoData' style={{ padding: 20 }} />}
      // notFoundContent={<Empty image={require('./../icon/homeIcon/noData.png')} imageStyle={{ height: 100 }} description={_t1('暂无数据')}></Empty>}
    />
  )
}

const DepartmentSelectSidebar = ModelWrap ?ModelWrap('department.tree', {
  method: {
    onChange: ({ dispatch, model, modelState }) => (m) => {
      const wheres = modelState.wheres
      dispatch({
        model, type: 'GET_ITEMS',
        filter: { ...modelState.filter, skip: 0 },
        wheres: {
          ...wheres,
          modelTree: { modelId: m && m.id }
        }
      })
    }
  }
})(DepartmentSelect) : null

export { DepartmentSelect, DepartmentSelectField, DepartmentSelectSidebar, DepartmentMultipleSelectField };
