import React from 'react'
import { Checkbox, Card, Input, Row, Tag, Empty, Button, Col, Tree, Radio, Menu, Select, Modal, Tooltip } from 'antd';
import { api, app } from 'xadmin'
import NodeTree from './NodeTree'
import debounce from 'lodash/debounce';
import './PointTable.css'
import _ from 'lodash'
import { constant } from 'async';
import { C, Loading } from 'xadmin-ui';
import NoData from './NoData'

const CheckboxGroup = Checkbox.Group;
const RadioGroup = Radio.Group
const linkStyle = { color: '#1790FF', cursor: 'pointer' }
const convert = arr => arr.map(item => ({
  key: item.id, label: item.name, nodeKey: item && item.node && item.node.id || ''
}))


const convert_values = (data) => {
  if (!data || !_.isArray(data)) return
  let object = {}
  let arr = []
  data.forEach(item => {
    const node_id = item && item.node && item.node.id
    if (Object.keys(object).indexOf(node_id) > -1) {
      object[node_id].push(item)
    } else {
      object[node_id] = [item]
    }
  })
  return object

}

const CardTage = ({ fullLable, values, type, onChangeClear }) => {
  return (values && values.length > 0 && type != 'radio') ? (
    <Card bodyStyle={{ width: '100%', borderRadius: '5px', padding: 5 }}>
      {values.map(item => (
        <span key={item.ref_id}><Tooltip key={item.id} title={'所属资产 ' + (item.node && item.node.name || '')}>
          <Tag closable onClose={() => onChangeClear(item)}>{
            fullLable ? item?.node?.name + '-' + item.name : item.name
          }</Tag>
        </Tooltip>
        </span>
      ))}
    </Card>
  ) : null
}
// type属性分为 radio checkbox类型、assignNode传入的指定节点id与name
class PointTable extends React.Component {

  constructor(props) {
    super(props);
    this.data = []
    const inpvalue = props.input && props.input.value || null
    // radio 当前已选node
    const nodeValue = props.type == 'radio' ? inpvalue && inpvalue.node && inpvalue.node : []
    // radio 当前已选tag
    const checks = inpvalue ? (props.type == 'radio' ? inpvalue && inpvalue.id : _.isArray(inpvalue) && inpvalue.map(i => i.id) || []) : []
    this.state = {
      data: [],
      checks,
      loading: false,
      node: nodeValue,
      onChangValue: '',
      selectNode: null,
      checkedList: props.type != 'radio' ? inpvalue && _.isArray(inpvalue) && convert_values(inpvalue) : [],
      visible: false
    }
  }

  componentDidMount() {
    const { node } = this.state
    if (node) this.onQyeryTagData(node, true)
  }

  //搜索框
  onChange = ({ target: { value } }) => {
    const filter_data = this.data.filter(item => (item.label + item.key).indexOf(value) != -1)
    this.setState({ onChangValue: value, data: filter_data, })
  }

  //选项
  onCheck = (key) => {
    const { onChange, value, input } = this.props
    if (this.props.type == 'radio') {
      this.setState({ checks: key.target.value }, () => {
        if (onChange && _.isFunction(onChange)) {
          onChange(this.onLoadData())
        } else if (input && input.onChange) {
          input.onChange(this.onLoadData())
        }
      })
    } else {
      this.setState({ checks: key }, () => {
        if (onChange && _.isFunction(onChange)) {
          onChange(this.onLoadData())
        } else if (input && input.onChange) {
          input.onChange(this.onLoadData())
        }
      })
    }
  }

  convert_data = (checkedList) => {
    return checkedList && Object.values(checkedList).reduce((prev, curr) => {
      return prev.concat(curr)
    }, []) || []
  }

  onLoadData = () => {
    const { checks, node, data, selectNode, checkedList } = this.state
    let object = null
    let Arr = []
    if (_.isArray(checks)) {
      let obj = checkedList || {}
      data.map(item => {
        checks.map(k => {
          if (item && item.key && item.key == k) Arr.push(item)
        })
      })
      obj[selectNode] = Arr.map(op => (
        { node: node, id: op.key, field: op.key, name: op.label, ref_id: op.key + '_' + selectNode, }
      ))
      this.setState({ checkedList: obj })
      object = this.convert_data(obj)
    } else {
      data.map(item => {
        if (item && item.key && item.key == checks) Arr.push(item)
      })
      const tag = Arr && Arr[0] && Arr[0]['tag']
      object = { node, ...tag }
    }
    return object
  }

  //节点选择 指定节点
  onSelect = (props, assign) => {
    const { nodeKey } = props
    this.props.type == 'radio' && this.setState({ checks: [] }) //单选切换资产清除上次选择
    this.setState({ selectNode: nodeKey, data: [] })
    this.onQyeryTagData(props, assign)
  }

  onQyeryTagData = (props, assign) => {
    let id = ''
    let node = {}
    if (props) {
      if (typeof props == 'object' && props.dataRef) {
        const { nodeKey, title, mark_node } = props.dataRef
        if (!mark_node) {
          this.setState({ data: [], loading: false, checkedList: [] })
          return
        }
        id = nodeKey
        node['id'] = id
        node['name'] = title
      } else if (assign) {
        id = props.id
        node['id'] = props.id
        node['name'] = props.name
      }
      this.setState({ loading: true, node })
    }
    if (!id) {
      this.setState({ loading: false, data: [] })
      return
    }
    api({ name: 'core/node/tag' }).fetch(`/${id}`, {})
      .then(({ json }) => {
        if (json.length > 0) {
          // id 去重
          let newData = []
          newData = _.intersectionBy(json, 'id').map(op => {
            if (op && op.id && op.name) {
              return { key: op.id, label: op.name, tag: op }
            }
          })
          if(this.props.noComputed) {
            newData = newData.filter(item=> !item?.tag?.type)
          }
          this.setState({ data: newData, loading: false, onChangValue: [] })
          this.data = newData
        }
        this.setState({ loading: false })
      })
  }

  onChangeClear = (v) => {
    const { checkedList } = this.state
    const { input: { onChange }, onChange: onChanges } = this.props
    const data = this.convert_data(checkedList)
    const newdata = _.differenceBy(data, [v], ['ref_id', 'id'])
    this.setState({ checkedList: convert_values(newdata) }, () => {
      onChange ? onChange(newdata) : onChanges ? onChanges(newdata) : null
    })
  }

  render() {
    const { data, loading, node, onChangValue, checks, checkedList } = this.state
    const { type, nodes, input, isSelectMode } = this.props

    let new_values = []
    if (type != 'radio') {
      const vals = convert_values(input && input.value || [])
      new_values = this.convert_data(type != 'radio' ? vals : checkedList)
    } else {
      new_values = this.convert_data(checkedList)
    }

    return (
      <>
        <CardTage fullLable={this.props?.fullLable} values={new_values} type={type} onChangeClear={this.onChangeClear} />
        <div className="PointTable">
          <div className="Tree_leftbox">
            <NodeTree showSearch={true} initialValue={node}
              onSelect={(Keys, label) => this.onSelect(label.node.props)} />
          </div>
          <div style={{ width: '100%' }}>
            <Card style={{ height: 400, padding: 0 }} bodyStyle={{ height: '100%', display: 'flex', flexDirection: 'column' }}
            >
              <Input.Search style={{ marginBottom: 12 }} placeholder={_t1("变量搜索...")} onChange={this.onChange} value={onChangValue} />
              <div style={{ overflow: 'auto' }}> {data.length > 0 ?
                <TypeComponent {...this.state} isSelectMode={isSelectMode} onCheck={this.onCheck} type={type || null} />
                : loading ? <Loading /> : <NoData />
              }
              </div>
            </Card>
          </div>
        </div>
      </>
    )
  }
}

const TypeComponent = (props) => {
  const { t: _t1 } = useI18n()
  const [tags, settags] = React.useState(null)
  const { onCheck, data, type, checks, node, checkedList, selectNode, isSelectMode } = props
  const newkeys = checkedList && checkedList[selectNode] && checkedList[selectNode].map(item => item.id) || []
  const ops = _.compact(data).map(item => item && ({ label: <ColLable data={tags} opt={item} type={type} setdata={settags} />, value: item.key }))

  const ButtonTags = (
    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }} style={{ marginRight: 0 }}>
      {ops && ops.length > 0 ? ops.map(item => (
        <Col span={6} style={{ margin: '5px 0' }}>
          <Button block onClick={() => onCheck({ target: { value: item.value } })}>
            {item && item.label}
          </Button>
        </Col>
      )) : null}
    </Row>
  )

  const onCheckAllChange = e => {
    e.target.checked ? onCheck(ops.map(o => o.value)) : onCheck([])
  }

  React.useEffect(() => {
    node?.id && type !== 'radio' && onCheck([])
  }, [node?.id])

  const indeterminate = !!checks.length && checks.length < ops.length
  const checkAll = checks.length == ops.length

  return (type && type == 'radio') ? isSelectMode ? ButtonTags : <RadioGroup onChange={onCheck} value={checks} options={ops} />
    : (<>
      <Checkbox indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>
      {_t1(全选)}
      </Checkbox>
      <CheckboxGroup onChange={onCheck} value={newkeys} options={ops} />
    </>)
}

const ColLable = ({ opt, type }) => {
  const { t: _t1 } = useI18n()
  if (!opt) return null
  const Title = (
    <div>
      <p style={{ marginBottom: -5 }}>{opt && opt.label}({opt && opt.key})</p>
      {opt?.tag?.remark && <span>{_t1('备注')}：{opt?.tag?.remark}</span>}
    </div >
  )
  return (
    <span style={{ width: '200px', display: 'inline-block', height: '35px' }} >
      <Tooltip title={Title} >
        <span style={{
          maxWidth: '75%', display: 'inline-block', height: '25px', lineHeight: '25px',
          overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', marginBottom: type == 'radio' ? '-8px' : '-7px'
        }}>
          {opt && opt.label}
          <span style={{ color: '#ccc', fontSize: '13px' }}> ( {opt && opt.key || ''} )</span>
        </span>
      </Tooltip>
    </span>
  )
}

export default PointTable


