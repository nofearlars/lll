import { Spin, Tree, Avatar, Card } from 'antd';
import React from 'react';
import _ from 'lodash';
import { api, app } from 'xadmin';
import { ModelWrap } from 'xadmin-model';
import { Icon } from 'xadmin-ui';
import { Scrollbars } from 'react-custom-scrollbars';
import { formatDepartment } from './util'
import NoData from './NoData'
class BaseTree extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      models: [],
      treeData: [],
      loading: false,
      current: []
    }
  }

  componentDidMount() {
    this.fetchData()
  }
  componentDidUpdate(preProps) {
    if (JSON.stringify(this.props.selectDepartment) !== JSON.stringify(preProps.selectDepartment)) {
      this.fetchData()
    }
  }

  fetchData () {
    this.setState({ loading: true })
    const schema = app.get('models')['Department']
    api(schema)
      .query({ fields: ['name', 'parent'] })
      .then(({ items }) => {
        if (this.props.filterDepartment && this.props.selectDepartment) {
          items = this.props.filterDepartment(items, this.props.selectDepartment)
        }
        this.setState({ loading: false })
        if (items && !_.isEmpty(items)) {
          this.setState({
            models: items,
            treeData: formatDepartment(items),
          })
        }
      })
  }

  onChange = (selectedKeys, e) => {
    const { dataRef } = e.node.props
    const { onChange } = this.props
    if (this.props.multiple) {
      const list = e.checkedNodes.map(item => item.dataRef).filter(item => item)
      onChange(list || [])
    } else if (selectedKeys.length > 0) {
      onChange(dataRef || '')
    } else {
      onChange(null)
    }
  }

  renderTreeNodes = (data) => {
    if (data && _.isArray(data)) {
      return data.map((item) => {
        if (item.child) {
          return (
            <Tree.TreeNode
              isLeaf={false}
              title={item.name}
              key={item.id}
              nodeKey={item.id}
              value={item.id}
              dataRef={item}>
              {this.renderTreeNodes(item.child)}
            </Tree.TreeNode>
          )
        }
        return (<Tree.TreeNode
          isLeaf={true}
          title={item.name}
          key={item.id}
          nodeKey={item.id}
          value={item.id}
          dataRef={item}>
        </Tree.TreeNode>)
      })
    }
  }

  render() {
    const { t: _t1 } = useI18n()
    const { loading, value, noCard, multiple } = this.props
    const { models, treeData } = this.state
    const selectedKeys = value ? [value] : ['department_all']

    const dom = models && !_.isEmpty(models) ? (<Tree
      blockNode={true}
      checkable={multiple}
      multiple={multiple}
      selectable={!multiple}
      defaultExpandAll={true}
      icon={false}
      expandAction={false}
      icon={<Icon className="Tree-default-icon" svg={require('../icon/Department.svg')} />}
      selectedKeys={selectedKeys}
      onSelect={this.onChange}
      onCheck={this.onChange}
    >
      <Tree.TreeNode
        isLeaf={false}
        title={'全部'}
        key={'department_all'}
        nodeKey={'department_all'}
        value={'department_all'}
        dataRef={null}>
        {this.renderTreeNodes(treeData)}

      </Tree.TreeNode>
    </Tree>) : null
    return (
      <>
        {
          !noCard ? <Card
            title={_t1('部门列表')}
            className="model-list-siderbar"
            style={{ width: '100%', height: '100%' }}
          >
            {!loading ? dom : <Spin style={{ width: '100%', marginTop: 20 }} />}
          </Card> : <>
            {!loading ? dom : <Spin style={{ width: '100%', marginTop: 20 }} />}
          </>
        }
      </>
    )
  }
}
// 自定义滚动条
class CustomScrollbars extends React.Component {
  renderThumbVertical = ({ style, ...props }) => {
    const customStyle = {
      ...style,
      borderRadius: '6px',
      background: 'rgba(0, 0, 0, 0.4)',
    }
    return <div {...props} style={customStyle} className="thumb-vertical" />
  }
  render() {
    return (
      <Scrollbars
        className="scroll_content"
        style={{ height: 'calc(100% - 55px)', top: 1 }}
        renderThumbVertical={this.renderThumbVertical}
      >
        {this.props.children}
      </Scrollbars>
    );
  }
}

const DepartmentTressSidebar = ModelWrap ? ModelWrap('department.tree', {
  data: ({ modelState }) => {
    const value = modelState.wheres && modelState.wheres.departmentTree && modelState.wheres.departmentTree.departmentId
    if (value) {
      return { value }
    } else {
      return { value: null }
    }
  },
  method: {
    onChange: ({ dispatch, model, modelState }) => (m) => {
      const wheres = modelState.wheres
      dispatch({
        model, type: 'GET_ITEMS',
        filter: { ...modelState.filter, skip: 0 },
        wheres: m ? {
          ...wheres,
          departmentTree: { departmentId: m && m.id ? m.id : '' }
        } : _.omit(wheres, 'departmentTree')
      })
    }
  }
})(BaseTree) : null


export { DepartmentTressSidebar, BaseTree };
