import _ from 'lodash'
import { C, Icon } from 'xadmin-ui'
import { use, app, api } from 'xadmin'

const departmentFilter = data => {
  let res = []
  if (data && data.length > 0) {
    data.map(item => {
      item.icon = <Icon svg={require('./../icon/DepartmentDark.svg')} />
      if (item.parent && item.parent.id) {
        if (_.includes(data.map(k => k.id), item.parent.id)) {
          res.push(item)
        } else {
          res.push({ ...item, parent: {} })
        }
      } else {
        res.push(item)
      }
    })
  }
  return res
}
//  部门树数据转换
const formatDepartment = (data) => {
  const filterData = departmentFilter(data)
  const others = filterData.reduce((prev, current) => ({
    ...prev,
    [current.id]: current
  }), {})
  const formatTree = (data, others) => {
    data.map(item => {
      if (item && item.parent && item.parent.id) {
        const childs = others[item.parent.id].child || []
        others[item.parent.id].child = _.uniqBy([...childs, item], 'id')
      }
    })
    return Object.keys(others).map(item => others[item]).filter(item => !(item && item.parent && item.parent.id))
  }
  return formatTree(filterData, others)
}

//  模型树数据转换
const formatModel = (models) => {
  const node = (model, others) => {
    if (model && model.relations && model.relations.child && model.relations.child.length > 0) {
      const child = model.relations.child
        .map(m => others[m.id || m._id])
        .filter(Boolean)
        .map(n => node(n, others))
      return {
        ...model,
        child
      }
    } else {
      return model
    }
  }
  const findChildens = (roots, others) => {
    return roots.map(model => {
      if (model && model.relations && model.relations.child && !_.isEmpty(model.relations.child)) {
        return node(model, others)
      } else {
        return model
      }
    })
  }
  const toTree = (data) => {
    if (data && !_.isEmpty(data)) {
      const roots = data.filter(element => {
        return !(element && element.relations && element.relations.parent && element.relations.parent.length > 0)
      })
      const others = data.reduce((prev, current) => ({
        ...prev,
        [current.id || current._id]: current
      }), {})
      const tree = findChildens(roots, others)
      return tree
    }
  }

  return toTree(models)
}

// 工作表字段脚本部分
const getFormValues = (schema) => {
  let result = null
  try {
    result = use('form', state => {
      let vals = {}
      // 如果控件在表格中，会涉及到删除深层的字段
      for (let key in state.values) {
        if (key !== schema.key) {
          if (state.values[key]?.[0] && _.isObject(state.values[key]?.[0])) {
            vals[key] = state.values[key].map(item => _.omit(item, schema.key))
          } else {
            vals[key] = state.values[key]
          }
        }
      }
      return { values: vals }
    }).values
  } catch (e) {}
  return result
}

const useScriptVal = ({ value, values, props }) => {
  let getScriptVal
  eval(props.relateSchema?.fieldScript)
  let result = value
  if (getScriptVal) result = getScriptVal({ values, record: props.record?? {}, api, app })
  return result
}

export {
  formatDepartment,
  formatModel,
  getFormValues,
  useScriptVal
}