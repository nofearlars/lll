import React from 'react'
import { api, app, use } from 'xadmin'
import _ from 'lodash'
import { effects } from 'redux-saga'
const { all, put, select, takeEvery } = effects

const convert_fields = (fields) => fields.reduce(
  (acc, field) => {
    acc[field] = 1
    return acc
  }, {})
const onChangeUserField = (name, fields) => {
  if (!name || !fields) return
  const store = app.context?.store
  const { user } = store.getState()
  api({ name: 'core/user' }).fetch(`/${user?.id}`, {
    method: 'PATCH',
    body: JSON.stringify({ [`pageSetting.${name}`]: fields })
  }).then(() => {

  })
}

const getModelPath = (model) => {
  let path = model.key || model.name
  // 资产视图的key为动态的 采用模型id
  if (_.includes(model?.key, 'node-data-view-')) {
    path = model?.model?.id
  } else if (_.includes(model.resource, 'ext/')) {
    // 工作表
    path = model.name
  }
  return path
}

/**
 * 需要根据用户缓存 fields 时要加 initQuery==false 和 userPageFields
 * 两个参数的原因：
 * initQuery 是xadmin当中取消 model 默认请求的api
 * userPageFields 用来判断当前 model 是否需要用户缓存
 * 默认请求无法阻塞 导致无法添加用户缓存的 fields
 * 于是把默认请求干掉 initQuery==false 使用 GET_ITEMS 充当默认请求
 */
function* handle_init_model({ model, initial }) {
  const path = getModelPath(model)
  const filter = localStorage.getItem(`model_${path}_filter`)
  const initialFilter = initial?.filter || {}
  if (model?.userPageFields) {
    const { user } = app.context?.store?.getState()
    const { pageSetting } = yield api({ name: 'core/user' }).get(`/${user?.id} `).then(info => info)
    if (pageSetting && pageSetting[path] && !_.includes(model?.key, 'node-data-view-')) {
      let sortFields;
      if(_.isPlainObject(pageSetting[path])) sortFields = Object.keys(pageSetting[path]).reverse()
      if(_.isArray(pageSetting[path])) sortFields = pageSetting[path]
      if (_.includes(model?.name, 'NodeParam-') || _.includes(model.resource, 'core/ext/')) {
        // 参数汇总 工作表 fields特殊处理 显示中台配置的字段
        // listFields为动态编辑的 修改之后 sortFields 里可能存在listFields里没有的field 这时以listFields为主取交集field
        sortFields = _.intersection(model?.listFields, sortFields)
      }
      // if (_.includes(model?.key, 'node-data-view-')) {
      //   // 画面资产视图 根据字段设置来
      //   sortFields = model?.listFields
      // }
      const pageFilter = {
        skip: 0, limit: model?.defaultPageSize || 15,
        ...initialFilter, fields: sortFields
      }
      if (model?.orders) {
        pageFilter['order'] = model?.orders
      }
      yield put({ type: 'GET_ITEMS', model, filter: pageFilter })
    } else {
      // 当用户没有页面fields配置时 
      if (model?.initQuery === false) {
        const filter = {
          skip: 0, limit: model?.defaultPageSize || 15,
          ...initialFilter, fields: model.listFields
        }
        if (model?.orders) {
          filter['order'] = model?.orders
        }
        yield put({ type: 'GET_ITEMS', model, filter })
        yield put({ type: 'UPDATE_FILTER', model, payload: filter })
      } else {
        try {
          yield put({ type: 'UPDATE_FILTER', model, payload: JSON.parse(filter) })
        } catch (error) {
          console.error('模型本地初始化信息解析失败', error)
        }
      }
    }
  } else if (filter && !model.noLocalStorageFilter) {
    try {
      let modalFilter = JSON.parse(filter);
      if (model.resource == 'core/node') {
        let id = model?.initialValues?.wheres?.filters?.model?.id;
        const { custom } = yield api({ name: 'core/model' }).get(`/${id} `).then(info => info)
        let customFields = Object.entries(custom?.schema?.properties)?.length ? Object.entries(custom?.schema?.properties).filter(item => item[1]?.listFields).map(item => `custom.${item[0]}`) : []
        let fields = Array.from(new Set(JSON.parse(filter).fields.concat(customFields)))
        modalFilter = { ...modalFilter, fields }
      }
      yield put({
        type: 'UPDATE_FILTER', model,
        payload: modalFilter
      })
    } catch (error) {
      console.error('模型本地初始化信息解析失败', error)
    }
  }
}

function* handle_change_filter({ model, filter }) {
  if (!model?.userPageFields) {
    const path = model.key || model.name
    window?.localStorage.setItem(`model_${path}_filter`, JSON.stringify({ ...filter, skip: 0 }))
  }
}

function* handle_change_fields({ model, filter }) {
  // 画面参数汇总组件 path处理
  const path = getModelPath(model)
  const fields = filter.fields || []
  if (model?.userPageFields) onChangeUserField(path, fields)
}

export default function* () {
  yield all([
    takeEvery(action => action.model && action.type == 'INITIALIZE', handle_init_model),
    takeEvery(action => action.model && action.type == 'GET_ITEMS' && action.filter !== undefined && action.payload == undefined, handle_change_filter),
    takeEvery(
      action => action.model && action.type == 'GET_ITEMS' && action.filter !== undefined && action.payload == 'changeField', handle_change_fields),

    //takeEvery(action => action.model && action.type == 'UPDATE_FILTER' && action.payload !== undefined, handle_update_filter)
  ])
}

export { handle_init_model,  handle_change_filter, handle_change_fields }
