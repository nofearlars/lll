import React from 'react'
import RenderSetting from './component/RenderSetting';
import { app, api, use, config } from 'xadmin';
import { effects } from 'redux-saga'
import Uploading from './component/Uploading'
import ModelDownAndUpload from './component/ModelDownAndUpload'
import SystemBackup from './component/SystemBackup'
import RouterPage from './component/RouterPage'
import PressMoneyModal, { PressMoney } from './component/PressMoney'
import { UserOverTime } from './component/RenderSetting'
import hooks from './hooks'
import { Model, ModelBlock } from 'xadmin-model'
import { handle_init_model, handle_change_filter, handle_change_fields } from './effects'
import locales from '../locales'
import logo from "./icon/logo.png"
const { all, put, select, takeEvery } = effects
import SafeRequest from './component/SafeRequest'

const handle_get_settings = function* () {
  const settings = yield api({ name: 'core/setting' }).fetch('').then(({ json }) => json)
  yield put({ type: '@@iot/SAVE_SETTINGS', payload: settings, success: true })
}

const handle_save_settings = function* ({ payload }) {
  const { _t } = app.context
  const settings = yield api({ name: 'core/setting' }).save(payload)
  yield put({ type: '@@iot/SAVE_SETTINGS', payload: settings, success: true })

  yield put({
    type: '@@xadmin/ADD_NOTICE', payload: {
      type: 'success', headline: _t('Success'), message: _t('系统设置保存成功')
    }
  })
}

const SiteTitle = props => {
  const { settings } = use('settings')
  return <h4 className="Settings-title" onClick={() => app.go('/app/dashboard')} dangerouslySetInnerHTML={{ __html: settings && settings['name'] }} />
}

const SiteCopyright = props => {
  const { settings } = use('settings')
  return <>{settings && settings['copyright']}</>
}

const SiteLogo = props => {
  const { settings } = use('settings')
  const logo = settings && settings['logo'] || require('./icon/logo.png')
  return logo ? <img src={logo} alt="logo" onClick={() => app.go('/app/dashboard')} /> : null
}
const createTabIconElement = url => {
  const link = document.createElement('link')
  link.setAttribute('rel', 'icon');
  link.setAttribute('type', 'image/x-icon');
  link.setAttribute('href', url)
  let heads = document.getElementsByTagName('head')
  if (heads.length) heads[0].appendChild(link)
}
export default {
  name: 'iot.setting',
  locales,
  config: {
    'site.title': <SiteTitle />,
    'site.logo': <SiteLogo />,
    'site.copyright': <SiteCopyright />
  },
  components: {
    'UploadingComp': Uploading,
    UserOverTime, PressMoneyModal
  },
  hooks,
  mappers: {
    'system.settings': {
      data: ({ state }) => ({ settings: state.settings }),
      method: {
        getSettings: ({ dispatch }) => () => {
          dispatch({ type: '@@iot/GET_SETTINGS' })
        },
        saveSettings: ({ dispatch }) => (value) => {
          dispatch({ type: '@@iot/SAVE_SETTINGS', payload: value })
        }
      }
    }
  },
  effects: (app) => function* () {
    yield all([
      takeEvery(action => action.type == '@@iot/GET_SETTINGS', handle_get_settings),
      takeEvery(action => action.type == '@@iot/SAVE_SETTINGS' && !action.success, handle_save_settings),
      takeEvery(action => action.model && action.type == 'INITIALIZE', handle_init_model),
      takeEvery(action => action.model && action.type == 'GET_ITEMS' && action.filter !== undefined && action.payload == undefined, handle_change_filter),
      takeEvery(action => action.model && action.type == 'GET_ITEMS' && action.filter !== undefined && action.payload == 'changeField', handle_change_fields),
    ])
  },
  reducers: {
    settings: (state = {}, { type, payload, success }) => {
      if (type == '@@iot/SAVE_SETTINGS' && payload && success) {
        return { ...state, ...payload }
      }
      return state
    }
  },
  frontMenuItems: [
    { title: _r('系统操作'), url: '/app/operation', icon: '系统操作', permission: 'operation.edit' }
  ],
  menuItems: [
    {
      title: _r('系统管理'), icon: '系统设置', key: 'setting', permission: 'setting.edit', children: [
        { title: _r('中台基础配置'), url: '/app/settings', icon: 'Users', permission: 'setting.edit' },
        { title: _r('前台路由配置'), url: '/app/router', icon: 'Department', },
        { title: _r('前台系统配置'), url: '/app/reception_settings', icon: 'Role', permission: 'setting.edit' },
        { title: _r('模块配置'), url: '/app/modular_settings', icon: 'Department', permission: 'setting.edit' },
        { title: _r('通知服务配置'), url: '/app/notice_settings', icon: '系统操作', permission: 'setting.edit' },
        { title: _r('项目操作'), url: '/app/projectOperation', icon: 'Department', permission: 'setting.edit' },
        { title: _r('备份管理'), url: '/app/backup', icon: 'Department', permission: 'backup.view' },
        { title: _r('催款模块'), url: '/app/press_for_money', icon: 'Department', permission: 'setting.edit' },
        { title: _r('安全请求'), url: '/app/safe_request', icon: 'Department', permission: 'setting.edit' }
      ]
    },
    { title: _r('系统操作'), parent: 'business', url: '/app/operation', icon: '系统操作', permission: 'operation.edit' }
  ],
  routers: {
    '/app/': [
      {
        path: 'settings',
        component: props => {
          const { t: _t1 } = useI18n()
          return <RenderSetting base={_t1('中台基础配置')} {...props} />
        }
      },
      {
        path: 'router',
        component: RouterPage
      },
      {
        path: 'reception_settings',
        component: props => <RenderSetting base={_t1('前台系统配置')} {...props} />
      },
      {
        path: 'modular_settings',
        component: props => <RenderSetting base={_t1('模块配置')} {...props} />
      },
      {
        path: 'notice_settings',
        component: props => <RenderSetting base={_t1('通知服务配置')} {...props} />
      },
      {
        path: 'projectOperation',
        component: props => <ModelDownAndUpload base={_t1('项目操作')} {...props} />
      },
      {
        path: 'backup',
        component: props => <SystemBackup base={_t1('备份与还原')} {...props} />
      },
      {
        path: 'press_for_money',
        component: props => <PressMoney base={_t1('催款模块')} {...props} />
      },
      {
        path: 'safe_request',
        component: props => <SafeRequest base={_t1("安全请求")} {...props} />
      },
      {
        path: 'system/list',
        component: props => {
          const CardBar = props => {
            const { model } = use('model')
            const Card = model.components.ListPage
            return <Card />
          }
          return <div style={{ display: 'flex' }}>
            <Model name={'System'}><CardBar /></Model>{props.children}
          </div>
        },
        childRoutes: [
          {
            path: 'settings',
            component: props => <RenderSetting base={_t1('中台基础配置')} {...props} />
          },
          {
            path: 'reception_settings',
            component: props => <RenderSetting base="前台系统配置" {...props} />
          },
          {
            path: 'modular_settings',
            component: props => <RenderSetting base={_t1('模块配置')} {...props} />
          },
          {
            path: 'notice_settings',
            component: props => <RenderSetting base={_t1('通知服务配置')} {...props} />
          },
          {
            path: 'press_for_money',
            component: props => <PressMoney base={_t1('催款模块')} {...props} />
          },
          {
            path: 'safe_request',
            component: props => <SafeRequest base={_t1("安全请求")} {...props} />
          }
        ]
      },
    ],
  }
}
