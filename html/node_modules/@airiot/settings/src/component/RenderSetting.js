import React from 'react';
import { DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { use, app, api } from 'xadmin';
import { C, Icon, Page, Loading } from 'xadmin-ui';
import { Model } from 'xadmin-model'
import Uploading from './Uploading';
import { Button, Card, Modal, Tabs, Form, Select, Radio, Space, Input, InputNumber, Row, Col, message } from 'antd';
import async from 'async';
import _ from 'lodash';
import Store from '../Store'

const ViewSelect = C.lazy('Dashboard.ViewSelect')

const { Option, OptGroup } = Select
const RadioGroup = Radio.Group

const ThemeSelect = ({ input }) => {
  const { t: _t1 } = useI18n()
  const data = app.map('themes')
  const [loading, setLoading] = React.useState(false)
  const [themes, setThemes] = React.useState([])
  React.useEffect(() => {
    setLoading(true)
    api({ name: 'core/theme' })
      .query({})
      .then(({ items }) => {
        const apiTheme = items.map(item => ({ ...item, themeType: 'edit' }))
        const appTheme = Object.keys(data).map(key => ({ id: key, ...data[key], themeType: 'default' }))
        setThemes([...appTheme, ...apiTheme])
        setLoading(false)
      }).catch(() => {
        setLoading(false)
      })

  }, [])

  const onChange = (key) => {
    const val = _.find(themes, { 'id': key })
    input.onChange(val)
  }

  return (
    <Select
      placeholder={_t1('请选择主题')}
      value={input?.value?.id}
      loading={loading}
      style={{ minWidth: 150 }}
      onChange={onChange}
    >
      <OptGroup label={_t1('内置主题')}>
        {(themes || []).filter(item => item?.themeType == 'default').map((theme) => (
          <Option value={theme.id} >{_t1(theme.name)}</Option>
        ))}
      </OptGroup>
      <OptGroup label={_t1('自定义主题')}>
        {(themes || []).filter(item => item?.themeType == 'edit').map((theme) => (
          <Option value={theme.id} >{theme.name}</Option>
        ))}
      </OptGroup>
    </Select>
  );
}

const ModuleModal = props => {
  const { t: _t1 } = useI18n()
  const [isModalVisible, setIsModalVisible] = React.useState(false)

  return (
    <>
      <Button type="primary" onClick={() => { setIsModalVisible(true) }}>{_t1('选择模板')}</Button>
      <Modal title={_t1('模板')} visible={isModalVisible} onOk={() => { setIsModalVisible(false) }} onCancel={() => { setIsModalVisible(false) }}>
        <p>{_t1('敬请期待')}~</p>
      </Modal>
    </>
  )
}

const ModeRadioGroup = ({ input, field }) => {
  return (
    <RadioGroup {...input} value={input.value} defaultValue={field.defaultValue} onChange={(event) => { input.onChange(event.target.value) }} >
      {field.titleMap.map(option => (<Radio value={option.value} checked={option.value == input.value}>{option.name}</Radio>))}
    </RadioGroup>
  )
}

const LoginSelect = props => {
  const { t: _t1 } = useI18n()
  const { input: { value, onChange } } = props
  const data = [
    { value: '不限制', label: _t1('不限制') },
    { value: '仅一人', label: _t1('仅一人') },
    { value: '限制用户数', label: _t1('限制用户数') }
  ]
  let obj = { ['不限制']: 'noLimit', ['仅一人']: 'limit', ['限制用户数']: 'limit' }
  const [currentValue, setCurrentValue] = React.useState({ count: value?.count, type: value?.type, key: value?.key || _t1('不限制') })

  React.useEffect(() => {
    if (_.isEmpty(value)) {
      onChange({ type: 'noLimit' })
    }
  }, [])

  React.useEffect(() => {
    if (currentValue) {
      let valueObj = { type: obj[currentValue?.key] }
      if (currentValue?.key == '仅一人') valueObj = { ...valueObj, count: 1, key: '仅一人' }
      if (currentValue?.key == '限制用户数') valueObj = { ...valueObj, count: currentValue?.count, key: '限制用户数' }
      if (currentValue?.key == '不限制') {
        valueObj = { ...valueObj, key: '不限制' }
        delete valueObj.count
      }
      onChange(valueObj)
    }
  }, [currentValue])

  const handleChange = value => setCurrentValue({ ...currentValue, key: value })

  return (
    <>
      <Select style={{ width: 200 }} value={value.key || '不限制'} onChange={handleChange}>
        {
          data.map(item => {
            return <Select.Option value={item.value}>{item.label}</Select.Option>
          })
        }
      </Select>
      {
        currentValue?.key == '限制用户数' || value?.key == '限制用户数' ? <InputNumber value={value?.count} min={1} style={{ marginLeft: '1rem' }} onChange={value => {
          setCurrentValue({ ...currentValue, count: value })
        }} /> : null
      }
    </>
  )
}

const UserOverTime = (props) => {
  let { input: { value, onChange }, type, initValue, initUnit = 'd', initCount = 14, isDelete } = props
  let unitTime = { Y: 31536000, M: 2629822, w: 604800, d: 86400, h: 3600, m: 60, s: 1 }
  let defaultTime = unitTime[initUnit] * initCount
  value = value ? value : initValue ? { count: initCount, unit: initUnit, time: defaultTime } : {}
  let optionTime = props?.customOption || [
    { key: _t1('年'), value: 'Y' },
    { key: _t1('月'), value: 'M' },
    { key: _t1('周'), value: 'w' },
    { key: _t1('天'), value: 'd' },
    { key: _t1('小时'), value: 'h' },
    { key: _t1('分'), value: 'm' },
    { key: _t1('秒'), value: 's' }
  ]

  React.useEffect(() => {
    if (initValue) onChange(value)
  }, [initValue])

  const handleChange = e => {
    let countValue = isDelete ? e?.target?.value : e.target.value.replace(/[^\d.]/g, 1)
    let time = countValue ? countValue * unitTime[value?.unit] : initValue ? defaultTime : null
    if (type == 'errorLogin') { countValue = countValue <= 0 ? null : e?.target?.value }
    if (type == 'noOpExpireSetting') { countValue = _.isEmpty(e?.target?.value) ? e.target.value : countValue }
    if (value?.unit == 'm' && type == 'loginDuration') {
      if (value?.count && value.count < 10 || countValue < 10) {
        onChange({ ...value, count: 10, time: 10 * unitTime[value?.unit] || defaultTime })
      } else {
        onChange({ ...value, count: countValue, time })
      }
    } else {
      onChange({ ...value, count: countValue, time })
    }
  }

  const handleSelect = e => {
    if (e == 'm' && type == 'loginDuration') {
      if (value?.count && value.count < 10) {
        onChange({ ...value, unit: e, count: 10, time: 10 * unitTime[e] || defaultTime })
      } else {
        onChange({ ...value, unit: e, time: value?.count * unitTime[e] || defaultTime })
      }
    } else {
      onChange({ ...value, unit: e, time: value?.count * unitTime[e] || defaultTime })
    }
  }
  return (
    <Space direction="horizontal">
      {
        <Input type="number" min={type == 'errorLogin' ? 0 : 1} style={{ width: 160 }} placeholder={_t1("数值")}
          onChange={handleChange} value={value.count} addonAfter={
            <Select style={{ width: 75 }} onChange={handleSelect} value={value.unit}>
              {
                optionTime.map(item => {
                  return <Select.Option value={item.value}>{item.key}</Select.Option>
                })
              }
            </Select>} />
      }
    </Space>
  )
}

const PasswordLength = props => {
  const { input } = props
  return <>
    <InputNumber min={6} defaultValue={6} value={input?.value?.min} onChange={value => { input.onChange({ ...input.value, min: value }) }} />
    -
    <InputNumber min={6} defaultValue={30} value={input?.value?.max} onChange={value => { input.onChange({ ...input.value, max: value }) }} />
  </>
}

const CountNumber = props => {
  const { input } = props

  return <InputNumber value={input.value} min={1} onChange={value => {
    let newValue = value
    newValue = Number((value + '').replace(/[^0-9]/g, ''))
    input.onChange(newValue)
  }} />
}

const RadioCode = props => {
  const { input, input: { onChange, value, checked } } = props
  return (
    <Radio.Group onChange={(e) => input.onChange(e.target.value) } 
      defaultValue={value} value={value} checked={value} 
      optionType="button"
      buttonStyle="solid"
    >
      <Radio.Button value={false}>{_t1('是')}</Radio.Button>
      <Radio.Button value={true}>{_t1('否')}</Radio.Button>
    </Radio.Group>
  )
}


const SystemBaseInfo = {
  'type': 'object',
  'name': 'settings',
  'resource': 'core/setting',
  'title': _r('系统基本信息'),
  'key': 'settings',
  'properties': {
    'name': {
      'title': _r('系统名称'),
      'type': 'string',
      'divider': 'information'
    },
    'logo': {
      'title': _r('系统图片'),
      'type': 'string',
      'description': '上传平台的logo',
      'divider': 'information'
    },
    'backgroundImage': {
      'title': _r('系统背景'),
      'type': 'string',
      'divider': 'information'
    },
    'copyright': {
      'title': _r('系统版权信息'),
      'type': 'string',
      'divider': 'information'
    },
    // language: {
    //   title: _r('系统语言'),
    //   type: 'string',
    //   fieldType: 'language',
    //   divider: 'information'
    // },
    loginLimitAdmin: {
      title: _r('登录限制'),
      type: 'object',
      properties: {},
      divider: 'safety'
    },
    noOpExpireAdminSetting: {
      title: _r('无操作退出平台时长'),
      type: 'object',
      properties: {},
      description: _r('无操作退出平台时长定义'),
      divider: 'safety'
    },
    errorLoginAdmin: {
      title: _r('安全策略'),
      type: 'object',
      properties: {
        count: {
          title: _r('错误次数'),
          type: 'number',
          field: {
            component: props => <CountNumber {...props} />
          },
          description: _r('默认不限制，定义次数后，输错限制次数，账号将被冻结，默认冻结1分钟；')
        },
        duration: {
          title: _r('冻结时长'),
          type: 'object',
          field: {
            component: props => <UserOverTime type="errorLogin" {...props} initCount={1} initUnit={'m'} initValue={true} customOption={
              [{ key: _t1('天'), value: 'd' }, { key: _t1('小时'), value: 'h' }, { key: _t1('分'), value: 'm' }]
            } />
          },
          description: _r('默认1分钟，用户可定义输错限制次数后的冻结时长；')
        }
      },
      description: _r('密码错误次数及冻结时长'),
      divider: 'safety'
    },
    passwordLength: {
      title: _r('密码长度'),
      type: 'object',
      properties: {},
      description: _r('定义平台中用户登录密码的长度，需要限制具体长度，如8位，则最小值与最大值均输入8即可；'),
      divider: 'safety',
      field: {
        component: PasswordLength
      }
    },
    notShowCodeAdmin: {
      title: _r('显示验证码'),
      type: 'boolean',
      divider: 'safety',
      field: {
        component: RadioCode
      }
    }
  },
  'required': [
    'name'
  ],
  'initParams': { logo: '../icon/报表制作.svg' },
  'partialSave': true,
  'permission': { add: true, edit: true, view: true, delete: true },
  'listFields': ['name', 'logo'],
  'form': [
    'name',
    'copyright',
    {
      key: 'logo',
      component: Uploading,
      accept: 'image/*',
      category: 'img'
    },
    {
      key: 'backgroundImage',
      component: Uploading,
      accept: 'image/*',
      category: 'img'
    },
    // 'language',
    { key: 'loginLimitAdmin', component: LoginSelect },
    { key: 'noOpExpireAdminSetting', component: props => <UserOverTime {...props} type="noOpExpireSetting" /> },
    'errorLoginAdmin',
    'passwordLength',
    '*'
  ],
  formProps: {
    component: props => <DefaultmiddleLayout {...props} />
  }
}

// renderComponent
const ReceptionBaseInfo = {
  'type': 'object',
  'name': 'settings',
  'resource': 'core/setting',
  'title': _r('前台基本信息'),
  'key': 'settings',
  'parentIndex': 'language',
  'properties': {
    'reception_name': {
      'title': _r('系统名称'),
      'type': 'string',
      divider: 'base'
    },
    'reception_logo': {
      'title': _r('系统图片'),
      'type': 'string',
      'description': '上传平台的logo',
      divider: 'base'
    },
    'backgroundImage': {
      'title': _r('系统背景'),
      'type': 'string',
      divider: 'base'
    },
    'layout': {
      'title': _r('系统布局'),
      'type': 'string',
      'enum': ['layout1', 'layout2'],
      'enum_title': [_r('左侧菜单'), _r('顶部菜单')],
      // divider: 'base'
    },
    'layout_mode': {
      'title': _r('菜单展现方式'),
      'type': 'string',
      'enum': ['inline', 'vertical'],
      'enum_title': [_r('垂直'), _r('内嵌')],
      // divider: 'base'
    },
    'reception_system_name': {
      'title': _r('系统名称一行展示'),
      'type': 'boolean',
      'divider': 'base'
    },
    'theme': {
      'title': _r('系统主题'),
      "type": 'object',
      "properties": {},
      // divider: 'base'
    },
    'rectption_module': {
      'title': _r('使用模板'),
      'type': 'string',
      // divider: 'base'
    },
    rectption_login_page: {
      title: _r('登录页'),
      type: 'object',
      properties: {},
      description: _r('设置登录页地址，平台初始登录页会被替换，请谨慎操作'),
      divider: 'advanced'
    },
    // rectption_reg_page: {
    //   title: _r('注册页'),
    //   type: 'string'
    // },
    rectption_logout_page: {
      title: _r('退出页'),
      type: 'object',
      properties: {},
      description: _r('设置退出登录页地址，平台初始退出登录页会被替换，请谨慎操作'),
      divider: 'advanced'
    },
    rectption_login_next_page: {
      title: _r('登录后页面'),
      type: 'object',
      properties: {},
      description: _r('设置登录后页面，登录成功将会跳转至此页面，页面显示设定时长后自动跳转至平台首页'),
      divider: 'advanced'
    },
    rectption_login_next_page_hangtime: {
      title: _r('显示时长'),
      type: 'number',
      fieldType: 'inputNumber',
      unit: _r('秒'),
      formWidth: 200,
      minimum: 1,
      defaultVal: 5,
      description: _r('登录后页面显示时长，单位秒'),
      divider: 'advanced'
    },
    loginDuration: {
      title: _r('登录时长'),
      type: 'object',
      properties: {},
      divider: 'authority',
      description: _r('登录时长范围内登录状态为有效，否则失效；默认14天，最短10分钟')
    },
    loginLimit: {
      title: _r('登录限制'),
      type: 'object',
      properties: {},
      divider: 'authority',
      description: _r('用于限定同一账号允许同时登录的数')
    },
    noOpExpireSetting: {
      title: _r('无操作退出平台时长'),
      type: 'object',
      properties: {},
      divider: 'authority',
      description: _r('无操作退出平台时长定义')
    },
    errorLogin: {
      title: _r('安全策略'),
      type: 'object',
      properties: {
        count: {
          title: _r('错误次数'),
          type: 'number',
          field: {
            component: props => <CountNumber {...props} />
          },
          description: _r('默认不限制，定义次数后，输错限制次数，账号将被冻结，默认冻结1分钟；')
        },
        duration: {
          title: _r('冻结时长'),
          type: 'object',
          field: {
            component: props => <UserOverTime type="errorLogin" {...props} initCount={1} initUnit={'m'} initValue={true} customOption={
              [{ key: _t1('天'), value: 'd' }, { key: _t1('小时'), value: 'h' }, { key: _t1('分'), value: 'm' }]
            } />
          },
          description: _r('默认1分钟，用户可定义输错限制次数后的冻结时长；')
        }
      },
      divider: 'authority',
      description: _r('密码错误次数及冻结时长')
    },
    notShowCode: {
      title: _r('显示验证码'),
      type: 'boolean',
      divider: 'authority'
    }
  },
  'required': ['reception_name'],
  'partialSave': true,
  'permission': { add: true, edit: true, view: true, delete: true },
  'listFields': ['reception_name', 'reception_logo'],
  'form': [
    'reception_name',
    'reception_system_name',
    {
      key: 'reception_logo',
      component: Uploading,
      accept: 'image/*',
      category: 'img'
    },
    {
      key: 'backgroundImage',
      component: Uploading,
      accept: 'image/*',
      category: 'img'
    },
    'layout',
    { key: 'theme', component: ThemeSelect },
    { key: 'rectption_module', component: ModuleModal },
    { key: 'layout_mode', component: ModeRadioGroup, defaultValue: 'inline' },
    '*',
    { key: 'rectption_login_page', component: ViewSelect },
    { key: 'rectption_logout_page', component: ViewSelect },
    {
      key: 'loginDuration', component: props => <UserOverTime customOption={
        [{ key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' },
        { key: _t1('小时'), value: 'h' }, { key: _t1('分'), value: 'm' }]
      } {...props} type="loginDuration" initCount={14} initUnit={'d'} initValue={true} />
    },
    { key: 'rectption_login_next_page', component: ViewSelect },
    'rectption_login_next_page_hangtime',
    { key: 'loginLimit', component: LoginSelect },
    { key: 'noOpExpireSetting', component: props => <UserOverTime {...props} type="noOpExpireSetting" /> },
    'errorLogin',
    { key: 'notShowCode', component: props => <RadioCode {...props} /> }
  ],
  formEffect: form => {
    form.useField('rectption_login_next_page', ({ value }) => {
      form.setFieldData('rectption_login_next_page_hangtime', { display: !!value })
    })
  },
  renderComponent: props => <RectptionModule {...props} />
}

const { confirm } = Modal

const DefaultFormLayout = props => {
  const { t: _t1 } = useI18n()
  const { children, invalid, handleSubmit, onDelete, schema, submitting, saveItem } = props
  const { _t } = app.context
  const groupProps = {
    wrapperCol: {
      xs: { span: 24, offset: 0 },
      sm: { span: 18, offset: 5 }
    }
  }
  return (
    <Form onSubmit={handleSubmit}>
      {children}
      <Form.Item {...groupProps}>
        <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>{_t('Save')}</Button>{' '}
        <Button onClick={() => history.back()}>{_t('Cancel')}</Button>
      </Form.Item>
    </Form>
  )
}

const DefaultLayout = props => {
  const { t: _t1 } = useI18n()
  const { children, invalid, handleSubmit, showCode, submitting } = props;
  const { _t } = app.context;
  return (
    <Form onSubmit={handleSubmit} >
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333' }}>
        <div style={{ background: '#f0f2f5', margin: '0 0 10px 0', padding: '10px' }}>基础配置</div>
        {children.filter(c => c?.props?.field?.schema?.divider == 'base')}
        <p style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>{_t1('权限设置')}</p>
        {children.filter(c => c?.props?.field?.schema?.divider == 'authority')}
        {/* <div style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>高级设置</div>
        {children.filter(c => c?.props?.field?.schema?.divider == 'advanced')} */}
        <Row style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <Button type="primary" loading={submitting} onClick={handleSubmit} htmlType="submit">{_t1('保存')}</Button>
        </Row>
      </Card>
    </Form>
  )
}

const RectptionModule = props => {
  const { t: _t1 } = useI18n()
  const { dispatch } = use('redux')
  const { baseModel: { atoms } } = props
  const onSubmit = value => {
    value = {
      ...value,
      noOpExpire: value?.noOpExpireSetting?.time ? value?.noOpExpireSetting?.time : null
    }
    api({ name: 'core/setting' })
      .fetch('', { method: 'PATCH', body: JSON.stringify(value) })
      .then(({ json }) => {
        message.success(_t1('系统设置保存成功'))
        dispatch({ type: '@@iot/GET_SETTINGS' })
      })
  }

  return (
    <C is="I18nSchemaForm"
      formKey={'setting'}
      schema={ReceptionBaseInfo}
      component={DefaultLayout}
      onSubmit={onSubmit}
      initialValues={props?.data}
    />
  )
}

const DataForm = props => {
  const { location, router, query, base, forceTabs, loadTbas, title, schema,
    model, mode, loading, saveItem, deleteItem, componentClass, baseTitle,
    style, ...formProps } = use('model.item', props)
  const { t: _t1, t } = useI18n()
  const { settings, saveSettings } = use('settings')
  const [activeKey, setKey] = React.useState(() => {
    return query?.tab || 'base'
  })
  const [tabs, setTabs] = React.useState([])
  const formDirty = React.useRef(false)
  const baseModel = (schema || model)
  const setTabKey = key => {
    if (activeKey != key) {
      formDirty.current = false
      setKey(key)
      router && router.replace(location.pathname + '?tab=' + key)
    }
  }

  const onChange = (k) => {
    if (!formDirty.current) {
      setTabKey(k)
    } else {
      confirm({
        title: _t1('有数据未保存！'),
        content: _t1('离开将导致未保存数据丢失，是否确认离开'),
        onOk() {
          setTabKey(k)
        },
        onCancel() { },
      })
    }
  }

  const TabSchemaForm = ({ schema, onSubmitSuccess, baseModel }) =>
    ({ data = {}, saveItem, deleteItem, component, }) => (
      <C is="I18nSchemaForm"
        data={settings}
        schema={schema}
        onDelete={deleteItem}
        onSubmitSuccess={onSubmitSuccess}
        component={schema.tabFormComponent || component}
        initialValues={schema.name == 'base' ? settings : (settings[schema.name] || {})}
        onSubmit={values => {
          // 如果是表单base，则根据生成form的schema对获取的values进行过滤
          // 避免在添加其他tab信息保存后，点击基本页面保存会覆盖其他tab已修改的值
          const baseFormField = schema?.properties ? Object.keys(schema?.properties) : []
          const baseValues = _.pick(values, [...baseFormField, 'id'])
          // return saveItem(schema.name == 'base' ?
          //   _.mapValues(baseValues, item => _.isEmpty(item) ? '' : item) :
          //   {
          //     id: settings.id,
          //     [schema.name]: _.mapValues(values, item => _.isNumber(item) ? item : _.isEmpty(item) ? '' : item)
          //   })
          return saveItem(schema.name == 'base' ? baseValues : { id: settings.id, [schema.name]: values })
        }}
        subscription={{ submitting: true, pristine: true, dirtySinceLastSubmit: true, errors: true, submitErrors: true }}
        {...baseModel.formProps}
      />
    )

  React.useEffect(() => {
    const { schemaKey, id, model, onSubmitSuccess } = props
    if (baseModel) {
      async.map(
        [
          {
            ...baseModel, name: 'base',
            title: _t1(baseTitle) || (baseModel.title == _t1('前台基本信息') ?_t1('权限设置'):_t1('基本信息'))
          },
          // ...((id || forceTabs) || loadTbas ? app.load_list(schemaKey) : [])
          ...(app.load_list(schemaKey) || [])
        ],
        (item, cb) => {
          const convert = schema => (schema && schema.name) ? ({
            parentTab: _t1(schema.parentTab) || undefined,
            parentIndex: schema.parentIndex,
            key: schema.name,
            name: _t1(schema.title),
            renderComponent: schema.renderComponent || TabSchemaForm({ schema, onSubmitSuccess, baseModel, data: props.data })
          }) : null;
          if (_.isFunction(item)) {
            item({ model, data: settings || {} }, (err, schema) => {
              cb(null, convert(schema));
            });
          } else {
            cb(null, convert(item));
          }
        },
        (err, tabs) => {
          if (err) {
            app.error(err)
            return;
          }

          //存在parentTab 就合并tab 
          const parent_arr = tabs.filter(tab => tab && tab.parentTab)
          const parent_obj = parent_arr.reduce((prev, cur) => {
            prev[cur.parentTab] = parent_arr.filter(tab => tab && tab.parentTab == cur.parentTab)
            return prev
          }, {})

          const parentTabs = Object.keys(parent_obj).map(tab => ({
            key: tab, name: tab,
            renderComponent: () => (<Tabs tabPosition={(mode == 'left' || 'right') ? 'top' : 'left'}>
              {React.useMemo(() => {
                return parent_obj[tab].map(({ name, key, renderComponent: TabComponent }) => (
                  <Tabs.TabPane tab={name} key={key} style={{ minHeight: 400 }}>
                    <TabComponent {...props} data={settings} baseModel={baseModel}
                      saveItem={saveItem} deleteItem={deleteItem}
                      component={props => {
                        React.useEffect(() => props.form.subscribe(({ dirty, modifiedSinceLastSubmit }) => {
                          formDirty.current = modifiedSinceLastSubmit
                        }, { dirty: true, modifiedSinceLastSubmit: true }), [])
                        return <FormLayout {...props} />
                      }}
                    />
                  </Tabs.TabPane>
                ))
              }, [parent_obj[tab]])
              }
            </Tabs>)
          }))

          let filterTabs;
          if (props.base == _t1('通知服务配置')) {
            filterTabs = tabs.filter(tab => (tab && tab.parentTab == props.base))
          } else if (props.base == _t1('中台基础配置')) {
            // filterTabs = [...tabs.filter(tab => tab && tab.key == 'base')]
            let language_arr = [];
            tabs.forEach(tab => {
              if (tab?.parentIndex == 'language') {
                parentTabs.forEach(item => { if (item.key == tab?.parentTab) { language_arr.push(item) } })
              }
            })
            filterTabs = [...tabs.filter(tab => tab && tab.key == 'base'), ...tabs.filter(tab => (tab && tab?.parentIndex == 'language' && !tab.parentTab)), ...Array.from(new Set(language_arr))]
          } else if (props.base == _t1('前台系统配置')) {
            filterTabs = [...tabs.filter(tab => tab && tab.key == 'base'), ...tabs.filter(item => item && item.parentTab == _t1('前台配置'))]
          } else if (props.base == _t1('模块配置')) {
            let modular_arr = [];
            tabs.forEach(tab => {
              if (tab?.parentIndex == 'modular') {
                parentTabs.forEach(item => { if (item.key == tab?.parentTab) { modular_arr.push(item) } })
              }
            })
            filterTabs = [...tabs.filter(tab => (tab && tab?.parentIndex == 'modular' && !tab.parentTab)), ...Array.from(new Set(modular_arr))]
          }

          let activeData = filterTabs?.filter(item => item.key == activeKey) || []
          activeData?.length > 0 ? setKey(activeKey) : filterTabs?.[0]?.key && setKey(filterTabs[0].key)
          setTabs([...(filterTabs || [])])
        }
      )
    }
  }, [settings, baseModel])

  const FormLayout = componentClass || DefaultFormLayout;

  const tabsComponent = React.useMemo(() => {
    return tabs && tabs.length > 0 &&
      tabs.map(({ name, key, renderComponent: TabComponent }) => {
        return (
          <Tabs.TabPane tab={name} key={key}>
            <TabComponent {...props} baseModel={baseModel}
              saveItem={(value) => {
                value = {
                  ...value,
                  noOpExpireAdmin: value?.noOpExpireAdminSetting?.time ? value?.noOpExpireAdminSetting?.time : null
                }
                saveSettings(value)
              }} deleteItem={deleteItem}
              component={props => {
                React.useEffect(() => props.form.subscribe(({ dirty, modifiedSinceLastSubmit }) => {
                  formDirty.current = modifiedSinceLastSubmit
                }, { dirty: true, modifiedSinceLastSubmit: true }), [])
                return <FormLayout {...props} />
              }}
              data={settings}
            />
          </Tabs.TabPane>
        )
      })
  }, [tabs])

  const content = (
    <Card style={style} className="TabsForm">
      <Tabs className='systemcard'
        tabPosition={'top'}
        activeKey={activeKey}
        onChange={onChange}
        tabBarExtraContent={[]}
      >
        {tabsComponent}
      </Tabs>
    </Card>
  )

  return loading ? <Loading>{content}</Loading> : content
}
const DefaultmiddleLayout = props => {
  const { t: _t1 } = useI18n()
  const { children, invalid, handleSubmit, showCode, submitting } = props;
  const { _t } = app.context;
  return (
    <Form onSubmit={handleSubmit} >
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333' }}>
        {
          children.some(c => c?.props?.field?.schema?.divider) ?
            <>
              <p style={{ background: '#f0f2f5', margin: '0 0 10px 0', padding: '10px' }}>{_t1('基础信息')}</p>
              {children.filter(c => c?.props?.field?.schema?.divider == 'information')}
              <p style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>{_t1('安全配置')}</p>
              {children.filter(c => c?.props?.field?.schema?.divider == 'safety')}
            </>
            :
            children
        }

        <Row style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <Button type="primary" loading={submitting} onClick={handleSubmit} htmlType="submit">{_t1('保存')}</Button>
        </Row>
      </Card>
    </Form>
  )
}
const RenderSetting = props => {
  const { t: _t1 } = useI18n()
  const { settings, saveSettings } = use('settings')
  const settingSchema = props.base == _r('前台系统配置') ? ReceptionBaseInfo : SystemBaseInfo
  const [loading, setLoading] = React.useState(false)
  React.useEffect(() => {
    setLoading(true)
    if (!_.isEmpty(settings)) {
      setLoading(false)
    }
  }, [settings])

  return (<Store data={settings} mode={true} >
    <Page title={<><Icon svg={require('../icon/newIcons/系统设置.svg')} className="settingIcon"/>{_t1(props.base)}</>}>
      {
        loading ? <Loading></Loading> : <DndProvider backend={HTML5Backend}>
          <Model schema={settingSchema} modelKey="profile">
            <DataForm forceTabs mode="left" base={props.base} data={settings} saveSettings={saveSettings} saveItem={(value) => {
              value = {
                ...value,
                noOpExpireAdmin: value?.noOpExpireAdminSetting?.time ? value?.noOpExpireAdminSetting?.time : null
              }
              saveSettings(value)
            }
            } schemaKey="settings.schema"></DataForm>
          </Model>
        </DndProvider>
      }
    </Page>
  </Store>
  )
}


export default RenderSetting
export { UserOverTime }
