import React from 'react';
import { api, config, use } from 'xadmin';
import { C, Icon, Page, Loading } from 'xadmin-ui';
import { Model, ModelBlock } from 'xadmin-model'
import _ from 'lodash'
import { Radio, Button, Popconfirm, message, Card, Empty, Upload, notification, Modal, Form, Input } from 'antd'
import PeriodicBackup from './PeriodicBackup'
import ModalContent from './ModalContent'
import RestoreBtn from './RestoreBtn';
import UploadBackup from './UploadBackup'
import { HasPermission } from 'xadmin-auth';
import { SchemaForm } from 'xadmin-form/lib/base';
import { useRecoilState, useSetRecoilState } from 'recoil'

const options = [
    { label: _r('备份'), value: 'backup' },
    { label: _r('还原'), value: 'reduction' }
]
const backupOptions = {
    // 'influxdb': 'influxdb（时序数据）',
    'fileServer': 'file server（媒体文件）',
    'html': 'HTML（前端文件）',
    'mongodb': 'postgres（基础数据）'
}

const DeleteBtn = ({ record, type }) => {
    const { atoms } = use('model')
    const [wheres, setWheres] = useRecoilState(atoms.wheres)
    const { t: _t1 } = useI18n()
    let style = {
        background: '#ff4d4f',
        color: "#ffffff"
    }
    const onDelete = () => {
        api({ name: 'core/backup' })
            .fetch(`/${record.id}`, { method: 'DELETE' })
            .then(({ status }) => {
                if (status == 200) {
                    message.success('删除成功')
                    setWheres(wheres => ({filters: { "type": type == 'reduction'?"import":'export', 'status': 'succeed' }}))
                    // modelDispatch({ type: 'GET_ITEMS' })
                } else {
                    message.error(arg.message)
                }
            }).catch(err => console.log(err.message))
    }
    return (
        <Popconfirm
            title={type != "reduction" ?
                "确认删除备份记录吗？" :
                "确认删除还原记录吗？"}
            onConfirm={() => { onDelete() }}
            overlayStyle={{ width: 320 }}
            okText={_t1('删除')}
            cancelText={_t1('取消')}>
            <Button style={style}><Icon type="delete" /></Button>
        </Popconfirm>
    )
}

const DownloadBtn = ({ record }) => {
    const { t: _t1 } = useI18n()
    const [visible, setVisible] = React.useState(false)
    const [password, setPassword] = React.useState(null)
    const [loading, setLoading] = React.useState(false)
    const download = (isPassword) => {
        const headers = api({ name: '' }).getHeaders()
        const lastPath = location.pathname.split('/').slice(-1)[0]
        let hs = {}
        setLoading(true)
        if (lastPath.startsWith('_p_')) {
            hs['x-request-project'] = lastPath.substring(3)
        }
        if (headers && headers.Authorization) {
            hs['Authorization'] = 'Bearer ' + headers.Authorization.split(' ')[1]
        }
        fetch(config('mediaUrl') + `/core/backup/download/${record.id}` + (isPassword ? `?password=${password}` : ''), {
            method: 'get',
            headers: hs,
            responseType: 'blob'
        }).then(res => {
            return res.blob()
        }).then((arg) => {
            let blob = new Blob([arg], { type: 'application/octet-stream' })
            const downloadElement = document.createElement('a')
            downloadElement.target = '_blank'
            downloadElement.href = URL.createObjectURL(blob)
            downloadElement.download = (record?.name || '项目备份文件') + '.zip'

            document.body.appendChild(downloadElement);

            downloadElement.click()
            downloadElement.remove()
            setVisible(false)
            setLoading(false)
        }).catch(err => console.log(err.message))
    }
    const handleOk = () => {
        if (!password) {
            message.error('如果添加验证码请先填写验证码！')
        } else {
            download(true)
            setPassword(null)
        }
    }
    return <>
        <Modal visible={visible} okText={'添加'} cancelText={'不添加'} onCancel={() => { setVisible(false) }}
            footer={[<Button onClick={handleOk} loading={loading} type="primary">{_t1('添加')}</Button>, <Button onClick={() => download(false)} loading={loading}>{_t1('不添加')}</Button>]} onOk={handleOk}
            title={_t1('是否添加验证码？')}>
            <Form>
                <Form.Item label={_t1('验证码')} name="password">
                    <Input onChange={(arg) => setPassword(arg.target.value)} />
                </Form.Item>
            </Form>
        </Modal>
        <Button style={{ borderRadius: 5 }} onClick={() => setVisible(true)}>{_t1('下载')}</Button>
    </>
}

const resProperties = {
    name: {
        title: _r('文件名'),
        type: 'string',
        column: {
            fixed: 'left'
        },
        maxlength: 30
    },
    restoreFile: {
        title: _r('还原文件'),
        type: 'string',
    },
    createTime: {
        title: _r('还原时间'),
        type: 'string',
        format: 'date-time'
    }
}
const backupProperties = {
    name: {
        title: _r('文件名'),
        type: 'string',
        column: {
            fixed: 'left'
        },
        maxlength: 30
    },
    item: {
        title: _r('备份文件'),
        type: 'string',
    },
    updateTime: {
        title: _r('备份时间'),
        type: 'string',
        format: 'date-time'
    },
}

const backupSchema = {
    name: 'backup',
    type: 'object',
    title: _r('文件名'),
    resource: 'core/backup',
    properties: {
        ...backupProperties
    },
    listFields: ['name', 'id', 'file', 'restoreFile', 'updateTime', 'createTime'],
    permission: { view: true, add: true, edit: true, delete: true },
    itemActions: [
        ({ item }) => <RestoreBtn record={item} />,
        ({ item }) => <DownloadBtn record={item} />,
        ({ item }) => <HasPermission FailureComponent={null} permission='backup.delete'><DeleteBtn record={item} /></HasPermission>
    ],
    editableFields: ['name'],
    fieldRender: {
        item: ({ item }) => {
            let arr = Object.keys(item?.item).filter(ele => item?.item[ele])
            return item?.item ? arr.map((ele, index) => item?.item[ele] ? <span>{backupOptions[ele] + (index == arr.length - 1 ? '' : '、')}</span> : null) : null
        },
        restoreFile: ({ item }) => {
            let arr = Object.keys(item?.item).filter(ele => item?.item[ele])
            return item?.item ? arr.map((ele, index) => item?.item[ele] ? <span>{backupOptions[ele] + (index == arr.length - 1 ? '' : '、')}</span> : null) : null
        },
        createTime: ({ item }) => moment(item.updateTime).format('YYYY-MM-DD HH:mm:ss')
    },
    components: {
        DataEmpty: props => < Card >
            <Empty description={'暂无数据'} image={require('../imgs/备份管理.png')} imageStyle={{ height: 100 }} />
            {/* <C is='NoData' style={{ padding: 20 }} /> */}
        </Card>
    },
    projectFields: ['name', 'item', 'updateTime'],//['createTime', 'log', 'status', 'type', 'updateTime', 'item'],
    orders: { createTime: 'DESC' },
    filters: {
        submenu: [
            'name',
            'updateTime'
        ]
    }
}

const renderActions = (activeKey) => {
    const [state, setstate] = React.useState(null);
    return (<>
        <HasPermission FailureComponent={null} permission={'backup.edit'}>
            <UploadBackup activeKey={activeKey}/>
            <ModalContent onChange={(arg) => { setstate(arg) }} activeKey={activeKey}/>
            <PeriodicBackup onChange={(arg) => { setstate(arg); onChange(arg) }} />
        </HasPermission>
    </>)

}

const DataTable = ({ activeKey }) => {
    const { model, atoms } = use('model')
    const [wheres, setWheres] = useRecoilState(atoms.wheres)
    const [fields, setFields] = useRecoilState(atoms.fields)
    React.useEffect(() => {
        if (activeKey == 'reduction') {
            setWheres({
                filters: { "type": "import", 'status': 'succeed' }
            })
            setFields(['name', 'restoreFile', 'createTime'])
            //     modelDispatch({
            //         type: 'GET_ITEMS', wheres: { filters: { "type": "import", 'status': 'succeed' } },
            //         filter: { ...model.filter, fields: ['name', 'restoreFile', 'createTime'] },
            //         payload: 'changeField'
            //     })
        } else {
            setWheres({
                filters: { "type": 'export', 'status': 'succeed' }
            })
            setFields(['name', 'item', 'updateTime'])
            //     modelDispatch({
            //         type: 'GET_ITEMS', wheres: { filters: { "type": 'export', 'status': 'succeed' } },
            //         filter: { ...model.filter, fields: ['name', 'item', 'updateTime'] },
            //         payload: 'changeField'
            //     })
        }
    }, [])
    return <C is="Model.DataTable" />
}

const SystemBackup = (props) => {
    const { onLogout } = use('auth.logout')
    const [activeKey, setActiveKey] = React.useState('backup');
    let temp = {
        ...backupSchema,
        itemActions: activeKey == 'backup' ? [
            ({ item }) => <RestoreBtn record={item} onLogout={onLogout}/>,
            ({ item }) => <DownloadBtn record={item} />,
            ({ item }) => <HasPermission FailureComponent={null} permission='backup.delete'><DeleteBtn type={activeKey} record={item} /></HasPermission>
        ] : [({ item }) => <HasPermission FailureComponent={null} permission='backup.delete'><DeleteBtn type={activeKey} record={item} /></HasPermission>],
        properties: activeKey == 'backup' ? backupProperties : resProperties,
        filters: {
            submenu: [
                'name',
                activeKey == 'backup' ? 'updateTime' : { key: 'updateTime', label: ['还原时间'] }
            ]
        },
        initialValues: {
            wheres: {
                filters: {
                    'type': activeKey == 'backup' ? 'export' : 'import',
                    'status': 'succeed'
                }
            }
        }
    }
    const { modelI18n } = use('model.transI18n', { model: temp })
    const setBackupName = async () => {
        if (!window.reception_name) {
            let setting = await api({ name: 'core/setting' }).fetch('').then(({ json }) => json)
            window.reception_name = setting.name
        }
    }
    React.useEffect(() => {
        setBackupName()
        return () => notification.close('key')
    }, [])


    const TabBtn = () => {
        const { model, atoms } = use('model')
        const [wheres, setWheres] = useRecoilState(atoms.wheres)
        const [fields, setFields] = useRecoilState(atoms.fields)
        const [selected, setSelected] = useRecoilState(atoms.selected)
        const onChangeActiveKey = (arg) => {
            setActiveKey(arg.target.value)
            if (arg.target.value == 'backup') {
                setWheres({
                    filters: { "type": "export", 'status': 'succeed' }
                })
                setFields(['name', 'item', 'updateTime'])
                // modelDispatch({
                //     type: 'GET_ITEMS', wheres: { filters: { "type": 'export', 'status': 'succeed' } },
                //     filter: { ...model.filter, fields: ['name', 'item', 'updateTime'] },
                //     payload: 'changeField'
                // })
            } else {
                setWheres({
                    filters: { "type": "import", 'status': 'succeed' }
                })
                setFields(['name', 'restoreFile', 'createTime'])
                // modelDispatch({
                //     type: 'GET_ITEMS', wheres: { filters: { "type": 'import', 'status': 'succeed' } },
                //     filter: { ...model.filter, fields: ['name', 'restoreFile', 'createTime'] },
                //     payload: 'changeField'
                // })
            }
            setSelected([])
            // modelDispatch({ type: 'SELECT_CLEAR' })
        }
        return <Radio.Group style={{ marginBottom: '.5rem' }} onChange={onChangeActiveKey} value={activeKey} buttonStyle="solid">
            {options.map(item => <Radio.Button style={{ width: '10rem' }} value={item.value}>{_t1(item.label)}</Radio.Button>)}
        </Radio.Group>
    }

    return <C is="AntdI18n">
        <Model modelKey={'backupModel'} schema={modelI18n} >
            <Page title={<span><Icon svg={require('../icon/备份管理.svg')} />{props.base}</span>} actions={renderActions(activeKey)}>
                <TabBtn />
                <ModelBlock name="model.list.submenu" />
                <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
                    <C is="Model.Pagination" />
                    <C is="Model.ListSubMenu" />
                </div>
                <DataTable activeKey={activeKey} />
                <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
                    <C is="Model.ActionBar" />
                    <C is="Model.Pagination" />
                </div>
            </Page>
        </Model>
    </C>
}

export default SystemBackup