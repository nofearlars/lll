import React from 'react';
import { api, config, use } from 'xadmin';
import { C, Icon, Page, Loading } from 'xadmin-ui';
import _, { indexOf } from 'lodash'
import { Button, Modal, Empty, Input, Popconfirm, Menu, Form, Layout, Select, InputNumber, message } from 'antd'
import { SchemaForm } from 'xadmin-form';
import BackupContent from './BackupContent'
import { HasPermission } from 'xadmin-auth';

const { Content, Sider } = Layout;
const { Option } = Select
const style = {
    width: '100%',
    padding: '10px'
}
const TableTile = (props) => {
    console.log(props)
    const { t: _t1 } = useI18n()
    const { title, data, setState } = props
    const onDisable = () => {
        api({ name: "core/backupCycle" }).fetch('/' + data.id, {
            method: 'PATCH',
            body: JSON.stringify({ ...data, disable: !data.disable })
        }).then((arg) => {
            if (arg.status == 200) {
                message.success('修改成功')
                let obj = []
                Object.keys(data.item).map(item => {
                    data.item[item] && obj.push(item)
                })
                setState({ ...data, disable: !data.disable, item: obj })
            } else {
                message.error(arg.message)
            }
        }).catch(err => {
            if (err.message?.indexOf('{') > -1) {
                message.error(JSON.parse(err.message).item)
            } else {
                message.error(err.message)
            }
        })
    }
    const onDelete = () => {
        api({ name: "core/backupCycle" }).fetch('/' + data.id, {
            method: 'DELETE'
        }).then((arg) => {
            if (arg.status == 200) {
                message.success('删除成功')
                setState({})
            } else {
                message.error(arg.message)
            }
        }).catch(err => {
            if (err.message?.indexOf('{') > -1) {
                message.error(JSON.parse(err.message).item)
            } else {
                message.error(err.message)
            }
        })
    }
    return <div style={{ width: '16rem', display: 'flex', justifyContent: 'space-between' }}>
        <span>{title}</span>
        <div style={{ marginRight: 50 }}>
            <Popconfirm
                title={!data.disable ? "禁用周期后将不会按照此周期执行备份的操作，但仍可对周期进行启用，确认禁用周期吗？" : "确定启用此项?"}
                onConfirm={onDisable}
                onCancel={() => { }}
                okText={_t1('确定')}
                cancelText={_t1('取消')}
            >
                <Icon type="stop" style={{ color: data.disable ? 'red' : '#36af57' }} />
            </Popconfirm>
            <Popconfirm
                title="删除周期后将不会按照此周期执行备份的操作，删除周期吗？"
                onConfirm={onDelete}
                onCancel={() => { }}
                okText={_t1('确定')}
                cancelText={_t1('取消')}
            >
                <Icon type="delete" />
            </Popconfirm>
        </div>
    </div>
}

const reductionSchema = {
    type: 'object',
    properties: {
        fileName: {
            type: 'string',
            title: _r('文件名称')
        },
        name: {
            type: 'string',
            title: _r('周期名称')
        },
        cycle: {
            type: 'object',
            title: _r('周期定义'),
            field: {
                component: (props) => {
                    const { input: { onChange, value } } = props
                    return (
                        <div style={{ width: '100%', display: 'flex' }}>
                            <InputNumber style={{ width: '70%' }} value={value.count} onChange={(arg) => { onChange({ ...value, count: arg }) }} min={1} />
                            <Select style={{ width: '30%' }} value={value.unit} onChange={(arg) => { onChange({ ...value, unit: arg }) }}>
                                <Option value="h">{_t1('小时')}</Option>
                                <Option value="d">天</Option>
                            </Select>
                        </div>
                    )
                }
            },
        },
        item: {
            type: 'array',
            title: _r('备份内容'),
            field: {
                component: (props) => <BackupContent {...props} />
            },
            items: {}
        }
    },
    required: ['fileName', 'name', 'cycle', 'item']
}


const Component = (props) => {
    const { onChange, value, setVisible, visible } = props
    const { t: _t1 } = useI18n()
    const [arr, setArr] = React.useState([])
    const [searchArr, setSearchArr] = React.useState([])
    const [active, setActive] = React.useState(null)
    const [state, setState] = React.useState({})
    const headers = api({ name: '' }).getHeaders()
    const projectId = headers['x-request-project']

    const ChildrenNode = ({ children, change, invalid, handleSubmit, submitting, onCancel, limits, ...props }) => {
        const { form, values: { id } } = use('form', state => ({ values: state && state.values }))

        React.useEffect(() => { reductionSchema.formEffect && reductionSchema.formEffect(form) }, [reductionSchema])

        return (
            <Form onSubmit={handleSubmit}>
                <div style={{ width: '80%', margin: '20px auto' }}>{children}</div>
                <div style={{ textAlign: 'right', margin: '40px 50px 0px 0px' }}>
                    <Form.Item>
                        <HasPermission FailureComponent={null} permission="backup.add">
                            <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
                                {id ? '修改' : '添加'}
                            </Button>
                        </HasPermission>
                        <Button style={{ marginLeft: 15 }} onClick={() => { setVisible(false); setState({}) }}>{_t1('取消')}</Button>
                    </Form.Item>
                </div><br />
            </Form>
        )
    }

    React.useEffect(() => {
        let query = {
            "limit": 30,
            "skip": 0,
            "sort": { "age": -1, "posts": 1 },
            "project": { "name": 1, "disable": 1, "fileName": 1, "cycle": 1, "item": 1 },
            "withCount": true
        }
        api({ name: "core/backupCycle" }).fetch('?query=' + JSON.stringify(query), {})
            .then(({ status, json }) => {
                if (status == 200) {
                    setArr(json)
                    setSearchArr(json || [])
                } else {
                    message.error(arg.message)
                }
            }).catch(err => console.log(err.message))
    }, [visible, state])
    const onSearch = value => {
        setSearchArr([...arr].filter(item => item?.name?.indexOf(value?.target?.value) != -1))
    };
    const addPeriodic = () => {
        setActive(null)
        setState({
            fileName: window.reception_name,
            item: ['fileServer', 'html', 'mongodb']//'influxdb',
        })
    }
    const searchSelect = (id) => {
        api({ name: "core/backupCycle" }).fetch('/' + id, {})
            .then(({ status, json }) => {
                if (status == 200) {
                    if (json.item) {
                        json.item = Object.keys(json.item)?.filter(item => json.item[item] && item)
                    }
                    setState(json)
                } else {
                    message.error(arg.message)
                }
            }).catch(err => console.log(err.message))
    }
    const remove = (i) => () => {
        setSearchArr([
            ...arr.slice(0, i),
            ...arr.slice(i + 1)
        ])
    }
    const onSubmit = (val) => {
        let obj = {}
        val.item.map(item => { obj[item] = true })
        api({ name: "core/backupCycle" }).fetch(val.id ? '/' + val.id : '', {
            method: val.id ? 'PATCH' : 'POST',
            body: JSON.stringify({ ...val, disable: _.isBoolean(val.disable) ? val.disable : false, item: obj }),
            headers: projectId ? headers : _.omit(headers, 'x-request-project')
        }).then((arg) => {
            if (arg.status == 200) {
                message.success(val.id ? '修改成功' : '保存成功')
                setState({})
                setActive(null)
            } else {
                message.error(arg.message)
            }
        }).catch(err => {
            message.error(JSON.parse(err.message).item || '执行失败')
        })
    }
    const emptyStyle = {
        padding: '15px',
        color: '#E38A0F',
        textAlign: 'center',
        background: '#F2EAD7',
        borderRadius: '4px'
    }
    return (
        <Layout style={{ padding: 0, height: 550 }} className="warn-archive-model">
            <Sider width={250} style={{ borderRight: '1px solid #f0f0f0', overflow: 'auto' }}>
                <div style={style}><Input placeholder="搜索..." onChange={onSearch} /></div>
                <Menu mode="inline" selectedKeys={active} onSelect={(arg) => {
                    setActive(arg.key);
                    searchSelect(arg.key)
                }}>
                    {
                        searchArr?.map((item, index) => <Menu.Item key={item.id}>
                            <TableTile title={item.name} remove={remove} index={index} data={item} setState={setState} />
                        </Menu.Item>)}
                </Menu>
            </Sider>
            <Layout>
                <Content style={{ padding: 10, background: '#ffffff' }}>
                    <Button type={'primary'} onClick={addPeriodic}>{_t1('添加周期')}</Button>
                    {_.isEmpty(state) ? <div style={{ textAlign: 'center', marginTop: 30 }}>
                        <span style={emptyStyle}>
                            <Icon svg={require('./../icon/warning.svg')} />
                            <span style={{ marginLeft: 5 }}>{_t1('快去添加周期备份或者选择已有周期备份进行编辑')}</span>
                        </span>
                        <C is='NoData' style={{ padding: 20 }} />
                        {/* <Empty description="" image={require('./../../../icon/homeIcon/noData.png')} imageStyle={{ height: 200 }} style={{ margin: '50px 0' }} /> */}
                    </div> : <C is="I18nSchemaForm" formkey={'periodicBackup'}
                        schema={reductionSchema}
                        initialValues={state}
                        onSubmit={onSubmit}
                        component={ChildrenNode}
                        />}
                </Content>
            </Layout>
        </Layout>
    )
}

const PeriodicBackup = (props) => {
    const { t: _t1, t } = useI18n()
    const { onChange } = props
    const [visible, setVisible] = React.useState(false);
    return React.useMemo(() => {
        return <>
            <Modal
                title={_t1('周期备份')}
                visible={visible}
                footer={[]}
                onCancel={() => setVisible(false)}
                width={'80%'}>
                <Component onChange={(arg) => { onChange(arg) }} visible={visible} setVisible={setVisible} />
            </Modal>
            <HasPermission FailureComponent={null} permission='backup.view'>
                <Button type="primary" onClick={() => setVisible(true)}>{_t1('周期备份')}</Button>
            </HasPermission>
        </>
    }, [visible, t])
}

export default PeriodicBackup