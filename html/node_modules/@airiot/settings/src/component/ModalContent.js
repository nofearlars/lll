import React from 'react';
import { api, config, use } from 'xadmin';
import { C, Icon, Page, Loading } from 'xadmin-ui';
import _ from 'lodash'
import { Tabs, Button, Radio, Modal, Checkbox, Progress, notification, Form, message } from 'antd'
import { SchemaForm } from 'xadmin-form';
import BackupContent from './BackupContent'
import { HasPermission } from 'xadmin-auth';
import { useRecoilState } from 'recoil'


const groupProps = {
  wrapperCol: {
    xs: { span: 24, offset: 0 },
    sm: { span: 18, offset: 5 }
  }
}

const backupSchema = {
  type: 'object',
  properties: {
    name: {
      type: 'string',
      title: _r('文件名称')
    },
    item: {
      type: 'array',
      title: _r('备份内容'),
      field: {
        component: (props) => <BackupContent {...props} />
      },
      items: {}
    }
  },
  required: ['name', 'item']
}

const ModalContent = ({ activeKey }) => {
  const { t: _t1, t } = useI18n()
  const [visible, setVisible] = React.useState(false);
  const [state, setState] = React.useState(null);
  const [id, setId] = React.useState(null);
  const [apii, contextHolder] = notification.useNotification();
  const interval = React.useRef()
  const { atoms } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  const headers = api({ name: '' }).getHeaders()
  const projectId = headers['x-request-project']

  const backupFun = (data) => {
    let obj = {}
    data.item.map(item => { obj[item] = true })
    api({ name: "core/backup/export" }).fetch('?query=' + JSON.stringify({ ...data, item: obj }), {
      headers: projectId ? headers : _.omit(headers, 'x-request-project')
    })
      .then(({ status, json: { id } }) => {
        if (status == 200) {
          setVisible(false)
          setId(id)
          showTest(id)
        } else {
          message.error(arg.message)
        }
      }).catch(err => console.log(err.message))
  }
  React.useEffect(() => {
    if (state == 'succeed') {
      message.success('备份完成')
      setWheres(wheres => ({ filters: { "type": activeKey == 'reduction' ? "import" : 'export', 'status': 'succeed' } }))
    }
  }, [state])
  React.useEffect(() => {
    if (state == 'succeed') {
      clearInterval(interval.current)
      setState(null)
      notification.close('key')
    } else if (state == 'fail') {
      clearInterval(interval.current)
      setState(null)
      notification.close('key')
    }
  })
  React.useEffect(() => {
    return () => clearInterval(interval.current)
  }, [])


  const showTest = (id) => {
    interval.current = setInterval(() => {
      status != 'succeed' && api({ name: "core/backup/" + id })
        .fetch('')
        .then(({ json: { status, log } }) => {
          state !== status && setState(status)
          if (status == 'fail') message.error(log)
        }).catch(err => console.log(err.message))
    }, 500)
    notification.open({
      message: ``,
      key: 'key',
      description: '备份中...',//<Context.Consumer>{({ name }) => `Hello, ${name}!`}</Context.Consumer>,
      placement: 'bottomRight',
      closeIcon: <></>,
      btn: <></>,
      icon: <Icon svg={require('../icon/upload.svg')} />,
      style: { background: '#02a7f0', color: '#ffffff' },
      duration: null
    });
  }
  const ChildComponent = (props) => {
    const { children, form, handleSubmit, invalid } = props
    return (<>
      <Form handleSubmit={handleSubmit}>
        {children}
        <Form.Item {...groupProps}>
          <HasPermission FailureComponent={null} permission='backup.add'>
            <Button type="primary" disabled={invalid} onClick={() => {
              backupFun(form.getState().values)
            }}>{_t1('备份')}</Button>
          </HasPermission>
          <Button style={{ marginLeft: 5 }} onClick={() => {
            setVisible(false)
          }}>{_t1('取消')}</Button>
        </Form.Item>
      </Form>
    </>)
  }

  return React.useMemo(() => {

    return <>
      <Modal modelKey={'backup'}
        title={_t1('一键备份')}
        visible={visible}
        footer={[]}
        onCancel={() => setVisible(false)}
        width={'50%'}>
        <C is="I18nSchemaForm"
          schema={backupSchema}
          initialValues={{
            name: window.reception_name + '_' + moment(new Date()).format('YYYY-MM-DD HH:mm:ss'),
            item: ['fileServer', 'html', 'mongodb']//'influxdb',
          }}
          onChange={() => { }}
          component={ChildComponent}
        />
      </Modal>
      {contextHolder}
      <Button type="primary" onClick={() => setVisible(true)}>{_t1('一键备份')}</Button>
    </>
  }, [visible, t])

}

export default ModalContent