import React from 'react';
import { api, config, use } from 'xadmin';
import { C, Icon, Page, Loading } from 'xadmin-ui';
import _ from 'lodash'
import { Tabs, Button, Radio, Modal, Checkbox, Progress, notification, Form, message, Upload } from 'antd'
import { SchemaForm } from 'xadmin-form';
import BackupContent from './BackupContent'
import { HasPermission } from 'xadmin-auth';


const groupProps = {
  wrapperCol: {
    xs: { span: 24, offset: 0 },
    sm: { span: 18, offset: 5 }
  }
}

// 'model',          //模型
// 'node',           //资产
// 'report',         //报表
// 'reportCopy',     //报表
// 'table',          //工作表
// 'dashboard',      //画面
// 'dashboardDraft', //画面
// 'catalog',        //画面目录
// 'flow',           //流程
// 'flowDraft',      //流程
// 'theme',          //主题
// 'media',          //媒体库
// 'systemVariable', //数据字典
// 'setting',        //报警类型、资产类型
// 'data_source',    //数据接口
// 'data_source_op'  //数据接口
const plainOptions = [
  { value: 'dashboard', label: _r('画面') },
  { value: 'catalog', label: _r('画面目录') },
  { value: 'model', label: _r('模型') },
  { value: 'node', label: _r('资产') },
  { value: 'table', label: _r('工作表') },
  { value: 'report', label: _r('报表') },
  { value: 'flow', label: _r('流程') },
  { value: 'theme', label: _r('主题') },
  { value: 'setting', label: _r('报警类型') },
  { value: 'setting_1', label: _r('资产类型') },
  { value: 'systemVariable', label: _r('数据字典') },
  { value: 'media', label: _r('媒体库') },
  { value: 'data_source', label: _r('数据接口') },
];
const allList = [
  'model',          //模型
  'node',           //资产
  'report',         //报表
  // 'reportCopy',     //报表
  'table',          //工作表
  'dashboard',      //画面
  // 'dashboardDraft', //画面
  'catalog',        //画面目录
  'flow',           //流程
  // 'flowDraft',      //流程
  'theme',          //主题
  'media',          //媒体库
  'systemVariable', //数据字典
  'setting',        //报警类型、资产类型
  'setting_1',      //资产类型
  'data_source',    //数据接口
  // 'data_source_op'  //数据接口
]

const CheckComponent = (props) => {
  const { t: _t1 } = useI18n()
  const { input: { value, onChange } } = props
  const [indeterminate, setIndeterminate] = React.useState(false);
  const [checkAll, setCheckAll] = React.useState(false);
  const [checkedList, setCheckedList] = React.useState([]);
  const [temp, setTemp] = React.useState(null);

  const onCheckAllChange = e => {
    setCheckedList(e.target.checked ? allList : []);
    setIndeterminate(false);
    setCheckAll(e.target.checked);
    onChange(e.target.checked ? allList : null)
  };
  const onhandleChange = list => {
    setCheckedList(list);
    setIndeterminate(!!list.length && list.length < plainOptions.length);
    setCheckAll(list.length === plainOptions.length);
    onChange(list)
  };
  return <div>{temp?.code ? '项目已过期，无法导入项目' :
    (temp?.length == 1 && temp[0]?.name == 'systemVariable' ?
      '导入的项目包含以下数据，可按需选择导入内容，确认导入该项目？' : '导入项目的数据包含以下内容，可按需选择覆盖的数据，否则将与项目已有数据合并新增，确认导入该项目？')}
    <div style={{ marginTop: '5px' }}>
      <div style={{ lineHeight: '14px', color: '#ff4d4f', marginTop: '5px' }}>
      </div>
      <Checkbox indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>
        全选
      </Checkbox>
      <Checkbox.Group options={plainOptions} value={checkedList} onChange={onhandleChange} />
    </div>
  </div>
}

const uploadSchema = {
  type: 'object',
  properties: {
    collections: {
      type: 'array',
      title: _r('备份内容'),
      field: {
        component: (props) => <CheckComponent {...props} />
      },
      items: {}
    },
    password: {
      type: 'string',
      title: _r('验证码')
    }
  },
  required: ['collections']
}

const UploadBtn = (props) => {
  const { t: _t1 } = useI18n()
  const [totle, setTotle] = React.useState(0)
  const [percent, setPercent] = React.useState(0)
  const [visible, setVisible] = React.useState(false);
  const { form, invalid, headers } = props
  const _password = form.getState().values?.password
  const checkedList = form.getState().values?.collections

  const prop = {
    name: 'file',
    action: api({ name: '' }).getHost() + ('core/configDb/upload') + (_password ? `?password=${_password}` : ''),
    data: {
      collections: JSON.stringify(checkedList)   //是否全部覆盖
    },
    showUploadList: false,
    headers: headers['x-request-project'] ? {
      'Authorization': headers.Authorization,
      'x-request-project': headers['x-request-project']
    } : {
      'Authorization': headers.Authorization,
    },
    onChange: (arg) => {
      const { file: { status, response, size }, event } = arg
      const _t = (size / 1024 / 1024).toFixed(2)
      if (event) {
        let num = (event.loaded / 1024 / 1024).toFixed(2)
        setPercent((num * 100 / _t).toFixed(2))
      }
      if (status == "uploading") return
      if (response?.status == "OK") {
        message.success('导入成功！')
        setVisible(false)
        setTotle(null)
        setPercent(0)
      } else {
        setVisible(false)
        setTotle(null)
        setPercent(0)
        message.error(response?.message || '上传失败!')
      }
    },
    beforeUpload: (file) => {
      const { size } = file
      !visible && setVisible(true)
      // setTotle((size / 1024 / 1024).toFixed(2))
      return new Promise((resolve, reject) => {
        resolve(file)
      })
    }
  };

  return (
    <>
      <Upload {...prop} style={{ width: '100%', position: 'relative' }}>
        <Button className={"project-button "}>{_t1('确定')}</Button>
      </Upload>
      <Modal visible={visible} footer={[]} closable={false} keyboard={false} maskClosable={false}>
        <Progress percent={percent || 0} />
      </Modal>
    </>
  )
}

const ModalContent = (props) => {
  const { t: _t1 } = useI18n()
  const { icon, butText, type, setting } = props
  const [visible, setVisible] = React.useState(false);
  const [state, setState] = React.useState(null);
  const [downloading, setDownLoading] = React.useState(false);
  const [apii, contextHolder] = notification.useNotification();
  const headers = api({ name: '' }).getHeaders()
  const lastPath = location.pathname.split('/').slice(-1)[0]
  let hs = {}
  if (lastPath.startsWith('_p_')) {
    hs['x-request-project'] = lastPath.substring(3)
  }
  if (headers && headers.Authorization) {
    hs['Authorization'] = 'Bearer ' + headers.Authorization.split(' ')[1]
  }

  const downloadModel = async (collections, data, password) => {
    setDownLoading(true)
    setVisible(false)
    const names = await api({ name: '' })
      .fetch(`core/configDb/collectionNames`, {})
      .then(({ json }) => json.filter(i => collections.includes(i.name)).map(j => j.name))

    const host = api({ name: '' }).getHost()

    const _collections = encodeURIComponent(JSON.stringify(names))
    await fetch(config('mediaUrl') + `/core/configDb/download?collections=${_collections}${password ? ('&password=' + password) : ''}`, {
      method: 'get',
      headers: hs,
      responseType: 'blob'
    }).then(res => {
      return res.blob()
    }).then((arg) => {
      setDownLoading(false)
      let blob = new Blob([arg], { type: 'application/octet-stream' })
      const downloadElement = document.createElement('a')
      downloadElement.target = '_blank'
      downloadElement.href = URL.createObjectURL(blob)
      downloadElement.download = `${setting.reception_name}.tar.gz`

      document.body.appendChild(downloadElement);
      downloadElement.click()
      downloadElement.remove()
    })
  }

  const backupFun = (data, id) => {
    let obj = {}, arr = []
    const { collections, password } = data
    collections.map(item => {
      switch (item) {
        case 'report':
          obj['reportCopy'] = true
          arr.push('reportCopy')
          break;
        case 'dashboard':
          obj['dashboardDraft'] = true
          arr.push('dashboardDraft')
          break;
        case 'flow':
          obj['flowDraft'] = true
          arr.push('flowDraft')
          break;
        case 'data_source':
          obj['data_source_op'] = true
          arr.push('data_source_op')
          break;
        case 'setting_1':
          obj['setting'] = true
          if (!arr.includes('setting')) {
            arr.push('setting')
          }
          break;
      }
      if (item != 'setting_1') {
        obj[item] = true
        if (item == 'setting' && !arr.includes('setting')) {
          arr.push('setting')
        }
        if (item !== 'setting') arr.push(item)
      }
    })
    downloadModel(arr, obj, password)
  }

  const ChildComponent = (props) => {
    const { children, form, handleSubmit, invalid } = props
    return (<>
      <Form handleSubmit={handleSubmit}>
        {children}
        <Form.Item {...groupProps}>
          <HasPermission FailureComponent={null} permission='backup.add'>
            {butText == '导出项目' ? <Button type="primary" disabled={invalid} onClick={() => {
              let _data = form.getState().values
              backupFun(_data)
            }}>{_t1('确定')}</Button> : <UploadBtn {...props} headers={headers} />}
          </HasPermission>
          <Button style={{ marginLeft: 5 }} disabled={downloading} onClick={() => {
            setVisible(false)
          }}>{_t1('取消')}</Button>
        </Form.Item>
      </Form>
    </>)
  }

  return <>
    <Modal modelKey={'backup'}
      title={butText}
      visible={visible}
      footer={[]}
      onCancel={() => setVisible(false)}
      keyboard={false}
      width={'50%'}>
      <C is="I18nSchemaForm"
        schema={uploadSchema}
        initialValues={{}}
        onChange={(value) => { console.log(value) }}
        component={ChildComponent}
      />
    </Modal>
    {contextHolder}
    <Button type="primary" loading={downloading} className={"project-button " + type} onClick={() => setVisible(true)}>{!downloading && icon}{butText}</Button>
  </>
}

export default ModalContent