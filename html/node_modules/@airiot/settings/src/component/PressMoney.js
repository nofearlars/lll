
import React, { useEffect, useState } from 'react'
import { use, app, api } from 'xadmin'
import _ from 'lodash'
import { SchemaForm } from 'xadmin-form'
import {
  Popover, message, Button, Table, Empty, Popconfirm, Form,
  Modal, Checkbox, Input, Card, Row, Col, notification, DatePicker, Tag
} from 'antd'
import { C, Icon, Page, Loading } from 'xadmin-ui'
import { UserOverTime } from './RenderSetting'
import Uploading from './Uploading'
import moment from 'moment'
import { DeleteOutlined } from '@ant-design/icons'

import './../css/index.css'

const { RangePicker } = DatePicker;

const ViewSelect = C.lazy('ViewSelect')
const { TextArea } = Input

const ExpireTime = props => {
  const { input: { onChange, value }, authDurationValue, initValues, expireValues } = props
  const [disabledDate, setDisabledDate] = React.useState()
  const [lteTime, setIteTime] = React.useState({ startTime: null, endTime: null })

  React.useEffect(() => {
    api({ name: 'core/license' }).fetch('', {})
      .then(({ json }) => {
        if (json) {
          let end = moment(json.startTime).add(json?.validityPeriod, 'd').endOf('d').format('YYYY-MM-DD HH:mm:ss')
          json?.startTime && setDisabledDate(end)
        }
      })
  }, [])

  const handleChange = (value, dateString) => dateString ? onChange(moment(dateString).endOf('d').format('YYYY-MM-DD HH:mm:ss')) : onChange('')
  const onOk = value => onChange(moment(value).endOf('d').format('YYYY-MM-DD HH:mm:ss'))

  React.useEffect(() => {
    if (_.isNumber(initValues.index)) {
      let index = _.isNumber(initValues.index) && initValues.index - 1 >= 0 ? initValues.index - 1 : authDurationValue.length - 1
      let start = authDurationValue?.[index]?.expireTime ? moment(authDurationValue[index]?.expireTime) : moment(new Date())
      let end = authDurationValue?.[index + 1]?.expireTime ? moment(authDurationValue[index + 1]?.expireTime) : moment(disabledDate)
      // console.log(index, moment(start).format('YYYY-MM-DD HH:mm:ss'), moment(end).format('YYYY-MM-DD HH:mm:ss'), authDurationValue?.[index+1]?.expireTime,
      //   moment(disabledDate).format('YYYY-MM-DD HH:mm:ss'), '下标')
      setIteTime({ ...lteTime, startTime: start, endTime: end })
      return
    }
    // else {
    //   let index = _.isNumber(initValues.index) ? initValues.index+1 : authDurationValue.length-1
    //   let end = moment(authDurationValue[index]?.expireTime)
    //   setIteTime({ ...lteTime, endTime: end })
    //   return 
    // }
  }, [JSON.stringify(authDurationValue), JSON.stringify(initValues), JSON.stringify(disabledDate)])
  // console.log(moment(lteTime.startTime).format('YYYY-MM-DD HH:mm:ss'), moment(lteTime.endTime).format('YYYY-MM-DD HH:mm:ss'), 877)
  // console.log(moment(lteTime.startTime).diff(new Date(), 's'), 11111111)
  return <>
    {
      lteTime ? <DatePicker value={value ? moment(value) : null}
        disabledDate={current => { return ((current > lteTime?.endTime) || (current < lteTime?.startTime)) }}
        onChange={handleChange} onOk={onOk} /> : null
    }
  </>
}

const DefaultButton = props => {
  const { t: _t1 } = useI18n()
  const { children, invalid, handleSubmit, showCode, submitting } = props;
  const { _t } = app.context;
  return (
    <Form onSubmit={handleSubmit} >
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333' }}>
        {children}
        <Row style={{ display: 'flex', justifyContent: 'right', alignItems: 'center', marginTop: '2rem' }}>
          <Button type="primary" disabled={invalid} loading={submitting} onClick={handleSubmit} htmlType="submit">{_t1('保存')}</Button>
        </Row>
      </Card>
    </Form>
  )
}

const AuthDurationModal = props => {
  const { t: _t1 } = useI18n()
  const { input: { value, onChange }, field, field: { schema }, meta: { touched, error }, fields = [], itemRenders, itemRender, expireValues } = props
  const { items, label, searchEnable, pushComponent, exportBtn, uploadBtn } = field
  const [initValues, setInitValues] = React.useState({ index: null, value: {}, isDisable: false })

  const [visible, setVisible] = React.useState(false)

  const onSubmit = v => {
    if (value[initValues?.index]) {
      value[initValues?.index] = v
      onChange(value)
    } else {
      onChange([...value, v])
    }
    setVisible(false)
    setInitValues({ index: null, value: {}, isDisable: false })
  }

  let newSchema = {
    type: 'object',
    properties: {
      code: {
        title: _r('解锁密钥'),
        type: 'string',
        field: {
          validate: value => (!/[\u4E00-\uFA29]/ig.test(value) ? null : _r('密钥不允许输入中文'))
        }
      },
      durationTime: {
        title: _r('到期提醒时长'),
        type: 'object',
        properties: {},
        minimum: 1,
        description: _r('当授权时间不足定义时长，会进行弹窗提示, 默认14天'),
        divider: 'base',
        field: {
          component: props => <UserOverTime {...props} customOption={
            [{ key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' }]
          } initValue={true} initUnit={'d'} initCount={14} />
        }
      },
      expireTime: {
        title: _r('授权到期时间'),
        type: 'string',
        divider: 'base',
        field: {
          component: props => <ExpireTime  {...props} authDurationValue={value} initValues={initValues} expireValues={expireValues}
            field={{ ...props.field, schema: { ...props.field.schema, expireSettings: 'expireSettings' } }} />
        }
      },
      tip: {
        type: 'string',
        title: _r('提示信息'),
        description: _r('示例：物联网系统授权还剩XX天到期，请及时与商务人员进行联系！！！  注：提示信息中需要时间倒计时显示，格式需要按照上面的写：XX天'),
        divider: 'base',
        field: {
          component: props => <TextArea {...props} value={props?.input?.value} onChange={e => props.input.onChange(e.target.value)} />
        }
      }
    },
    form: ["*"],
    required: ['expireTime', 'tip']
  }

  return (
    <>
      <Button className='press-btn' onClick={() => {
        setVisible(true);
        fields.push(items.type == 'fieldset' ? {} : null)
        setInitValues({ index: value?.length, value: {} })
      }}>{_t1('添加分期')}</Button>
      <Modal destroyOnClose width={'70%'} visible={visible} onCancel={() => {
        setVisible(false); setInitValues({
          index: null, value: {}, isDisable: false
        })
      }} footer={null}>
        <C is="I18nSchemaForm"
          formKey={'expireSettings'}
          schema={newSchema}
          component={DefaultButton}
          onSubmit={(val) => onSubmit(val)}
          initialValues={initValues?.value}
        />
      </Modal>
      {
        value?.length ? <Row gutter={[16, 24]}>
          {
            value.map((item, index) => {
              let startTime = moment(moment(item?.expireTime).subtract(item?.durationTime?.count, item?.durationTime?.unit)).add(1, 'd').startOf().format('YYYY-MM-DD')
              return <Col>
                <Card
                  className='press_card'
                  extra={<DeleteOutlined className='press_card_delete' onClick={() => {
                    onChange(value.filter((v, i) => index != i))
                  }} />}
                  bodyStyle={{ minHeight: 140 }}
                  style={{ maxWidth: 300, width: 300 }} title={<>
                    <span>{_t1('第')}{index + 1}{_t1('周期')}</span>
                    {item?.disable || moment(item?.expireTime).diff(new Date(), 's') <= 0 ? <Tag style={{ marginLeft: '0.5rem' }} color="error">{_t1('失效')}</Tag> : null}
                  </>}
                >
                  <div style={!item?.disable || moment(item?.expireTime).diff(new Date(), 's') > 0 ? { cursor: 'pointer' } : {}} onClick={() => {
                    let disable = moment(item?.expireTime).diff(new Date(), 's') <= 0 ? false : !item?.disable ? !item?.disable : false
                    if (disable) {
                      setInitValues({ ...initValues, value: value.filter((v, i) => index == i)[0], index, isDisable: true });
                      setVisible(true)
                    }
                  }}>
                    <Row><Col span={6}>{_t1('密钥')}</Col><Col span={18}>{item?.code || '-'}</Col></Row>
                    <Row><Col span={6}>{_t1('提醒时间')}</Col><Col span={18}>{startTime}</Col></Row>
                    <Row><Col span={6}>{_t1('到期时间')}</Col><Col span={18}>{item?.expireTime ? moment(item.expireTime).format('YYYY-MM-DD') : '-'}</Col></Row>
                    <Row><Col span={6}>{_t1('提示信息')}</Col><Col span={18}>{item?.tip}</Col></Row>
                  </div>
                </Card>
              </Col>
            })
          }
        </Row> : null
      }
    </>
  )
}

const schema = (expireValues) => ({
  type: 'object',
  properties: {
    name: {
      title: _r('公司名称'),
      type: 'string',
      divider: 'base'
    },
    logo: {
      type: 'string',
      title: 'logo',
      divider: 'base'
    },
    expireSettings: {
      type: 'array',
      title: _r('授权提醒周期'),
      items: {
        type: 'object',
        properties: {
          secret: {
            title: _r('解锁密钥'),
            type: 'string'
          },
          durationTime: {
            title: _r('到期提醒时长'),
            type: 'object',
            properties: {},
            minimum: 1,
            description: _r('当授权时间不足定义时长，会进行弹窗提示, 默认14天'),
            divider: 'base',
            field: {
              component: props => <UserOverTime {...props} customOption={
                [{ key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' }]
              } initValue={true} initUnit={'d'} initCount={14} />
            }
          },
          expireTime: {
            title: _r('授权到期时间'),
            type: 'string',
            divider: 'base',
            field: {
              component: props => <ExpireTime  {...props} />
            }
          },
          tip: {
            type: 'string',
            title: _r('提示信息'),
            description: _r('示例：物联网系统授权还剩XX天到期，请及时与商务人员进行联系！！！  注：提示信息中需要时间倒计时显示，格式需要按照上面的写：XX天'),
            divider: 'base',
            field: {
              component: props => <TextArea {...props} value={props?.input?.value} onChange={e => props.input.onChange(e.target.value)} />
            }
          }
        },
        required: ['expireTime', 'tip']
      },
      field: {
        component: props => <AuthDurationModal {...props} />,
        validate: (value = []) => {
          let set = [], err = false
          const ret = value?.length && value.map(r => {
            // if (set.indexOf(r.warningname) != -1) {
            //   err = true
            //   return '报警规则名称不能重复'
            // } else {
            //   set.push(r.warningname)
            //   return null
            // }
          })
          return err ? ret : null
        }
      },
      divider: 'authTime'
    },
    backgroundImage: {
      type: 'string',
      title: _r('背景图'),
      divider: 'advanced'
    },
    position: {
      type: 'string',
      title: _r('显示位置'),
      enum: ['topLeft', 'bottomLeft', 'center', 'topRight', 'bottomRight'],
      enum_title: [_r('左上'), _r('左下'), _r('居中'), _r('右上'), _r('右下')],
      divider: 'advanced'
    },
    size: {
      title: _r('尺寸'),
      type: 'object',
      properties: {
        width: {
          type: "number",
          title: _r('宽度'),
          minimum: 1
        },
        height: {
          type: 'number',
          title: _r('高度'),
          minimum: 1
        },
      },
      divider: 'advanced'
    },
    showTime: {
      title: _r('展示时长'),
      type: 'object',
      properties: {},
      description: _r('弹窗默认不消失，可自定义弹窗显示的时长'),
      divider: 'advanced'
    },
    tipTime: {
      title: _r('提醒间隔'),
      type: 'object',
      properties: {},
      description: _r('弹窗默认只显示一次，定义显示间隔后，当用户手动关闭弹窗或弹窗经过展示时长后自动消失，经过显示间隔，再次展示提示'),
      divider: 'advanced'
    },
    // customModal: {
    //     title: _r('自定义弹窗'),
    //     type: 'boolean',
    //     description: '应用的自定义弹窗将会替换默认配置的弹窗',
    //     divider: 'advanced'
    // },
    // pressDashboard: {
    //     type: 'object',
    //     title: _r('画面'),
    //     properties: {},
    //     divider: 'advanced'
    // }
  },
  form: ['name', 'expireSettings',
    {
      key: 'durationTime', component: props => <UserOverTime {...props} customOption={
        [{ key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' }]
      } initValue={true} initUnit={'d'} initCount={14} />
    },
    // { key: 'expireTime', component: props => <ExpireTime  {...props} /> },
    // { key: 'tip', component: props => <TextArea {...props} value={props?.input?.value} onChange={e => props.input.onChange(e.target.value)} /> },

    { key: 'logo', component: Uploading, accept: 'image/*', category: 'img' },
    { key: 'backgroundImage', component: Uploading, accept: 'image/*', category: 'img' }, 'position',
    'size',
    {
      key: 'showTime', component: props => <UserOverTime customOption={
        [{ key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' },
        { key: _t1('小时'), value: 'h' }, { key: _t1('分'), value: 'm' }, { key: _t1('秒'), value: 's' }]
      } {...props} initValue={false} />
    },
    {
      key: 'tipTime', component: props => <UserOverTime {...props} customOption={
        [{ key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' },
        { key: _t1('小时'), value: 'h' }, { key: _t1('分'), value: 'm' }, { key: _t1('秒'), value: 's' }]
      } initValue={false} />
    },
    // 'customModal',
    // { key: 'pressDashboard', component: props => <ViewSelect {...props} /> }
  ],
  formEffect: form => {
    form.useField('customModal', state => {
      let value = state.value
      if (value) {
        form.setFieldData('pressDashboard', { display: true })
      } else {
        form.setFieldData('pressDashboard', { display: false })
      }
    })
  },
  required: ['showTime', 'tipTime']
})

const DefaultLayout = props => {
  const { children, invalid, handleSubmit, showCode, submitting } = props;
  const { t: _t1 } = useI18n()
  const { _t } = app.context;
  return (
    <Form onSubmit={handleSubmit} >
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333' }}>
        <p style={{ background: '#f0f2f5', margin: '0 0 10px 0', padding: '10px' }}>{_t1('基础配置')}</p>
        {children.filter(c => c?.props?.field?.schema?.divider == 'base')}
        <p style={{ background: '#f0f2f5', margin: '0 0 10px 0', padding: '10px' }}>{_t1('授权时间配置')}</p>
        {children.filter(c => c?.props?.field?.schema?.divider == 'authTime')}
        <p style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>{_t1('提示弹窗配置')}</p>
        {children.filter(c => c?.props?.field?.schema?.divider == 'advanced')}
        <Row style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <Button type="primary" disabled={invalid} loading={submitting} onClick={handleSubmit} htmlType="submit">{_t1('保存')}</Button>
        </Row>
      </Card>
    </Form>
  )
}

const PressMoneyModal = props => {
  const { settings } = use('settings')
  const { user } = use('auth.user')

  let pressMoney = settings?.pressMoney
  let timer = React.useRef()
  let dashboardLink = React.useRef()
  const secretKey = React.useRef()
  const { dispatch } = use('redux')

  let expireSettings = pressMoney?.expireSettings || []
  let durationTime = 14 * 86400
  let defaultTime = { count: 14, unit: 'd', time: 14 * 86400 }

  if (pressMoney?.tip && pressMoney.expireTime && (expireSettings?.[0]?.expireTime != pressMoney?.expireTime || _.isEmpty(expireSettings))) {
    expireSettings.unshift({
      durationTime: pressMoney?.durationTime || defaultTime,
      expireTime: pressMoney?.expireTime,
      tip: pressMoney?.tip,
      isOld: true
    })
  }


  let durationTimes = pressMoney?.durationTime?.count && pressMoney?.durationTime?.unit ? pressMoney?.durationTime : { count: 14, unit: 'd', time: 14 * 86400 }
  let endDay = pressMoney?.expireTime ? moment(pressMoney.expireTime).subtract(durationTimes?.count, durationTimes?.unit) : ''
  let diffTime = pressMoney?.expireTime ? moment(moment(endDay).endOf('d')).diff(moment(new Date()), 's') : ''

  const resetOpen = (pressMoney, dashboardLink, diffTime) => {
    if (user?.isAdmin) {
      if (durationTime >= dashboardLink.current.json.remainingTime * 86400) open({}, dashboardLink.current.dashboard, dashboardLink.current.json)
    } else {
      if (pressMoney?.expireTime && diffTime <= 0) {
        open(pressMoney, dashboardLink.current.dashboard, dashboardLink.current.json, diffTime)
      }
    }
  }

  const closeTip = () => {
    if (expireSettings?.length) {
      let tipFilter = expireSettings.filter(val => {
        return val?.expireTime && !val?.disable && moment(val?.expireTime).diff(new Date(), 's') > 0
      })
      if (tipFilter?.length && !tipFilter[0]?.showCode && !user.isAdmin) {
        let currentTip = tipFilter[0]
        let durationTimes = currentTip?.durationTime?.count && currentTip?.durationTime?.unit ? currentTip?.durationTime : { count: 14, unit: 'd', time: 14 * 86400 }
        let endDay = currentTip?.expireTime ? moment(currentTip.expireTime).subtract(durationTimes?.count, durationTimes?.unit) : ''
        let time = currentTip?.expireTime ? moment(moment(endDay).endOf('d')).diff(moment(new Date()), 's') : ''

        if (timer.current) clearTimeout(timer.current)
        timer.current = setTimeout(() => {
          resetOpen(currentTip, dashboardLink, time)
        }, pressMoney.tipTime.time * 1000)
      } else if (user?.isAdmin) {
        resetOpen()
      }
    }
  }

  const resetSetting = () => {

    if (expireSettings?.length) {
      let tipFilter = expireSettings.filter(val => {
        return val?.expireTime && !val?.disable && moment(val?.expireTime).diff(new Date(), 's') > 0
      })
      if (tipFilter?.length && tipFilter?.[0]?.code) {
        if (tipFilter?.[0]?.code == secretKey?.current) {
          let bodyStr = {
            pressMoney: {
              ...settings?.pressMoney,
              expireSettings: expireSettings.map(item => {
                if (item?.expireTime == tipFilter?.[0]?.expireTime) {
                  return { ...item, showCode: true }
                }
                return item
              })
            }
          }
          if (!user?.isAdmin) bodyStr.pressMoney._pressMoney = true

          api({ name: 'core/setting' })
            .fetch('', {
              method: 'PATCH',
              body: JSON.stringify(bodyStr)
            })
            .then(({ json }) => {
              message.success('系统设置保存成功！')
              dispatch({ type: '@@iot/GET_SETTINGS' })
              notification.close('pressMoney')
            })
            .catch(err => { message.error(err.message) })
        } else {
          message.error(_t1('密钥不正确！'))
        }
      }
    }

  }

  const Btn = ({ pressTip }) => {
    return (<>
      {pressTip?.code ? <Button type="primary" size="small" style={{ position: 'absolute', bottom: '1rem', right: '7rem' }} onClick={resetSetting}>{_t1('确定')}</Button> : null}
      <Button type="primary" size="small" style={{ position: 'absolute', bottom: '1rem', right: '3rem' }} onClick={(key) => {
        notification.close('pressMoney')
        closeTip()
      }}>{_t1('关闭')}</Button>
    </>
    )
  }

  const close = () => {
    closeTip()
  }

  const handleChange = (e, pressTip) => {
    let value = e.target.value
    secretKey.current = value
  }

  const open = (pressTip, dashboard, json, diffTime) => {
    let time = pressTip?.expireTime ? moment(moment(pressTip?.expireTime).endOf('d')).diff(moment(new Date()), 'day') + 1 : ''

    const centerStyle = pressMoney?.position == 'center' ? {
      position: 'fixed',
      left: '50%', top: '50%', transform: 'translateY(-50%) translateX(-50%)'
    } : {}
    const backgroundStyle = pressMoney?.backgroundImage ? {
      background: `url(${pressMoney?.backgroundImage}) no-repeat`,
      backgroundSize: '100% 100%',
    } : {}
    notification.close('pressMoney')
    notification.destroy('pressMoney')
    notification.open({
      message: !pressMoney?.customModal ? <Row style={{ height: '60px', textAlign: 'center', justifyContent: 'center', alignItems: 'center' }}>
        {pressMoney?.logo ? <Col span={4}><img src={pressMoney?.logo} style={{ width: '100%' }} /></Col> : null}
        <Col style={{ padding: '0 6px', fontSize: pressMoney?.size?.width ? pressMoney.size.width / 400 * 16 : 400 / 400 * 16 }} span={pressMoney?.logo ? 20 : 24}>{pressMoney?.name || '授权提醒'}</Col>
      </Row> : null,
      description: pressMoney?.customModal ? <C is="DashboardView" item={dashboard}>
        <C is="DashboardNormalView" />
      </C> : <>
        <Row style={{ marginTop: '13%' }}>
          <Col style={{ fontSize: pressMoney?.size?.width ? pressMoney.size.width / 400 * 14 : 400 / 400 * 14 }}>{pressTip?.tip ?
            pressTip?.tip.indexOf('XX') > -1 ? pressTip?.tip.replace('XX', `${user?.isAdmin ? json.remainingTime : (time || json.remainingTime)}`) :
              pressTip?.tip.indexOf('xx') > -1 ? pressTip?.tip.replace('xx', `${user?.isAdmin ? json.remainingTime : (time || json.remainingTime)}`) :
                pressTip?.tip : _t1('项目授权不足') + (user?.isAdmin ? json.remainingTime : (time || json.remainingTime)) + _t1('天，请及时联系管理员！')}</Col>
        </Row>
        {
          pressTip?.code ? <Row style={{ marginTop: '10%', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
            <Col>{_t1('解锁密钥')}</Col>
            <Col><Input style={{ marginLeft: '1rem' }} onChange={(e) => handleChange(e, pressTip)} /></Col>
          </Row> : null
        }
      </>,
      style: pressMoney?.customModal ? { ...centerStyle } : {
        width: pressMoney?.size?.width || 400,
        height: pressMoney?.size?.height || 300,
        borderRadius: '1rem',
        ...backgroundStyle,
        ...centerStyle
      },
      placement: pressMoney?.position || 'bottomRight',
      duration: pressMoney?.showTime?.time,
      btn: <Btn pressTip={pressTip} />,
      bottom: 60,
      key: 'pressMoney',
      closeIcon: <></>,
      onClose: close,
    })
  }

  React.useEffect(() => {
    (async () => {
      let dashboard = pressMoney?.pressDashboard?.id ? await api({ name: `core/dashboard/${pressMoney?.pressDashboard?.id}` }).fetch('', {}).then(({ json }) => { return json }) : ''
      if (user?.id) {
        api({ name: 'core/license' }).fetch('', {})
          .then(({ json }) => {
            if (json) {
              dashboardLink.current = { dashboard, json }
              if (expireSettings?.length) {
                let tipFilter = expireSettings.filter(val => (val?.expireTime && !val?.disable && moment(val?.expireTime).diff(new Date(), 's') > 0))
                if (tipFilter?.length && !tipFilter[0]?.showCode) {
                  let currentTip = tipFilter[0]
                  let durationTimes = currentTip?.durationTime?.count && currentTip?.durationTime?.unit ? currentTip?.durationTime : { count: 14, unit: 'd', time: 14 * 86400 }
                  let endDay = currentTip?.expireTime ? moment(currentTip.expireTime).subtract(durationTimes?.count, durationTimes?.unit) : ''
                  let time = currentTip?.expireTime ? moment(moment(endDay).endOf('d')).diff(moment(new Date()), 's') : ''
                  if (user?.id && currentTip) resetOpen(currentTip, dashboardLink, time)
                }
              }
              // else {
              //   let durationTimes = pressMoney?.durationTime?.count && pressMoney?.durationTime?.unit ? pressMoney?.durationTime : { count: 14, unit: 'd', time : 14 * 86400 }
              //   let endDay = pressMoney?.expireTime ? moment(pressMoney.expireTime).subtract(durationTimes?.count, durationTimes?.unit) : ''
              //   let time = pressMoney?.expireTime ? moment(moment(endDay).endOf('d')).diff(moment(new Date()), 's') : ''
              //   if(user?.id && pressMoney)
              //   resetOpen(pressMoney, dashboardLink, time)
              // }
            }
          })
      }
    })()
  }, [JSON.stringify(pressMoney), JSON.stringify(user)])

  return null
}

const PressMoney = props => {
  const { settings, saveSettings } = use('settings')
  const [expireValues, setExpireValues] = React.useState(null)
  const { dispatch } = use('redux')
  let pressMoney = settings?.pressMoney

  const onSubmit = val => {
    let newValues = { ...val }
    newValues.expireSettings = newValues?.expireSettings?.length ? newValues.expireSettings.map(item => {
      if (moment(item?.expireTime).diff(new Date(), 's') <= 0) {
        return { ...item }
      } else {
        return item
      }
    }) : []
    newValues = { ...newValues, expireTime: null, durationTime: null }
    api({ name: 'core/setting' })
      .fetch('', { method: 'PATCH', body: JSON.stringify({ pressMoney: newValues }) })
      .then(({ json }) => {
        message.success(_t1('系统设置保存成功'))
        dispatch({ type: '@@iot/GET_SETTINGS' })
      })
  }

  return (
    <Page title={<><Icon svg={require('../icon/newIcons/系统设置.svg')} />{_t1('催款模块')}</>} className="systemcard">
      <C is='AntdI18n'>
        <C is="I18nSchemaForm"
          formKey={'press_for_money'}
          schema={schema()}
          component={DefaultLayout}
          onSubmit={(val) => onSubmit(val)}
          onChange={val => setExpireValues(val)}
          initialValues={pressMoney}
        />
      </C>
    </Page>
  )
}


export { PressMoney }
export default PressMoneyModal