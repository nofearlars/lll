import React from 'react';
import _, { set } from 'lodash'
import { Checkbox } from 'antd'

let option = [
    // {label: 'influxdb（时序数据）', value: 'influxdb'},
    { label: 'file server（媒体文件）', value: 'fileServer' },
    { label: 'HTML（前端文件）', value: 'html' },
    { label: 'postgres（基础数据）', value: 'mongodb' }
]
const plainOptions = [
    { value: 'dashboard', label: '画面' },
    { value: 'catalog', label: '目录' },
    { value: 'table', label: '工作表配置' },
    { value: 'report', label: '报表' },
    { value: 'flow', label: '流程' },
    { value: 'theme', label: '主题' },
    { value: 'setting', label: '系统配置' },
    { value: 'data_interface', label: '数据接口' },
    { value: 'component', label: '组件' },
    { value: 'cron', label: '日志清除' },
    { value: 'data_record', label: '数据分析记录' },
    { value: 'dept', label: '部门' },
    { value: 'message', label: '站内信' },
    { value: 'oauth_app', label: 'Oauth应用' },
    { value: 'resource_type', label: '资源类型' },
    { value: 'user', label: '用户' },
    { value: 'role', label: '角色' },
    { value: 'site', label: '站点' },
    { value: 'style', label: '风格' },
    { value: 'system_variable', label: '系统变量' },
    { value: 'table_data', label: '工作表记录' },
    { value: 'table_record', label: '资产配置' },
    { value: 'rule', label: '报警规则' },
    { value: 'script_setting', label: '自定义脚本' },
];
const BackupContent = (props) => {
    const { input: { onChange, value }, type, data } = props
    const { t: _t1 } = useI18n()
    let backupOptions = option
    if (type == 'restore' && data) {
        backupOptions = option.filter(item => {
            return data[item.value]
        })
    }
    if (type == 'mongoItem' && data) {
        backupOptions = plainOptions
    }
    const [checkedList, setCheckedList] = React.useState(value || ['fileServer', 'html', 'mongodb']);//'influxdb',
    const [indeterminate, setIndeterminate] = React.useState(!!value.length && value.length < backupOptions.length);
    const [checkAll, setCheckAll] = React.useState(value.length === backupOptions.length);
    const onCheckAllChange = e => {
        let all = e.target.checked ? backupOptions.map(item => item.value) : null
        setCheckedList(all);
        setIndeterminate(false);
        setCheckAll(e.target.checked);
        onChange(all)
    };
    const handle = (arg) => {
        setCheckedList(_.isEmpty(arg) ? null : arg);
        setIndeterminate(!!arg.length && arg.length < backupOptions.length);
        setCheckAll(arg.length === backupOptions.length);
        onChange(_.isEmpty(arg) ? null : arg)
    }

    React.useEffect(() => {
        setCheckedList(value || [])
        setIndeterminate(!!value.length && value.length < backupOptions.length);
        setCheckAll(value.length === backupOptions.length);
    }, [value])
    return <>
        <Checkbox style={{ lineHeight: '2rem' }} indeterminate={indeterminate} onChange={onCheckAllChange} checked={checkAll}>
            {_t1('全部')}
        </Checkbox><br />
        <Checkbox.Group onChange={handle} value={checkedList}>
            {backupOptions.map((item) => <div style={{ lineHeight: '2rem' }}>
                <Checkbox value={item.value}>{item.label}</Checkbox><br />
            </div>)}
        </Checkbox.Group>
    </>
}

export default BackupContent