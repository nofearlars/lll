import { Modal, Upload } from 'antd';
import { PlusOutlined } from '@ant-design/icons';
import React from 'react';
import { api, config, app } from 'xadmin';
import { Icon, C } from 'xadmin-ui';
import _ from 'lodash'


const toUrl = (url) => {
  if (!url) return ''
  return url.startsWith('/rest') ? url : config('mediaUrl') + url
}
export default class Uploading extends React.Component {
  constructor(props) {
    super(props);
    const { input: { value } } = this.props
    this.state = {
      previewVisible: false,
      previewImage: '',
      fileList: value ? [{ uid: value, name: value, url: toUrl(value), }] : []
    }
  }
  handleCancel = () => this.setState({ previewVisible: false })

  handlePreview = (file) => {
    this.setState({
      previewImage: toUrl(file.url || file.thumbUrl),
      previewVisible: true,
    });
  }

  handleChange = ({ fileList }) => {
    const { input: { onChange } } = this.props
    if (fileList.length == 0) {
      onChange(null)
      this.setState({ fileList: [] })
      return false
    } else {
      const Errors = new Error('上传返回异常信息')
      this.setState({
        fileList: fileList.map(f => ({ ...f, url: toUrl(f?.url) }))
      })
      const fileurl = fileList[0] && fileList[0].response && fileList[0].response.url || fileList[0]?.url
      fileurl ? onChange(toUrl(fileurl)) : Errors
    }
  }

  render() {
    const { input, label, meta, field } = this.props
    const { previewVisible, previewImage, fileList } = this.state;
    const uploadButton = (
      <div>
        <Icon type="plus" />
        <div className="ant-upload-text">{_t1('上传图片')}</div>
      </div>
    );
    const ifMedia = app.apps.find(item => item.name === 'iot.media') // 判断是否加载媒体库模块
    return (
      <div className="clearfix">
        <div className='uploading' style={{ display: 'flex' }}>
          <Upload
            action={api({ name: 'media' }).getHost() + `core/media/${field.category || 'img'}`}
            style={{ display: 'none' }}
            accept="image/*"
            listType="picture-card"
            fileList={fileList}
            headers={_.omit(api({ name: 'media' }).getHeaders(), 'Content-Type')}
            onPreview={this.handlePreview}
            onChange={this.handleChange}
          >
            {fileList.length >= 1 ? null : uploadButton}
          </Upload>
          {
            ifMedia && <C
              is='MediaModal'
              uploadHidden
              uploadType='img'
              input={{
                value: fileList?.[0]?.url || fileList?.[0]?.response?.url,
                onChange: val => {
                  if (!val || val === '/rest') return
                  this.handleChange({
                    fileList: [{
                      uid: Math.random(),
                      name: val.split('/')[val.split('/').length - 1],
                      status: 'done',
                      url: val,
                    }]
                  })
                }
              }}
            >
              <div className='custom-media'>
                <div>
                  <PlusOutlined />
                  <div>{_t1('媒体库')}</div>
                </div>
              </div>
            </C>
          }
        </div>
        <Modal visible={previewVisible} footer={null} onCancel={this.handleCancel}>
          <img alt="example" style={{ width: '100%' }} src={previewImage} />
        </Modal>
      </div>
    )
  }
}
