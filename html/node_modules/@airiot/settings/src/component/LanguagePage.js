import React from 'react'
import { api, use } from 'xadmin'
import _ from 'lodash'
import locales from '../../locales'
import { C } from "xadmin-ui";
import { SchemaForm } from 'xadmin-form'
import { Tree, Button, Modal, Card, Form, Select, message, Popconfirm, Tooltip, Input, Space, Checkbox } from 'antd';
const { Option } = Select;
const LanguageBaseInfo = (languageTypes,record) => {
    return {
        'type': 'object',
        'properties': {
            'changelanguage': {
                'title': _r('语言选择'),
                type: 'object',
                field: {
                    component: props => <LanguageSelect {...props} languageTypes={languageTypes} record={record}/>
                }
            },
            'name': {
                'title': _r('显示名称'),
                'type': 'string',
            },
            'commonlanguage': {
                'title': _r('默认语言'),
                'type': 'boolean',
            },
            'contentlanguage': {
                'title': _r('内容多语言'),
                'type': 'boolean',
            },    
        }
        ,
        form: ['*']
    }
    }

  const LanguageSelect = (props) => {
    const [baseLanauage, setBaseLanauage] = React.useState()
    const { form } = use('form')
    React.useEffect(() => {
        getLanauage()
    }, [])

    const getLanauage = () => {
        api({ name: 'core/auth/i18n' })
            .fetch('', {})
            .then(({ json }) => {
                setBaseLanauage(json)
            })
            .catch((err) => {
                console.log(err)
            })
    }
    const onChange = value => {
        if (value) {
            const code = baseLanauage.filter(item => item.name == value)[0]?.code
            form.change('name', value)
            form.change('code', code)
        }
        props.input.onChange(value)
      }
    return (<div style={{ display: 'flex' }}>
        <Select onChange={onChange} value={props.input?.value}>
            {baseLanauage && baseLanauage.map((item) => (<Option key={item.name} >{item.name}</Option>))}
        </Select>
    </div>
    )
}
const I18nLanauage = (props) => {
    const { data, saveItem } = props
    const Languageschema = {
        type: 'object',
        properties: {
            lanageManage: {
                title: '语言管理',
                type: 'array',
                items: {},
                field: {
                  component: props => {
                    const value = props?.input?.value
                    const [ record, setRecord ] = React.useState({ type: 'edit', data: null })
                    return <C is="WarningKind" {...props} schema={LanguageBaseInfo(value, record)} type="lanageManage" 
                      getAction={(record) => { setRecord({ ...record, data: record }) }}
                    /> 
                  }
                },
              },
        },
        form:['*']
    }
      const onSubmit = (value) => {
       saveItem({
          ...value,
          i18n:{
            lanageManage:value?.lanageManage
          }
        }) 
      }
    return (
        <>
            <SchemaForm
                // formKey={'setLoginGuide'}
                schema={Languageschema}
                // component={DefaultLayout}
                onSubmit={onSubmit}
                initialValues={data?.i18n}
            />
        </>
    )
}
export default {
    name: 'iot-language-setting',
    locales,
    'settings.schema': app => (props, cb) => {
        cb(null, {
            name: 'languageSettings',
            title: _r('国际化配置'),
            parentIndex: 'language',
            renderComponent: props => <I18nLanauage {...props}></I18nLanauage>
        })
    }
}