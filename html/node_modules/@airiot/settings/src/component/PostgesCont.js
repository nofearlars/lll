import React from 'react';
import _, { set } from 'lodash'
import { Checkbox } from 'antd'

let typeList = [
    { title: '可视化', key: '_dashboard' },
    { title: '数据管理', key: 'data', },
    { title: '权限', key: 'auth', },
    { title: '报警规则', key: 'rule', },
    { title: '系统配置', key: 'setting', },
    { title: '数据接口', key: 'data_interface', },
    { title: '日志清除配置', key: 'cron', },
    { title: '报表', key: 'report', },
    { title: '站内信', key: 'message', },
    { title: 'Oauth应用', key: 'app', },
    { title: '数据分析查询记录', key: 'data_record', },
    { title: '数据字典', key: 'system', },
    { title: '主题', key: 'theme', },
    { title: '流程', key: 'flow', },
]
const plainOptions = [
    //============可视化========
    //--------联动-----------
    { value: 'dashboard', label: '画面', type: '_dashboard' },
    { value: 'catalog', label: '目录', type: '_dashboard' },
    { value: 'site', label: '站点', type: '_dashboard' },
    { value: 'component', label: '组件', type: '_dashboard' },
    //---------------------
    { value: 'style', label: '风格', type: '_dashboard' },
    { value: 'script_setting', label: '画面脚本', type: '_dashboard' },
    { value: 'resource_type', label: '资源类型', type: '_dashboard' },
    //===========end=========
    //==========数据管理
    { value: 'table', label: '数据表配置', type: 'data' },
    { value: 'table_record', label: '设备配置', type: 'data' },
    { value: 'table_data', label: '数据表记录', type: 'data' },
    { value: 'dept', label: '部门', type: 'data' },
    //===========end==========
    //=========权限============
    { value: 'user', label: '用户', type: 'auth' },
    { value: 'role', label: '角色', type: 'auth' },
    //===========end==========
    //=========报警规则============
    { value: 'rule', label: '报警规则', type: 'rule' },
    //===========end==========
    //=========系统配置============
    { value: 'setting', label: '系统配置', type: 'setting' },
    //===========end==========
    //=========数据接口============
    { value: 'data_interface', label: '数据接口', type: 'data_interface' },
    //===========end==========
    //=========日志清除配置============
    { value: 'cron', label: '日志清除', type: 'cron' },
    //===========end==========
    //=========报表============
    { value: 'report', label: '报表', type: 'report' },
    { value: 'catalog', label: '目录', type: 'report' },
    // 目录？
    //===========end==========
    //=========站内信============
    { value: 'message', label: '站内信', type: 'message' },
    //===========end==========
    //=========Oauth============
    { value: 'oauth_app', label: 'Oauth应用', type: 'app' },
    //===========end==========
    //=========数据分析============
    { value: 'data_record', label: '数据分析记录', type: 'data_record' },
    //===========end==========
    //=========数据字典============
    { value: 'system_variable', label: '系统变量', type: 'system' },
    //===========end==========
    //=========主题============
    { value: 'theme', label: '主题', type: 'theme' },
    //===========end==========
    //=========流程============
    { value: 'flow', label: '流程', type: 'flow' },
    //===========end==========
];
const defaultData = {
    '_dashboard': ['dashboard', 'catalog', 'site', 'component', 'style', 'script_setting', 'resource_type'],
    'data': ['table', 'table_record', 'table_data', 'dept'],
    'auth': ['user', 'role'],
    'rule': ['rule'],
    'setting': ['setting'],
    'data_interface': ['data_interface'],
    'cron': ['cron'],
    'report': ['report', 'catalog'],
    'message': ['message'],
    'app': ['oauth_app'],
    'data_record': ['data_record'],
    'system': ['system_variable'],
    'theme': ['theme'],
    'flow': ['flow'],
}
const style = {
    // background: '#f6f5fa',
    borderRadius: '5px',
    color: '#fff',
    padding: '0px 5px',
    marginBottom: '5px',
}

//联动
let linkage = {
    _dashboard: ['dashboard', 'catalog', 'site', 'component'],
    data: ['table', 'table_record', 'table_data', 'dept'],
    table_record: ['setting']
}

const CheckboxItem = ({ item, onChange, data }) => {
    let _list = plainOptions.filter(o => o?.type == item?.key)
    const [checkedItemList, setCheckedItemList] = React.useState([]);
    const [itemIndeterminate, setItemIndeterminate] = React.useState(false);
    const [itemState, setItemState] = React.useState(null);
    React.useEffect(() => {
        let len = data[item?.key] || []
        setCheckedItemList(len)
        setItemIndeterminate(!!len.length && len.length < _list.length)
    }, [data])
    const onCheckItemAllChange = e => {
        let all = e.target.checked ? _list.map(item => item.value) : []
        setCheckedItemList(all);
        setItemIndeterminate(false);
        onChange(all, item.key)
    };
    const itemhandle = (arg) => {
        let isLinkage = _.find(arg, o => linkage[item?.key]?.includes(o)) && item?.key == '_dashboard'
        let inter = _.intersection(arg, data[item?.key])

        let isInter = _.find(inter, o => linkage[item?.key]?.includes(o))
        console.log(item?.key, isLinkage);
        let _arg
        if (item?.key == 'data') {
            onChange(['user','role'], 'auth')
            if (arg.includes('table_record')) {
                onChange(['setting'], 'setting')
            }
        }
        if (!isInter) {
            _arg = isLinkage ? _.unionBy(arg, linkage[item?.key]) : arg
            setCheckedItemList(_.isEmpty(_arg) ? [] : _arg);
            setItemIndeterminate(!!_arg.length && _arg.length < _list.length);
            onChange(_arg, item.key)
        } else {
            const result = _.differenceWith(data[item?.key], arg, _.isEqual);
            let a = linkage[item?.key]?.includes(result[0])
            _arg = a ? _.without(arg, ...linkage[item?.key]) : arg
            setCheckedItemList(_.isEmpty(_arg) ? [] : _arg);
            setItemIndeterminate(!!_arg.length && _arg.length < _list.length);
            onChange(_arg, item.key)
        }
    }
    return <div style={style} className='restore-bar'>
        <Checkbox checked={_list.length == checkedItemList.length} indeterminate={itemIndeterminate} onChange={onCheckItemAllChange} >
            <div style={{ width: '120px' }}>{item.title}</div>
        </Checkbox>
        <Checkbox.Group onChange={itemhandle} value={checkedItemList}>
            {_list.map((item) => <Checkbox value={item.value}>{item.label}</Checkbox>)}
        </Checkbox.Group>
    </div>
}
const PostgesCont = (props) => {
    const { input: { onChange }, type, data } = props
    const { t: _t1 } = useI18n()
    const [checkedList, setCheckedList] = React.useState([]);//'influxdb',
    const [indeterminate, setIndeterminate] = React.useState(false);
    const [checkAll, setCheckAll] = React.useState({});
    const onCheckAllChange = e => {
        setCheckAll(e.target.checked ? defaultData : {});
    };

    React.useEffect(() => {
        let arr = []
        Object.keys(checkAll)?.map(o => {
            arr = [...arr, ...checkAll[o]]
        })
        onChange([... new Set(arr)])
    }, [checkAll])
    const customChange = (arg, key) => {
        if (_.isEmpty(arg)) {
            let temp = _.cloneDeep(checkAll)
            delete temp?.[key]
            setCheckAll(temp)
        } else {
            setCheckAll(state => ({
                ...state,
                [key]: arg
            }))
        }
    }

    return <>
        <Checkbox style={{ lineHeight: '2rem' }} indeterminate={!!Object.values(checkAll).length && Object.values(checkAll).length < Object.values(typeList).length} onChange={onCheckAllChange} checked={Object.values(checkAll).length == typeList.length}>
            {_t1('全部')}
        </Checkbox><br />
        {data && typeList.map((item) => <div style={{ lineHeight: '2rem' }}>
            <CheckboxItem item={item} onChange={customChange} data={checkAll} />
        </div>)}
    </>
}

export default PostgesCont