import React from 'react';
import _, { set, reject } from 'lodash'
import { Upload, Button, Progress, Modal, message, Form, Input } from 'antd'
import { api, config, use } from 'xadmin';
import { useRecoilState } from 'recoil'

const BackupContent = (props) => {
  const { t: _t1 } = useI18n()
  const { activeKey } = props
  const [totle, setTotle] = React.useState()
  const [percent, setPercent] = React.useState()
  const [visible, setVisible] = React.useState(false)
  const [password, setPassword] = React.useState(null)

  const headers = api({ name: '' }).getHeaders()
  const { atoms } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)

  const ConfirmForm = () => {
    return <Form labelCol={{ span: 4 }}
      wrapperCol={{ span: 20 }}>
      <Form.Item label={_t1('验证码')} name="password">
        <Input onChange={(arg) => setPassword(arg.target.value)} />
      </Form.Item>
    </Form>
  }
  const prop = {
    name: 'file',
    action: api({ name: '' }).getHost() + ('core/backup/upload' + (password ? `?password=${password}` : '')),
    showUploadList: false,
    headers: headers['x-request-project'] ? {
      'Authorization': headers.Authorization,
      'x-request-project': headers['x-request-project'],
      'X-Access-Path': 'admin'
    } : {
      'Authorization': headers.Authorization,
      'X-Access-Path': 'admin'
    },
    onChange: (arg) => {
      const { file: { status, response }, event } = arg
      setVisible(true)
      if (event) {
        let num = (event.loaded / 1024 / 1024).toFixed(2)
        let _percent = (num / totle) * 100
        setPercent(_percent < 100 ? _percent.toFixed(2) : 99)
      }
      if (status == "uploading") return
      if (response?.status == "OK") {
        message.success(_t1('导入成功！'))
        setPercent(100)
        setWheres(wheres => ({ filters: { "type": activeKey == 'reduction' ? "import" : 'export', 'status': 'succeed' } }))
      } else {
        message.error(response.message)
      }
      setVisible(false)
      setTotle(null)
      setPercent(0)
    },
    beforeUpload: (file) => {
      const { size } = file
      setTotle((size / 1024 / 1024).toFixed(2))
      return new Promise((resolve, reject) => {
        Modal.confirm({
          title: _r('请填写验证码'),
          content: <ConfirmForm />,
          cancelText: _t1("取消"),
          okText: _t1("确定"),
          onOk: () => {
            resolve(file)
          },
          onCancel: () => {
            resolve(file)
          }
        })
      })
    }
  };
  return <>
    <Modal visible={visible} footer={[]} onCancel={() => setVisible(false)} closable={false}>
      <Progress percent={percent || 0} />
    </Modal>
    <Upload {...prop}>
      <Button >{_t1('上传备份')}</Button>
    </Upload>
  </>

}

export default BackupContent