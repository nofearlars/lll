import React, { useState, useEffect } from 'react'
import { Table, Input, Button } from 'antd'
import { Icon } from 'xadmin-ui'
import { app } from 'xadmin'

const PermissionConfig = props => {
  const { input: { value, onChange } } = props
  const [data, setData] = useState([])
  const widgets = app.get('dashboardWidgets')//app.getDashboardWidgets()

  useEffect(() => {
    let newData = Object.entries(widgets).map((key, val) => {
      return {
        key: key[0],
        name: key[1].title
      }
    })
    setData(newData)
  }, [JSON.stringify(widgets)])

  const getColumnSearchProps = dataIndex => ({
    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (
      <div style={{ padding: 8 }}>
        <Input
          placeholder={'名称'}
          value={selectedKeys[0]}
          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}
          onPressEnter={() => handleSearch(selectedKeys, confirm, dataIndex)}
          style={{ width: 188, marginBottom: 8, display: 'block' }}
        />
        <Button
          type="primary"
          onClick={() => handleSearch(selectedKeys, confirm, dataIndex)}
          size="small"
          style={{ width: 90, marginRight: 8 }}
        >
          搜索
        </Button>
        <Button onClick={() => handleReset(clearFilters)} size="small" style={{ width: 90 }}>
          重置
        </Button>
      </div>
    ),
    filterIcon: filtered => (
      <Icon type="search" style={{ color: filtered ? '#1890ff' : undefined }} />
    ),
    onFilter: (value, record) =>
      record[dataIndex]
        .toString()
        .toLowerCase()
        .includes(value.toLowerCase()),
    onFilterDropdownVisibleChange: visible => {
      if (visible) {
        // setTimeout(() => this.searchInput.select());
      }
    },
    render: text => text
  })

  const handleSearch = (selectedKeys, confirm, dataIndex) => {
    confirm()
  }

  const handleReset = clearFilters => {
    clearFilters()
  }

  const rowSelection = {
    onChange: (selectedRowKeys, selectedRows) => {
      let selectValue = selectedRows.map(item => item.key)
      onChange(selectValue)
    },
    selectedRowKeys: value
  }

  const columns = [
    {
      title: _r('全选'),
      dataIndex: 'name',
      ...getColumnSearchProps('name')
    }
  ]

  return (
    <div>
      <Table
        rowSelection={{
          type: 'checkbox',
          ...rowSelection,
        }}
        columns={columns}
        dataSource={data}
        pagination={false}
        scroll={{ y: 300 }}
        size="small"
      />
    </div>
  )
}

export default PermissionConfig
