import _, { values } from 'lodash'
import React from 'react'
import { use, api, app } from 'xadmin'
import { selector, selectorFamily, useRecoilState, useRecoilValue, useSetRecoilState, useRecoilCallback } from 'recoil'
import { store } from './Store'


const atomsCache = new Map()

const selectorCreator = (recoilState, path) => {
  if (!recoilState) {
    return
  }
  const key = `selector.${recoilState?.key}${path ? '.' + path : ''}`
  if (atomsCache.has(key)) {
    return atomsCache.get(key)
  } else {
    const atomSelector = selector({
      key,
      get: ({ get }) => {
        const state = get(recoilState)
        if (path) return _.get(state, path)
        return state
      },
      set: ({ set, get }, newValue) => {
        const state = get(recoilState)
        let newState = newValue
        if (path) {
          newState = _.set({ ...state }, path, newValue)
        }
        return set(recoilState, newState)
      }
    })
    atomsCache.set(key, atomSelector)
    return atomSelector
  }
}

function useAtomState() {
  return useRecoilState(selectorCreator(...arguments))
}
function useAtomValue() {
  return useRecoilValue(selectorCreator(...arguments))
}
function useAtomSet() {
  return useSetRecoilState(selectorCreator(...arguments))
}

export default {
  'settings': props => {
    const { settings, dispatch } = use('redux', state => ({ settings: state.settings }))

    const getSettings = () => {
      dispatch({ type: '@@iot/GET_SETTINGS' })
    }

    const saveSettings = async (value) => {
      const { _t } = app.context
      const settings = await api({ name: 'core/setting' }).save(value)
      dispatch({ type: '@@iot/SAVE_SETTINGS', payload: settings, success: true })
      dispatch({
        type: '@@xadmin/ADD_NOTICE', payload: {
          type: 'success', headline: _t('Success'), message: _t('系统设置保存成功')
        }
      })
      location.reload()
    }

    return { ...props, settings, getSettings, saveSettings }
  },
  'setting.store': path => useAtomState(store, path),
  'setting.store.value': path => useAtomValue(store, path),
  'setting.store.set': path => useAtomSet(store, path)
}