import React from 'react'
import _ from 'lodash'
import { BorderOutlined } from '@ant-design/icons'
import { Avatar } from 'antd'
import { app, use, config } from 'xadmin'
import { Icon } from 'xadmin-ui';

const useMenuItems = (menuItems, canClick=true) => {
  const naigate = use('navigate')

  const onMenuClick = React.useCallback(e => {
    const url = e.item?.props?.url

    if (url && canClick) {
      if (url.indexOf('http') >= 0) {
        window.open(url)
      } else {
        naigate(url)
      }
    }
  }, [ naigate ])

  const items = React.useMemo(() => {
    const menus = menuItems.reduce((p, m) => {
      const pk = m.parent || ''
      return { ...p, [pk]: [ ...(p[pk]||[]), m ] }
    }, {})

    const convertItem = item => {
      let icon = item.icon || <BorderOutlined />
      
      if (icon && _.isString(icon)) {
        if (icon.indexOf('/') > -1) {
          icon = <Avatar className="nav-icon" shape="square" src={config('mediaUrl') + icon} />
        } else {
          const icons = app.get('icons')
          const svgIcon = _.find(icons, item => item.name == icon)
          if (svgIcon) {
            icon = <Icon className="nav-icon" svg={svgIcon.url} />
          }
        }
      }

      return {
        ...item,
        key: item.key || item.title,
        label: item.label || item.title,
        icon
      }
    }

    const find_childs = (key) => {
      return (menus[key] || []).map((r) => {
        const childs = find_childs(r.key || r.title)
        if(!_.isEmpty(childs) || !_.isEmpty(r.children)) {
          r = { ...r, children: [ 
            ...(r.children||[]).map(convertItem), 
            ...childs 
          ]}
        }
        return convertItem(r)
      }).filter(Boolean)
    }

    return find_childs('')
  }, [ menuItems ])

  return { items, onMenuClick }
}

export {
  useMenuItems
}