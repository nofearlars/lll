import React from 'react';
import AntdIcon, * as iconsMap from '@ant-design/icons';
import _ from 'lodash'

const fillTester = /-fill$/;
const outlineTester = /-o$/;
const twoToneTester = /-twotone$/;

function removeTypeTheme(type) {
  return typeof type == 'string' && type.replace(fillTester, '').replace(outlineTester, '').replace(twoToneTester, '');
}
const themeMap = {
  filled: 'filled',
  outlined: 'outlined',
  twoTone: 'twoTone'
};
function withThemeSuffix(type, theme) {
  let result = _.upperFirst(_.camelCase(type));
  let realTheme = _.upperFirst(themeMap[theme]);

  return result + realTheme;
} // For alias or compatibility

function alias(type) {
  let newType = type;

  switch (type) {
    case 'cross':
      newType = 'close';
      break;
    // https://github.com/ant-design/ant-design/issues/13007

    case 'interation':
      newType = 'interaction';
      break;
    // https://github.com/ant-design/ant-design/issues/16810

    case 'canlendar':
      newType = 'calendar';
      break;
    // https://github.com/ant-design/ant-design/issues/17448

    case 'colum-height':
      newType = 'column-height';
      break;

    default:
  }
  return newType;
}

const defaultColors = {
  primaryColor: '#FFFFFF',
  secondaryColor: '#FFFFFF',
}

const IconContext = React.createContext({})

const LegacyTypeIcon = ({ type, theme, ...props }) => {
  var computedType = withThemeSuffix(removeTypeTheme(alias(type)), theme || 'outlined');
  var targetIconComponent = iconsMap[computedType];
  return targetIconComponent ? React.createElement(targetIconComponent, props) : null;
};

export default ({ type, name, svg, ...props }) => {
  const { place } = React.useContext(IconContext)
  // const { settings = {} } = use('settings')
  const theme = {}

  if (svg) {
    let colors = theme.iconColors || defaultColors
    if (place && colors[place]) {
      colors = colors[place]
    }
    return (<AntdIcon {...props} component={(ps) => {
      return (<div {...ps}
        dangerouslySetInnerHTML={{
          __html: svg
            .replace(new RegExp(defaultColors.primaryColor, 'g'), colors.primaryColor)
            .replace(new RegExp(defaultColors.secondaryColor, 'g'), colors.secondaryColor)
        }} />)
    }} style={{ width: '1em', height: '1em' }} />)
  } else if (type || name) {
    return <LegacyTypeIcon type={type || name} {...props} />
  }

  return <AntdIcon />
}

export {
  IconContext
}
