import { Button, Tooltip, Modal, Form, Select } from 'antd';
import React from 'react';
import { api, use } from 'xadmin';
import { Icon } from 'xadmin-ui';
import { saveAs } from 'file-saver';
import XLSX from 'xlsx';
const { Option } = Select;

const TIPS = '保证导入的数据文字和系统中是一致的，如部门编号，带“*”的字段为必填项，请填写完整再上传，否则上传失败'
/* see Browser download file example in docs */
function s2ab(s/*:string*/)/*:ArrayBuffer*/ {
  const buf = new ArrayBuffer(s.length)
  const view = new Uint8Array(buf)
  for (let i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF
  return buf
}
// 根据model动态生成上传参数
const findColumns = (schema, prefix, columns) => {
  const properties = schema.items && schema.items.properties || {}
  let keys = schema.form ? (
    schema.form.indexOf('*') >= 0 ?
      Object.keys(properties) : schema.form.map(f => typeof f == 'string' ? f : f.key)) :
    Object.keys(properties)

  keys = [...keys,
  ...Object.keys(properties)
    .filter(k => keys.indexOf(k) == -1 && properties[k].type == 'object')]
    .filter(k => k != 'model')

  keys.forEach(key => {
    const p = properties[key]
    if (p.export === false) return
    const ifRequire = schema.items.required && schema.items.required.indexOf(key) > -1 ? '*' : ''
    if (!p) return
    if (p.type == 'object') {
      if (p.fieldType != undefined) {
        columns.push({
          title: prefix.title + p.title,
          name: prefix.name + (p.name || key),
          type: p.type
        })
      } else if (p.relateTo == undefined) {
        findColumns(p, { title: p.title + '-', name: prefix.name + key + '.' }, columns)
      }
    } else if (p.type == 'array') {
      if (p.fieldType != undefined) {
        columns.push({
          title: prefix.title + p.title + _t1('编号'),
          name: prefix.name + (p.name || key),
          type: p.type, fieldType: p.fieldType
        })
      }
    } else {
      columns.push({
        title: prefix.title + p.title,
        name: prefix.name + (p.name || key),
        type: p.type
      })
    }
  });
  return columns
}

const DownloadButtion = ({ field }) => {
  const onDownload = () => {
    const columns = findColumns(field.schema, { title: '', name: '' }, [])

    const ws = XLSX.utils.aoa_to_sheet([
      // [{ v: TIPS, s: { fill: { fgColor: { rgb: 'FFFFAA00' } } } }],
      columns.map(c => { return c.description ? { v: c.title, t: 's', c: [{ t: c.description }] } : { v: c.title, t: 's' } })
    ])
    // 根据配置的宽度生成表格宽度
    ws['!cols'] = columns.map(col => ({ wpx: col.width ? col.width : Math.max(45, col.title.length * 15) }))

    const wb = XLSX.utils.book_new()
    XLSX.utils.book_append_sheet(wb, ws)

    /* generate XLSX file */
    const wbout = XLSX.write(wb, { type: 'binary', bookType: 'xlsx' })
    /* send to client */
    saveAs(new Blob([s2ab(wbout)], { type: 'application/octet-stream' }), `${field.label}_导入模板.xlsx`)
  }

  return <Button onClick={onDownload} >{_t1('下载模板')}</Button>
}

const UploadComponent = props => {
  const { field, uploader, selectRule, setSelectRule } = props
  let canAdd = false
  const [visible, setVisible] = React.useState(false)
  const title = _t1('导入') + field.label ?? ''
  try {
    if (!use('model')?.model) canAdd = true
    canAdd = use('model.permission')['canAdd']
  } catch (error) {
  }

  const onChange = (value) => {
    setSelectRule(value)
  }

  return canAdd && (
    <span>
      <Tooltip title={_t1('导入')}>
        <Button onClick={() => { setVisible(true) }}><Icon name="import" /></Button>
      </Tooltip>
      <Modal
        title={title}
        destroyOnClose
        visible={visible}
        onCancel={() => setVisible(false)}
        footer={() => { }}
      >
        <Form.Item label={_t1('数据模板')} extra={_t1('请根据模板填写数据')}><DownloadButtion field={field} /></Form.Item>
        <Form.Item label={_t1('处理规则')}>
          <Select value={selectRule} defaultValue={'false'} style={{ width: 140 }} onChange={onChange}>
            <Option value="false">{_t1('报错提示并跳过')}</Option>
            <Option value="true">{_t1('覆盖更新')}</Option>
          </Select>
        </Form.Item>
        <Form.Item label={_t1('上传文件')}>
          <Button onClick={() => { uploader.click() }} >
            <Icon type="upload" />{_t1('上传')}
          </Button>
        </Form.Item>
      </Modal>
    </span>
  )
}

export default UploadComponent
