import React from 'react'
import _ from 'lodash'
import { Collapse, Input, Form, Col, Tooltip } from 'antd'
import { QuestionCircleOutlined } from '@ant-design/icons'
const Panel = Collapse.Panel

const CollapseGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && meta.error
  const extra = field.description || field.help

  const groupProps = { extra, required: field.required }

  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['help'] = _.isString(error) ? error : null
  }

  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Form.Item {...groupProps}>
      <Collapse bordered={false} defaultActiveKey={field.defaultClose ? undefined : ['0']}>
        <Panel className="collapse-group" header={label} key="0" style={{ border: 0, borderRadius: 5 }}>
          {controlComponent}
        </Panel>
      </Collapse>
    </Form.Item>
  )
}
const FieldGroup = ({ label, meta, input, field, tailLayout, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && (meta.error || meta.submitError)
  const extra = field.description || field.help
  const descriptionType = field.descriptionType
  const size = (field.option && field.option.groupSize) || attrs.groupSize || {
    labelCol: {
      xs: { span: 24 },
      sm: { span: 5 }
    },
    wrapperCol: {
      xs: { span: 24 },
      sm: { span: 19, offset: tailLayout ? 5 : 0 }
    }
  }

  const groupProps = { ...size, required: field.required }

  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['help'] = error
  }
  // description的展示方式
  if (descriptionType == 'bottom' && extra) {
    groupProps['extra'] = extra
  }

  const Label = label && (
    <>
      <span style={{ marginRight: extra && '2px' }} >{label}</span>
      {
        (!descriptionType && extra) && (
          <Tooltip placement="bottom" title={extra}>
            <QuestionCircleOutlined
              className="label-des"
              style={{ color: 'rgba(0,0,0,.45)', marginRight: extra && '2px' }}
            />
          </Tooltip>
        )
      }
    </>
  )
  const controlComponent = children ? children : (<Input {...input} {...attrs} />)

  return (
    <Form.Item
      label={Label}
      {...groupProps}>
      {controlComponent}
      {!label && field?.schema?.type == 'boolean' && extra ? <Tooltip placement="bottom" title={extra}>
        <QuestionCircleOutlined className="label-des" style={{ color: 'rgba(0,0,0,.45)' }} />
      </Tooltip> : null}
    </Form.Item>
  )
}

const InlineGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && (meta.error || meta.submitError)
  const extra = field.description || field.help
  const groupProps = { extra, required: field.required }

  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['help'] = error
  }

  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Form.Item {...groupProps}>
      {React.cloneElement(controlComponent, { inline: true })}
      {field.formText ? <span className="ant-form-text"> {field.formText}</span> : null}
    </Form.Item>
  )
}

const SimpleGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && (meta.error || meta.submitError)
  const extra = field.description || field.help
  const groupProps = { extra, required: field.required }

  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['help'] = error
  }

  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Form.Item label={label} {...groupProps}>
      {controlComponent}
      {field.formText ? <span className="ant-form-text"> {field.formText}</span> : null}
    </Form.Item>
  )
}

const ColGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && (meta.error || meta.submitError)
  const extra = field.description || field.help
  const size = (field.option && field.option.groupSize) || attrs.groupSize || {
    labelCol: {
      xs: { span: 24 },
      sm: { span: 8 }
    },
    wrapperCol: {
      xs: { span: 24 },
      sm: { span: 16 }
    }
  }

  const groupProps = { extra, ...size, required: field.required }

  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['help'] = error
  }

  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Col span={8} xs={24} sm={12} md={12} lg={8} xl={8} xxl={6}>
      <Form.Item label={label} {...groupProps}>
        {controlComponent}
        {field.formText ? <span className="ant-form-text">{field.formText}</span> : null}
      </Form.Item>
    </Col>
  )
}


export {
  CollapseGroup,
  FieldGroup,
  InlineGroup,
  SimpleGroup,
  ColGroup
}
