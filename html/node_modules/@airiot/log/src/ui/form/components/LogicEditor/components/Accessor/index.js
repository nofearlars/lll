// Core
import React from 'react'
import { TreeSelect } from 'antd'

// Helpers
import _ from 'lodash'

const Accessor = props => {

  const onChange = (node) => {
    props.onChange(node && node.value)
  }

  const convert_key = (key) => {
    let str = key
    if (key && key.indexOf('prefix:') > -1) {
      const keys = key.split('prefix:')
      str = <span>{keys[0]} <span style={{ color: '#ccc', fontSize: '0.7em' }}>( {keys[1]} )</span></span>
    }
    return str
  }

  const renderNodes = (data, prefix) => {
    return Object.keys(data).map(key => {
      const value = data[key]

      if (_.isPlainObject(value)) {
        return (
          <TreeSelect.TreeNode key={key + prefix} value={value}
            title={<span style={{ color: '#333', fontSize: '0.9em' }}>{convert_key(key)}</span>} isLeaf={false} selectable={false} >
            {renderNodes(value, key + prefix)}
          </TreeSelect.TreeNode>
        )
      } else if (_.isString(value)) {
        return <TreeSelect.TreeNode key={key + prefix} value={value} title={convert_key(key)} isLeaf={true}></TreeSelect.TreeNode>
      }
      return null
    }).filter(Boolean)
  }

  return (
    <TreeSelect
      allowClear
      style={{ minWidth: 200 }}
      value={props.value ? { value: props.value } : undefined}
      placeholder={_t1('请选择参数')}
      onChange={onChange}
      labelInValue={true}
      showSearch
      virtual={false}
      filterOption={(input, option) => (
        option.props.key.toLowerCase().indexOf(input.toLowerCase()) >= 0
      )}
    >
      {renderNodes(props.data, '')}
    </TreeSelect>
  )
}


export default Accessor
