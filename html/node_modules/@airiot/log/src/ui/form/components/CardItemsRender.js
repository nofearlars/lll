import React from 'react'
import { Card, Button, Modal, Row, Col, Popconfirm, Typography, Tooltip } from 'antd'
import { Icon } from 'xadmin-ui'
import app, { use } from 'xadmin'
import _ from 'lodash'

const errorFormat = error => {
  if (_.isPlainObject(error)) {
    return _.values(error).map(errorFormat).join(' ')
  } else if (_.isArray(error)) {
    return error.map(errorFormat).join(' ')
  } else {
    !_.isNil(error) && console.log(error)
    return error && error.toString()
  }
}

const CardItem = ({ name, title, onRemove, children, item, render: CardRender, index, error }) => {
  const [show, setShow] = React.useState(item !== undefined && _.isEmpty(item))
  const { form } = use('form')

  const actions = [
    <Icon onClick={() => setShow(true)} type="edit" />,
    <Popconfirm
      title={_t1('确定删除此项?')}
      onConfirm={onRemove}
      onCancel={() => { }}
      okText={_t1('确定')}
      cancelText={_t1('取消')}
    >
      <Icon type="delete" />
    </Popconfirm>
  ]
  const onCancel = () => {
    setShow(false)
    _.isEmpty(item !== undefined && item) && onRemove()
  }

  const cardTitle = error ? <Tooltip title={errorFormat(error)}><Typography.Text type="danger">{title}</Typography.Text></Tooltip> : title
  return (
    <Col xs={20} sm={16} md={12} lg={8} xl={4} xxl={3} style={{ marginTop: '.5rem' }}>
      {item == undefined ? null : (CardRender ? <CardRender error={errorFormat(error)} title={cardTitle} actions={actions} item={item || {}} index={index} /> : <Card
        title={cardTitle}
        actions={actions}
        index={index}
      >
        <div style={{ overflow: 'hidden', wordBreak: 'keep-all', whiteSpace: 'nowrap', textOverflow: 'ellipsis', padding: '10px' }}>
          {item && item.description || '未填写..'}
        </div>
      </Card>)}
      <Modal
        title={title}
        visible={show}
        width="70%"
        onOk={() => { setShow(false); form.submit() }}
        destroyOnClose
        onCancel={onCancel}
        cancelButtonProps={{ style: { display: 'none' } }}
        okButtonProps={{ disabled: error != undefined }}
      >
        {children}
      </Modal>
    </Col>
  )
}

const CardItemsRender = ({ name, input, fields, meta: { error }, search, field, fieldsBuilder, withAdd }) => {
  const vs = _.isArray(input.value) ? input.value : []
  const { items, label, searchFields = ['id', 'name'] } = field

  return (
    <>
      {withAdd !== false && <Button onClick={() => fields.push()}><Icon type="plus" /></Button>}
      {fields.length > 0 ?
        (
          <Row gutter={8} className="ant-table-add-border" style={{ marginTop: '-0.5rem' }}>
            {fields.map((name, index) => {
              const item = vs[index]
              return (!search || _.some(searchFields.map(k => item && item[k] && item[k].indexOf(search) >= 0))) ? (
                <CardItem
                  key={`items.${index}`}
                  name={name}
                  title={item && item.name || item && item.warningname || label + ' ' + (index + 1)}
                  onRemove={() => fields.remove(index)}
                  item={item}
                  render={field.cardRender}
                  index={index}
                  error={error ? error[index] : undefined}
                >
                  {fieldsBuilder(name, index)}
                </CardItem>
              ) : null
            }).filter(Boolean)}
          </Row>
        ) :
        null
      }
    </>
  )
}

export default CardItemsRender
