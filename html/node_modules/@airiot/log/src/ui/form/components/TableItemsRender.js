import React from 'react'
import { Card, Button, Modal, Row, Col, Popconfirm, Table, Tag } from 'antd'
import app, { use } from 'xadmin'
import { Icon, C } from 'xadmin-ui'
import _ from 'lodash'
// import { Table } from 'xadmin-ui'

const RowItemActions = ({ name, title, onRemove, children, item, error }) => {
  const [show, setShow] = React.useState(_.isEmpty(item))
  const { form } = use('form')

  const onCancel = () => {
    setShow(false)
    _.isEmpty(item) && onRemove()
  }

  return (
    <>
      <Icon onClick={() => setShow(true)} type="edit" />
      {' '}
      <Popconfirm
        title={_t1('确定删除此项?')}
        onConfirm={onRemove}
        onCancel={() => { }}
        okText={_t1('确定')}
        cancelText={_t1('取消')}
      >
        <Icon type="delete" />
      </Popconfirm>
      <Modal
        title={title}
        visible={show}
        width="70%"
        onOk={() => { setShow(false); form.submit() }}
        onCancel={onCancel}
        cancelButtonProps={{ style: { display: 'none' } }}
        okButtonProps={{ disabled: error != undefined }}
      >
        {children}
      </Modal>
    </>
  )
}

const getColumns = (fields) => {
  const columns = []
  fields.forEach(f => {
    if (f.type == 'fieldset' && f.fields) {
      columns.push({
        title: f.label,
        children: getColumns(f.fields)
      })
    } else {
      columns.push({
        title: f.label,
        dataIndex: f.name,
        key: f.name,
        field: f,
        fixed: f.name == 'id' || f.name == 'name',
        width: f.name == 'id' || f.name == 'name' ? 120 : undefined
      })
    }
  })
  return columns
}

const getDatas = (fields, v, prev = {}) => {
  fields.forEach(f => {
    if (f.type == 'fieldset' && f.fields) {
      prev = getDatas(f.fields, v, prev)
    } else {
      prev[f.name] = setValue(f, _.get(v, f.name))
    }
  })
  return prev
}

const setValue = (field, raw) => {
  if (field.type == 'number' || field.type == 'numselect') {
    return !_.isNil(raw) ? parseFloat(raw) : ''
  } else if (field.type == 'array') {
    try {
      return JSON.stringify(raw)
    } catch (error) {
      return '[]'
    }
  }
  return raw
}

const TableItemsRender = ({ name, input, fields, meta: { touched, error }, search, field, fieldsBuilder, withAdd, type, node, tags }) => {
  const { items, label, searchFields = ['id', 'name'] } = field
  const vs = _.isArray(input.value) ? input.value : []
  const tagsProps = tags && node && {
    title: _r('实时数据'),
    key: 'tags',
    fixed: 'right',
    width: 100,
    render: (text, record, index) => (
      <Tag color="red"><C is='DataTag' tag={vs[index]} node={node} /> {vs[index].unit || null}</Tag>
    )
  } || {}

  const columns = [...getColumns(items.fields), tagsProps, {
    title: _t1('操作1'),
    key: 'actions',
    fixed: 'right',
    width: 80,
    render: (text, record, index) => {
      const findIndex = _.findIndex(vs, (v) => v.id === record.id)
      return (
        <RowItemActions
          name={fields.name + '[' + findIndex + ']'}
          title={vs[findIndex].name || label + ' ' + (findIndex + 1)}
          key={`items.${findIndex}`}
          onRemove={() => fields.remove(findIndex)}
          item={vs[findIndex]}
          index={findIndex}
          error={error ? error[findIndex] : undefined}
        >
          {fieldsBuilder(fields.name + '[' + findIndex + ']', findIndex)}
        </RowItemActions>
      )
    }
  }]
  const dataSource = vs.map(v => (!search || _.some(searchFields.map(k => v[k] && v[k].indexOf(search) >= 0))) ? getDatas(items.fields, v, {}) : null).filter(Boolean)

  return (
    <>
      {withAdd !== false && <Button onClick={() => fields.push()}><Icon type="plus" /></Button>}
      {fields.length > 0 && <Table size="small" dataSource={dataSource} columns={columns} pagination={false} scroll={{ x: 2000, y: 800 }} />}
    </>
  )
}

export default TableItemsRender
