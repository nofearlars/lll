import React from 'react';
import { Menu, Card, Button } from 'antd';
import app from 'xadmin';
import models from './models';
import { HasPermission } from 'xadmin-auth';
import { C, Icon, Page, Loading } from 'xadmin-ui'
import { ModelBlock, Model } from 'xadmin-model'
import LogType from './LogType'
import locales from '../../locales'
// import './../guide/css/index.css'  // 用户有创建权限,不显示添加日志按钮
import { LogPage } from './models'
import ArchiveDropdown, { ReductionBtn } from './ArchiveBtn'

import ClearLogBtn from './component/ClearLogBtn'
import YmdwwpsPicker from './component/YmdwwpsPicker'


const logSchema = {
  name: 'log',
  resource: 'core/log',
  type: 'object',
  icon: 'log',//<Icon svg={require('../../icon/Log.svg')} />,
  title: _r('操作日志'),
  initQuery: false,
  properties: {
    time: {
      type: 'string',
      title: _r('操作时间'),
      format: 'date-time',
      width: 250,
    },
    data: {
      title: _r('内容'),
      type: 'string',
      // properties: {
      //   remark: {
      //     title: _r('备注'),
      //     type: 'string'
      //   }
      // },
      width: 300,
      // description: '通过操作内容查询时，会对操作类型的信息关联字段进行统一查询，任意一个关联字段满足条件均会查询回来'
    },
    user: {
      title: _r('操作人'),
      type: 'object',
      relateTo: 'User',
      items: { type: 'object', properties: {}, relateTo: 'User' },
      field: {
        effect: (f, form) => { }
      },
      width: 150
    },
    type: {
      type: 'string',
      title: _r('操作类型'),
      fieldType: 'log_type',
      width: 150
    },
    remoteAddr: {
      type: 'string',
      title: '操作IP',
      width: 150,
    },
    logObj: {
      type: 'string',
      title: _r('操作对象'),
      width: 250,
      // description: '通过操作对象查询时，会对操作类型的信息关联字段进行统一查询，任意一个关联字段满足条件均会查询回来'
    },
    // department: {
    //   type: 'array',
    //   title: _r('用户所属部门'),
    //   items: {
    //     type: 'object',
    //     name: 'Department',
    //     relateTo: 'Department',
    //     properties: {
    //       id: { type: 'string' },
    //       name: { type: 'string' }
    //     }
    //   },
    //   width: 250
    // },
    diff: {
      type: 'string',
      title: _r('操作内容'),
      canOrder: false,
      width: 500
    },
    message: { type: 'string', title: _r('日志信息'), showInList: false }
  },
  partialSave: true,
  forceGetItem: true,
  orders: { time: 'DESC' },
  // required: ['time', 'user', 'type', 'remoteAddr'],
  listFields: [
    'time', 'user', 'type',
    'remoteAddr', 'data', 'oldData',
    'logObj', 'node', 'model',
    'table', 'ext', 'dashboard',
    'event', 'eventHandler', 'warning',
    'diff', 'nodes', 'signature', //'department'
  ],
  form: [
    'time', 'user', 'type',
    'remoteAddr',
    'logObj', //'department',
    'diff', 'data'
  ],
  filters: {
    submenu: [
      'time',
      { key: 'type', type: 'filter_enum', component: LogType },
      'user', 'remoteAddr', 'logObj', 'data', { key: 'data', type: 'string' }
    ],
  },
  fieldRender: {
    // flowdata: ({ item, wrap: WrapComponent }) => {
    //   const data = getFlowData(item)
    //   return (
    //     <WrapComponent>
    //       {data}
    //     </WrapComponent>
    //   )
    // },
    errormessage: ({ item, wrap: WrapComponent }) => {
      const message = item.errormessage || item.elements.find(el => el.status == 'FAILED' && el.errorMessage)?.errorMessage
      return (
        <WrapComponent>
          {message}
        </WrapComponent>
      )
    },
    // status: ({ item, wrap: WrapComponent }) => {
    //   return (
    //     <WrapComponent>
    //       {item.status == 'COMPLETED' ?
    //         <Tag icon={<Icon type='check-circle' />} color="success">{_t1('已完成')}</Tag> :
    //         item.status == 'CREATED' ?
    //           <Tag icon={<Icon type='play-circle' />} color="processing">{_t1('进行中')}</Tag> :
    //           <Tag icon={<Icon type='exclamation-circle' />} color="error">{_t1('失败')}</Tag>}
    //     </WrapComponent>
    //   )
    // },
  },
  components: {
    DataEmpty: () =>  <Empty description={_t1("暂无数据")} image={require('../imgs/暂无数据空.png')} style={{padding:'20px'}} />
  },
  // batchActions: [],
  itemActions: [
    ({ item }) => <Button onClick={() => app.go(`/app/model/Flow/${item.flowid}/record/${item.id}/detail`)} >{_t1('查看')}</Button>
  ]
}

const LogRecord = props => {

  // const id = props.params.id
  const [schema, setSchema] = React.useState(logSchema)

  // React.useEffect(() => {
  //   api({ name: 'flow/flow' }).get(id).then(res => {
  //     setSchema({ ...schema, title: res.name + '流程日志' })
  //   })
  // }, [id])

  return (
    <Model modelKey={`log-record`} key={`log-record`} schema={schema} initialValues={{ wheres: { resetFilter: {} } }}>
      <Page title={schema.title} onBack={() => history.back()}>
        <ModelBlock name="model.list.submenu" />
        <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
          <C is="Model.Pagination" />
          <C is="Model.ListSubMenu" batchActions={null} />
        </div>
        <C is='Model.DataTable'></C>
        <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'end', marginTop: '.5rem' }}>
          <C is="Model.Pagination" />
        </div>
      </Page>
    </Model>
  )
}


export default {
  name: 'iot.log',
  components: {
    ClearLogBtn,
    YmdwwpsPicker,
    ArchiveDropdown,
    LogPage, ReductionBtn,
    DataEmpty: () =>  <Empty description={_t1("暂无数据")} image={require('../imgs/暂无数据空.png')} style={{padding:20}} />
  },
  locales,
  blocks: {
    'dashboard.main': () => {
      const { t: _t1 } = useI18n()
      return ([
        <Card bodyStyle={{ padding: 15, marginBottom: 10 }} title={_t1('操作日志')}>
          <Model name="Log" modelKey="Log_"  >
            <C is="Model.DataTable" size="small" /><br></br>
            <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
              <C is="Model.Pagination" />
              <C is="Model.ListSubMenu" />
            </div>
          </Model>
        </Card>, <br />,
        <Card bodyStyle={{ padding: 15 }} title={_t1('资产增加')}>
          <Model name="Node" modelKey="Node" initialValues={{
            filter: { order: { 'createTime': 'DESC' } }
          }}>
            <C is="Model.DataTable" size="small" /><br></br>
            <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
              <C is="Model.Pagination" />
              <C is="Model.ListSubMenu" />
            </div>
          </Model>
        </Card>
      ])
    }
  },
  menuItems: [
    { title: _r('操作日志'), key: 'business.log', url: '/app/model/Log/list', icon: 'Log', permission: 'log.view' },
    { title: _r('越权访问日志'), key: 'business.apipermission', url: '/app/model/Apipermission/list', icon: 'Log', permission: 'log.view' }
  ],
  frontMenuItems: [
    { title: _r('操作日志'), url: '/app/model/Log/list', icon: 'Log', permission: 'log.view' }
  ],
  routers: {
    '/app/': [
      {
        path: 'log',
      },
    ]
  },
  models,
  form_fields: {
    filter_enum_rewrite: {
      component: LogType
    },
  },
  filter_converter: [(f, schema, options) => {
    if (f.type == "filter_text" && schema.type == 'string' && schema.title == '操作类型') {
      f.type = 'filter_enum_rewrite'
    }
    return f
  }],
}

