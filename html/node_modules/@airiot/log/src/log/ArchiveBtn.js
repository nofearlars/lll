import React from 'react';
import { ModelWrap } from 'xadmin-model';
import { app, use, api } from 'xadmin';
import { Button, Popconfirm, Tooltip, Card, Empty, Modal, Form, message, Layout, Menu, Input, Dropdown, Col, Select } from 'antd';
// import WarningFields from './components/WarningFields';
// import WarningStat from './components/WarningStat';
// import WarningKindPage from './components/WarningInfoPage';
// import WarningLog from './components/WarningLog'
import DatePickerFilter from './component/DatePickerFilter'
import LogType from './LogType'
import { useRecoilState, useSetRecoilState, useRecoilValue } from 'recoil'

import { Icon, C, Loading } from 'xadmin-ui';
import { HasPermission } from 'xadmin-auth';
// import EditRemark from './components/Remark'

import _ from 'lodash'
import { SchemaForm } from 'xadmin-form'
import { _t } from 'xadmin-i18n';
const { Header, Footer, Sider, Content } = Layout
import {
  StopOutlined,
  FormOutlined,
  DeleteOutlined,
  PieChartOutlined,
  DesktopOutlined,
  ContainerOutlined,
  MailOutlined,
} from '@ant-design/icons'
import { Page, Model } from 'xadmin-ui'
import YmdwwpsPicker from './component/YmdwwpsPicker'


const opt = [{ value: 'day', name: _t1('天') }, { value: 'week', name: _t1('周') }, { value: 'month', name: _t1('月') }, { value: 'year', name: _t1('年') }]
const ArchiveModel = ({ setVisible, onSubmit, IconOnClick, onSelect, onAdd, setInitData, ...props }) => {
  const { title, width, visible, schema, initData, loading, active, setActive, searchArr, setSearchArr, conentLoading } = props
  
  const [state, setState] = React.useState({})
  const [arr, setArr] = React.useState([])
  const { model, modelDispatch, atoms } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  const url = props?.modelKey == 'Instruct' ? 'driver/archivecycle' : 'core/archivecycle'

  React.useEffect(() => {
    let query = {
      "limit": 30,
      "skip": 0,
      "sort": { "createTime": -1 },
      filter: {},
      // "project":{"taskName":1},
      "withCount": true
    }
    title !== _t1('一键归档') && api({ name: url }).fetch('?query=' + JSON.stringify(query), {})
      .then((arg) => {
        const { status, json } = arg
        if (status == 200) {
          setArr(json)
          setSearchArr(json)
        } else {
          message.error(arg)
        }
      })
  }, [state, visible])

  const onSearch = value => {
    setSearchArr([...arr].filter(item => item.name.indexOf(value.target.value) != -1))
  };
  const addPeriodic = () => {
    setState({
      name: null//moment(new Date()).format('YYYY-MM-DD_HH:mm:ss')
    })
    setActive(null)
  }
  const searchSelect = (id) => {
    api({ name: url }).fetch('/' + id, {})
      .then(({ status, json }) => {
        if (status == 200) {
          json.cycle = {
            cycle: json.cycle,
            cycle_type: json.cycle_type
          }
          setState({ ...json })
        } else {
          message.error(arg)
        }
      })
  }
  const remove = (i) => () => {
    setSearchArr([
      ...arr.slice(0, i),
      ...arr.slice(i + 1)
    ])
  }
  const FormLayout = ({ children, change, invalid, handleSubmit, submitting, onCancel, limits, ...props }) => {
    const { form, values: { name, type } } = use('form', state => ({ values: state && state.values }))

    React.useEffect(() => { schema.formEffect && schema.formEffect(form) }, [schema])

    if (props.errors && Object.keys(props.errors).length == 1 && props.errors.time) invalid = false
    // if (JSON.stringify(type) == '{}') invalid = true
    const isOnce = props.fields.length == 2
    return (
      <Form onSubmit={handleSubmit}>
        {
          <div style={{ width: '80%', margin: '20px auto' }}>{children}</div>
        }

        <div style={{ textAlign: 'right', margin: '40px 50px 0px 0px' }}>
          <Form.Item><br />
            {!active ? (isOnce ? <Button type="primary" onClick={()=>{handleSubmit(); setWheres(wheres=>({}))} } loading={submitting} disabled={invalid}>
              确定
                </Button> : <HasPermission FailureComponent={null}  permission="archivecycle.add">
                <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
                  确定
                </Button>
              </HasPermission>) : <HasPermission FailureComponent={null}  permission="archivecycle.edit">
                <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>{_t1('修改')}</Button>
              </HasPermission>
            }

            <Button style={{ marginLeft: 15 }} onClick={() => { setVisible(false); setState({}); setActive(null) }}>{_t1('取消')}</Button>
          </Form.Item>
        </div><br />
      </Form>
    )
  }

  const style = {
    padding: '15px',
    color: '#E38A0F',
    textAlign: 'center',
    background: '#F2EAD7',
    borderRadius: '4px'
  }
  return (
    <>
      <Modal
        title={title}
        visible={visible}
        footer={null}
        destroyOnClose
        width={width}
        // height={950}
        className="ArchiveModel"
        onCancel={() => {
          setVisible(false)
          setInitData && setInitData({})
        }}
      >
        {title == _t1('周期归档定义') ?
          <Layout style={{ padding: 10, height: 550, background: '#fff' }} className="warn-archive-model">
            <Sider width={250} style={{ borderRight: '1px solid #f0f0f0', overflow: 'auto' }}>
              <div style={{ width: '220px', margin: '10px auto' }}>
                <Input placeholder="模糊搜索周期名称..." onChange={onSearch} />
              </div>
              {loading ? <Loading /> :
                <Menu mode="inline" selectedKeys={active} onSelect={(arg) => {
                  setActive(arg.key);
                  searchSelect(arg.key)
                }}>
                  {searchArr?.map((item, index) => <Menu.Item key={item.name}>
                    <TableTile title={item.name} remove={remove} index={index} data={item} setState={setState} setActive={setActive} />
                  </Menu.Item>)}
                </Menu>
              }
            </Sider>
            <Layout style={{ padding: 0, overflow: 'auto' }} className="clear-model">
              <Content style={{ padding: 10 }}>

                {<Button type={'primary'} onClick={addPeriodic}>{_t1('添加周期')}</Button>}
                {_.isEmpty(state) ? <div style={{ textAlign: 'center', marginTop: 30 }}>
                  <span style={style}>
                    {/* <Icon svg={require('./../../icon/warning.svg')} /> */}
                    <span style={{ marginLeft: 5 }}>{_t1('快去添加周期归档或者选择已有周期归档进行编辑')}</span>
                  </span>
                  {/* <C is='NoData' style={{ padding: 20 }} /> */}
                  {/* <Empty description="" image={require('./../../icon/homeIcon/noData.png')} imageStyle={{ height: 200 }} style={{ margin: '50px 0' }} /> */}
                  <Empty description={_t1("暂无数据")} image={require('../imgs/暂无数据空.png')} imageStyle={{ height: 200 }} style={{ margin: '50px 0' }} />
                </div> : <C is="I18nSchemaForm" formkey={'ArchiveBtn'}
                  schema={schema}
                  initialValues={state}
                  onSubmit={onSubmit}
                  component={FormLayout}
                  />}
              </Content>
            </Layout>
          </Layout> : <C is="I18nSchemaForm" formKey={'ArchiveDefinition'} schema={schema}
            initialValues={initData}
            component={FormLayout}
            onSubmit={onSubmit}
          />}

      </Modal>
    </>

  )
}

const logArchiveSchema = {
  type: 'object',
  properties: {
    name: {
      title: _r('周期名称'),
      type: 'string'
    },
    cycle: {
      type: 'object',
      title: _r('归档周期'),
      // field: { expand: true },
      properties: {
        cycle: {
          title: _r('数量'),
          type: 'number',
          field: {
            validate: value => {
              return (/^(0+)|[^\d]+/g.test(value) ? '只能为大于0的正整数' : null)
            }
          }
        },
        cycle_type: {
          title: _r('日期单位'),
          type: 'string',
          field: {
            component: ({ input }) => {
              return <Select {...input} style={{ maxWidth: '200px' }}>
                {opt.map(item => <Option value={item.value}>{item.name}</Option>)}
              </Select>
            },
            effect: (f, form) => {
              const { initialValues } = form.getState()
              if (initialValues && !_.isEmpty(initialValues)) {
                if (f.value != initialValues.cycle_type) {
                  form.change('time_config', null)
                }
              }
            },
            validate: value => {
              return !value ? '请选择日期单位' : null
            }
          }
        }
      },
      description: "周期定义后，将会按照周期定时归档周期内的日志信息"
    },
    type: {
      title: _r('归档类型'),
      // type: 'array',
      // items: {},
      description: _t1('不选则为全部类型'),
    },
    time_config: {
      type: 'object',
      title: _r('归档时间'),
      properties: {},
      field: {
        component: YmdwwpsPicker,
        validate: (value, values) => {
          const pl = values && values.planCycle || undefined
          if (JSON.stringify(value) == '{}') return false
          if (!value || typeof value == 'string') return false
          if (values.type != 'hms' && values.type != 'minute') {
            if (value && !value.hms) return '请选择执行时间'
          }
          if (pl == 'year') {
            if (!value.hour) {
              return '请选择执行月'
            } else if (!value.day) return '请选择执行日'
          } else if (pl == 'week') {
            if (!value.week) return '请选择执行日'
          } else if (pl == 'month') {
            if (!value.day) return '请选择执行日'
          }
        }
      },
      description: '可定义每个周期归档执行时间，不定义默认周期的00:00:00执行'
    },
  },
  // formEffect: form => {
  // },
  form: [
    'name',
    { key: 'cycle', validate: (value) => (value < 1 || value && value.toString().indexOf('.') != -1) ? '归档周期不能是负数或0或小数' : null },
    { key: 'type', type: 'filter_enum', component: LogType }, '*'
  ],
  required: ['name', 'cycle']
}

const TableTile = (props) => {
  const { title, data, setState, setActive } = props
  const url = props?.modelKey == 'Instruct' ? 'driver/archivecycle' : 'core/archivecycle'
  
  const onDisable = () => {
    api({ name: url }).fetch('/' + data.name, {
      method: 'PATCH',
      body: JSON.stringify({ ...data, disabled: !data.disabled })
    }).then((arg) => {
      const { json } = arg
      if (arg.status == 200) {
        message.success('修改成功')
        let obj = []
        json.cycle = {
          cycle: json.cycle,
          cycle_type: json.cycle_type
        }
        setState({ ...json })
      } else {
        message.error(arg.message || arg)
      }
    }).catch(err => {
      message.error(JSON.parse(err.message).item || err.message)
    })
  }
  const onDelete = () => {
    api({ name: url }).fetch('/' + data.name, {
      method: 'DELETE'
    }).then((arg) => {
      if (arg.status == 200) {
        message.success('删除成功')
        setState({})
        setActive(null)
      } else {
        message.error(arg)
      }
    }).catch(err => {
      message.error(JSON.parse(err).item)
    })
  }

  return <div style={{ width: '16rem', display: 'flex', justifyContent: 'space-between' }}>
    <span>{title}</span>
    <span style={{ marginRight: 50 }}>
      <HasPermission FailureComponent={null}  permission="archivecycle.edit">
        <Popconfirm
          title={!data.disabled ? _t1('确定禁用此项?') : _t1('确定启用此项?')}
          onConfirm={onDisable}
          onCancel={() => { }}
          okText={_t1('确定')}
          cancelText={_t1('取消')}
        >
          <Icon type="stop" style={{ color: data.disabled ? 'red' : '#36af57' }} />
        </Popconfirm>
      </HasPermission>
      <HasPermission FailureComponent={null}  permission="archivecycle.delete">
        <Popconfirm
          title={_t1('确定删除此项?')}
          onConfirm={onDelete}
          onCancel={() => { }}
          okText={_t1('确定')}
          cancelText={_t1('取消')}
        >
          <Icon type="delete" />
        </Popconfirm>
      </HasPermission>
    </span>
  </div>
}
const ArchiveDefinitionBtn = props => {
  const { getItems } = use('model.getItems')
  const modelKey = props?.modelKey || 'Log'
  const ArchiveSchema = modelKey == 'Instruct' ? {
    ...props?.ArchiveSchema,
    properties: {
      ...props?.ArchiveSchema.properties,
      cycle: logArchiveSchema.properties.cycle,
      time_config: logArchiveSchema.properties.time_config,
    }
  } : logArchiveSchema
  
  const [visible, setVisible] = React.useState(false)
  const [loading, setLoading] = React.useState(false)
  const [initData, setInitData] = React.useState(null)
  const [search_value, setSearch_value] = React.useState(null)
  const [menuData, setMenuData] = React.useState([])
  const [data, setdata] = React.useState([])
  const [currentKey, setCurrentKey] = React.useState(null)
  const [conentLoading, setConentLoading] = React.useState(false)
  const [active, setActive] = React.useState(null)
  const [searchArr, setSearchArr] = React.useState([])
  const { modelDispatch } = use('model')

  const showModal = (e) => {
    querydata()
    setVisible(true)
    setInitData({})
    setCurrentKey(null)
  }

  const IconOnClick = (key, item) => {
    if (key === 'stop') {
      item['disabled'] = !item.disabled
      api({ name: '' }).fetch('', {
        method: 'PATCH',
        body: JSON.stringify(item)
      }).then(({ status }) => {
        if (status == 200) {
          querydata()
          message.success(`${item.disabled ? '禁用' : _t1('启用')}成功`)
        }
      })
    } else {
      api({ name: '/archiveSetting' })
        .delete(item.id)
        .then((json) => {
          if (json.status == "OK") {
            message.success('删除成功')
            querydata()
            setMenuData([])
            setCurrentKey(null)
            setInitData({})
          }
        })
    }
  }

  const onSelect = ({ item, key }) => {
    setCurrentKey(key)
    setConentLoading(true)
    // api({ name: 'warning/warning' }).fetch('/archiveSetting/' + key, {}).then(({ json }) => {
    //   setInitData(json)
    //   setConentLoading(false)
    // })
  }

  const querydata = (id) => {
    const url = props?.modelKey == 'Instruct' ? 'driver/archivecycle' : 'core/archivecycle'
    
    const querys = { "limit": 10, "skip": 0, "sort": { "createTime": -1 }, project: { disabled: 1 }, filter: {}, "withCount": true }
    Object.keys(ArchiveSchema.properties).forEach(key => { querys.project[key] = 1 })
    const querystr = encodeURIComponent(JSON.stringify(querys))
    setLoading(true)
    api({ name: url }).fetch('?query=' + querystr, {})
      .then(({ json }) => {
        setSearchArr(json)
        // setSearch_value(json)
        // const data = search_value && json.filter(item => item.name.indexOf(search_value) !== -1) || json
        // setMenuData(data)
        setLoading(false)
      })
  }

  const onSubmit = (value) => {
    const url = props?.modelKey == 'Instruct' ? 'driver/archivecycle' : 'core/archivecycle'

    if (value) {
      value.type = _.isObject(value.type) ? value?.type['$in'] : value.type
      api({ name: url }).fetch(`${active ? '/' + active : ''}`, {
        method: active ? 'PATCH' : 'POST',
        body: JSON.stringify({ ...value, ...value.cycle })
      }).then(({ status, json }) => {
        if (status >= 200 && status < 400) {
          message.success('保存成功')
          querydata()
          setActive(value.name)
          // setTimeout(() => getItems(), 800)
          // setCurrentKey([json.InsertedID || value.id])
          // onSelect({ key: json.InsertedID || value.id })
        }
      })
        .catch(({ json }) => {
          message.error(json)
        })
    }
  }

  const onSearch = (e) => {
    const { value } = e.target
    setSearch_value(value)
    const newdata = data.filter(item => item.name.indexOf(value) !== -1)
    setMenuData(newdata)
  }

  return (<>
    <div onClick={showModal}>{_t1('周期归档定义')}</div>
    <ArchiveModel
      title={_t1('周期归档定义')}
      width="62%"
      visible={visible}
      currentKey={currentKey}
      setCurrentKey={setCurrentKey}
      onSelect={onSelect}
      IconOnClick={IconOnClick}
      menuData={menuData}
      schema={ArchiveSchema}
      onSubmit={onSubmit}
      setInitData={setInitData}
      initData={initData}
      onSearch={onSearch}
      setVisible={setVisible}
      loading={loading}
      conentLoading={conentLoading}
      active={active} setActive={setActive}
      searchArr={searchArr} setSearchArr={setSearchArr}
    />
  </>
  )
}

const OneClickArchive = props => {
  const modelKey = props?.modelKey || 'Log'
  const ArchiveSchema = modelKey == 'Instruct' ? props?.ArchiveSchema : logArchiveSchema
  const { getItems } = use('model.getItems')
  
  const [visible, setVisible] = React.useState(false)
  const { modelDispatch } = use('model')

  const showModal = () => setVisible(true)

  const onSubmit = (value) => {
    const filter = {}
    if (value) {
      if (value.time) {
        filter['time'] = {}
        if (value.time.gte) filter['time']['$gte'] = value.time.gte
        if (value.time.lte) filter['time']['$lte'] = value.time.lte
      }
      if (value.type) filter['type'] = value.type
    }

    let url;
    if(modelKey == 'Instruct') {
      url = 'driver/archivecycle/archiveonce'
      filter['cycle_tyle'] = value?.cycle_tyle
      filter['tables'] = value?.tables
      filter['tableData'] = value?.tableData
      filter['users'] = value?.users
      filter['commands'] = value?.commands
    } else {
      url = 'core/archivecycle/archiveonce'
    }
    api({ name: url }).fetch('', {
      method: 'POST',
      body: JSON.stringify(filter)
    })
      .then(({ json }) => {
        message.success(json)
        setVisible(false)
        // setTimeout(() => getItems(), 800)
      })
  }

  const OneASchema = _.cloneDeep(ArchiveSchema)
  OneASchema.properties = _.omit(OneASchema.properties, 'cycle')
  OneASchema.properties = _.omit(OneASchema.properties, 'name')

  OneASchema.properties['time'] = {
    type: 'object',
    title: _r('归档时间'),
    format: 'date-time',
    description: '若只选择一个时间点，默认将时间点之前的报警信息全部归档',
    properties: {}
  }
  OneASchema.required = ['time']

  if(modelKey == 'Instruct') {
    OneASchema.form = [{ key: 'time', component: DatePickerFilter }, 'cycle_tyle', 'tables', 'tableData', 'users', 'commands' ]
  } else {
    OneASchema.form = [{ key: 'time', component: DatePickerFilter }, 
    { key: 'type', type: 'filter_enum', component: LogType }]
  }

  return (
    <>
      <div onClick={showModal}>{_t1('一键归档')}</div>
      <ArchiveModel
        title={_t1('一键归档')}
        visible={visible}
        schema={OneASchema}
        onSubmit={onSubmit}
        setVisible={setVisible}
      />
    </>
  )
}

const ArchiveDropdown = props => {
  const title = props?.modelKey == "Instruct" ? '指令日志' : '操作日志'
  
  const menu = (
    <Menu >
      <Menu.Item key="one" >
        <HasPermission FailureComponent={null}  permission="archivecycle.instant">
          <OneClickArchive {...props}/>
        </HasPermission>
      </Menu.Item>
      <Menu.Item key="def">
        <HasPermission FailureComponent={null}  permission="archivecycle.view">
          <ArchiveDefinitionBtn {...props}/>
        </HasPermission>
      </Menu.Item>
    </Menu>
  );
  return (
    <Dropdown.Button type="primary" style={{ marginLeft: 12, marginRight: 10 }} className="warningArchive"
      onClick={() => {
        if(props?.modelKey == "Instruct") {
          app.go('/app/model/DeviceArchive/list')
        } else {
          app.go('/app/model/Archive/list')
        }
      }} overlay={menu}>
      <Tooltip placement="bottomRight" title={_t1(`${title}可以进行一键归档或者周期归档的操作，减少页面的数据量`)}>
        <span>
          {_t1('归档信息')}
          </span>
      </Tooltip>
    </Dropdown.Button>
  )
}

const ReductionBtn = ({ selected, modelKey='' }) => {
  const { getItems } = use('model.getItems')
  const url = modelKey == 'Instruct' ? 'driver/archivedlog/restore/' : 'core/archivedlog/restore/'

  const onClick = () => {
    if (!selected.length) {
      message.error('请选择需要恢复的内容！')
      return
    }
    selected.map(item => {
      api({ name: url }).fetch(item?.id, {
        method: 'POST'
      })
        .then((arg) => {
          const { status, json } = arg
          if (status == 200) {
            message.success('恢复成功！')
            setTimeout(() => getItems(), 800)
          } else {
            message.error(arg)
          }
        })
    })

  }
  return <Button type="primary" onClick={onClick}>{_t1('恢复日志')}</Button>
}

export default ArchiveDropdown
export { ReductionBtn }