import React, { useEffect } from 'react';
import { Button, Card, Empty, Input, Popover, Space, Select, Popconfirm, message, Form, Row, Col, DatePicker } from 'antd';
import { app, use, api } from 'xadmin';
import { Model } from 'xadmin-model'
import { ModelBlock } from 'xadmin-model'
import { Icon, Page, C } from 'xadmin-ui'
import _ from 'lodash'
// import NoData from '../../components/NoData'
import LogType from './LogType'
// import './../guide/css/index.css'
import { BaseFilter } from 'xadmin-model/lib/filter'
import LoginExport from './LoginExport'
import ClearLogBtn from './component/ClearLogBtn'
import moment from 'moment'
import ArchiveDropdown, { ReductionBtn } from './ArchiveBtn'
import { HasPermission } from 'xadmin-auth'
import { ArrowLeftOutlined } from '@ant-design/icons'
import { useRecoilState } from 'recoil'

const { RangePicker } = DatePicker

const DiffRender = ({ item, value, inList, wrap: WrapComponent }) => {
  const { t: _t1 } = useI18n()
  let str = ''
  if (item?.data?.params) {
    str = item?.data?.params[item?.data?.name] != undefined ? JSON.stringify(item?.data?.params[item?.data?.name]) : '-'
  } else {
    str = '-' //item?.data?.name
  }
  let signature = ''
  if (item?.type == '发送指令' || item?.type == '批量发送指令') {
    if (item?.signatures && _.isArray(item.signatures)) {
      signature = item.signatures.map(val => {
        let desc
        desc = val?.username ? ` 用户名: ${val.username} ` : desc
        desc = val?.causeDescription ? desc + `，事由说明: ${val.causeDescription}` : desc
        return desc
      }).join(',')
    }
    if (item?.authorizers && _.isArray(item.authorizers)) {
      signature = signature + `，授权人: ${item.authorizers.map(val => {
        return _.isString(val) ? val : val?.name
      }).join(',')}`
    }
    signature = item?.signature?.username ? `,用户名: ${item.signature.username} ` : signature
    signature = item?.signature?.causeDescription ? signature + `，事由说明: ${item.signature.causeDescription}` : signature
    if (item?.signature?.authorizer?.length) {
      signature = signature + `，授权人: ${item.signature.authorizer.map(item => {
        return _.isString(item) ? item : item?.name
      }).join(',')}`
    }
  }
  if (item?.type == '发送指令') {
    let message = item?.message && item?.message == _t1('指令执行成功') ? `<span style=\"color: green\">${_t1(item.message)}</span>` : item?.message ? `<span style=\"color: red\">${item.message}</span>` : null
    value = `${item?.user?.name}于${moment(item?.time).format('YYYY-MM-DD HH:mm:ss')}<span style=\"color: green\">${item.type}</span>，${message}
    模型: ${item?.table?.name || item?.table?.title || ''}、资产: ${item?.tableData?.name || item?.tableData?.title || ''}(${item?.tableData?.uid || item?.tableData?.id || ''})、指令名称: ${item?.data?.name}、下发指令的值：${str} ${signature}`
  }
  if (item?.type == '批量发送指令') {
    let node = item.tableDatas?.length ? (item.tableDatas.map(val => (`${val?.name}(${val?.uid || val?.id})`))).join(',') : ''
    value = `${item?.user?.name}于${moment(item?.time).format('YYYY-MM-DD HH:mm:ss')}<span style=\"color: green\">${item.type}</span>，${item.message}
    模型: ${item?.model?.name}、资产: ${node}、指令名称: ${item?.data?.name}、下发指令的值：${str} ${signature}`
  }
  if (['流程任务增加', '流程任务修改', '流程任务删除'].indexOf(item.type) > -1) {
    value = item?.diff || item?.data?.jobKey
  }

  if (item?.type == '用户登出') {
    value = item?.user?.name + '于' + moment(item?.time).format('YYYY-MM-DD HH:mm:ss') + `登出<span style=\"color: green\">成功</span>`
  }
  const content = <p style={{ whiteSpace: 'pre-line', maxWidth: 500, maxHeight: 500, overflowY: 'scroll' }} dangerouslySetInnerHTML={{ __html: value }}></p>
  return (
    <WrapComponent>
      {
        inList ?
          <Popover placement="topLeft" content={content}>
            <span style={{ maxWidth: 500 }} className="clamp-span" dangerouslySetInnerHTML={{ __html: value }}></span>
          </Popover>
          : <span style={{ display: 'inline-block', whiteSpace: 'pre-line', maxWidth: 700 }} dangerouslySetInnerHTML={{ __html: value }}></span>
      }
    </WrapComponent>
  )
}

const DefaultLayout = props => {

  const { model, atoms } = use('model')
  const [data, setFilters] = useRecoilState(atoms.where('filters'))
  const [wheres, setWheres] = useRecoilState(atoms.wheres)

  const { children, invalid, handleSubmit, submitting, options, resetFilter, form } = props;
  const { _t } = app.context;
  const filter = model.filters
  const uploadItems = () => {
    let value = props?.defaultFilter
    let countValue = value?.type == 'forward' ? value.count : 1
    if (value) {
      let startTime, endTime;
      if (value?.type == 'forward') {
        endTime = moment(new Date()).subtract(countValue, value.unit).endOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
        startTime = moment(new Date()).subtract(countValue, value.unit).startOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
      } else {
        endTime = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')
        startTime = moment(new Date()).startOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
      }
      setWheres(wheres => ({
        // ...wheres,
        resetFilter: {
          time: {
            '$gte': startTime,
            '$lte': endTime
          }
        }//, filter: { ...filter }
      }))
      // modelDispatch({ type: 'GET_ITEMS', wheres: { filters: { time: { '$gte': startTime, '$lte': endTime } } }, filter: { ...filter } })
    } else {
      resetFilter()
      setWheres(wheres => ({}))
      // modelDispatch({ type: 'GET_ITEMS', wheres: { filters: {} }, filter: { ...filter } })
    }
  }
  const onSubmit = React.useCallback((values) => {
    const where = Object.keys(values).reduce((prev, key) => {
      if (!_.isNil(values[key])) {
        prev[key] = values[key]
      } else {
        prev = _.omit(prev, key)
      }
      return prev
    }, { ...data })
    setFilters(where)
  }, [model, data, setFilters])
  // sync.name     同步
  // warningarchive.name   报警
  // warningclean.name   报警
  // flow.name   流程
  // flowtask.name   流程任务
  // role.name  角色
  // department.name   部门
  // userops.name   用户
  // systemVariable.name 系统变量
  const _submit = () => {
    let data = form.getState().values
    let hasDashboard = false,
      hasModel = false,
      hasNode = false,
      hasNodes = false,
      hasExt = false,
      hasEvent = false,
      hasUser = false,
      hasTable = false,
      hasSync = false,
      hasWarningarchive = false,
      hasWarningclean = false,
      hasFlow = false,
      hasFlowtask = false,
      hasRole = false,
      hasDepartment = false,
      hasUserops = false,
      hasSystemVariable = false,
      tempdata = null
    if (!_.isEmpty(data.type) && data.type['$in']) {
      let str = JSON.stringify(data.type['$in'])
      hasDashboard = str.indexOf('画面') > -1
      hasModel = str.indexOf('模型') > -1
      hasNode = str.indexOf('资产') > -1 || str.indexOf('报警') > -1 || (str.indexOf('指令') > -1 && str.indexOf('批量发送指令') == -1)
      hasNodes = str.indexOf('批量发送指令') > -1
      hasExt = str.indexOf('表记录') > -1
      hasTable = str.indexOf('表定义') > -1
      // hasEvent = str.indexOf('事件') > -1
      hasUser = str.indexOf('登录') > -1 || str.indexOf('操作') > -1
      hasSync = str.indexOf('同步') > -1
      hasWarningarchive = str.indexOf('报警归档') > -1
      hasWarningclean = str.indexOf('报警清除') > -1
      hasFlow = str.indexOf('流程') > -1 && str.indexOf('流程任务') == -1
      hasFlowtask = str.indexOf('流程任务') > -1
      hasRole = str.indexOf('角色') > -1
      hasDepartment = str.indexOf('部门') > -1
      hasUserops = str.indexOf('用户') > -1
      hasSystemVariable = str.indexOf('系统变量') > -1
      // data['$or'] = []
      tempdata = []
      if (hasDashboard) {
        tempdata.push({ 'dashboard.name': data.logObj })
      }
      if (hasModel) {
        tempdata.push({ 'table.name': data.logObj })
      }
      if (hasNode) {
        tempdata.push({ 'tableData.name': data.logObj })
      }
      if (hasNodes) {
        tempdata.push({ 'tableDatas.name': data.logObj })
      }
      if (hasExt) {
        tempdata.push({ 'extName': data.logObj })
      }
      if (hasTable) {
        tempdata.push({ 'table.name': data.logObj })
      }
      // if (hasEvent) {
      // tempdata.push({ 'event.name': data.logObj })
      // }
      if (hasUser) {
        tempdata.push({ 'user.name': data.logObj })
      }
      if (hasSync) {
        tempdata.push({ 'sync.name': data.logObj })
      }
      if (hasWarningarchive) {
        tempdata.push({ 'warningarchive.name': data.logObj })
      }
      if (hasWarningclean) {
        tempdata.push({ 'warningclean.name': data.logObj })
      }
      if (hasFlow) {
        tempdata.push({ 'flow.name': data.logObj })
      }
      if (hasFlowtask) {
        tempdata.push({ 'flowtask.name': data.logObj })
      }
      if (hasRole) {
        tempdata.push({ 'flowtask.name': data.logObj })
      }
      // if (hasDepartment) {
      //   tempdata.push({ 'department.name': data.logObj })
      // }
      if (hasUserops) {
        tempdata.push({ 'userops.name': data.logObj })
      }
      if (hasSystemVariable) {
        tempdata.push({ 'systemVariable.name': data.logObj })
      }

      if (data.data) {
        data['$and'] = [{ '$or': tempdata }, { '$or': [{ 'data.name': { '$regex': data.data } }, { 'oldData.name': { '$regex': data.data } }] }]
      } else {
        data['$or'] = tempdata
      }
    }
    if (!_.isEmpty(data.type) && data.type && !data.type['$in']) {
      hasDashboard = data?.type?.indexOf('画面') > -1 || data?.type?.indexOf('全部') > -1
      hasModel = data?.type?.indexOf('模型') > -1 || data?.type?.indexOf('全部') > -1
      hasNode = data?.type?.indexOf('资产') > -1 || (data?.type?.indexOf('指令') > -1 && data?.type?.indexOf('批量发送指令') == -1) || data?.type?.indexOf('全部') > -1
      hasExt = data?.type?.indexOf('表记录') > -1 || data?.type?.indexOf('全部') > -1
      hasTable = (data?.type?.indexOf('工作表') > -1 && data?.type?.indexOf('工作表记录') == -1) || data?.type?.indexOf('全部') > -1
      // hasEvent = data?.type?.indexOf('事件') > -1 || data?.type?.indexOf('全部') > -1
      hasSync = data?.type.indexOf('同步') > -1 || data?.type?.indexOf('全部') > -1
      hasWarningarchive = data?.type.indexOf('报警归档') > -1 || data?.type?.indexOf('全部') > -1
      hasWarningclean = data?.type.indexOf('报警清除') > -1 || data?.type?.indexOf('全部') > -1
      hasFlow = (data?.type.indexOf('流程') > -1 && data?.type.indexOf('流程任务') == -1) || data?.type?.indexOf('全部') > -1
      hasFlowtask = data?.type.indexOf('流程任务') > -1 || data?.type?.indexOf('全部') > -1
      hasRole = data?.type.indexOf('角色') > -1 || data?.type?.indexOf('全部') > -1
      hasDepartment = data?.type.indexOf('部门') > -1 || data?.type?.indexOf('全部') > -1
      hasUserops = data?.type.indexOf('用户') > -1 || data?.type?.indexOf('全部') > -1
      hasSystemVariable = data?.type.indexOf('系统变量') > -1 || data?.type?.indexOf('全部') > -1
      hasUser = data?.type?.indexOf('登录') > -1 || data?.type?.indexOf('操作') > -1 || data.type.indexOf('全部') > -1
      // data['$or'] = []
      tempdata = []
      if (hasDashboard) {
        tempdata.push({ 'dashboard.name': data.logObj })
      }
      if (hasModel) {
        tempdata.push({ 'table.name': data.logObj })
      }
      if (hasNode) {
        tempdata.push({ 'tableData.name': data.logObj })
      }
      if (hasNodes) {
        tempdata.push({ 'tableDatas.name': data.logObj })
      }
      if (hasExt) {
        tempdata.push({ 'extName': data.logObj })
      }
      if (hasTable) {
        tempdata.push({ 'table.name': data.logObj })
      }
      // if (hasEvent) {
      //   tempdata.push({ 'event.name': data.logObj })
      // }
      if (hasSync) {
        tempdata.push({ 'sync.name': data.logObj })
      }
      if (hasWarningarchive) {
        tempdata.push({ 'warningarchive.name': data.logObj })
      }
      if (hasWarningclean) {
        tempdata.push({ 'warningclean.name': data.logObj })
      }
      if (hasFlow) {
        tempdata.push({ 'flow.name': data.logObj })
      }
      if (hasFlowtask) {
        tempdata.push({ 'flowtask.name': data.logObj })
      }
      if (hasRole) {
        tempdata.push({ 'flowtask.name': data.logObj })
      }
      // if (hasDepartment) {
      //   tempdata.push({ 'department.name': data.logObj })
      // }
      if (hasUserops) {
        tempdata.push({ 'userops.name': data.logObj })
      }
      if (hasSystemVariable) {
        tempdata.push({ 'systemVariable.name': data.logObj })
      }
      if (data.data) {
        data['$and'] = [{ '$or': tempdata }, { '$or': [{ 'data.name': { '$regex': data.data } }, { 'oldData.name': { '$regex': data.data } }] }]
      } else {
        data['$or'] = tempdata
      }
    }
    if (_.isEmpty(data.type)) {
      if (!_.isEmpty(data.logObj)) {
        tempdata = [
          { 'dashboard.name': data.logObj },
          { 'table.name': data.logObj },
          { 'tableData.name': data.logObj },
          { 'tableDatas.name': data.logObj },
          { 'extName': data.logObj },
          // { 'event.name': data.logObj },
          { 'table.name': data.logObj },
          { 'report.name': data.logObj },
          { 'sync.name': data.logObj },
          { 'warningarchive.name': data.logObj },
          { 'warningclean.name': data.logObj },
          { 'flow.name': data.logObj },
          { 'flowtask.name': data.logObj },
          { 'role.name': data.logObj },
          // { 'department.name': data.logObj },
          { 'userops.name': data.logObj },
          { 'systemVariable.name': data.logObj }
        ]
      }

      if (data.data) {
        data['$and'] = tempdata ? [{ '$or': tempdata }, { '$or': [{ 'data.name': data.data }, { 'oldData.name': data.data }] }] : [{ '$or': [{ 'data.name': data.data }, { 'oldData.name': data.data }] }]
      } else {
        data['$or'] = tempdata
      }
    }
    // delete data.logObj
    // delete data.data
    _.isEmpty(data.type) && delete data.type
    onSubmit(data)
  }
  return (
    <Form className="ant-advanced-search-form" onFinish={_submit}>
      <Card style={{ marginBottom: '.5rem' }} bodyStyle={{ paddingBottom: 0 }}>
        <Row>{children}</Row>
        {options && options.submitOnChange ? null : (
          <Row style={{ marginBottom: '.5rem' }}>
            <Col span={24} style={{ textAlign: 'center' }}>
              <Button disabled={invalid || submitting} type="primary" onClick={_submit}>{_t1('查询')}</Button>
              {' '}
              <Button disabled={submitting} onClick={() => uploadItems()}>{_t1('重置')}</Button>
            </Col>
          </Row>
        )}
      </Card>
    </Form>
  )
}

const FieldGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && meta.error
  const extra = field.description || field.help
  const size = { labelCol: { sm: { span: 8 } }, wrapperCol: { sm: { span: 16 } } }
  const groupProps = { extra, ...size, required: field.required, labelAlign: 'right' }
  if (error) {
    groupProps['validateStatus'] = 'error'

    groupProps['help'] = error
  }
  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Col span={8} sm={12} xs={24} md={12} lg={8} xl={8} xxl={6}>
      <Form.Item colon={false} label={label} {...groupProps}>
        {controlComponent}
      </Form.Item>
    </Col>
  )
}

const SearchBar = ({ defaultFilter }) => {
  let ops = {
    name: 'submenu',
    component: props => <DefaultLayout {...props} defaultFilter={defaultFilter} />,
    group: FieldGroup
  }

  return <BaseFilter {...ops} />
}

const AnalysistimeRange = props => {
  const modelKey = props?.modelKey || 'Log'
  const ArchiveSchema = props?.ArchiveSchema

  let [value, setValue] = React.useState({ type: 'forward', count: '', unit: 'd' })
  const { model, modelDispatch, atoms } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  const filter = model.filters
  let timeType = [{ key: _t1('前'), value: 'forward' }, { key: _t1('当前'), value: 'now' }]
  let obj = { forward: _t1('前'), now: _t1('当前') }
  let timeObj = { 'Y': _t1('年'), 'Q': _t1('季度'), 'M': _t1('月'), 'w': _t1('周'), 'd': _t1('天') }
  let optionTime = [{ key: _t1('年'), value: 'Y' }, { key: _t1('季度'), value: 'Q' }, { key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' }]
  const [data, setData] = React.useState(null)
  let option;
  if (data?.params?.type == 'now') {
    option = data?.params?.type && data?.params?.unit ? `${obj[data?.params?.type]}${timeObj[data?.params?.unit]}` : null
  } else {
    option = data?.params?.type && data?.params?.unit ? `${obj[data?.params?.type]}${data?.params?.count}${timeObj[data?.params?.unit]}` : null
  }

  React.useEffect(() => {
    getRecord()
  }, [])

  const uploadItems = (value, countValue) => {
    let startTime, endTime;
    if (value?.type == 'forward') {
      startTime = moment(new Date()).subtract(countValue, value.unit).startOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
      endTime = moment(new Date()).subtract(1, value.unit).endOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
    } else {
      startTime = moment(new Date()).startOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
      endTime = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')
    }

    setWheres(wheres => ({
      ...wheres,
      resetFilter: {
        time: {
          '$gte': startTime,
          '$lte': endTime
        }
      }//, filter: { ...filter }
    }))
    // modelDispatch({ type: 'GET_ITEMS', wheres: { resetFilter: { time: { '$gte': startTime, '$lte': endTime } } }, filter: { ...filter } })
  }

  const handleChange = e => setValue({ ...value, count: e.target.value <= 1 ? 1 : e.target.value })
  const handleSelect = e => setValue({ ...value, unit: e })
  const handleType = e => setValue({ ...value, type: e })

  const getRecord = (countValue, value, obj) => {
    let type = modelKey == 'Instruct' ? 'deviceManage' : 'log'

    let query = { skip: 0, limit: 10000, project: { params: 1, type: 1, settings: 1 }, filter: { type }, withCount: true }
    const querystr = encodeURIComponent(JSON.stringify(query))
    api({ name: 'core/dataRecord' })
      .fetch('?query=' + querystr, {})
      .then(({ json }) => {
        if (json?.length) {
          if(json[0]?.settings?.isDelete) {
            setData(json[0])
            setWheres(wheres => ({}))
          } else {
            setData(json[0])
            setValue(json[0].params)
            props.getValues(json)
            let params = json?.[0]?.params
            if (params) {
              let countValue = params?.type == 'forward' ? params.count : 1
              uploadItems(params, countValue)
            }
          }
        } else {
          const endTime = moment(new Date()).endOf('d').format("YYYY-MM-DD HH:mm:ss")
          const startTime = moment(new Date()).startOf('d').format("YYYY-MM-DD HH:mm:ss")
          setData({ params: { type: 'now', count: 1, unit: 'd' } })
          setWheres(wheres => ({
            ...wheres,
            resetFilter: { time: { '$gte': startTime, '$lte': endTime } }
          }))
          let obj = { params: { type: 'now', count: 1, unit: 'd' }, type }
          api({ name: 'core/dataRecord' })
            .fetch('', { method: 'POST', body: JSON.stringify(obj) })
            .then(res => { })
            .catch(err => {
              message.error(err.message)
            })
          // setWheres(wheres => ({}))
          // modelDispatch({ type: 'GET_ITEMS', wheres: { filters: {} }, filter: { ...filter } })
        }
      })
      .catch(err => message.error(err.message))
  }

  const uploadRecord = (id, body) => {
    if (body?.type == 'forward' && body?.count && body?.unit || body?.type == 'now' && body?.unit) {
      let type = modelKey == 'Instruct' ? 'deviceManage' : 'log'
      let obj = { params: { ...body, count: body?.type == 'forward' ? body.count : 1 }, type }
      api({ name: 'core/dataRecord' })
        .fetch(`/${id}`, { method: 'PATCH', body: JSON.stringify({ ...obj, settings: { isDelete: false } }) })
        .then(({ status }) => {
          if (body) {
            let countValue = body?.type == 'forward' ? body.count : 1
            getRecord()
            setData({ ...data, ...obj })
            setValue(body)
            props.getValues(body)
            uploadItems(body, countValue)
          }
        })
    }
  }

  const deleteRecord = id => {
    api({ name: `core/dataRecord/${id}` })
      .fetch('', { method: 'PATCH', body: JSON.stringify({ ...data, settings: { isDelete: true }, params: { count: '', type: '', unit: '' } }) })
      .then(({ status }) => {
        if (status == 200) {
          message.success('重置成功')
          setData(null)
          setValue({ type: 'forward', count: '', unit: 'd' })
          props.getValues({ type: 'forward', count: '', unit: 'd' })
          setWheres(wheres => ({}))
          // modelDispatch({ type: 'GET_ITEMS', wheres: { filters: {} }, filter: { ...filter } })
        }
      })
      .catch(err => message.error(err.message))
  }

  const confirm = () => {
    if (data?.id) {
      uploadRecord(data?.id, value)
    } else {
      if (value?.type == 'forward' && value?.count && value?.unit || value?.type == 'now' && value?.unit) {
        let type = modelKey == 'Instruct' ? 'deviceManage' : 'log'
        let obj = { params: { ...value, count: value?.type == 'forward' ? value.count : 1 }, type }
        api({ name: 'core/dataRecord' })
          .fetch('', { method: 'POST', body: JSON.stringify(obj) })
          .then(res => {
            message.success('添加成功')
            getRecord()
            let countValue = value?.type == 'forward' ? value.count : 1
            setData({ ...data, ...obj })
            setValue(value)
            // props.getValues(value)
            // uploadItems(value, countValue)
          })
          .catch(err => {
            message.error(err.message)
          })
      }
    }
  }

  return (
    <>
      {
        <>
          <Popconfirm placement="bottomRight" icon={null} title={<>
            <Select style={{ width: 90, marginRight: '.4rem' }} allowClear onChange={handleType} value={value && value.type || ''}>
              {
                timeType.map(item => {
                  return <Select.Option value={item.value}>{item.key}</Select.Option>
                })
              }
            </Select>
            {
              value && value.type && value.type == 'forward' && value?.count ?
                [
                  <Input type="number" style={{ width: 160 }} placeholder={_t1('数值')}
                    onChange={handleChange} value={value.count || null} addonAfter={
                      <Select style={{ width: 75 }} onChange={handleSelect} value={value.unit}>
                        {
                          optionTime.map(item => {
                            return <Select.Option value={item.value}>{item.key}</Select.Option>
                          })
                        }
                      </Select>} />
                ] : null
            }
            {
              value && value.type && value.type == 'now' ?
                <Select style={{ width: '130px' }} allowClear onChange={handleSelect} value={value.unit || ''}>
                  {
                    optionTime.map(item => {
                      return <Select.Option value={item.value}>{item.key}</Select.Option>
                    })
                  }
                </Select>
                : null
            }
          </>
          } onConfirm={confirm} okText={_t1('确认')} cancelText={_t1('取消')}>
            {
              option ? <Input style={{ width: '100px' }} value={option} readOnly /> : <Button >{_t1('默认查询时间')}</Button>
            }
          </Popconfirm>
          {
            option ? <Popconfirm placement="bottomRight" title={
              modelKey == 'Instruct' ? _t1('重置后查询全部指令日志') : _t1('重置后查询全部日志')
            } onConfirm={() => {
              if (data?.id) {
                deleteRecord(data?.id, data)
              } else {
                setData({ params: { type: 'forward', count: null, unit: 'd' } })
                setWheres(wheres => ({}))
              }
            }}>
              <Button style={{ padding: '0 .5rem', marginRight: 10 }}><img style={{ width: '1rem', height: '1rem' }} src={require('./reset.png')} /></Button>
            </Popconfirm> : null
          }
        </>
      }
      <HasPermission FailureComponent={null}  permission="cleancycle.add">
        <ClearLogBtn modelDispatch={modelDispatch} modelKey={modelKey} ArchiveSchema={ArchiveSchema} btnModule={props?.btnModule} />
      </HasPermission>
      <HasPermission FailureComponent={null} permission="archivedlog.view">
        <ArchiveDropdown modelKey={modelKey} ArchiveSchema={ArchiveSchema} />
      </HasPermission>
    </>
  )
}

const LogPage = props => {
  const { model: preModel } = use('model')
  const { modelI18n: model } = use('model.transI18n', { model: preModel })
  const [defaultFilter, setDefaultFilter] = React.useState(null)
  const logs = app.get('models')['Log']
  const modelKey = props?.modelKey || 'Log'

  const uploadItems = (value) => {
    let countValue = value?.type == 'forward' ? value.count : 1
    if (value) {
      let startTime, endTime;
      if (value?.type == 'forward') {
        endTime = moment(new Date()).subtract(countValue, value.unit).endOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
        startTime = moment(new Date()).subtract(countValue, value.unit).startOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
      } else {
        endTime = moment(new Date()).format('YYYY-MM-DD HH:mm:ss')
        startTime = moment(new Date()).startOf(value.unit).format("YYYY-MM-DD HH:mm:ss")
      }
      return startTime && endTime ? { time: { '$gte': startTime, '$lte': endTime } } : undefined
    } else {
      return undefined
    }
  }

  return (
    <Model name={modelKey} modelKey={modelKey}>
      <Page title={(<span> <Icon svg={require('../icon/操作日志.svg')} className='logIcon' /> {model?.title}</span>)}
        subTitle={<ModelBlock name="model.list.nav" />}
        actions={<AnalysistimeRange {...props} 
          getValues={(value) => { if (value?.length) { setDefaultFilter(value?.[0]?.params) } else { setDefaultFilter(value) } }} />}
      >
        <SearchBar defaultFilter={defaultFilter} />
        <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
          <C is="Model.Pagination" /> <C is="Model.ListSubMenu" />
        </div>
        <div className="logTable"><C is="Model.DataTable" /></div>
        <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
          <div></div> <C is="Model.Pagination" />
        </div>
      </Page>
    </Model>
  )
}


const NodeListSelect = ({ field, ...props }) => {
  const { model, department } = use('form', state => ({
    model: state.values && state.values.model,
    department: state.values && state.values.department
  }))
  return <C is="NodeListSelect" field={{ ...field, model, department }} {...props} />
}

export default {
  Log: {
    name: 'log',
    resource: 'core/log',
    type: 'object',
    icon: <Icon svg={require('../icon/Log.svg')} />,
    title: _r('操作日志'),
    initQuery: false,
    rolePermission: [
      { key: 'log.view', title: _r('查看') },
      { key: 'log.export', title: _r('导出') },
    ],
    properties: {
      time: {
        type: 'string',
        title: _r('操作时间'),
        format: 'date-time',
        width: 250,
      },
      data: {
        title: _r('内容'),
        type: 'string',
        // properties: {
        //   remark: {
        //     title: _r('备注'),
        //     type: 'string'
        //   }
        // },
        width: 300,
        // description: '通过操作内容查询时，会对操作类型的信息关联字段进行统一查询，任意一个关联字段满足条件均会查询回来'
      },
      user: {
        title: _r('操作人'),
        type: 'object',
        relateTo: 'User',
        items: { type: 'object', properties: {}, relateTo: 'User' },
        field: {
          effect: (f, form) => { }
        },
        width: 150
      },
      type: {
        type: 'string',
        title: _r('操作类型'),
        width: 150
      },
      level: {
        type: 'string',
        title: '级别',
        width: 150
      },
      remoteAddr: {
        type: 'string',
        title: '操作IP',
        width: 150,
      },
      logObj: {
        type: 'string',
        title: _r('操作对象'),
        width: 250,
        // description: '通过操作对象查询时，会对操作类型的信息关联字段进行统一查询，任意一个关联字段满足条件均会查询回来'
      },
      // department: {
      //   type: 'array',
      //   title: _r('用户所属部门'),
      //   items: {
      //     type: 'object',
      //     name: 'Department',
      //     relateTo: 'Department',
      //     properties: {
      //       id: { type: 'string' },
      //       name: { type: 'string' }
      //     }
      //   },
      //   width: 250
      // },
      diff: {
        type: 'string',
        title: _r('操作内容'),
        canOrder: false,
        width: 500
      },
      message: { type: 'string', title: _r('日志信息'), showInList: false }
    },
    blocks: {
      'model.list.submenu.btngroup': (props) => ([
        <LoginExport />
      ]),
      'model.list.navbtn': () => {
        const { selected, onSelect } = use('model.select')
        return <AnalysistimeRange getValues={(value) => {
          // if (value?.length) {
          //   setDefaultFilter(value?.[0]?.params)
          // } else {
          //   setDefaultFilter(value)
          // }
        }} />
      }
    },
    itemActions: [
      ({ item }) => {
        const nav = use('navigate')
        return (
          <Button onClick={() => nav(`/app/model/Log/${item?.id}/detail`)}>{_t1('查看详情')}</Button>
        )
      }, 'delete'],
    filters: {
      submenu: [
        'time',
        { key: 'type', type: 'filter_enum', component: LogType },
        'user', 'level','remoteAddr', 'logObj', 'data', { key: 'data', type: 'string' }
      ],
    },
    components: {
      // AddButton: props => null,
      DataEmpty: () =>   <Empty description={_t1("暂无数据")} image={require('../imgs/暂无数据空.png')}  style={{ padding: 20 }} />,
      ListPage: LogPage,
    },
    dataTableProps: (columns) => {
      return {
        scroll: { x: 1500 },
        columns: columns.map(c => c.key == '__action__' ? { ...c, width: 280 } : { ...c, width: c.width || 100 })
      }
    },
    projectFields: ['message', 'user'],
    forceGetItem: true,
    // permission: {
    //   view: true,
    //   add: false,
    //   edit: false,
    //   delete: false
    // },
    orders: { time: 'DESC' },
    required: ['time', 'user', 'type', 'remoteAddr'],
    listFields: [
      'time', 'user', 'type',
      'remoteAddr', 'data', 'oldData',
      'logObj', 'node', 'model',
      'table', 'ext', 'dashboard', 'warning',
      'diff', 'nodes', 'signature', //'department', 
      'flow', 'tableData','level'],
    form: [
      'time', 'user', 'type',
      'remoteAddr',
      'logObj', //'department',
      'diff', 'data','level'
    ],
    fieldRender: {
      diff: DiffRender,
      data: ({ item }) => {
        return item?.data?.name || item?.oldData?.name || item?.tableData?.name || item?.table?.name || item?.dashboard?.name || item?.table?.name || item?.table?.id || item?.ext?.name || item?.flow?.name || _t1('空')
      },
      logObj: ({ item }) => {
        let itemName;
        if (['模型增加', '模型修改', '模型删除'].indexOf(item.type) > -1) {
          itemName = item.table && item?.table?.title
        } else if (['资产增加', '资产修改', '资产删除', '发送指令'].indexOf(item.type) > -1) {
          itemName = item.tableData && item?.tableData?.name || item?.tableData?.title
        } else if (['新增普通画面', '新增模型画面', '新增资产画面', '新增工作表画面',
          '编辑普通画面', '编辑模型画面', '编辑资产画面', '编辑工作表画面',
          '删除普通画面', '删除模型画面', '删除资产画面', '删除工作表画面', '分享画面'
        ].indexOf(item.type) > -1) {
          itemName = item.dashboard && item.dashboard.name
        } else if (['事件增加', '事件修改', '事件删除'].indexOf(item.type) > -1) {
          // itemName = item.event && item.event.name
        } else if (['事件handle增加', '事件handle修改', '事件handle删除'].indexOf(item.type) > -1) {
          // itemName = item.eventHandler && item.eventHandler.handlername || item.data && item.data.handlername
        } else if (['报警处理', '报警确认', '报警备注'].indexOf(item.type) > -1) {
          itemName = item.tableData && item?.tableData?.name || item?.table && item?.table?.name || item?.table?.title
        } else if (['工作表增加', '工作表修改', '工作表删除'].indexOf(item.type) > -1) {
          itemName = item.table && item?.table?.name || item?.table?.id || item?.table?.title
        } else if (['工作表记录增加', '工作表记录修改', '工作表记录删除'].indexOf(item.type) > -1) {
          itemName = item.ext && item.ext.name
        } else if (['流程任务增加', '流程任务修改', '流程任务删除'].indexOf(item.type) > -1) {
          itemName = item.flow && item.flow.name
        }
        return itemName || item.data && item.data.name || item.data?.title || item.oldData && item.oldData.name || item.oldData?.title || _t1('空')
      },
      // department: ({ item }) => {
      //   const { department } = item?.user
      //   return department?.map(i => i.name).join('、')
      // }
    },
    // batchActions: null
  },
  Archive: {
    name: 'archivedlog',
    resource: 'core/archivedlog',
    type: 'object',
    icon: <>
      <ArrowLeftOutlined onClick={() => history.back()} />
      <Icon svg={require('../icon/Log.svg')} />
    </>,
    title: _r('日志归档信息'),
    rolePermission: [
      { key: 'archivedlog.view', title: _r('查看') },
      { key: 'archivedlog.delete', title: _r('删除') },
      { key: "archivedlog.add", title: _r("恢复") }
    ],
    properties: {
      time: {
        type: 'string',
        title: _r('操作时间'),
        format: 'date-time',
        width: 250,
      },
      user: {
        title: _r('操作人'),
        type: 'object',
        relateTo: 'User',
        items: { type: 'object', properties: {}, relateTo: 'User' },
        field: {
          effect: (f, form) => { }
        },
        width: 150
      },
      type: {
        type: 'string',
        title: _r('操作类型'),
        width: 150,
      },
      level: {
        type: 'string',
        title: '级别',
        width: 150
      },
      remoteAddr: {
        type: 'string',
        title: '操作IP',
        width: 150,
      },
      logObj: {
        type: 'string',
        title: _r('操作对象'),
        width: 250,
      },
      // department: {
      //   type: 'array',
      //   title: _r('用户所属部门'),
      //   items: {
      //     type: 'object',
      //     name: 'Department',
      //     relateTo: 'Department',
      //     properties: {
      //       id: { type: 'string' },
      //       name: { type: 'string' }
      //     }
      //   },
      //   width: 250
      // },
      diff: {
        type: 'string',
        title: _r('操作内容'),
        canOrder: false,
        width: 150
      },
      message: {
        type: 'string',
        title: _r('日志信息'),
        width: 150
      }
    },
    blocks: {
      'model.list.navbtn': () => {
        const { selected, onSelect } = use('model.select')
        return <HasPermission FailureComponent={null} permission="archivedlog.add"><ReductionBtn selected={selected} /></HasPermission>
      }
    },
    itemActions: [
      ({ item }) => {

        return (
          < Button onClick={() => app.go(`/app/model/Archive/${item.id}/detail`)} >{_t1('查看详情')} </Button>
        )
      },
      ({ item }) => {

        const { atoms } = use('model')
        const [wheres, setWheres] = useRecoilState(atoms.wheres)
        const onClick = () => {
          api({ name: "core/archivedlog/restore/" }).fetch(item?.id, {
            method: 'POST'
          })
            .then((arg) => {
              const { status, json } = arg
              if (status == 200) {
                message.success('恢复成功！')
                setWheres(wheres => ({}))
                // modelDispatch({ type: 'GET_ITEMS' })
              } else {
                message.error(arg.message)
              }
            })
        }
        return (
          <HasPermission FailureComponent={null} permission="archivedlog.add">
            < Button onClick={onClick} >{_t1('恢复')} </Button>
          </HasPermission>
        )
      }, , ({ item }) => {

        const { atoms } = use('model')
        const [wheres, setWheres] = useRecoilState(atoms.wheres)
        const onDelete = () => {
          api({ name: "core/archivedlog/" }).fetch(item.id, {
            method: 'DELETE'
          })
            .then((arg) => {
              const { status, json } = arg
              if (status == 200) {
                message.success(_t1('删除成功！'))
                setWheres(wheres => ({}))
                // modelDispatch({ type: 'GET_ITEMS' })
              } else {
                message.error(arg)
              }
            })
        }
        return <HasPermission FailureComponent={null} permission="archivedlog.delete">
          <Popconfirm title={'确认删除?'} onConfirm={onDelete} okText={_t1('删除')} cancelText={_t1('取消')}>
            <Button style={{ background: '#ff4d4f', color: '#ffffff' }} size="small">
              {_t1('删除')}
            </Button>
          </Popconfirm>
        </HasPermission>
      }],
    filters: {
      submenu: [{
        key: 'time',
        // component: (props) => {
        //   const { form } = use('form')
        //   const format = 'YYYY-MM-DD HH:mm:ss'
        //   const { input: { onChange, value } } = props
        //   const { start_time, end_time } = form.getState().values
        //   return <RangePicker allowEmpty={[true, true]} onChange={(time, timeString) => {
        //     form.change('start_time', timeString[0])
        //     form.change('end_time', timeString[1])
        //     // onChange({start_time: timeString[0],end_time: timeString[1]})
        //   }} format={format} showTime
        //     defaultValue={!_.isEmpty(start_time) || !_.isEmpty(end_time) ? [moment(start_time, format), moment(end_time, format)] : null}
        //     style={{ width: '100%' }} />
        // }
      }, { key: 'type', type: 'filter_enum', component: LogType }, 'level','user', 'remoteAddr']
    },
    components: {
      AddButton: props => null,
      DataEmpty: () =>   <Empty description={_t1("暂无数据")} image={require('../imgs/暂无数据空.png')}  style={{ padding:20 }} />
      // DataEmpty: props => <Card><NoData /></Card>
    },
    projectFields: ['message'],
    forceGetItem: true,
    permission: {
      view: true,
      add: true,
      edit: true,
      delete: true
    },
    orders: { time: 'DESC' },
    // required: [  ],
    listFields: [
      'time', 'user', 'type',
      'remoteAddr', 'data', 'oldData',
      'logObj', 'node', 'model',
      'table', 'ext', 'dashboard', 'warning',
      'diff', 'nodes', 'signature', //'department', 
      'flow','level'],
    form: ['time', 'user', 'type','level', 'remoteAddr', 'logObj', 'message', //'department', 
      'diff'],
    fieldRender: {
      diff: DiffRender,
      logObj: ({ item }) => {
        let itemName;
        if ([_t1('模型增加'), _t1('模型修改'), _t1('模型删除')].indexOf(item.type) > -1) {
          itemName = item.table && item?.table?.title
        } else if ([_t1('资产增加'), _t1('资产修改'), _t1('资产删除'), _t1('发送指令')].indexOf(item.type) > -1) {
          itemName = item.tableData && item?.tableData?.name || item?.tableData?.title
        } else if ([_t1('新增普通画面'), _t1('新增模型画面'), _t1('新增资产画面'), _t1('新增工作表画面'),
        _t1('编辑普通画面'), _t1('编辑模型画面'), _t1('编辑资产画面'), _t1('编辑工作表画面'),
        _t1('删除普通画面'), _t1('删除模型画面'), _t1('删除资产画面'), _t1('删除工作表画面'), '分享画面'
        ].indexOf(item.type) > -1) {
          itemName = item.dashboard && item.dashboard.name
        } else if ([_t1('事件增加'), _t1('事件修改'), _t1('事件删除')].indexOf(item.type) > -1) {
          itemName = item.event && item.event.name
        } else if (['事件handle增加', '事件handle修改', '事件handle删除'].indexOf(item.type) > -1) {
          itemName = item.eventHandler && item.eventHandler.handlername || item.data && item.data.handlername
        } else if ([_t1('报警处理'), _t1('报警确认'), _t1('报警备注')].indexOf(item.type) > -1) {
          itemName = item.tableData && item?.tableData?.name || item?.table && item?.table?.name || item?.table?.title
        } else if ([_t1('工作表增加'), _t1('工作表修改'), _t1('工作表删除')].indexOf(item.type) > -1) {
          itemName = item.table && item?.table?.name || item?.table?.id || item?.table?.title
        } else if ([_t1('工作表记录增加'), _t1('工作表记录修改'), _t1('工作表记录删除')].indexOf(item.type) > -1) {
          itemName = item.ext && item.ext.name
        } else if ([_t1('流程任务增加'), _t1('流程任务修改'), _t1('流程任务删除')].indexOf(item.type) > -1) {
          itemName = item.flow && item.flow.name
        }
        return itemName || item.data && item.data.name || item.data?.title || item.oldData && item.oldData.name || item.oldData?.title || _t1('空')
      },
      // user: ({ item }) =>{ 
      //   console.log(item)
      //   return item?.username
      // }
    },
    display: d => `${d.type}(${moment(d.time).format('YYYY-MM-DD HH:mm:ss')})`,
    // batchActions: null
  },
  Apipermission: {
    name: 'apipermission',
    resource: 'core/apipermission',
    type: 'object',
    icon: <>
      <Icon svg={require('../icon/Log.svg')} />
    </>,
    title: _r('越权访问日志'),
    rolePermission: [
    ],
    properties: {
      time: {
        type: 'string',
        title: _r('操作时间'),
        format: 'date-time'
      },
      user: {
        title: _r('操作人'),
        type: 'object',
        relateTo: 'User',
        items: { type: 'object', properties: {}, relateTo: 'User' },
        field: {
          effect: (f, form) => { }
        },
        width: 150
      },
      url: {
        type: 'string',
        title: _r('接口信息'),
      },
      remoteAddr: {
        type: 'string',
        title: _r('操作IP')
      },
      content: {
        type: 'string',
        title: _r('操作内容'),
      },
    },
    blocks: {},
    itemActions: [
      // ({ item }) => {
      //   const { t: _t1 } = useI18n()
      //   return (
      //     < Button onClick={() => app.go(`/app/model/ApiLog/${item.id}/detail`)} >{_t1('查看详情')}</Button>
      //   )
      // },
      // ({ item }) => {
      //   const { t: _t1 } = useI18n()
      //   const { modelDispatch } = use('model')
      //   const onDelete = () => {
      //     api({ name: "core/apipermission/" }).fetch(item.id, {
      //       method: 'DELETE'
      //     })
      //       .then((arg) => {
      //         const { status, json } = arg
      //         if (status == 200) {
      //           message.success(_t1('删除成功！'))
      //           modelDispatch({ type: 'GET_ITEMS' })
      //         } else {
      //           message.error(arg)
      //         }
      //       })
      //   }
      //   return <HasPermission permission="archivedlog.delete">
      //     <Popconfirm title={_t1('确认删除?')} onConfirm={onDelete} okText={_t1("删除")} cancelText={_t1("取消")}>
      //       <Button style={{ background: '#ff4d4f', color: '#ffffff' }} size="small">
      //         {_t1('删除')}
      //       </Button>
      //     </Popconfirm>
      //   </HasPermission>
      // }
    ],
    filters: {
      submenu: ['time', 'user', 'remoteAddr']
    },
    components: {
      AddButton: props => null,
      DataEmpty: () =>   <Empty description={_t1("暂无数据")} image={require('../imgs/暂无数据空.png')}  style={{ padding:20 }} />,
    },
    projectFields: [],
    forceGetItem: true,
    permission: {
      view: true,
      add: false,
      edit: false,
      delete: false
    },
    orders: { time: 'DESC' },
    // required: [  ],
    listFields: ['time', 'url', 'remoteAddr', 'user', 'content', 'id',],
    form: ['time', 'user', 'url', 'remoteAddr', 'content'],
    display: d => `${d.type}(${d.time})`,
  },
}

export { LogPage }

