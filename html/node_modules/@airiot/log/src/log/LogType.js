import React from 'react';
import { Menu, Card, TreeSelect } from 'antd';
import app, { api ,use} from 'xadmin';
import { HasPermission } from 'xadmin-auth';
import { Icon, C } from 'xadmin-ui';
import { Model } from 'xadmin-model';
import _ from 'lodash'

const { TreeNode } = TreeSelect

const LogType = props => {
  
  let defaultData = [
    {
      title: _t1('发送指令'),
      value: _t1('发送指令')
    },
    {
      title: _t1('用户登录'),
      value: _t1('用户登录')
    },
    {
      title: _t1('密码修改'),
      value: _t1('密码修改')
    },
    {
      title: _t1('巡检记录'),
      value: _t1('巡检记录')
    },
    {
      title: _t1('操作记录'),
      value: _t1('操作记录')
    },
    {
      title: _t1('模型'),
      value: _t1('模型'),
      children: [
        {
          title: _t1('模型增加'),
          value: _t1('模型增加')
        },
        {
          title: _t1('模型修改'),
          value: _t1('模型修改')
        },
        {
          title: _t1('模型删除'),
          value: _t1('模型删除')
        }
      ]
    },
    {
      title: _t1('资产'),
      value: _t1('资产'),
      children: [
        {
          title: _t1('资产增加'),
          value: _t1('资产增加')
        },
        {
          title: _t1('资产修改'),
          value: _t1('资产修改')
        },
        {
          title: _t1('资产删除'),
          value: _t1('资产删除')
        }
      ]
    },
    {
      title: _t1('工作表'),
      value: _t1('工作表'),
      children: [
        {
          title: _t1('工作表增加'),
          value: _t1('工作表增加')
        },
        {
          title: _t1('工作表修改'),
          value: _t1('工作表修改')
        },
        {
          title: _t1('工作表删除'),
          value: _t1('工作表删除')
        }
      ]
    },
    {
      title: _t1('工作表记录'),
      value: _t1('工作表记录'),
      children: [
        {
          title: _t1('工作表记录增加'),
          value: _t1('工作表记录增加')
        },
        {
          title: _t1('工作表记录修改'),
          value: _t1('工作表记录修改')
        },
        {
          title: _t1('工作表记录删除'),
          value: _t1('工作表记录删除')
        }
      ]
    },
    {
      title: _t1('数据同步'),
      value: _t1('数据同步'),
      children: [
        {
          title: _t1('数据同步增加'),
          value: _t1('数据同步增加')
        },
        {
          title: _t1('数据同步修改'),
          value: _t1('数据同步修改')
        },
        {
          title: _t1('数据同步删除'),
          value: _t1('数据同步删除')
        }
      ]
    },
    {
      title: _t1('流程'),
      value: _t1('流程'),
      children: [
        {
          title: _t1('流程增加'),
          value: _t1('流程增加')
        },
        {
          title: _t1('流程修改'),
          value: _t1('流程修改')
        },
        {
          title: _t1('流程删除'),
          value: _t1('流程删除')
        }
      ]
    },
    {
      title: _t1('报警'),
      value: _t1('报警'),
      children: [
        {
          title: _t1('报警处理'),
          value: _t1('报警处理')
        },
        {
          title: _t1('报警确认'),
          value: _t1('报警确认')
        },
        {
          title: _t1('报警备注'),
          value: _t1('报警备注')
        },
        {
          title: _t1('添加报警清除配置'),
          value: _t1('添加报警清除配置'),
        },
        {
          title: _t1('更改报警清除配置'),
          value: _t1('更改报警清除配置'),
        },
        {
          title: _t1('删除报警清除配置'),
          value: _t1('删除报警清除配置'),
        },
        {
          title: _t1('一次性报警清除'),
          value: _t1('一次性报警清除'),
        },
        {
          title: _t1('定时报警清除'),
          value: _t1('定时报警清除'),
        },
        {
          title: _t1('添加报警归档配置'),
          value: _t1('添加报警归档配置'),
        },
        {
          title: _t1('更改报警归档配置'),
          value: _t1('更改报警归档配置'),
        },
        {
          title: _t1('删除报警归档配置'),
          value: _t1('删除报警归档配置'),
        },
        {
          title: _t1('定时报警归档'),
          value: _t1('定时报警归档'),
        },
        {
          title: _t1('一次性报警归档'),
          value: _t1('一次性报警归档'),
        },
      ]
    },
    {
      title: _t1('画面'),
      value: _t1('画面'),
      children: [
        {
          title: _t1('新增普通画面'),
          value: _t1('新增普通画面')
        },
        {
          title: _t1('新增资产画面'),
          value: _t1('新增资产画面')
        },
        {
          title: _t1('新增模型画面'),
          value: _t1('新增模型画面')
        },
        {
          title: _t1('新增工作表画面'),
          value: _t1('新增工作表画面')
        },
        {
          title: _t1('编辑普通画面'),
          value: _t1('编辑普通画面')
        },
        {
          title: _t1('编辑资产画面'),
          value: _t1('编辑资产画面')
        },
        {
          title: _t1('编辑模型画面'),
          value: _t1('编辑模型画面')
        },
        {
          title: _t1('编辑工作表画面'),
          value: _t1('编辑工作表画面')
        },
        {
          title: _t1('删除普通画面'),
          value: _t1('删除普通画面')
        },
        {
          title: _t1('删除资产画面'),
          value: _t1('删除资产画面')
        },
        {
          title: _t1('删除模型画面'),
          value: _t1('删除模型画面')
        },
        {
          title: _t1('删除工作表画面'),
          value: _t1('删除工作表画面')
        },
        {
          title: _t1('分享画面'),
          value: _t1('分享画面')
        }
      ]
    },
    {
      title: _t1('事件'),
      value: _t1('事件'),
      children: [
        {
          title: _t1('事件增加'),
          value: _t1('事件增加')
        },
        {
          title: _t1('事件修改'),
          value: _t1('事件修改')
        },
        {
          title: _t1('事件删除'),
          value: _t1('事件删除')
        }
      ]
    },
    {
      title: _t1('事件动作'),
      value: _t1('事件动作'),
      children: [
        {
          title: _t1('事件动作增加'),
          value: '事件handle增加'
        },
        {
          title: _t1('事件动作修改'),
          value: '事件handle修改'
        },
        {
          title: _t1('事件动作删除'),
          value: '事件handle删除'
        }
      ]
    },
    {
      title: _t1('媒体库'),
      value: _t1('媒体库'),
      children: [
        {
          title: _t1('媒体库上传文件'),
          value: _t1('媒体库上传文件')
        },
        {
          title: _t1('媒体库解压文件'),
          value: _t1('媒体库解压文件')
        },
        {
          title: _t1('媒体库新建目录'),
          value: _t1('媒体库新建目录')
        },
        {
          title: _t1('媒体库移动文件'),
          value: _t1('媒体库移动文件')
        },
        {
          title: _t1('媒体库删除文件'),
          value: _t1('媒体库删除文件')
        },
        {
          title: _t1('媒体库恢复文件'),
          value: _t1('媒体库恢复文件')
        },
        {
          title: _t1('媒体库重命名文件'),
          value: _t1('媒体库重命名文件')
        }
      ]
    },
    {
      title: _t1('备份数据'),
      value: _t1('备份数据'),
    },
    {
      title: _t1('还原数据'),
      value: _t1('还原数据'),
    },
    {
      title: _t1('操作日志'),
      value: _t1('操作日志'),
      children: [
        {
          title: _t1('添加日志清除配置'),
          value: _t1('添加日志清除配置'),
        },
        {
          title: _t1('更改日志清除配置'),
          value: _t1('更改日志清除配置'),
        },
        {
          title: _t1('删除日志清除配置'),
          value: _t1('删除日志清除配置'),
        },
        {
          title: _t1('一次性日志清除'),
          value: _t1('一次性日志清除'),
        },
        {
          title: _t1('定时日志清除'),
          value: _t1('定时日志清除'),
        },
        {
          title: _t1('添加日志归档配置'),
          value: _t1('添加日志归档配置'),
        },
        {
          title: _t1('更改日志归档配置'),
          value: _t1('更改日志归档配置'),
        },
        {
          title: _t1('删除日志归档配置'),
          value: _t1('删除日志归档配置'),
        },
        {
          title: _t1('定时日志归档'),
          value: _t1('定时日志归档'),
        },
        {
          title: _t1('一次性日志归档'),
          value: _t1('一次性日志归档'),
        },
      ]
    }
  ];
  // const { input: { value, onChange } } = props
  // const [data, setData] = React.useState(defaultData)

  // React.useEffect(() => {
  //   api({ name: 'core/log/type' })
  //     .fetch('', {})
  //     .then(({ json }) => {
  //       let logJson = json?.data
  //       setData(logJson)
  //     })
  // }, [])
  const { input: { value, onChange } } = props
  const [data, setData] = React.useState(defaultData)
  const { settings } = use('settings')
  const logSaveRule = settings?.log?.logSaveRule || settings?.logSaveRule
  // const availableRule = Object.keys(logSaveRule);
  React.useEffect(() => {
    const path = window.location.pathname
    const ids = path.slice(path.indexOf("_") + 1)
    const logChecked = JSON.parse(localStorage.getItem(`logchecked/${ids}`))
    const logtrue = {};
    for (const key in logChecked) {
      if (logChecked[key] === true) {
        logtrue[key] = true;
      }
    }
    function groupBy(data, separator = '_') {
      const result = {};
      for (const key in data) {
        const [parent, child] = key.split(separator);
        if (!(parent in result)) {
          result[parent] = { children: [] };
        }
        const value = key.substring(key.indexOf(separator) + 1);
        result[parent].children.push({ title: child, value });
      }
      return result;
    }
  
    const groupedData = groupBy(logtrue);
  
    const result = Object.entries(groupedData).map(([title, { children }]) => ({
      title,
      value: title,
      children
    }));
    api({ name: 'core/log/type' })
      .fetch('', {})
      .then(({ json }) => {
        let logJson = json?.data
        const nochildren = logJson.reduce((arr, item) => {
          if (!item.children) {
            arr.push({ title: item.title, value: item.value });
          }
          return arr;
        }, []);
        const filteredData = Object.entries(nochildren)?.filter(([key, value]) => logSaveRule[value.value]).map(([key, item]) => item);
        const combinedData = filteredData.concat(result);
        logSaveRule ?  setData(combinedData) : setData(logJson)
      })
  }, [])

  const handleChange = values => {
    let v = {}
    if (values) {
      if (values.length > 1) {
        v = { $in: values }
      } else if (values.length > 0) {
        v = values[0]
      }
    }
    onChange(v)
  }

  let seleted = []
  // 初始化value
  if (value && value != '') {
    if (_.isString(value)) seleted = [value]
    if (_.isObject(value)) seleted = value.$in
    if (_.isArray(value)) seleted = value
  }

  const renderData = data => {
    return data && data.length && data.map(item => {
      if (item.children && item.children.length) {
        return (
          <TreeNode
            key={item.value}
            title={item.title}
            value={item.value}
            disabled={true}
          >
            {renderData(item.children)}
          </TreeNode>
        );
      }
      return (
        <TreeNode
          key={item.value}
          value={item.value}
          title={item.title}
        />
      );
    })
  }

  return (
    <TreeSelect
      showSearch
      placeholder={_t1('搜索操作类型')}
      style={{ width: '100%', minWidth: 175 }}
      value={seleted}
      dropdownStyle={{ maxHeight: 400, overflow: 'auto' }}
      allowClear
      multiple
      onChange={handleChange}
    >
      {renderData(data.map(item=> {
        return {
          ... item,
          title: _t1(item.title)
        }
      }))}
    </TreeSelect>
  )
}

export default LogType
