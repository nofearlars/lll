import React from 'react'
import { use } from 'xadmin';
import { Select, TimePicker, Tooltip } from 'antd';
import moment from 'moment'
import NoCurrentDatePicker from './NoCurrentDatePicker'
const { Option } = Select;

function hourToday(h) {
  let d = []
  if (!h) return []
  if (h == 'January' || h == 'March' || h == 'May' || h == 'July' || h == 'August' || h == 'October' || h == 'December') {
    d = Array.from({ length: 31 }, (v, k) => k + 1)
  } else if (h == 'February') {
    d = Array.from({ length: 28 }, (v, k) => k + 1)
  } else {
    d = Array.from({ length: 30 }, (v, k) => k + 1)
  }
  return d
}

const CustomSelect = (props) => {
  
  const { ops = [], name, setState, state, label, defVal } = props

  const handleChange = (value) => {
    setState(state => ({ ...state, [name]: value }))
  }

  return (<>
    <Select
      onChange={handleChange}
      {...props}
      placeholder={'请选择几' + label}
      value={state[name] || defVal || undefined}
      style={{ marginRight: 10, maxWidth: '40%' }}
      suffixIcon={label || null}
    >
      {ops.map((item) => (<Option key={item.id || item}><Tooltip title={item.name || item} placement="rightTop">{item.name || item}</Tooltip></Option>))}
    </Select>
  </>)
}
const YmdwwpsPicker = (props) => {
  
  const { input } = props
  const { planCycle } = use('form', state => ({ planCycle: state && state.values && state.values?.cycle?.cycle_type }))
  const [state, setState] = React.useState(input.value)
  const [flag, steFlag] = React.useState(null)
  const optionsArr = {
    year: [{ id: 'January', name: '1' }, { id: 'February', name: '2' }, { id: 'March', name: '3' }, { id: 'April', name: '4' }, { id: 'May', name: '5' },
    { id: 'June', name: '6' }, { id: 'July', name: '7' }, { id: 'August', name: '8' }, { id: 'September', name: '9' }, { id: 'October', name: '10' },
    { id: 'December', name: '12' }],//Array.from({ length: 12 }, (v, k) => `${k + 1}`),
    week: [{ id: 'Monday', name: _t1('星期一') }, { id: 'Tuesday', name: _t1('星期二') }, { id: 'Wednesday', name: _t1('星期三') }, { id: 'Thursday', name: _t1('星期四') },
    { id: 'Friday', name: _t1('星期五') }, { id: 'Saturday', name: _t1('星期六') }, { id: 'Sunday', name: _t1('星期日') }]
  }
  React.useEffect(() => {
    steFlag(planCycle)
    if (!input.value) setState({})
    if (planCycle == 'year') setState(input.value || { month: "January", day: 1, hms: '00:00:00' })
    if (planCycle == 'week') setState(input.value || { weekday: "Monday", hms: '00:00:00' })
    if (planCycle == 'month') setState(input.value || { day: 1, hms: '00:00:00' })
    if (planCycle == 'day') setState(input.value || { hms: '00:00:00' })
    // if (flag && flag != planCycle) setState({})
  }, [planCycle])

  React.useEffect(() => { input.onChange({ ...state, day: state.day ? Number(state.day) : state.day }) }, [state])
  if (!planCycle) return '请先选择周期'
  if (planCycle == 'year') {
    return ([
      <CustomSelect name="month" label={_t1('月')} ops={optionsArr.year} setState={setState} state={state} defVal={'January'} />,
      <CustomSelect name="day" label={_t1('日')} ops={hourToday(state.month)} setState={setState} state={state} defVal={1} />,
      <TimePicker value={moment(state.hms || '00:00:00', 'HH:mm:ss')} onChange={(v, vs) => setState(state => ({ ...state, hms: vs }))} />
    ])
  } else if (planCycle == 'hour') {
    let HOURS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]
    return ([
      <TimePicker value={moment(state.hms || '00:00:00', 'HH:mm:ss')} format={'mm:ss'} hideDisabledOptions disabledHours={(s) => HOURS}
        onChange={(v, vs) => setState(state => ({ ...state, hms: vs }))} />
    ])
  } else if (planCycle == 'day') {
    return ([
      <TimePicker value={moment(state.hms || '00:00:00', 'HH:mm:ss')}
        onChange={(v, vs) => setState(state => ({ ...state, hms: vs }))}
      />
    ])
  } else if (planCycle == 'week') {
    return ([
      <CustomSelect name="weekday" label={_t1('日')} ops={optionsArr.week} setState={setState} state={state} defVal={'Monday'} />,
      <TimePicker value={moment(state.hms || '00:00:00', 'HH:mm:ss')}
        onChange={(v, vs) => setState(state => ({ ...state, hms: vs }))}
      />
    ])
  } else if (planCycle == 'month') {
    return ([
      <CustomSelect name="day" label={_t1('日')} ops={hourToday(2)} setState={setState} state={state} defVal={1} />,
      <TimePicker value={moment(state.hms || '00:00:00', 'HH:mm:ss')}
        onChange={(v, vs) => setState(state => ({ ...state, hms: vs }))} />
    ])
  } else if (planCycle == 'once') {
    return (<NoCurrentDatePicker {...props} EndDate={moment().subtract(0, 'days')} />)
  }
  else if (planCycle == 'hms') {
    return null
  } else if (planCycle == 'minute') {
    const ops = Array.from({ length: 60 }, (v, k) => `${k}`).map(item => {
      if (item.length == 1) return "0" + item.toString()
      return item
    })
    return <CustomSelect name="hms" label={_t1('秒')} ops={ops} setState={setState} state={state}
      onChange={(value) => { setState(state => ({ ...state, minute: 1, hms: '00:00:' + value })) }} />
  }
}


export default YmdwwpsPicker