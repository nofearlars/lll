import React from 'react';
import { api, config, use } from 'xadmin';
import { C, Icon, Page, Loading } from 'xadmin-ui';
import _ from 'lodash'
import { Button, Modal, Checkbox, Input, Popconfirm, Menu, Form, Layout, Select, DatePicker, message, Row, Col } from 'antd'
import { SchemaForm } from 'xadmin-form';
import LogType from '../LogType'
import YmdwwpsPicker from './YmdwwpsPicker'
import './index.css'
import { HasPermission } from 'xadmin-auth'

const { Content, Sider } = Layout;
const { Option } = Select
const { RangePicker } = DatePicker
const style = {
    width: '100%',
    padding: '10px'
}
const TableTile = (props) => {
    
    const { title, data, setState, setActive } = props
    let deleteQuery, url;
    switch(props?.btnModule) {
        case 'warning': 
            deleteQuery = data?.id
            url='warning/warningclean'
            break;
        case 'deviceManage': 
            deleteQuery = data?.name
            url='driver/cleancycle'
            break;
        case 'table': 
            deleteQuery = data?.id
            url='core/tabledataclean'
            break;    
        default:    
            deleteQuery = data.name
            url='core/cleancycle'
            break;   
    }

    const getMessage = () => {
        api({ name: url }).fetch('/' + deleteQuery, {}).then(({ json }) => {
            json.cycle = {
                cycle: json?.cycle,
                cycle_type: json?.cycle_type
            }
            setState(json)
        })
    }

    const onDisable = () => {
        let jsonBody = props.btnModule == 'table' ? { ...data, disable: !data.disable } : { ...data, disabled: !data.disabled }
        api({ name: url }).fetch('/' + deleteQuery, {
            method: 'PATCH',
            body: JSON.stringify(jsonBody)
        }).then((arg) => {
            const { json } = arg
            if (arg.status == 200) {
                message.success('修改成功')
                let obj = []
                json.cycle = {
                    cycle: json?.cycle,
                    cycle_type: json?.cycle_type
                }
                switch(props?.btnModule) {
                    case 'warning': 
                        getMessage()
                        break;
                    case 'table': 
                        getMessage()
                        break;    
                    case 'deviceManage': 
                        props?.b && setState({ ...json })
                        break;
                    default:    
                        props?.b && setState({ ...json })
                        break;   
                }
                // if (props.btnModule == 'warning' || props.btnModule == 'table') { getMessage() } else if (props?.b) {
                //     setState({ ...json })
                // }
            } else {
                message.error(arg.message)
            }
        }).catch(err => {
            message.error(JSON.parse(err.message).item)
        })
    }

    const onDelete = () => {
        api({ name: url }).fetch('/' + deleteQuery, {
            method: 'DELETE'
        }).then((arg) => {
            if (arg.status == 200) {
                message.success('删除成功')
                setState({})
                setActive('周期清除')
            } else {
                message.error(arg.message)
            }
        }).catch(err => {
            message.error(JSON.parse(err.message).item)
        })
    }

    let cleanEdit = "cleancycle.edit"
    let cleanDelete = "cleancycle.delete"
    let tips = !data.disabled ? _t1('确定禁用此项?') : _t1('确定启用此项?')
    let color = { color: data.disabled ? 'red' : '#36af57' }
    if (props.btnModule == 'warning') {
        cleanEdit = 'warningclean.edit'
        cleanDelete = 'warningclean.delete'
    }
    if (props.btnModule == 'table') {
        cleanEdit = 'tabledataclean.edit'
        cleanDelete = 'tabledataclean.delete'
        tips = !data.disable ? _t1('确定禁用此项?') : _t1('确定启用此项?')
        color = { color: data.disable ? 'red' : '#36af57' }
    }

    return <div style={{ width: '16rem', display: 'flex', justifyContent: 'space-between' }}>
        <span>{title}</span>
        <span style={{ marginRight: 50 }}>
            {cleanEdit ? <HasPermission FailureComponent={null}  permission={cleanEdit}>
                <Popconfirm
                    title={tips}
                    onConfirm={onDisable}
                    onCancel={() => { }}
                    okText={_t1('确定')}
                    cancelText={_t1('取消')}
                >
                    <Icon type="stop" style={color} />
                </Popconfirm>
            </HasPermission> : null
            }
            {
                cleanDelete ? <HasPermission FailureComponent={null}  permission={cleanDelete}>
                    <Popconfirm
                        title={_t1('确定删除此项?')}
                        onConfirm={onDelete}
                        onCancel={() => { }}
                        okText={_t1('确定')}
                        cancelText={_t1('取消')}
                    >
                        <Icon type="delete" />
                    </Popconfirm>
                </HasPermission> : null
            }
        </span>
    </div>
}
const rule = {
    d: 30,
    w: 52,
    m: 12,
    y: null
}
let cycleSchema = {
    type: 'object',
    properties: {
        name: {
            type: 'string',
            title: _r('周期名称')
        },
        type: {
            title: _r('日志类型'),
            field: {
                type: 'filter_enum',
                component: LogType,
                field: {
                    effect: (f, form) => {
                        const { initialValues } = form.getState()
                        if (initialValues && !_.isEmpty(initialValues)) {
                            if (f.value != initialValues.type) {
                                form.change('time_config', null)
                            }
                        }
                    }
                }
            },
        },
        cycle: {
            type: 'object',
            title: _r('清除周期'),
            // field: { expand: true },
            properties: {
                cycle: {
                    title: _r('数量'),
                    type: 'number',
                    field: {
                        validate: value => {
                            return (/^(0+)|[^\d]+/g.test(value) ? '只能为大于0的正整数' : null)
                        }
                    }
                },
                cycle_type: {
                    title: _r('日期单位'),
                    type: 'string',
                    field: {
                        component: ({ input }) => {
                            
                            const opt = [{ value: 'day', name: _t1('天') }, { value: 'week', name: _t1('周') }, { value: 'month', name: _t1('月') }, { value: 'year', name: _t1('年') }]
                            return <Select {...input} style={{ maxWidth: '200px' }}>
                                {opt.map(item => <Option value={item.value}>{item.name}</Option>)}
                            </Select>
                        },
                        effect: (f, form) => {
                            const { initialValues } = form.getState()
                            if (initialValues && !_.isEmpty(initialValues)) {
                                if (f.value != initialValues.cycle_type) {
                                    form.change('time_config', null)
                                }
                            }
                        },
                        validate: value => {
                            return !value ? _r('请选择日期单位') : null
                        }
                    }
                }
            },
            description: _r("周期定义后，将会按照周期定时清除周期内的日志信息")
        },
        time_config: {
            type: 'object',
            title: _r('清除时间'),
            properties: {},
            field: {
                component: YmdwwpsPicker,
                validate: (value, values) => {
                    const pl = values && values.planCycle || undefined
                    if (JSON.stringify(value) == '{}') return false
                    if (!value || typeof value == 'string') return false
                    if (values.type != 'hms' && values.type != 'minute') {
                        if (value && !value.hms) return _r('请选择执行时间')
                    }
                    if (pl == 'year') {
                        if (!value.hour) {
                            return _r('请选择执行月')
                        } else if (!value.day) return _r('请选择执行日')
                    } else if (pl == 'week') {
                        if (!value.week) return _r('请选择执行日')
                    } else if (pl == 'month') {
                        if (!value.day) return _r('请选择执行日')
                    }
                }
            },
            description: _r('可定义每个周期清除执行时间，不定义默认周期的00:00:00执行')
        },
        clean_archive: {
            title: _r('是否同时清除归档日志'),
            type: 'boolean'
        }
    },
    required: ['name', 'cycle']
    // formEffect: (form) => {
    //     const { initialValues, values } = form.getState()
    //     form.useField('types', state => {
    //         if (initialValues && !_.isEmpty(initialValues)) {
    //             if (state.value != initialValues.types) {
    //                 form.change('time_config', null)
    //             }
    //         }
    //     })
    // }
}
let onceSchema = {
    type: 'object',
    properties: {
        type: {
            title: _r('日志类型'),
            field: {
                type: 'filter_enum',
                component: LogType
            }
        },
        time: {
            title: _r('时间定义'),
            field: {
                component: (props) => {
                    const format = 'YYYY-MM-DD HH:mm:ss'
                    const { input: { onChange, value } } = props
                    return <RangePicker allowEmpty={[true, true]} onChange={(time, timeString) => {
                        onChange({ start_time: timeString[0], end_time: timeString[1] })
                    }} format={format} showTime
                        defaultValue={_.isArray(value.time) ? [moment(value.start_time, format), moment(value.end_time, format)] : null}
                        style={{ width: '100%' }} />
                }
            },
            description: '可选时间范围或只定义一个时间，定义一个时间默认将定义时间之前的日志清除'
        },
        clean_archive: {
            title: _r('是否同时清除归档日志'),
            type: 'boolean'
        }
    },
    form: ['type', {
        key: 'time', validate: (value, values) => {
            return value ? null : _r('时间定义不能为空')
        }
    }, '*'],
    required: ['time']
}

const Component = (props) => {
    
    const { onChange, value, setVisible, visible, active, setActive, modelDispatch, tableId } = props
    const { getItems } = use('model.getItems')
    const { getQueryFilter } = use('queryEditor.methods')

    const [arr, setArr] = React.useState([])
    const [searchArr, setSearchArr] = React.useState([])
    // const [ active, setActive ] = React.useState(null)
    const [state, setState] = React.useState({})
    const [type, setType] = React.useState('一键清除')

    const ArchiveSchema = props?.ArchiveSchema

    let _onceSchema = {}
    // cleanEdit = 'cleancycle.edit', cleanAdd = active == _t1('一键清除') ? 'cleancycle.instant' : 'cleancycle.add'
    let cleanAdd, cleanEdit;
    switch(props?.btnModule) {
        case 'warning': 
            cleanAdd = active == _t1('一键清除') ? 'warningclean.instant' : 'warningclean.add'
            cleanEdit = 'warningclean.edit'
            break;
        default:    
            cleanAdd = active == _t1('一键清除') ? 'cleancycle.instant' : 'cleancycle.add'
            cleanEdit = "cleancycle.edit"
            break;   
    }
    const currentValue = React.useRef()
    if (props?.btnModule == 'warning') {
        cleanEdit = 'warningclean.edit'
        cleanAdd = active == _t1('一键清除') ? 'warningclean.instant' : 'warningclean.add'
        _onceSchema = {
            ...props.onceSchema,
            properties: {
                ...props.onceSchema.properties,
                time: { ...props.onceSchema.properties.time, title: _r('清除时间') },
                range: { ...props.onceSchema.properties.range, title: _r('清除范围') },
                condition: { ...props.onceSchema.properties.condition, title: _r('清除条件') },
                type: { ...props.onceSchema.properties.type, title: _r('报警类型') },
                hasArchive: {
                    title: _r('是否同时清除归档报警'),
                    type: 'boolean'
                }
            },
            form: [...props.onceSchema.form, 'hasArchive']
        }
        cycleSchema = {
            ...props.cycleSchema,
            properties: {
                ...props.cycleSchema.properties,
                interval: { ...props.cycleSchema.properties.interval, title: _r('清除周期') },
                range: { ...props.cycleSchema.properties.range, title: _r('清除范围') },
                condition: { ...props.cycleSchema.properties.condition, title: _r('清除条件') },
                type: { ...props.cycleSchema.properties.type, title: _r('报警类型') },
                // cycle: cycleSchema.properties.cycle,
                // time_config: cycleSchema.properties.time_config,
                hasArchive: {
                    title: _r('是否同时清除归档报警'),
                    type: 'boolean'
                }
            }
        }
        cycleSchema.form = ['name', ...cycleSchema.form.filter(item => item?.key != 'name'), 'hasArchive']
    } else if (props?.btnModule == 'table') {
        cleanEdit = 'tabledataclean.edit'
        cleanAdd = active == _t1('一键清除') ? 'tabledataclean.instant' : 'tabledataclean.add'

        _onceSchema = {
            ...props.onceSchema,
            properties: {
                ...props.onceSchema.properties,
                // createTime_default: { ...props.onceSchema.properties.createTime_default, title: _r('清除时间') },
                settings: { ...props.cycleSchema.properties.settings, title: _r('清除条件') },
                hasArchive: {
                    title: _r('是否同时清除归档数据'),
                    type: 'boolean'
                }
            },
            form: [...props.onceSchema.form, 'hasArchive'],
            required: []
        }
        cycleSchema = {
            ...props.cycleSchema,
            properties: {
                ...props.cycleSchema.properties,
                interval: { ...props.cycleSchema.properties.interval, title: _r('清除周期') },
                settings: { ...props.cycleSchema.properties.settings, title: _r('清除条件') },
                hasArchive: {
                    title: _r('是否同时清除归档数据'),
                    type: 'boolean'
                }
            }
        }
        cycleSchema.form = [...cycleSchema.form.filter(item => item?.key != 'name'), 'hasArchive']
    } else if (props?.btnModule == 'deviceManage') {
        _onceSchema = {
            ...onceSchema,
            properties: {
                time: { ...onceSchema.properties.time, title: '清除时间' },
                cycle_tyle: { ...ArchiveSchema.properties.cycle_tyle, title: '清除类型' },
                tables: {  ...ArchiveSchema.properties.tables },
                tableData: { ...ArchiveSchema.properties.tableData },
                commands: { ...ArchiveSchema.properties.commands },
                users: { ...ArchiveSchema.properties.users },
                clean_archive: {
                    title: '是否同时清除归档指令日志',
                    type: 'boolean'
                }
            },
            form: [ 'time', 'cycle_tyle', 'tables', 'tableData', 'commands', 'users', 'clean_archive' ],
            formEffect: ArchiveSchema.formEffect,
        }

        cycleSchema= {
            ...cycleSchema,
            properties: {
                ...ArchiveSchema.properties,
                cycle: { ...cycleSchema.properties.cycle, title: '清除周期' },
                time_config: { ...cycleSchema.properties.time_config, title: '清除时间' },
                cycle_tyle: { ...ArchiveSchema.properties.cycle_tyle, title: '清除类型' },
                clean_archive: {
                    title: '是否同时清除归档指令日志',
                    type: 'boolean'
                }
            },
            form: [ ...ArchiveSchema.form, 'clean_archive' ],
            formEffect: ArchiveSchema.formEffect
        }
    }   else {
        _onceSchema = onceSchema
    }

    const ChildrenNode = (props) => {
        let { children, change, invalid, handleSubmit, submitting, onCancel, limits, currentValue, btnModule, formkey } = props
        const { form, values: { name, type } } = use('form', state => ({ values: state && state.values }))

        React.useEffect(() => { cycleSchema.formEffect && cycleSchema.formEffect(form) }, [cycleSchema])

        if (props.errors && Object.keys(props.errors).length == 1 && props.errors.time) invalid = false
        // if (JSON.stringify(type) == '{}') invalid = true

        let warnKey = formkey.substring(formkey.indexOf('-') + 1)

        return (
            <Form onSubmit={handleSubmit}>
                {active !== _t1('周期清除') ?
                    <div style={{ width: '80%', margin: '20px auto' }}>{children}</div> :
                    <div style={{ width: '80%', margin: '20px auto', color: '#ccc' }}>
                        <Row>
                            <Col span={5}></Col>
                            <Col span={19}>{_t1('请选择添加周期或已有周期')}</Col>
                        </Row>
                    </div>
                }

                <div style={{ textAlign: 'right', margin: '40px 50px 0px 0px' }}>
                    <Form.Item><br />
                        {
                            warnKey == 'warning' && currentValue?.current?.condition?.length == 0 ?
                                <>
                                    {[_t1('一键清除'), _t1('周期清除')].includes(active) || !active ? cleanAdd ? <HasPermission FailureComponent={null}  permission={cleanAdd}>
                                        <Popconfirm title="当前清除条件为空，将忽略确认及处理操作的状态，
                                            对满足其他条件的报警进行清除，为了防止出现失误，请谨慎操作！"
                                            overlayStyle={{ width: 300 }}
                                            onConfirm={handleSubmit} okText={_t1('确定')} cancelText={_t1('取消')}
                                        >
                                            <Button type="primary" loading={submitting} disabled={invalid}>{_t1('确定')}</Button>
                                        </Popconfirm>
                                    </HasPermission> : null : cleanEdit ? <HasPermission FailureComponent={null}  permission={cleanEdit}>
                                        <Popconfirm title="当前清除条件为空，将忽略确认及处理操作的状态，
                                            对满足其他条件的报警进行清除，为了防止出现失误，请谨慎操作！"
                                            overlayStyle={{ width: 300 }}
                                            onConfirm={handleSubmit} okText={_t1('确定')} cancelText={_t1('取消')}
                                        >
                                            <Button type="primary" loading={submitting} disabled={invalid}>{_t1('修改')}</Button>
                                        </Popconfirm>
                                    </HasPermission> : null
                                    }
                                </>
                                : <>
                                    {[_t1('一键清除'), _t1('周期清除')].includes(active) || !active ? cleanAdd ? <HasPermission FailureComponent={null}  permission={cleanAdd}>
                                        <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
                                            {_t1('确定')}
                                        </Button>
                                    </HasPermission> : null : cleanEdit ? <HasPermission FailureComponent={null}  permission={cleanEdit}>
                                        <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
                                            {_t1('修改')}
                                        </Button>
                                    </HasPermission> : null
                                    }
                                </>
                        }
                        <Button style={{ marginLeft: 15 }} onClick={() => { setActive('一键清除'); setType('一键清除'); setVisible(false); setState({}) }}>{_t1('取消')}</Button>
                    </Form.Item>
                </div><br />
            </Form>
        )
    }

    const handlerDatas = (arr) => {
        const obj = {};
        arr.forEach((item, index) => {
        const { table: { id } } = item; //解构赋值
        if (!obj[id]) {
            obj[id] = {
            id,
            children: []
            }
        }
        obj[id].children.push(item);
        });
        const data = Object.values(obj); // 最终输出
        return data
    }

    React.useEffect(() => {
        let url = 'core/cleancycle'
        let query = { "limit": 30, "skip": 0, "sort": { "createTime": -1 }, "withCount": true }

        if (props?.btnModule == 'warning') {
            url = 'warning/warningclean'
            query = {
                "limit": 30, "skip": 0, "sort": { "createTime": -1 }, project: {
                    condition: 1, cycle: 1, cycle_type: 1, type: 1, hasArchive: 1,
                    // department: 1, 
                    disabled: 1, table: 1, name: 1, range: 1, status: 1, time_config: 1, processed: 1, tableData: 1
                }, "withCount": true
            }
        }
        if (props?.btnModule == 'table') {
            url = 'core/tabledataclean'
            query = {
                "limit": 30, "skip": 0, "sort": { "createTime": -1 },
                project: { disable: 1, name: 1, interval: 1, settings: 1, query: 1, table: 1, }, "withCount": true,
                filter: { table: tableId },
            }
        }
        if (props?.btnModule == 'deviceManage') {
            url = 'driver/cleancycle'
            query = {
                "limit": 30, "skip": 0, "sort": { "createTime": -1 }, project: {
                    name: 1, cycle: 1, cycle_type: 1, clean_archive: 1, tables: 1, tableData: 1, users: 1, commands: 1, disabled: 1, time_config: 1,
                }, "withCount": true
            }
        }
        active != _t1('一键清除') && api({ name: url }).fetch('?query=' + JSON.stringify(query), {})
            .then(({ status, json }) => {
                if (status == 200) {
                    setArr(json)
                    setSearchArr(json)
                } else {
                    message.error(arg.message)
                }
            })
    }, [state, visible, props?.btnModule, active, tableId])

    const onSearch = value => {
        setSearchArr([...arr].filter(item => item.name.indexOf(value.target.value) != -1))
    };
    const addPeriodic = () => {
        setState({
            name: null//moment(new Date()).format('YYYY-MM-DD_HH:mm:ss')
        })
        setActive(null)
    }
    const searchSelect = (id) => {
        let url = 'core/cleancycle'
        if (props?.btnModule == 'warning') { url = 'warning/warningclean' }
        if (props?.btnModule == 'table') { url = 'core/tabledataclean' }
        if (props?.btnModule == 'deviceManage') { url = 'driver/cleancycle' }

        api({ name: url }).fetch('/' + id, {})
            .then(({ status, json }) => {
                if (status == 200) {
                    json.cycle = {
                        cycle: json.cycle,
                        cycle_type: json.cycle_type
                    }
                    setState({ ...json })
                } else {
                    message.error(arg)
                }
            })
    }
    const remove = (i) => () => {
        setSearchArr([
            ...arr.slice(0, i),
            ...arr.slice(i + 1)
        ])
    }
    const onSubmit = (value) => {
        let val = _.cloneDeep(value)
        let url = type == _t1('一键清除') ? "core/cleancycle/cleanonce" : "core/cleancycle"

        if (props?.btnModule == 'warning') {
            url = type == _t1('一键清除') ? 'warning/warningclean/instantDelete' : "warning/warningclean"
            val.type = type == _t1('一键清除') ? _.isArray(val.type) ? { "$in": val.type } : val.type : val.type
            if (val?.condition?.length) {
                // processed 处理  status确认
                if (val.condition.indexOf('已处理') > -1) val['processed'] = _t1('已处理')
                if (val.condition.indexOf('已确认') > -1) val['status'] = _t1('已确认')
            }
            if (val?.department?.length) { 
                const _depart = handlerDatas(val?.department)
                let arr = []
                _depart.forEach(item => {
                    arr = [ ...arr, { [`${item.id}Id`]: { '$in': item.children.map(v => v.id) } } ]
                })
                if(arr?.length) val['$or'] = arr
            }
            if (type == _t1('一键清除')) {
                if (val?.table?.length) { val['tableId'] = { '$in': val.table.map(item => item?.id) } }
                if (val?.tableData?.length) { val['tableDataId'] = { '$in': val.tableData.map(item => item?.id) } }
                if (val?.desc?.length) { val['desc'] = { '$in': val.desc.map(item => item.substr(item.lastIndexOf('-') + 1)) } } else { delete val.desc }
                if (val?.time) { val.time = { '$gte': val.time.gte, '$lte': val.time.lte } }
                delete val.condition
                // delete val.types
                delete val?.department
                delete val.table
                delete val.range
                delete val.tableData
                val = { filter: { ...val } }
            }
        } else if (props?.btnModule == 'table') {
            url = type == _t1('一键清除') ? 'core/tabledataclean/instantDelete' : "core/tabledataclean"

            let filter = {}
            if (val) {
                if (val?.settings?.conditions?.length) {
                    filter = { ...filter, ...getQueryFilter(val?.settings?.conditions, props?.schema) }
                }
                filter['hasArchive'] = val?.hasArchive
            }
            if (props?.tableId) filter['table'] = props.tableId
            if (type == _t1('一键清除')) {
                val = { ...val, filter }
            } else {
                val = { ...val, table: props?.tableId, query: { filter } }
                val.disable = _.isEmpty(val.disable) ? false : val.disable
            }

        } else if (props?.btnModule == 'deviceManage') {
            url = type == '一键清除' ? 'driver/cleancycle/cleanonce' : "driver/cleancycle"
            if (type == '一键清除') {
                val = _.isObject(val.time) ? {
                    ...val,
                    time: {
                        $gte: val?.time?.start_time,
                        $lte: val?.time?.end_time
                    }
                } : { ...val, end_time: val.time }
                if (_.isEmpty(val.start_time)) delete val.start_time
                if (_.isEmpty(val.end_time)) delete val.end_time
                // delete val.types
            } else {
                val.disabled = _.isEmpty(val.disabled) ? false : val.disabled
            }
        }   else {
            if (type == _t1('一键清除')) {
                val = _.isObject(val.time) ? {
                    ...val,
                    time: {
                        $gte: val?.time?.start_time,
                        $lte: val?.time?.end_time
                    }
                } : { ...val, end_time: val.time }
                if (_.isEmpty(val.start_time)) delete val.start_time
                if (_.isEmpty(val.end_time)) delete val.end_time
                // delete val.types
            } else {
                val.disabled = _.isEmpty(val.disabled) ? false : val.disabled
            }
        }
        const bul = val.name !== active && ![_t1('一键清除'), _t1('周期清除')].includes(active)
        let logUrl = url + (![_t1('一键清除')].includes(active) && active ? `/${bul ? active : val.name}` : '')
        let warningUrl = url + (![_t1('一键清除')].includes(active) && active ? `/${bul ? active : val?.id}` : '')
        let deviceUrl = url + (!['一键清除'].includes(active) && active ? `/${bul ? active : val.name}` : '')

        if (props?.btnModule == 'warning' && type == _t1('一键清除') || props?.btnModule == 'table' && type == _t1('一键清除')) {
            const query = encodeURIComponent(JSON.stringify(val))
            api({ name: `${warningUrl}?query=${query}` }).fetch('', {}).then((arg) => {
                if (arg.status >= 200 && arg.status < 400) {
                    message.success('清除成功')
                    setState({})
                    setActive('一键清除')
                    setType('一键清除')
                    setVisible(false)
                    // modelDispatch({ type: 'GET_ITEMS' })
                    getItems()
                } else {
                    message.error(arg.message)
                }
            })
        } else {
            let fetchUrl;
            switch(props?.btnModule) {
                case 'warning':
                    fetchUrl = warningUrl
                    break;
                case 'table':
                    fetchUrl = warningUrl
                    break;    
                case 'deviceManage':
                    fetchUrl = deviceUrl
                    break;   
                default: 
                    fetchUrl = logUrl
                    break;   
            }
            api({ name: fetchUrl }).fetch('', {
                method: [_t1('一键清除'), _t1('周期清除')].includes(active) || !active ? 'POST' : 'PATCH',
                body: JSON.stringify({ ...val, ...val.cycle })
            }).then((arg) => {
                if (arg.status >= 200 && arg.status < 400) {
                    message.success('保存成功！')
                    setState({})
                    setActive('一键清除')
                    setType('一键清除')
                    setVisible(false)
                    // modelDispatch({ type: 'GET_ITEMS' })
                    getItems()
                } else {
                    message.error(arg.message)
                }
            }).catch(err => {
                message.error(err.message)
            })
        }
    }

    return (
        <Layout style={{ padding: 0, maxHeight: 550 }} className="warn-archive-model clear-model">
            {type == _t1('一键清除') ? null : <Sider width={250} style={{ borderRight: '1px solid #f0f0f0', overflow: 'auto' }}>
                <div style={style}><Input placeholder="搜索..." onChange={onSearch} /></div>
                <Menu mode="inline" selectedKeys={active} onSelect={(arg) => {
                    setActive(arg.key);
                    let id = arg.key
                    if (props?.btnModule == 'warning' || props?.btnModule == 'table') { id = arg?.item?.props?.id }
                    searchSelect(id)
                }}>
                    {searchArr?.map((item, index) => <Menu.Item key={item.name} id={item?.id}>
                        <TableTile btnModule={props?.btnModule} title={item.name} remove={remove} index={index} data={item} setActive={setActive} setState={setState} />
                    </Menu.Item>)}
                </Menu>
            </Sider>}
            <Layout style={{ padding: 0 }} className="clear-model">
                <Content style={{ padding: 10, overflow: 'auto' }}>
                    {type == _t1('一键清除') ? null : <Button type={'primary'} onClick={addPeriodic}>{_t1('添加周期')}</Button>}
                    <C is="I18nSchemaForm" formkey={'test'}
                        onChange={(arg) => {
                            setType(arg.clearType)
                            setActive(arg.clearType)
                            if (arg.clearType == _t1('一键清除')) setState({})
                        }}
                        initialValues={{ clearType: type }}
                        schema={{
                            type: 'object',
                            properties: {
                                clearType: {
                                    type: 'string',
                                    title: _r('清除方式'),
                                    enum: [_t1('一键清除'), _t1('周期清除')]
                                },
                            }
                        }}
                        component={({ children }) => <Form >
                            <div style={{ width: '80%', margin: '20px auto' }}>{children}</div>
                        </Form>}
                    />
                    {/* <HasPermission FailureComponent={null}  permission="cleancycle.instant"> */}
                    <C is="I18nSchemaForm" formkey={`ClearLogBtn-${props?.btnModule}`}
                        schema={type == _t1('一键清除') ? _onceSchema : cycleSchema}
                        initialValues={state}
                        component={props => <ChildrenNode {...props} currentValue={currentValue} setVisible={setVisible} btnModule={props?.btnModule} />}
                        onSubmit={value => { onSubmit(value); currentValue.current = null }}
                        onChange={value => currentValue.current = value}
                    />
                    {/* </HasPermission> */}

                </Content>
            </Layout>
        </Layout>
    )
}

const ClearLogBtn = (props) => {
    
    const { onChange, modelDispatch } = props
    const [visible, setVisible] = React.useState(false);
    const [active, setActive] = React.useState('一键清除')

    let title = _t1('日志')
    switch(props?.btnModule) {
        case 'warning':
            title = _t1('报警');
            break;
        case 'table': 
            title = _t1('表记录');
            break;
        case 'deviceManage':
            title = _t1('指令日志');
            break;   
        default: 
            title = _t1('日志');
            break;   
    }

    // return React.useMemo(()=>{
    return <>
        <Modal destroyOnClose={true}
            maskClosable={false}
            keyboard={false}
            title={_t1('清除{{title}}', { title: title })}
            visible={visible}
            footer={[]}
            onCancel={() => { setActive('一键清除'); setVisible(false); }}
            width={'60%'}
        >
            <Component {...props} onChange={(arg) => { onChange(arg) }} visible={visible} setVisible={setVisible} active={active} setActive={setActive} modelDispatch={modelDispatch} />
        </Modal>
        <Popconfirm placement="bottomRight"
            icon={null} title={_t1('清除的{{title}}将无法恢复，确定进行清除操作', { title: title })}
            onConfirm={() => setVisible(true)} >
            <Button>{`${_t1('清除')}${title}`}</Button>
        </Popconfirm>

    </>
    // },[visible])
}

export default ClearLogBtn
