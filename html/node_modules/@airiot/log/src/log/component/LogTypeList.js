import React from 'react'
import moment from 'moment'
import { app, use, api } from 'xadmin'
import { Form, SchemaForm } from 'xadmin-ui'
import { ModelBlock } from 'xadmin-model'
import { Page, C, Icon, Loading } from 'xadmin-ui'
import { Tabs, Button, Form as AntdForm, Card, Tag, Pagination, Badge, Checkbox, Col, Layout, Radio } from 'antd';
import { Model } from 'xadmin-model'
import DataTable from './WarningDataTable'
import { _t } from 'xadmin-i18n'
import _ from 'lodash'
import { useRecoilState, useSetRecoilState } from 'recoil'

const { Content, Sider } = Layout

const DefaultAddButton = ({ onAdd, children }) => (
  <Button type="primary" onClick={onAdd}>{children}</Button>
)

const RankTag = ({ activeKey, setLevel, level, types, typeObj }) => {
  
  const levels =[_t1('全部'), _t1('高'), _t1('中'), _t1('低')]
  const { modelDispatch, getModelState = () => { } } = use('model')
  // const { wheres, wheres: { tabs: filters } } = getModelState()
  const [checked, setChecked] = React.useState(level || '全部')

  const onChange = e => {
    setChecked(e.target.value)
    setLevel(e.target.value)
    let filter = e.target.value == _t1('全部') ? _.omit({ type: activeKey }, ['level']) : {
      'level': e.target.value, type: activeKey,
    }
    //全部报警
    if (activeKey == 'xcl') filter = _.omit({ ...filter, 'handle': true }, ['type'])
    if (activeKey == 'quanbu') filter = _.omit({ ...filter, }, ['type', 'handle'])

    modelDispatch({ type: 'GET_ITEMS', wheres: { tabs: filter } })
  }

  return (
    <Radio.Group value={checked} buttonStyle="solid" onChange={onChange}>
      {levels.map(item => (<Radio.Button value={item} >{item}</Radio.Button>))}
    </Radio.Group>
  )
}

const LogArchivePage = props => {
  
  const { model } = use('model')
  const { canAdd } = use('model.permission')
  const { onAdd } = use('model.event')
  const { settings: { warning, } } = use('settings')
  const type = warning && warning.warningkind || []
  const types = _.clone(type)

  types.unshift({ name: _t1('需处理报警'), id: 'xcl', show: true })
  if (warning && warning.show_all) {
    types.unshift({ name: _t1('全部报警'), id: 'quanbu', show: true })
  }
  if (warning && warning.show_recovery) {
    types.splice(1, 0, { name: _t1('报警恢复'), id: 'huifu', show: true })
  }
  const title = model.title
  let icon = model.icon || model.name
  if (_.isString(icon)) icon = <Icon name={icon} />

  const renderActions = () => {
    const AddButton = (model.components && model.components.AddButton) || C('Model.AddButton') || DefaultAddButton
    return (<>
      <ModelBlock name="model.list.navbtn" />
      {canAdd ?
        (<AddButton onAdd={onAdd}><Icon name="plus" /> {_t('Add {{object}}', { object: model.title })}</AddButton>) : null
      }
    </>)
  }

  return (
    <Page className={`xadmin-model-list-${model.key}`}
      title={(<span>{icon} {title}</span>)}
      subTitle={<ModelBlock name="model.list.nav" />}
      actions={renderActions()}>
      <ModelBlock name="model.list.submenu" />
      {types && types.length > 0 ? (<WarningInfoTabs types={types} />) : (
        <Model name="Warning" modelKey={'Warning'} >
          <ModelBlock name="model.list.sidemenu" >
            {sideMenu => (
              <ModelBlock name="model.list.sidepanel" >
                {sidePanel => (sideMenu || sidePanel) ? (
                  <Layout>
                    {sideMenu ? <Sider width={200} style={{ backgroundColor: 'transparent', marginRight: '.5rem' }}>{sideMenu}</Sider> : null}
                    <Content>{GridComponents}</Content>
                    {sidePanel ? <Sider width={200} style={{ backgroundColor: 'transparent', marginLeft: '.5rem' }}>{sidePanel}</Sider> : null}
                  </Layout>
                ) : GridComponents}
              </ModelBlock>
            )}
          </ModelBlock>
        </Model>
      )}
    </Page>
  )
}

const Paginations = props => {
  const { emptyComponent, items, activePage, maxButtons = 6, changePage, ...propss } = use('model.pagination', props)
  if (items == 0) return null
  return (
    <Pagination showQuickJumper={items > 10} current={activePage}
      size={props.size == 'sm' ? 'small' : ''} className={props.className}
      pageSize={1} total={items} onChange={changePage} {...propss}
    />
  )
}

const GridComponents = ({ types, level, activeKey, setLevel, typeObj }) => [
  <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
    <RankTag style={{ marginLeft: 20 }} typeObj={typeObj} types={types} level={level} activeKey={activeKey} setLevel={setLevel} />
    <C is="Model.ListSubMenu" />
  </div>,
  <DataTable />,
  <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
    <C is="Model.ActionBar" />
    <Paginations showSizeChanger={false} />
  </div>
]

const WarningInfoTabs = ({ types: warTypes }) => {
  
  const [arr, setArr] = React.useState(null)
  const [activeKey, setActiveKey] = React.useState(warTypes[0]['id'] || null)
  const { modelDispatch, model, atoms } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  const filters = wheres?.filters
  // const { wheres, wheres: { tabs: filters }, filter: stateFilter } = getModelState()
  const [level, setLevel] = React.useState('全部')
  const [typeObj, setTypeObj] = React.useState(warTypes[0])
  const [types, setTypes] = React.useState(warTypes.filter(item => item && item['show']))

  React.useEffect(() => {
    // 跳转页面记录查询条件 再次返回默认查询
    let ws = {}
    if (wheres && JSON.stringify(wheres) == '{}') {
      ws = { tabs: { 'handle': true } }
      if (typeObj && typeObj.name == _t1('全部报警')) {
        ws = { tabs: {} }
      } else if (typeObj && typeObj.name == _t1('需处理报警')) {
        ws = { tabs: { 'handle': true } }
      } else if (typeObj && typeObj.name == _t1('报警恢复')) {
        ws = { tabs: { recoveryTime: { "$exists": true } } }
      }
    } else {
      ws = wheres || {}
      if (ws && ws.tabs && ws.tabs.level) {
        setLevel(ws.tabs.level)
      }
      if (ws && ws.tabs && ws.tabs.handle) {
        setActiveKey('xcl')
      }
      if (ws && ws.tabs && ws.tabs.type) {
        setActiveKey(ws.tabs.type)
      }
    }
    let cloneFilter = _.cloneDeep(stateFilter)
    let index = cloneFilter.fields.indexOf('recoveryTime')
    if (activeKey != 'huifu') {
      if (index > -1) cloneFilter.fields.splice(index, 1)
    } else {
      if (index == -1) {
        cloneFilter.fields.splice(1, 0, 'recoveryTime')
      }
    }
    modelDispatch({ type: 'GET_ITEMS', filter: { ...cloneFilter, skip: 0 }, wheres: { ...ws } })
    // modelDispatch({ type: 'GET_ITEMS', wheres: { ...ws } })
  }, [])

  const onChange = (activeKey) => {
    if (!activeKey) return
    let filter = _.omit({ ...(filters || {}), type: activeKey }, ['level']) || {}
    const typeObj = _.find(types, opt => opt.id == activeKey)

    let cloneFilter = _.cloneDeep(stateFilter)
    let index = cloneFilter.fields.indexOf('recoveryTime')
    if (activeKey != 'huifu') {
      if (index > -1) {
        cloneFilter.fields.splice(index, 1)
        delete filter['recoveryTime']
      }
    } else {
      if (index == -1) {
        cloneFilter.fields.splice(1, 0, 'recoveryTime')
      }
    }

    setLevel('全部')
    setTypeObj(typeObj)
    setActiveKey(activeKey)
    if (typeObj && typeObj.name == _t1('需处理报警')) {
      // 所有报警去除类型
      modelDispatch({
        type: 'GET_ITEMS', filter: { ...cloneFilter, skip: 0 }, wheres: {
          tabs: _.omit({ ...filter, 'handle': true }, ['type'])
        }
      })
    } else if (typeObj && typeObj.name == _t1('全部报警')) {
      modelDispatch({
        type: 'GET_ITEMS', filter: { ...cloneFilter, skip: 0 }, wheres: {
          tabs: _.omit({ ...filter }, ['type', 'handle'])
        }
      })
    } else if (typeObj && typeObj.name == _t1('报警恢复')) {
      modelDispatch({
        type: 'GET_ITEMS', filter: { ...cloneFilter, skip: 0 },
        wheres: { tabs: _.omit({ ...filter, recoveryTime: { "$exists": true } }, ['type']) }
      })
    } else {
      modelDispatch({ type: 'GET_ITEMS', filter: { ...cloneFilter, skip: 0 }, wheres: { tabs: _.omit({ ...filter }, ['handle']) } })
    }
  }


  return types ? (
    <Tabs activeKey={activeKey} onChange={onChange}>
      {types && types.map((kind, i) => {
        return (<Tabs.TabPane key={kind && kind.id} tab={kind && kind.name} >
          <ModelBlock name="model.list.sidemenu" >
            {sideMenu => (
              <ModelBlock name="model.list.sidepanel" >
                {sidePanel => (sideMenu || sidePanel) ? (
                  <Layout>
                    {sideMenu ? <Sider width={200} style={{ backgroundColor: 'transparent', marginRight: '.5rem' }}>{sideMenu}</Sider> : null}
                    <Content><GridComponents typeObj={typeObj} types={types} level={level} activeKey={activeKey} setLevel={setLevel} /></Content>
                    {sidePanel ? <Sider width={200} style={{ backgroundColor: 'transparent', marginLeft: '.5rem' }}>{sidePanel}</Sider> : null}
                  </Layout>
                ) : <GridComponents typeObj={typeObj} types={types} activeKey={activeKey} level={level} setLevel={setLevel} />}
              </ModelBlock>
            )}
          </ModelBlock>
        </Tabs.TabPane>)
      })}
    </Tabs>
  ) : <Loading />
}


export default LogArchivePage
