import React, { useState, useEffect } from 'react'
import { use, api, app } from 'xadmin'
import { C } from 'xadmin-ui'
import _ from 'lodash'
import { message, Tabs, Card, Row, Form, Col, Input, Modal, Button, Select, Checkbox, Tooltip, InputNumber } from 'antd'
import { SchemaForm } from 'xadmin-form';
import { QuestionCircleOutlined } from '@ant-design/icons';
const CheckboxGroup = Checkbox.Group;
import "./index.css"

const TypePicker = (props) => {
  const { input: { onChange, value }, noCheckbox=false, logLevelValue=[], record={} } = props;
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isChecked, setIsChecked] = useState('')
  const [selectedValues, setSelectedValues] = useState(_.compact(_.map(value, (v, k) => v ? k : null)) || []);
  const [allLogs , setAllLogs] = useState('')
  const handleCheckboxChange = e => {
    const newValue = e.target.checked
    setIsChecked(newValue)

  }
  React.useEffect(() => {
    const result = _.some(value, value => value === true);
    if (result) {
      setIsChecked(result)
    }
  }, [])
  const showModal = () => {
    setIsModalOpen(true);
  };
  React.useEffect(() => {
    api({ name: 'core/log/type' })
      .fetch('', {})
      .then(({ json }) => {
        let cloneJson = _.cloneDeep(json?.data)
        const allValues = cloneJson?.flatMap((item) => [
          item.value,
          ...(item.children || []).map((child) => child.value),
        ]);
        setAllLogs(allValues)
      })
    },[])
  const handleOk = () => {
    setIsModalOpen(false);
    const selectedlogs = {};
    allLogs.forEach(item=>{
      selectedlogs[item] = false;
    })
    selectedValues.forEach(item => {
      selectedlogs[item] = true;
    });
    onChange(selectedlogs)
  };
  const handleCancel = () => {
    setIsModalOpen(false);
  };

  return (
    <div>
      { noCheckbox ? null : <Checkbox onChange={handleCheckboxChange} checked={isChecked}>指定</Checkbox> }
      <Button disabled={noCheckbox ? false : !isChecked} onClick={showModal}>类型选择</Button>
      <Modal width={"70%"} title="日志类型" visible={isModalOpen} onOk={handleOk} onCancel={handleCancel} className='log-modal'>
        <LogTabComponent selectedValues={selectedValues} setSelectedValues={setSelectedValues} 
          logLevelValue={logLevelValue} record={record} noCheckbox={noCheckbox} />
      </Modal>
    </div>
  )
}
const tabs = [
  { name: '物联管理', key: 'manage' },
  { name: '数据分析', key: 'analysis' },
  { name: '画面', key: 'dashboard' },
  { name: '业务流', key: 'flow' },
  { name: '权限', key: 'auth' },
  { name: '基础模块', key: 'common' }
]

const disbaledMap = {
  流程修改: true,
  流程删除: true,
  删除画面: true,
  编辑画面: true,
  发送指令: true,
  批量发送指令: true,
}

const LogTabComponent = ({ selectedValues, setSelectedValues, logLevelValue, record, noCheckbox }) => {
  const [data, setData] = React.useState()
  const allValues = data?.flatMap((item) => [
    item.value,
    ...(item.children || []).map((child) => child.value),
  ]);
  const [checkedList, setCheckedList] = useState(selectedValues ? selectedValues : allValues);
  const [childCheckedMap, setChildCheckedMap] = useState({})

  const getFilterLogLevel = (logJson, mergeValue) => {
    return logJson.filter(val => {
      if(val?.children?.length) {
        val.children = getFilterLogLevel(val.children, mergeValue)
        if(val?.children?.length) return val.children
      } else {
        return mergeValue.indexOf(val?.value) == -1
      }
    })
  }


  React.useEffect(() => {
    api({ name: 'core/log/type' })
      .fetch('', {})
      .then(({ json }) => {
        let logJson //= json?.data;
        let cloneJson = _.cloneDeep(json?.data)
        if(logLevelValue?.length) {
          let newLevel =  _.cloneDeep(logLevelValue)
          if(record?.id) {
            newLevel = logLevelValue.filter(item => item?.id != record?.id)
          }
          const newValue = _.map(newLevel, 'logType')
          const mergeValue = _.reduce(newValue, function(result, value, key) {
            Object.keys(value).forEach(val => {
              result = [...result, val]
            })
            return result
          }, [])
          const filterValue = cloneJson?.length ? getFilterLogLevel(cloneJson, mergeValue) : []
          logJson = filterValue
        } else {
          logJson = json?.data
        }
        setData(logJson);
        const newChildCheckedMap = {};
        logJson.forEach((item) => {
          if (item.children) {
            item.children.forEach((child) => {
              const childKey = `${item.value}_${child.value}`;
              const isChecked = checkedList.includes(child.value);
              newChildCheckedMap[childKey] = isChecked;
            });
          }
        })
        const path = window.location.pathname
        const ids = path.slice(path.indexOf("_") + 1)
        setChildCheckedMap(newChildCheckedMap);
        if(!noCheckbox) {
          localStorage.setItem(`logchecked/${ids}`, JSON.stringify(newChildCheckedMap))
        }
      })
  }, [ JSON.stringify(logLevelValue), JSON.stringify(record), noCheckbox ])




  React.useEffect(() => {
    if (allValues && allValues.length > 0) {
      const newChildCheckedMap = {};
      data?.forEach((item) => {
        if (item.children) {
          item.children.forEach((child) => {
            const childKey = `${item.value}_${child.value}`;
            newChildCheckedMap[childKey] = true;
          });
        }
      });
      if (!noCheckbox && selectedValues?.length === 0) {
        setChildCheckedMap(newChildCheckedMap);
        setCheckedList(allValues);
        setSelectedValues(allValues);
      }
    }
  }, [ data, noCheckbox ]);


  const handleParentCheckboxChange = (parentItem, e) => {
    const { value: parentValue, children } = parentItem;
    const parentChecked = e.target.checked;
    const childValues = getChildValues(children);
    let newCheckedList = [...checkedList];
    let newChildCheckedMap = { ...childCheckedMap };

    if (parentChecked) {
      newCheckedList = Array.from(new Set([...newCheckedList, parentValue, ...childValues]));
      childValues.forEach((child) => {
        const childKey = `${parentValue}_${child}`;
        newChildCheckedMap[childKey] = true;
      });
      setSelectedValues(prevSelectedValues => [...prevSelectedValues, parentValue, ...childValues]);
    } else {
      newCheckedList = newCheckedList.filter(
        (value) => value !== parentValue && !childValues.includes(value)
      );
      childValues.forEach((child) => {
        const childKey = `${parentValue}_${child}`;
        if (!disbaledMap[child]) {
          delete newChildCheckedMap[childKey];
        }
      });
      setSelectedValues(prevSelectedValues =>
        prevSelectedValues.filter(value => value !== parentValue && !childValues.includes(value))
      );
    }

    setCheckedList(newCheckedList);
    setChildCheckedMap(newChildCheckedMap);
  };



  const handleChildCheckboxChange = (childValue, parentItem, e) => {
    const { value: parentValue, children: childValues } = parentItem;
    const childChecked = e.target.checked;
    const childKey = `${parentValue}_${childValue}`;
    let newCheckedList = [...checkedList];
    let newChildCheckedMap = { ...childCheckedMap };

    if (childChecked) {
      newCheckedList.push(childValue);
      newChildCheckedMap[childKey] = true;
      setSelectedValues(prevSelectedValues => [...prevSelectedValues, childValue]);
    } else {
      newCheckedList = newCheckedList.filter((value) => value !== childValue);
      delete newChildCheckedMap[childKey];
      setSelectedValues(prevSelectedValues =>
        prevSelectedValues.filter(value => value !== childValue)
      );
    }

    const parentChecked = isParentChecked(parentItem, newChildCheckedMap);
    if (parentChecked) {
      newCheckedList.push(parentValue);
    } else {
      newCheckedList = newCheckedList.filter((value) => value !== parentValue);
    }
    setCheckedList(newCheckedList);
    setChildCheckedMap(newChildCheckedMap);
  };

  const isParentChecked = ({ value: parentValue, children } = {}, childCheckedMap) => {
    const childValues = getChildValues(children);
    return (
      childValues.length > 0 &&
      childValues.every((child) => childCheckedMap[`${parentValue}_${child}`])
    );
  };

  const isChildChecked = (childValue, parentValue) => {
    const childKey = `${parentValue}_${childValue}`;
    return childCheckedMap[childKey];
  };
  const getChildValues = (children) => {
    return children?.map((child) => child.value) || [];
  };

  const tabValueMap = {
    manage: [
      '发送指令',
      '批量发送指令',
      '指令状态管理导出',
      '报警',
      '报警归档日志',
      '报警清除日志',
      '巡检记录',
    ],
    analysis: ['数据分析', '报表', '报表副本','表',"表记录"],
    dashboard: ['画面'],
    flow: [ '流程', '流程任务'],
    auth: ["用户", '角色','密码修改'],
    common: [
      "用户登录",
      "用户登出",
      "操作日志",
      "操作记录",
      "系统变量",
      "媒体库",
      '备份数据',
      '还原数据',
      '备份文件上传',
      "同步日志",
      "系统主题",
    ],
  };

  const filteredData = {};

  data?.forEach((item) => {
    const tabKey = Object.entries(tabValueMap).find(([key, values]) =>
      values.includes(item.value)
    )?.[0];

    if (tabKey) {
      filteredData[tabKey] = filteredData[tabKey] || [];
      filteredData[tabKey].push(item);
    }
  });

  const getParentCheckboxState = (parentItem) => {
    const { value: parentValue, children } = parentItem;
    const childValues = getChildValues(children);
    const isAllChildChecked = childValues?.every((child) =>
      childCheckedMap[`${parentValue}_${child}`] || disbaledMap[child]
    );
    const isSomeChildChecked = childValues?.some((child) =>
      childCheckedMap[`${parentValue}_${child}`] || disbaledMap[child]
    );

    if (isAllChildChecked) {
      return 'checked';
    } else if (isSomeChildChecked) {
      return 'indeterminate';
    } else {
      return '';
    }
  };
  const styles = {
    width: '100%',
    height: 40,
    lineHeight: '40px',
    textAlign: 'left',
    paddingLeft: '5%',
    backgroundColor: '#F6F5FA', marginBottom: '10px'
  }
  const style = {
    width: '100%',
    lineHeight: '40px',
    textAlign: 'left',
    paddingLeft: '5%',
     marginBottom: '10px',
     wordWrap: 'break-word',
  }
  return (
    <div className='logtab'>
      <Tabs>
        {tabs.map((tab) => (
          <Tabs.TabPane tab={tab.name} key={tab.key}>
            {filteredData[tab.key] ? (
              <>
                {filteredData[tab.key].map((item) => (
                  <div key={item.value}>
                      <div style={styles}>
                      <Checkbox
                        value={item.value}
                        checked={checkedList?.includes(item.value)}
                        indeterminate={getParentCheckboxState(item) === 'indeterminate'}
                        onChange={handleParentCheckboxChange.bind(null, item)}
                        disabled={noCheckbox ? false : disbaledMap[item.value]}
                      >
                        {item.title}
                      </Checkbox>
                      </div>
                    {item.children && (
                        <div style={style}>
                        {item?.children?.map((child) => {
                          return (
                            <Checkbox
                              key={child.value}
                              value={child.value}
                              checked={isChildChecked(child.value, item.value) || (!noCheckbox && disbaledMap[child.value])}
                              onChange={handleChildCheckboxChange.bind(
                                null,
                                child.value,
                                item
                              )}
                              disabled={ noCheckbox ? false : disbaledMap[child.value]}
                            >
                              {child.title}
                            </Checkbox>
                          );
                        })}
                        </div>
                    )}
                  </div>
                ))}
              </>
            ) : <C is="NoData" /> }
          </Tabs.TabPane>
        ))}
      </Tabs>
    </div>
  );
};
const DefaultLayout = props => {
  const { children, invalid, handleSubmit, onDelete, schema, submitting } = props;
  return (
    <Form className="form-horizontal" onFinish={handleSubmit} autoComplete="on">
      <Card style={{ marginTop: 0, border: 'none' }} >
        <div style={{ margin: '0 0 10px 0', padding: '10px' }} className='title-bar'>操作日志</div>
        {children}
        <Row>
          <Button type="submit" htmlType="submit" disabled={invalid} style={{ margin: '0 auto' }} onClick={handleSubmit}>保存</Button>
        </Row>
      </Card>
    </Form>
  );
}

const logLevelSchema = (logLevelValue, record) => {
  return {
    type: 'object',
    properties: {
      name: {
        title: '日志级别名称',
        type: 'string',
        description: '定义日志级别的名称'
      },
      logType: {
        title: '日志类型',
        type: 'object',
        items: {},
        field: {
          component: props => <TypePicker {...props} noCheckbox={true} logLevelValue={logLevelValue} record={record} />
        }
      }
    },
    form: [ 'name', 'logType' ],
    required: ['name']
  }
}

const LogType = (props) => {

  const { data, saveItem } = props
  const logetypeschema = {
    type: 'object',
    properties: {
      logLevel: {
        title: '日志级别',
        type: 'array',
        items: {},
        field: {
          component: props => {
            const value = props?.input?.value
            const [ record, setRecord ] = React.useState({ type: 'edit', data: null })
            return <C is="WarningKind" {...props} schema={logLevelSchema(value, record)} type="logLevel" 
              getAction={(record) => { setRecord({ ...record, data: record }) }}
            /> 
          }
        },
        description: '定义日志级别，用于显示每条日志记录的级别，可在操作日志列表筛选查询'
      },
      logSaveRule: {
        title: "日志记录类型",
        type: "object",
        properties: {},
        field: {
          component: props => <TypePicker {...props} />,
        }, 
        description: '未指定时，默认记录全部日志类型；指定后，系统只捕获记录已选择的日志类型'
      },
      logCountLimit: {
        title: '日志存储容量',
        type: 'object',
        properties: {
          maxCount: {
            title: '最大存储条数',
            type: "number",
            description: '当日志记录条数超过【最大存储条数】的设置时，超过条数的日志将无法被捕获记录，若不填则不限制',
            field: {
              component: MaxCountInput,
              validate: async (value) => {
                let ret, err = false
                const where = JSON.stringify({ 'withoutBody': true, withCount : true })
                const count = await api({ name: `core/log?query=${where}` }).fetch('', {}).then(({ headers }) => Number(headers.count)) 
                if(value && value < count) {
                  ret = '当前设置条数小于操作日志中记录条数，请清除操作日志或修改设置条数'
                  err = true
                } else {
                  ret = ''
                  err = false
                }
                return err ? ret : null
              }
            }
          },
          warnLimitCount: {
            title: '存储容量警告阀值设置',
            type: "number",
            description: '设置操作日志剩余存储容量告警阀值，当到达阀值时，将产生站内消息通知'
          },
          triggerFreq: {
            title: '报警提醒频率',
            type: "object",
            description: '设置消息提醒频率，默认为一天，若不填则只触发一次消息通知',
            field: {
              component: props => <C is="UserOverTime" {...props} customOption={
                [{ key: '天', value: 'd' }]
              } initValue={true} initUnit={'d'} initCount={1}  />
            }
          }
        }
      }
    },
    form: [ '*' ]
  }

  const onSubmit = (value) => {
    saveItem({
      ...value,
      log: {
        logLevel: value?.logLevel,
        logCountLimit: value?.logCountLimit,
        logSaveRule: {
          ...(value.logSaveRule || {}),
          ...disbaledMap
        }
  
      }
    })
  }

  return (
    <div>
      <SchemaForm
        // formKey={'setLoginGuide'}
        schema={logetypeschema}
        component={DefaultLayout}
        onSubmit={onSubmit}
        initialValues={data?.log}
      />
    </div>

  )

}

const MaxCountInput = ({ input }) => {
  const [ error, setError ] = React.useState({})
  useEffect(() => {
    const where = JSON.stringify({ 'withoutBody': true, withCount : true })
    api({ name: `core/log?query=${where}` }).fetch('', {}).then(({ headers }) => {
      setError({ ...error, max:headers.count })
    })
  }, [])
  const handleChange = value => input.onChange(value)

  return <>
    <InputNumber parser={text=>text.replace('.', '')} min={1} value={input.value} onChange={handleChange} />
    {
      input?.value && input.value < error?.max ? <div style={{ color: '#ff4d4f', fontSize: 10 }}>当前设置条数小于操作日志中记录条数，请清除操作日志或修改设置条数</div> : null
    }
  </>
}



export default {
  name: 'iot-log-type',
  'settings.schema': app => (props, cb) => {
    cb(null, {
      name: 'log',
      title: '日志配置',
      parentIndex: 'modular',
      renderComponent: props => <LogType {...props}></LogType>
    })
  }
}
