import _ from 'lodash';
import React from 'react';
import { Button, message, Menu, Dropdown } from 'antd'
import { Icon } from 'xadmin-ui'
import { api, use, config } from 'xadmin'
import moment from 'moment'
import { useRecoilState, useSetRecoilState, useRecoilValue } from 'recoil'
import { HasPermission } from 'xadmin-auth'

const LoginExport = props => {
  
  const { user, setUser  } = use('auth.user')
  const { filter } = use('model', state => ({ filter: state.filter }))
  const { atoms, model } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  const [fields, setFields] = useRecoilState(atoms.fields)
  const [order, setOrder] = useRecoilState(atoms.order)
  const count = useRecoilValue(atoms.count)
  const filters = wheres?.filters
  
  const [selected, setSelected] = useRecoilState(atoms.selected)
  const [loading, setLoading] = React.useState(false)

  const items = React.useMemo(() => {
    // selected?.length == 0 ? setLoading(true) : setLoading(false)
    return selected.filter(item => !_.isNil(item))
  }, [selected])

  const onExport = key => {
    const properties = { ...model?.properties }
    let schemaKey = properties ? Object.keys(properties).map(item => item) : []
    let newArr = [ 'oldData', 'user', 'message', 'node', 'model', 'table', 'ext', 'dashboard', 'event', 'eventHandler', 'warning', 'nodes', 'signature', //'department'
   ]
    if (fields.length && schemaKey.length) {
      for (let i = 0; i < fields.length; i++) {
        for (let j = 0; j < schemaKey.length; j++) {
          if (schemaKey[j] === fields[i]) {
            newArr.push(schemaKey[j]);
          }
        }
      }
    }

    let obj = {}
    newArr?.length ? newArr.forEach(val => { obj[val] = 1 }) : schemaKey?.length ? schemaKey.forEach(val => obj[val] = 1) : {}

    if (filters?.time) {
      filters.time = { '$gte': filters?.time?.gte, '$lte': filters?.time?.lte }
    }
    if (filters?.user) {
      filters.userId = filters.user
      delete filters.user
    }
    const query = {
      skip: 0,
      limit: Number(count),
      sort: order?.time == 'DESC' ? { time: -1 } : { time: 1 },
      filter: filters || {},
      project: obj,
      withCount: true
    }
    const querystr = encodeURIComponent(JSON.stringify(query))
    setLoading(true)
    let hs = {}
    if (user && user.token) {
      hs['Authorization'] = user.token
    }
    const lastPath = location.pathname.split('/').slice(-1)[0]
    if (lastPath.startsWith('_p_')) {
      hs['x-request-project'] = lastPath.substring(3)
    }
    let exportTyle = key == 'pdf' ? 'formatPdf' : key
    fetch(config('mediaUrl')+`/core/log/export/${exportTyle}?query=${querystr}`, {
      method: 'get',
      headers: hs,
      responseType: 'blob'
    }).then(res => {
      return res.blob()
    }).then(data => {
      let type = key == 'pdf' ? 'application/pdf; charset=UTF-8' : 'application/octet-stream'
      const blob = new Blob([ data ], { type })
      let link = document.createElement('a')
      link.style.display = 'none'
      link.href = URL.createObjectURL(blob)
      let name;
      if(key == 'pdf') {
        name = `${moment(new Date).format('YYYYMMDD')}-${moment(new Date).format('HHmmss')}.pdf` || '操作日志.pdf'
      } else if(key == 'excel') {
        name = `${moment(new Date).format('YYYYMMDD')}-${moment(new Date).format('HHmmss')}.xlsx` || '操作日志.xlsx'
      }
      link.setAttribute('download', name)
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      setLoading(false)
    }).catch(err=>{
      message.error(err.message)
      setLoading(false)
    })
  }

  const onMenuClick = (e) => {
    if(e?.key) onExport(e?.key) 
  }

  const menu = (
    <Menu onClick={onMenuClick} >
      <Menu.Item key="pdf">{_t1('导出')}pdf</Menu.Item>
      <Menu.Item key="excel">{_t1('导出')}excel</Menu.Item>
    </Menu>
  );

  const active = !!(!loading && items)
  return (
    <HasPermission FailureComponent={null}  permission="log.export">
      <Dropdown.Button onClick={() => onExport('pdf')} disabled={!active} style={{ marginRight: 2.5 }} overlay={menu}>{ loading ? '正在导出中~' : _t1('导出') }</Dropdown.Button>
    </HasPermission>
  )
}

export default LoginExport


