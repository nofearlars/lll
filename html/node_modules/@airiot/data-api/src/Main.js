import React from 'react';
import { Model } from 'xadmin-model';
import { Page, C, Loading, Icon } from 'xadmin-ui';
import { use, app, api } from 'xadmin';
import { Button, Tree, Spin, Tooltip, Card, Popconfirm, Tag, Input,Empty } from 'antd';
import { DeleteOutlined, PlusCircleOutlined, PlusOutlined } from '@ant-design/icons'
import { Context, ContextProvider, TreeContext, TreeContextProvider } from './context'
import methodColor from './methodColor';
import _ from "lodash"
import './main.css'


const { Search } = Input

const getOpTreeNode = (op, { reset, loadOperation }, _t1) => {
  return (
    <>
      {op.setting.method && <Tag color={methodColor[op.setting.method.toUpperCase()]}>{op.setting.method.toUpperCase()}</Tag>}
      {op.name}
      <span className='model-action'>
        <Popconfirm
          placement="right"
          overlayStyle={{ width: 320 }}
          title={_t1("确定删除该接口吗?")}
          onConfirm={(e) => {
            e.stopPropagation();
            api('Operation').delete(op?.id).then(json => {
              reset()
              if (op.dataGroup) {
                loadOperation(op.dataGroup.id, true)
              }
            })
          }}
          onCancel={e => e.stopPropagation()}
          okText={_t1("确定")}
          cancelText={_t1("取消")}>
          <Tooltip placement="top" title={_t1('删除接口')}>
            <Button type="text" danger icon={<DeleteOutlined />} size="small" onClick={(e) => { e.stopPropagation(); }} />
          </Tooltip>
        </Popconfirm>
      </span>
    </>
  )
}

const getTreeNode = (item, { reset, addOperation, loadDatasource }) => {
  return (
    <>
      <span style={{ display: 'inline-block', maxWidth: '140px', overflow: 'hidden', textOverflow: 'ellipsis' }}>{item.name}</span>
      <span className='model-action'>
        <Tooltip placement="top" title={_t1('添加接口')}>
          <Button type="text" icon={<PlusOutlined />} size="small" onClick={(e) => {
            e.stopPropagation();
            addOperation(item)
          }} />
        </Tooltip>
        <Popconfirm
          placement="right"
          overlayStyle={{ width: 320 }}
          title={_t1("确定删除该分组吗?  删除后齐下的所有操作接口统一被删除且无法撤回。")}
          onConfirm={(e) => {
            e.stopPropagation();
            api('Datasource').delete(item?.id).then(json => {
              reset()
              loadDatasource()
            })
          }}
          onCancel={e => e.stopPropagation()}
          okText={_t1("确定")}
          cancelText={_t1("取消")}>
          <Tooltip placement="top" title={_t1('删除接口')}>
            <Button type="text" danger icon={<DeleteOutlined />} size="small" onClick={(e) => { e.stopPropagation(); }} />
          </Tooltip>
        </Popconfirm>
      </span>
    </>
  )
}

const useTreeData = (props) => {

  const { data, ctx, loadDatasource, loadOperation } = props

  const { t: _t1 } = useI18n()

  const treeData = React.useMemo(() => {
    return data.map(d => ({
      title: getTreeNode(d, {
        reset: ctx.reset, addOperation: ctx.addOperation, loadDatasource
      }, _t1), key: d.id, dataType: 'ds',
      children: d.children ? d.children.map(op => ({
        title: getOpTreeNode(op, {
          reset: ctx.reset, loadOperation
        }, _t1), key: op.id, isLeaf: true, icon: null, dataType: 'op'
      })) : undefined
    }))
  }, [data, ctx.reset, ctx.addOperation])

  return treeData
}

const DatasourceTree = ({ items }) => {
  const ctx = React.useContext(Context)
  const { loading, data, searchData, loadDatasource, loadOperation, loadSearch } = React.useContext(TreeContext)

  const { t: _t1 } = useI18n()

  const { state: { type, id }, setState } = ctx

  const [expandedKeys, setExpandedKeys] = React.useState([])
  const [isSearch, setIsSearch] = React.useState(false)

  const treeData = useTreeData({ data, ctx, loadDatasource, loadOperation })
  const treeSearchData = useTreeData({ data: searchData, ctx, loadDatasource, loadOperation })

  const onTreeSelect = (key, info) => {
    if (info.node.dataType != type || key[0] != id) {
      setState({ type: info.node.dataType, id: key[0], query: null })
    }
  }

  const onLoadData = ({ key }) => loadOperation(key, false)

  const onSearch = async (value) => {
    if (value) {
      const ids = await loadSearch(value)
      setExpandedKeys(ids)
      setIsSearch(true)
    }
  }
  const onSearchChange = async (e) => {
    if (!e.target.value) {
      await loadDatasource()
      setExpandedKeys([])
      setIsSearch(false)
    }
  }
console.log(1234,treeData);
  return !loading ?
    <>
      <div style={{ padding: '10px' }}>
        <Search placeholder={_t1("模糊搜索接口")} onSearch={onSearch} allowClear={true} onChange={onSearchChange} />
      </div>
      <div style={{ display: isSearch ? 'block' : 'none' }}>
        <Tree.DirectoryTree showIcon={false} expandAction="doubleClick" expandedKeys={expandedKeys} treeData={treeSearchData} onSelect={onTreeSelect} />
      </div>
      <div style={{ display: isSearch ? 'none' : 'block' }}>
        {
          !_.isEmpty(treeData) ?  <Tree.DirectoryTree showIcon={false} expandAction="doubleClick" loadData={onLoadData} treeData={treeData} onSelect={onTreeSelect} /> : <Empty description={_t1("暂无数据")} image={require('./imgs/数据接口空.png')} style={{marginTop:'50%'}} />
        }
       
      </div>
    </> :
    <Spin style={{ width: '100%', marginTop: 50 }} />
};

const DatasourceNav = ({ }) => {
  const { addDatasource } = React.useContext(Context)

  const { t: _t1 } = useI18n()

  const extra = (
    <Tooltip placement="top" title={_t1('添加分组')}>
      <Button type="default" size="small" icon={<PlusOutlined />} onClick={addDatasource} />
    </Tooltip>
  )

  return (
    <Card
      title={_t1("数据接口")}
      extra={extra}
      style={{ width: '100%', height: '100%', overflow: 'unset !important' }}
    >
      <div style={{
        position: 'absolute', top: '70px', paddingBottom: '100px',
        width: '100%', height: '100%', overflow: 'scroll'
      }}>
        <DatasourceTree />
      </div>
    </Card >
  )
}

const FormLayout = ({ children, handleSubmit }) => {
  return (
    <Card>
      <form onSubmit={handleSubmit}>
        {children}
      </form>
    </Card>
  )
}
const DatasourceEdit = ({ id, query }) => {
  const { data, loading } = use('model.item', { id })
  const { loadDatasource } = React.useContext(TreeContext)
  const { editDatasource } = React.useContext(Context)

  const onSubmitSuccess = (value) => {
    loadDatasource()
    editDatasource(value.id)
  }

  return loading ? <Loading /> :
    <C is="Model.DataForm" id={id} item={data} query={query} onSubmitSuccess={onSubmitSuccess} />
}

const OperationEdit = ({ id, query }) => {
  const { data, loading } = use('model.item', { id })

  const { loadOperation } = React.useContext(TreeContext)
  const { editOperation } = React.useContext(Context)

  const onSubmitSuccess = (values) => {
    loadOperation(values.dataGroup.id, true)
    editOperation(values.id, values.dataGroup)
  }

  return loading ? <Loading /> :
    <C is="Model.DataForm" id={id} item={data} query={query} onSubmitSuccess={onSubmitSuccess} component={FormLayout} />
}

const MainPage = () => {
  const { state: { type, id, query } } = React.useContext(Context)
  const modelKey = `ds-model-${type}-${id || 'null'}`

  const { t: _t1 } = useI18n()

  const title = type ? (id ? (type == 'ds' ? _t1('编辑分组') : _t1('编辑操作')) : (type == 'ds' ? _t1('添加分组') : _t1('添加操作'))) : _t1('分组管理')
  return (
    <Page title={<span><Icon svg={require('./icons/数据接口.svg')}  className="apiIcon"/>{title}</span>}
      sider={<DatasourceNav />}
      className="iot-data-api"
    >
      {type == 'ds' && <Model key={modelKey} name="Datasource"><DatasourceEdit id={id} query={query} /></Model>}
      {type == 'op' && <Model key={modelKey} name="Operation"><OperationEdit id={id} query={query} /></Model>}
    </Page>
  )
}

export default () => <ContextProvider><TreeContextProvider><MainPage /></TreeContextProvider></ContextProvider>
