import React from 'react'
import { Form, Button, Modal, Row, Col, Popconfirm, Table, Tag } from 'antd'
import app, { use } from 'xadmin'
import { Icon, C } from 'xadmin-ui'
import { objectBuilder, prefixFieldKey } from 'xadmin-form'
import _ from 'lodash'
import useField from '../useField'
import { Context } from '../context'

const RowItemActions = ({ onRemove }) => {

  const { t:_t1 } = useI18n()

  return (
    <>
      <Popconfirm
        title={_t1("确定删除此项?")}
        onConfirm={onRemove}
        onCancel={() => { }}
        okText={_t1("确定")}
        cancelText={_t1("取消")}
      >
        <Form.Item><Button danger type="text"><Icon type="delete" /></Button></Form.Item>
      </Popconfirm>
    </>
  )
}

const getColumns = (fields) => fields.map(f => ({
  title: f.label,
  dataIndex: f.name,
  key: f.name,
  field: f,
  width: 200,
  fixed: f.name == 'id' || f.name == 'name',
  // width: f.name == 'id' || f.name == 'name' ? 120 : undefined
}))

const getAuthorization = (authorization, authorizationParent) => {
  if (authorization?.type === 'Parent') {
    return authorizationParent
  } else {
    return authorization
  }
}

const TableItemsRender = ({ input, fields, meta: { touched, error }, field }) => {
  const variableSchema = useField('variableSchema')
  const authorization = useField('setting.authorization')
  const { state: { id } } = React.useContext(Context)
  const { data } = use('model.item', { id })
  const authorizationParent = data?.dataGroup?.setting?.authorization

  const { items, label } = field
  const vs = _.isArray(input.value) ? input.value : []
  
  const columns = [...getColumns(items.fields), {
    title: _r('操作'),
    key: 'actions',
    fixed: 'right',
    width: 80,
    render: (text, record, index) => {
      const findIndex = index
      return (
        <RowItemActions
          name={fields.name + '[' + findIndex + ']'}
          title={vs[findIndex].name || label + ' ' + (findIndex + 1)}
          key={`items.${findIndex}`}
          onRemove={() => fields.remove(findIndex)}
          item={vs[findIndex]}
          index={findIndex}
          error={error ? error[findIndex] : undefined}
        >
        </RowItemActions>
      )
    }
  }]

  const dataSource = vs.map((v, index) => items.fields.reduce((p, f) => {
    const pf = {...prefixFieldKey(f, fields.name + '[' + index + ']' + '.'), variableSchema, authorization: getAuthorization(authorization, authorizationParent)}
    return { ...p, [f.name]: objectBuilder([ pf ], null, { group: C('Form.InlineGroup') })[0] }
  }, {}))

  return dataSource && dataSource.length > 0 ? <Table bordered={true} size="small" dataSource={dataSource} columns={columns} pagination={false} /> : null
}

export default TableItemsRender
