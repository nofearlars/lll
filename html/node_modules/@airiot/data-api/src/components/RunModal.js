import React from 'react'
import { Form, Button, Modal, Input, Col, Tabs, Table, Tag, message } from 'antd'
import app, { api, use } from 'xadmin'
import { Icon, C, Loading } from 'xadmin-ui'
import { SchemaForm } from 'xadmin-form'
import _ from 'lodash'
import { convertSchema } from '../models'

const { TabPane } = Tabs;

const ErrorPanel = ({ error }) => {
  const { message, status, headers, json } = error

  const { t:_t1 } = useI18n()

  return (<>
    <h4>{_t1('请求结果')}</h4>
    <h3>{_t1('状态码')}: {status}</h3>
    <Tabs>
      { json && <TabPane tab="JSON" key="json">
        <C is="CodeEditor"
          height="400"
          width="100%"
          theme="vs-dark"
          language="json"
          value={JSON.stringify(json, 2, 2)}
          onChange={() => {}}
        />
      </TabPane> }
      { message && <TabPane tab="Body" key="body">
        <Input.TextArea rows={15} value={message} readOnly />
      </TabPane> }
      { headers && <TabPane tab="Header" key="headers">
        <Table bordered={true} size="small" dataSource={_.keys(headers).map(key => ({ key, value: headers[key] }))} 
          columns={[
            {
              title: 'Key',
              dataIndex: 'key',
              key: 'key',
            },
            {
              title: 'Value',
              dataIndex: 'value',
              key: 'value',
            }
          ]}
        />
      </TabPane> }
    </Tabs>
  </>)
}

const ResponsePanel = ({ response }) => {
  const { status, headers, body, json } = response

  const { t:_t1 } = useI18n()

  return (<>
    <h4>{_t1('请求结果')}</h4>
    <h3>{_t1('状态码')}: {status}</h3>
    <Tabs>
      { json && <TabPane tab="JSON" key="json">
        <C is="CodeEditor"
          height="400"
          width="100%"
          theme="vs-dark"
          language="json"
          value={JSON.stringify(json, 2, 2)}
          onChange={() => {}}
        />
      </TabPane> }
      { body && <TabPane tab="Body" key="body">
        <Input.TextArea rows={15} value={body} readOnly />
      </TabPane> }
      { headers && <TabPane tab="Header" key="headers">
        <Table bordered={true} size="small" dataSource={_.keys(headers).map(key => ({ key, value: headers[key] }))} 
          columns={[
            {
              title: 'Key',
              dataIndex: 'key',
              key: 'key',
            },
            {
              title: 'Value',
              dataIndex: 'value',
              key: 'value',
            }
          ]}
        />
      </TabPane> }
    </Tabs>
  </>)
}

const RunModal = () => {
  const [visible, setVisible] = React.useState(false)
  const [loading, setLoading] = React.useState(false)
  const postVars = React.useRef(null)

  const [response, setResponse] = React.useState(null)
  const [error, setError] = React.useState(null)

  const { getFormState } = use('form')

  const [variableSchemaState, setVariableSchemaState] = React.useState(getFormState().values.variableSchema)
  const [initialValues, setInitialValues] = React.useState(null)
  const [variableSchema, setVariableSchema] = React.useState(null)

  const { t:_t1 } = useI18n()

  React.useEffect(() => {
    setVariableSchemaState(getFormState().values.variableSchema)
  }, [ JSON.stringify(getFormState().values.variableSchema) ])


  React.useEffect(() => {
    setVariableSchema({
      type: 'object',
      properties: {
        vars: convertSchema(variableSchemaState)
      }
    })
    setInitialValues(variableSchemaState ? {
      vars: variableSchemaState.reduce((p, v) => {
        return { ...p, [v.paramKey]: v.defaultValue?.value }
      }, {})
    } : null)
  }, [ variableSchemaState ])

  const runOp = async () => {
    const formState = getFormState()
    const id = (formState.values.key)
    setError(null)
    setResponse(null)
    console.log(postVars?.current || initialValues?.vars)
    try {
      setLoading(true)
      // const bodyVars = (postVars.current || []).reduce((p, v) => {
      //   return { ...p, [v.key]: v.value }
      // }, {})
      const resp = await api({ name: 'ds/p/' }).fetch(id, {
        method: 'POST',
        body: JSON.stringify(postVars?.current || initialValues?.vars || {})
      })
      setLoading(false)
      setResponse(resp)
    } catch (error) {
      setLoading(false)
      setError(error)
    }
  }

  const onShowModal = async () => {
    const formState = getFormState()
    if(formState.dirtySinceLastSubmit || (!formState.submitSucceeded && formState.dirty)) {
      message.error(_t1('接口有未保存信息，请先保存接口'))
    } else {
      setVisible(true)
    }
  }

  console.log(variableSchema, 'variableSchema')

  return (<>
    <Modal visible={visible}
        width="70%"
        okText={_t1('发送请求')} 
        okButtonProps={{ loading }}
        onOk={runOp}
        cancelText={_t1('取消')} 
        onCancel={() => { setVisible(false) }}
        title={_t1("运行接口")}>
      <C is="I18nSchemaForm" schema={variableSchema} initialValues={initialValues} component={({ children }) => children} onChange={({ vars }) => postVars.current = vars} />
      {loading && <Loading />}
      {error && <ErrorPanel error={error} /> }
      {response && <ResponsePanel response={response} /> }
    </Modal>
    <Button size="large" onClick={onShowModal}>{_t1("运行")}</Button>
  </>)
}

export default RunModal