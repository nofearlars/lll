import React from 'react';
import { api, app, use } from 'xadmin';
import { Button, Input, Form, Tabs, Select, Table, Card, Popconfirm, Tooltip, Space } from 'antd'
import { objectBuilder, fieldBuilder } from 'xadmin-form'
import { C } from 'xadmin-ui';
import methodColor from '../methodColor';
import RunModal from './RunModal';
import Context from '../context'
import useField from '../useField';

const { TabPane } = Tabs;
const Option = Select.Option

const Field = ({ field, group, option, component, ...attrs }) => {
  return fieldBuilder(
    { ...field, component: component || field.component, attrs: { ...field.attrs, ...attrs } }, 
    { ...option, group }
  )
}

const MethodSelect = ({ input, label, field }) => {
  return (
    <Select style={{ minWidth: 150 }} size="large" placeholder={label} {...input}>
      {[ ...field.titleMap ].map(option => { 
        return (<Option key={option.value} value={option.value}><b style={{ color: methodColor[option.value.toUpperCase()] }}>{option.name}</b></Option>) 
      })}
    </Select>
  )
}

const SaveButton = () => {
  const { form, formState } = use('form')
  const [ invalid, setInvalid ] = React.useState(formState.hasValidationErrors)
  const [ submitting, setSubmitting ] = React.useState(formState.submitting)

  const { t:_t1 } = useI18n()

  React.useEffect(() => {
    form.subscribe(state => {
      setInvalid(state.hasValidationErrors)
      setSubmitting(state.submitting)
    }, { hasValidationErrors: true, submitting: true })
  }, [])

  return <Button type="primary" size="large" htmlType="submit" loading={submitting} disabled={invalid}>{_t1('保存')}</Button>
}

const SettingRender = (fields, option) => {

  const { type } = useField('dataGroup') || {}
  const { sendType, rawMode } = useField('setting') || {}

  const { t:_t1 } = useI18n()

  const i18nChange = (item) => {
    item.label = _t1(item.label)
    // item.description = _t1(item.description)
    return item
  }

  const fs = React.useMemo(() => fields.reduce((p, f) => {
    return {
      ...i18nChange(p), [f.key.replace('setting.', '')]: f
    }
  }, {}), fields)

  return (
    <>
      {
        type === 'http' ? (
          <div style={{ display: 'flex', gap: 8 }}>
            <Field field={fs['method']} group={C('Form.InlineGroup')} component={MethodSelect} />
            <div style={{ flexGrow: 1 }}><Field field={fs['url']} group={C('Form.InlineGroup')} size="large" /></div>
            <Form.Item><SaveButton /></Form.Item>
            <Form.Item><RunModal /></Form.Item>
          </div>
        ) : null
      }
      {
        type === 'db' ? (
          <>
            <Field field={fs['tableName']} />
            <Field field={fs['sendType']} />
            {
              sendType !== 'query' ? <Field field={fs['rawMode']} /> : null
            }
            {
              sendType === 'delete' && !rawMode ? <Field field={fs['exOr']} /> : null
            }
            {
              sendType === 'query' || rawMode ? <Field field={fs['sql']} /> : null
            }
            {
              sendType !== 'query' && !rawMode ? <Field field={fs['tags']} /> : null
            }
            <div style={{ display: 'flex', gap: 8, justifyContent: 'center' }}>
              <Form.Item><SaveButton /></Form.Item>
              <Form.Item><RunModal /></Form.Item>
            </div>
          </>
        ) : null
      }
      <h3>{_t1('配置参数')}</h3>
      <Tabs>
        {
          type === 'http' ? (
            <>
              { fs['params'] && <TabPane tab="Params" key="params">
                <Field field={fs['params']}/>
              </TabPane> }
              { fs['body'] && <TabPane tab="Body" key="body">
                <Field field={fs['body']} />
              </TabPane> }
              { fs['headers'] && <TabPane tab="Header" key="headers">
                <Field field={fs['headers']} group={C('Form.InlineGroup')} />
              </TabPane> }
              { fs['authorization'] && <TabPane tab="Auth" key="authorization">
                <Field field={fs['authorization']} />
              </TabPane> }
            </>
          ) : null
        }
        { fs['inputScript'] && <TabPane tab={_t1("前置脚本")} key="inputScript">
          <Field field={fs['inputScript']} group={C('Form.InlineGroup')} />
        </TabPane> }
        { fs['outputScript'] && <TabPane tab={_t1("后置脚本")} key="outputScript">
          <Field field={fs['outputScript']} group={C('Form.InlineGroup')} />
        </TabPane> }
        {
          type === 'http' ? (
            <TabPane tab={_t1("设置")} key="setting">
              <Field field={fs['expire']} />
              <Field field={fs['timeout']} />
            </TabPane>
          ) : null
        }
      </Tabs>
    </>
  )
}

const DatasourceSettingRender = (fields, option) => {

  const type = useField('type')
  const driverType = useField('setting.driverType')

  const { t:_t1 } = useI18n()

  const fs = React.useMemo(() => fields.reduce((p, f) => {
    return {
      ...p, [f.key.replace('setting.', '')]: f
    }
  }, {}), fields)

  return (<>
    {
      type==='http' ? (
        <Field field={fs['baseUrl']} />
      ) : null
    }
    {
      type==='db' ? (
        <>
          <Field field={fs['driverType']} />
          {
            driverType === 'SQLite3' ? (
              <Field field={fs['filePath']} />
            ) : (
              <>
                <Field field={fs['username']} />
                <Field field={fs['password']} />
                <Field field={fs['ip']} />
                <Field field={fs['port']} />
                <Field field={fs['dbName']} />
                <Field field={fs['test']} />
              </>
            )
          }
        </>
      ) : null
    }
    <Tabs>
      { type==='http' && fs['headers'] && <TabPane tab="Header" key="headers">
        <Field field={fs['headers']} group={C('Form.InlineGroup')} />
      </TabPane> }
      { type==='http' && fs['authorization'] && <TabPane tab="Auth" key="authorization">
        <Field field={fs['authorization']} />
      </TabPane> }
      { fs['inputScript'] && <TabPane tab={_t1("前置脚本")} key="inputScript">
        <Field field={fs['inputScript']} group={C('Form.InlineGroup')} />
      </TabPane> }
      { fs['outputScript'] && <TabPane tab={_t1("后置脚本")} key="outputScript">
        <Field field={fs['outputScript']} group={C('Form.InlineGroup')} />
      </TabPane> }
    </Tabs>
  </>)
}

const OperationSetting = ({ field, group, option }) => {
  return objectBuilder(field.fields, SettingRender, { ...option, group })
}
OperationSetting.useGroup = false

const DatasourceSetting = ({ field, group, option }) => {
  return objectBuilder(field.fields, DatasourceSettingRender, { ...option, group })
}
DatasourceSetting.useGroup = false

export default OperationSetting

export {
  OperationSetting,
  DatasourceSetting
}