import React from 'react'
import { C } from 'xadmin-ui'
import { use, api } from 'xadmin'
import { Button } from 'antd'
import BindSelector from './BindSelector'

const t = {
  string: '字符串',
  number: '数字',
  boolean: '布尔',
  array: '数组',
  object: '对象'
}

const InputParams = ({ input }) => {
  const { form, getFormState } = use('form')

  const handleChange = (val, param) => {
    const key = param.key || param.title
    let inputDefault = getFormState().values?.inputDefault || {}
    inputDefault[key] = val
    form.change('inputDefault', inputDefault)
  }

  let params = []
  if (input.value?.type) { // 服务
    let itemP = input.value?.properties || {}
    params = Object.keys(itemP).map(k => ({ ...itemP[k], key: k }))
  } else if (input.value?.variableSchema) { // api接口
    params = input.value.variableSchema.map(vs => ({
      type: vs.paramType || vs.variableType?.value?.type,
      title: vs.paramKey
    }))
  }
  if (params.length === 0) return '无'

  const formatSchema = (p) => {
    return {
      type: 'object',
      properties: {
        value: {
          ...p,
          title: p.title + '（' + (t[p.type] || p.type) + '）'
        }
      }
    }
  }

  return <>
    {
      params.map(p => {
        const key = p.key || p.title
        return <div style={{ display: 'inline-block', width: '78%', verticalAlign: 'middle' }}>
          <C is="I18nSchemaForm"
            formKey={`params-show-${key}`}
            schema={formatSchema(p)}
            initialValues={{ value: getFormState().values?.inputDefault?.[key] }}
            onChange={v => handleChange(v?.value, p)}
            component={({ children }) => children}
          />
        </div>
      })
    }
  </>
}

const OutputParams = ({ input }) => {
  const [val, setVal] = React.useState({})
  const { form } = use('form')

  React.useEffect(() => {
    form.useEffect(({ values }) => {
      values && setVal(values)
    })
  }, [])

  const sendRequest = () => {
    api({ name: 'engine/dataInterface/test' }).fetch('', {
      method: 'POST',
      body: JSON.stringify({
        body: val.inputDefault || {},
        opKey: val.apiKey
      })
    }).then(({ json }) => {
      input.onChange(json)
    }).catch(err => {
      input.onChange(null)
    })
  }

  return <>
    {
      val.runMode === 'api' && <Button type="primary" onClick={sendRequest}>{_t1('发送请求')}</Button>
    }
    <C is='Dashboard.VariableTree'
      rootName={_t1('输出参数')}
      data={input.value || {}}
      onClick={() => null}
    />
  </>
}

export { InputParams, OutputParams }
