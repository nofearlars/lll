import React from "react";
import { api } from "xadmin";

const AlgorContext = React.createContext()

const AlgorContextProvider = ({ children }) => {
  const [loading, setLoading] = React.useState(false)
  const [bindData, setBindData] = React.useState({
    type: 'object',
    properties: {
      ['#$systemVariable']: {
        title: '系统变量',
        type: 'object',
        properties: {}
      },
      ['#$dData']: {
        title: '表记录数据点',
        type: 'object',
        properties: {}
      },
      ['#$dProperty']: {
        title: '表记录属性',
        type: 'object',
        properties: {}
      }
    }
  })

  React.useEffect(() => {
    getSystemVariable()
    getTable()
  }, [])

  const getSystemVariable = () => {
    const where = JSON.stringify({
      project: { uid: 1, name: 1, type: 1, value: 1 },
      sort: { createTime: -1 }
    })
    api({ name: 'core/systemVariable' }).fetch(`?query=${where}`).then(
      ({ json }) => {
        setBindData(before => {
          let result = {}
          for ( let systemItem of json ) {
            result[systemItem.id] = {
              title: systemItem.name,
              type: systemItem.type
            }
            if (systemItem.type === 'date') {
              result[systemItem.id].type = 'string'
              result[systemItem.id].format = 'datetime'
            }
          }
          before.properties['#$systemVariable'].properties = result
          return before
        })
      }
    )
  }

  const getTable = () => {
    setLoading(true)
    const where = JSON.stringify({
      project: { function: 1, schema: 1, device: 1 },
    })
    api({ name: 'core/t/schema' }).fetch(`?query=${where}`).then(
      ({ json: tables }) => {
        Promise.all(tables.map(t => {
          return api({ name: `core/t/${t.id}/d` }).query({ fields: ['device'] }, {})
        })).then((list) => {
          setLoading(false)
          setBindData(before => {
            // 表字段
            let propResult = {}
            tables.forEach((table, index) => {
              let p1 = {}
              let Fporp = table.schema?.properties || {}
              list[index]?.items?.forEach(j => {
                p1[j.id] = {
                  title: j.title,
                  type: 'object',
                  properties: Fporp
                }
              })
              propResult[table.id] = {
                title: table.title,
                type: 'object',
                properties: p1
              }
            })
            // 数据点
            let tagResult = {}
            tables.forEach((table, index) => {
              let p2 = {}
              let Tprop = {}
              let tableTags = table.device?.tags || []
              list[index]?.items?.forEach(j => {
                let tags = [ ...tableTags, ...(j._settings?.device?.tags || []) ]
                tags.forEach((tag) => {
                  Tprop[tag.id] = {
                    title: tag.name,
                    type: 'object',
                    nodeType: 'nodeDataPoint',
                    properties: {}
                  }
                })
                p2[j.id] = {
                  title: j.title,
                  type: 'object',
                  properties: Tprop
                }
              })
              tagResult[table.id] = {
                title: table.title,
                type: 'object',
                properties: p2
              }
            })
            before.properties['#$dData'].properties = tagResult
            before.properties['#$dProperty'].properties = propResult
            return before
          })
        })
      }
    )
  }

  return <AlgorContext.Provider value={{ bindData, loading }}>
    {children}
  </AlgorContext.Provider>
}

export { AlgorContext, AlgorContextProvider }
