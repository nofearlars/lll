import React from 'react'
import _ from 'lodash'
import { use, api, app } from 'xadmin'
import { _t } from 'xadmin-i18n'
import { Card, Button, Form, Input, message } from 'antd'
import { ModelBlock, Model } from 'xadmin-model'
import { C, Icon, Page, Loading } from 'xadmin-ui'
import { SchemaForm } from 'xadmin-form'

const FieldGroup = ({ label, meta, input, field, tailLayout, children, option }) => {
  const attrs = field.attrs || {}
  let error = meta.touched && (meta.error || meta.submitError)
  const extra = field.description || field.help
  const { err } = option
  
  const p = ['inputParams', 'outputParams'].indexOf(field.key) > -1
  const size = (field.option && field.option.groupSize) || attrs.groupSize || { 
    labelCol: {
      xs: { span: 24 },
      sm: { span: 5 }
    },
    wrapperCol: {
      xs: { span: 24 },
      sm: { span: 19,  offset: tailLayout ? 5 : 0 }
    }
  }

  const groupProps = { extra, ...size, required: field.required }

  if (err?.[field.key]) error = err[field.key]
  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['hasFeedback'] = true
    if(_.isString(error)) {
      groupProps['help'] = error
    }
  }

  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  const title = field.key === 'name' ? <div className='algor-edit-title'>{_t1('基础配置')}</div> :
    field.key === 'inputParams' ? <div className='algor-edit-title'>{_t1('输入参数')}</div> : 
    field.key === 'outputParams' ? <div className='algor-edit-title'>{_t1('输出参数')}</div> : null
  if (field.key === 'inputDefault') return null
  return <>
    {title}
    <Form.Item label={p ? '' : label} {...groupProps} style={{ marginLeft: p ? '15%' : 0 }}>
      {controlComponent}
      {field.formText ? <span className="ant-form-text"> {field.formText}</span> : null}
    </Form.Item>
  </>
}

const AddEditPage = () => {
  const model = app.get('models')['algorithm']
  const { modelI18n } = use('model.transI18n', { model })

  const { id } = use('params')
  const { data, loading } = use('model.item', { id })
  const { saveItem } = use('model.save')
  const [val, setVal] = React.useState(data)
  const [err, setErr] = React.useState()

  const title = id ? '修改算法' : '添加算法'

  const save = () => {
    const v = {
      ...val,
      algorithmType: 'own',
      apiKey: val.runMode === 'api' ? val.apiKey : undefined,
      algorithmID: val.runMode === 'service' ? val.algorithmID : undefined,
      function: val.runMode === 'service' ? val.function : undefined
    }
    saveItem(v).then(() => {
      setErr(null)
      app.go('app/model/algorithm/list')
    }).catch(setErr)
  }

  return <C is="AntdI18n">
    <Model schema={modelI18n}>
      <Page className={`xadmin-model-form-${modelI18n.key}`}
        title={title} onBack={() => history.back()}
        actions={<div>
          <Button type="primary" style={{ marginRight: 10 }} onClick={save}>{_t1('保存')}</Button>
          {/* <Button type="primary" onClick={() => {}}>{_t1('保存并发布到市场')}</Button> */}
        </div>}
      >
        <Card>
          {
            React.useMemo(() => {
              return loading ? <Loading /> : <SchemaForm
                initialValues={data}
                schema={modelI18n}
                onChange={setVal}
                err={err}
                component={({ children }) => children}
                group={FieldGroup}
              />
            }, [err, loading])
          }
        </Card>
      </Page>
    </Model>
  </C>
}

export default AddEditPage
