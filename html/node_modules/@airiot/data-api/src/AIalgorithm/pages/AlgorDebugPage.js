import React, { useEffect } from 'react';
import { Button, Tabs, Modal, Row, Col, Input, message, Tooltip, Card,Empty } from 'antd';
import { app, use, api } from 'xadmin';
import { Model } from 'xadmin-model'
import { ModelBlock } from 'xadmin-model'
import { Icon, Page, C } from 'xadmin-ui'
import _, { property } from 'lodash'
import { SchemaForm } from 'xadmin-form';
import CompareResult from '../components/CompareResult';
import ResultShow from '../components/ResultShow';
import { convertSchema } from '../../models';
import FormLayout from '../components/FormLayout';
import BindSelector from '../components/BindSelector';
import { AlgorContextProvider } from '../context';
const { TabPane } = Tabs

const dataMatch = (data, type) => { // 判断数据是否匹配类型
  if (type === 'table') {
    if (_.isArray(data?.data)) return true
  } else if (type === 'bar') {

  } else if (type === 'bar2') {

  } else if (type === 'tree') {

  } else if (type === 'line') {

  } else if (type === 'line2') {

  }
  message.warning('数据格式不匹配')
}

const DebugTab = ({ height, algor }) => {
  const [showType, setShowType] = React.useState('tree')
  const [debugRes, setDebugRes] = React.useState()
  const [vis, setVis] = React.useState(false)
  const [name, setName] = React.useState()
  
  const runAlgor = (v) => {
    api({ name: `algorithm/algorithmRun/` }).fetch(algor.key + '/debug', {
      method: 'POST',
      body: JSON.stringify(v)
    }).then(({ json }) => {
      setDebugRes(json)
    })
  }

  const save = () => {
    let body = {
      input: JSON.stringify(debugRes?.input || {}),
      name,
      output: JSON.stringify(debugRes?.output || {}),
      result: debugRes ? '成功' : '失败',
      key: algor.key
    }
    api({ name: `algorithm/algorithmDebugLog` }).fetch('', {
      method: 'POST',
      body: JSON.stringify(body)
    }).then(({ status }) => {
      if (status == 200) {
        message.success('保存成功')
        setVis(false)
      }
    })
  }

  let schema = { type: 'object', properties: {} }
  if (algor?.inputParams?.type) { // 服务
    schema = algor?.inputParams
  } else if (algor?.inputParams?.id) { // api接口
    schema = convertSchema(algor?.inputParams?.variableSchema)
  }
  delete schema.required
  Object.keys(schema.properties)?.forEach((key) => {
    schema.properties[key] = {
      ...schema.properties[key],
      type: 'object',
      properties: {},
      field: { component: BindSelector }
    }
  })

  return <>
    <Row style={{ height }}>
      <Col className='debug-col' span={11}>
        <div className='debug-title'>
          <Icon svg={require('../../icons/调试配置.svg')} className="debug-icon" />
          {_t1("调试配置")}
        </div>
        <div className='debug-label'>{_t1("输入参数")}</div>
        <div className='schema-card'>
          <SchemaForm
            onSubmit={runAlgor}
            schema={schema}
            component={FormLayout}
          />
        </div>
      </Col>
      <Col className='debug-col' span={12} style={{ marginLeft: 10, height: '100%' }}>
        <div className='debug-title'>
          <Icon svg={require('../../icons/输出结果.svg')} className="debug-icon" />
          {_t1("输出结果")}
          <Button onClick={() => setVis(true)} disabled={!debugRes}>{_t1("保存输出结果")}</Button>
        </div>
        <ResultShow debugRes={debugRes} showType={showType} />
      </Col>
    </Row>
    <Modal title={_t1("添加结果")} visible={vis} width="30%" onOk={save} onCancel={() => setVis(false)}>
      <span style={{ color: 'red' }}>*</span>
      名称：
      <Input style={{ width: '70%' }} value={name} onChange={e => setName(e.target.value)} />
    </Modal>
  </>
}

const ModelTable = ({ setConList }) => {
  const { selected } = use('model.select')
  return <>
    <ModelBlock name="model.list.navbtn" />
    <Button type="primary" style={{ float: 'right' }}
      onClick={() => setConList(selected)}>对比</Button>
    <div style={{ width: 10, height: 5 }}></div>
    <C is="Model.DataTable" />
    <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
      <C is="Model.Pagination" />
    </div>
  </>
}

const ContrastTab = ({ height, algor }) => {
  const [conList, setConList] = React.useState()

  const schema = {
    type: 'object',
    resource: 'algorithm/algorithmDebugLog',
    properties: {
      name: {
        title: '结果名称',
        type: 'string'
      },
      input: {
        title: '输入参数',
        type: 'string'
      },
      output: {
        title: '输出参数',
        type: 'string'
      },
      createTime: {
        title: '调试时间',
        type: 'string',
        format: "datetime"
      }
    },
    listFields: ['name', 'input', 'output', 'createTime'],
    filters: {
      submenu: ['name', 'createTime'],
      nav: ['name', 'createTime']
    },
    itemActions: null,
    dataTableProps: () => {
      return {
        scroll: { x: 300 },
      }
    },
    initialValues: {
      wheres: {
        filters: {
          key: algor.key
        }
      }
    },
    components: {
      DataEmpty: props => <Card> <Empty description={'暂无数据'} image={require('../../imgs/算法.png')} /></Card>
    }
  }

  return <Row style={{ height }}>
    <Col className='debug-col' span={11}>
      <div className='debug-title'>
        <Icon svg={require('../../icons/调试配置.svg')} className="debug-icon" />
        {_t1("对比配置")}
      </div>
      <div className='debug-label' style={{ marginBottom: 10 }}>{_t1("对比内容选择")}</div>
      <Model schema={schema}>
        <ModelTable setConList={setConList} />
      </Model>
    </Col>
    <Col className='debug-col' span={12} style={{ marginLeft: 10 }}>
      <div className='debug-title'>
        <Icon svg={require('../../icons/输出结果.svg')} className="debug-icon" />
        {_t1("对比结果")}
      </div>
      <CompareResult result={conList} />
    </Col>
  </Row>
}

const AlgorDebugPage = props => {
  const { id } = use('params')
  const [algor, setAlgor] = React.useState()

  React.useEffect(() => {
    api({ name: 'algorithm/algorithm' }).fetch(`/${id}`, { method: 'GET' }).then(({ json }) => {
      setAlgor(json)
    })
  }, [])

  const height = document.body.clientHeight - 100
  return <AlgorContextProvider>
    <Page onBack={() => history.back()}
      title={(<span>【{algor?.name}】调试与对比</span>)}
    >
      <Tabs tabPosition="left" className="algor-debug" destroyInactiveTabPane>
        <TabPane tab={_t1("调试")} key="1">
          <DebugTab height={height} algor={algor} />
        </TabPane>
        <TabPane tab={_t1("对比")} key="2">
          <ContrastTab height={height} algor={algor} />
        </TabPane>
      </Tabs>
    </Page>
  </AlgorContextProvider>
}

export default AlgorDebugPage
