import React from 'react'
import { use, api } from 'xadmin'
import { C } from 'xadmin-ui';
import { Button, message } from 'antd';
import _ from 'lodash'
import { objectBuilder, SchemaForm } from 'xadmin-form'
import OperationSetting, { DatasourceSetting } from './components/OperationSetting'
import ParamsTable from './components/ParamsTable'
import FieldGroup from './form/FieldGroup'
import useField from './useField';

const NoGroupFieldset = ({ field, group, option }) => {
  return objectBuilder(field.fields, null, { ...option, group })
}
NoGroupFieldset.useGroup = false

const ScriptInput = ({ input, field }) => {
  const {template=''} = field
  if (input.value) {
    return <C is="CodeEditor"
      height="480"
      width="100%"
      theme="vs-dark"
      language="javascript"
      {...input}
    />
  } else {
    return <C is="CodeEditor"
      height="480"
      width="100%"
      theme="vs-dark"
      language="javascript"
      value={template}
      onChange={input.onChange}
    />
  }
  
} 

const convertSchema = (variableSchema, authorization) => {
  const schema = {
    type: 'object',
    title: '请求变量',
    properties: {}
  }
  variableSchema && variableSchema.forEach((item) => {
    if (item.paramKey) {
      schema.properties[item.paramKey] = {
        ...item?.variableType?.schema,
        title: item.paramKey,
        bind: true
      }
    }
  })
  const { data, type } = authorization || {}
  if (type === 'DynamicToken' || type === 'APIKey') {
    const { addTo, key: authKey } = data || {}
    if (addTo === 'AddToVariable') {
      schema.properties[authKey] = {
        title: authKey,
        type: 'string'
      }
    }
  }
  return schema
}

const KV = {
  type: 'object',
  title: 'keyValue',
  properties: {
    key: {
      type: 'string',
      field: { attrs: { placeholder: _r("参数Key") }}
    },
    value: {
      type: 'string',
      field: { 
        attrs: { placeholder: _r("参数值") },
        component: (props) => {
          const { input, field } = props
          const { variableSchema, authorization } = field || {}

          const schema = convertSchema(variableSchema, authorization)

          return (
            <div className="ant-input" style={{ backgroundColor: '#f0f2f5', width: '100%' }}>
              <C is="CodeEditor.VariableEditor" {...input} schema={schema} stringify={true}></C>
            </div>
          )
        }
      }
    }
  },
  required: [ 'key', 'value' ]
}

const KVNoVar = {
  type: 'object',
  title: 'keyValue',
  properties: {
    key: {
      type: 'string',
      field: { attrs: { placeholder: _r("参数Key") }}
    },
    value: {
      type: 'string',
      field: { 
        attrs: { placeholder: _r("参数值") }
      }
    }
  },
  required: [ 'key', 'value' ]
}

const Body = {
  type: 'object',
  field: { component: NoGroupFieldset },
  properties: {
    type: {
      type: 'string',
      enum: [
        "none",
        "form-data",
        "x-www-form-urlencoded",
        "raw",
      ],
      field: {
        effect: ({ value, name }, form) => {
          let key = name.replace('.type', '')
          setTimeout(() => {
            if(value == 'form-data' || value == 'x-www-form-urlencoded') {
              form.setFieldData(`${key}.params`, { display: true, required: true }) 
              form.setFieldData(`${key}.format`, { display: false, required: false }) 
              form.setFieldData(`${key}.data`, { display: false, required: false }) 
            } else if(value == 'raw') {
              form.setFieldData(`${key}.params`, { display: false, required: false }) 
              form.setFieldData(`${key}.format`, { display: true, required: true }) 
              form.setFieldData(`${key}.data`, { display: true, required: true }) 
            } else {
              form.setFieldData(`${key}.params`, { display: false, required: false }) 
              form.setFieldData(`${key}.format`, { display: false, required: false }) 
              form.setFieldData(`${key}.data`, { display: false, required: false }) 
            }
          })
        }
      }
    },
    params: {
      title: _r('Body参数'),
      type: 'array',
      items: KV,
      field: {
        itemsRender: ParamsTable
      }
    },
    format: {
      type: 'string',
      enum: [
        "Text",
        "JavaScript",
        "JSON",
        "HTML",
        "XML"
      ],
    },
    data: {
      type: 'string',
      field: {
        component:  ({ input }) => <C is="CodeEditor"
          height="480"
          width="100%"
          theme="vs-dark"
          language="json"
          {...input}
        />
      }
    }
  }
}

const Authorization = {
  type: 'object',
  field: { component: NoGroupFieldset },
  properties: {
    type: {
      type: 'string',
      title: _r('Auth类型'),
      enum: [
        'Parent',
        'NoAuth',
        'APIKey',
        'BearerToken',
        'DynamicToken',
        'BasicAuth',
        'Signature',
      ],
      enum_title: [
        _r('从父级继承'),
        _r('无Auth'),
        'APIKey',
        'BearerToken',
        _r('动态Token'),
        'BasicAuth',
        _r('Signature签名'),
      ],
      field: {
        effect: ({ value, name }, form) => {
          let key = name.replace('.type', '.data')
          let keyArr = [ 'key', 'value', 'addTo', 'token', 'tokenRequestSetting', 'tokenExpire', 'username', 'password', 'signScript', 'signKey' ]
          let keyMap = {
            NoAuth: [],
            'APIKey': [ 'key', 'value', 'addTo' ],
            'BearerToken': [ 'token', 'tokenRequestSetting', 'tokenExpire' ],
            'DynamicToken': [ 'key', 'addTo', 'tokenRequestSetting', 'tokenExpire' ],
            'BasicAuth': [ 'username', 'password' ],
            'Signature': [ 'signScript', 'addTo', 'signKey' ],
          }
          setTimeout(() => {
            keyArr.forEach(val=> { 
              let show = (keyMap[value] || []).indexOf(val) >= 0
              form.setFieldData(`${key}.${val}`, { display: show, required: show }) 
            })
          })
        }
      }
    },
    data: {
      type: 'object',
      field: { component: NoGroupFieldset },
      properties: {
        key: {
          type: 'string',
        },
        value: {
          type: 'string',
        },
        addTo: {
          type: 'string',
          title: _r('添加到'),
          enum: [
            'Header',
            'QueryParams',
            'AddToVariable'
          ],
          enum_title: [
            _r('请求头Header'),
            _r('Url Query参数'),
            _r('添加为变量'),
          ]
        },
        token: {
          type: 'string',
        },
        tokenRequestSetting: {
          type: 'object',
          title: _r('获取token请求'),
          properties: {
            method: {
              title: _r('请求方法'),
              type: 'string',
              enum: [
                'GET', 'POST'
              ]
            },
            url: {
              title: 'URL',
              type: 'string',
            },
            expire: {
              title: _r('过期时间'),
              type: 'number',
            },
            timeout: {
              title: _r('超时时间'),
              type: 'number',
            },
            params: {
              title: _r('参数'),
              type: 'object',
              field: { component: NoGroupFieldset },
              properties: {
                query: {
                  title: _r('Query参数'),
                  type: 'array',
                  items: KV,
                  field: {
                    itemsRender: ParamsTable
                  }
                },
                path: {
                  title: _r('Path参数'),
                  type: 'array',
                  items: KV,
                  field: {
                    itemsRender: ParamsTable
                  }
                },
              }
            },
            headers: {
              title: 'Headers',
              type: 'array',
              items: KV,
              field: {
                itemsRender: ParamsTable
              }
            },
            body: Body,
            outputScript: {
              title: _r('后置脚本'),
              type: 'string',
              field: {
                template: 
                `// 输入值 data: {"token":"123"}
// 输出值字符串,返回具体的token字符串: "123"
// function handler(data) {
//   const obj = JSON.parse(Buffer.from(data).toString());
//   return obj["token"];
// }`,
                component: ScriptInput
              }
            }
          },
          //field: { component: OperationSetting },
          form: ['*']
        },
        tokenExpire: {
          title: _r('Token 超时时间'),
          type: 'number',
        },
        username: {
          type: 'string',
        },
        password: {
          type: 'string',
        },
        signKey: {
          title: _r('签名Key名称'),
          type: 'string',
          field: { attrs: { placeholder: '例如: sign' }}
        },
        signScript: {
          title: _r('生成签名脚本'),
          type: 'string',
          field: {
            template: `// 输出值自定义数据
// function handler() {
//   const obj = {"sign":"test"};
//   return obj;
// }`,
            component: ScriptInput
          }
        }
      }
    }
  }
}

const scriptConfig = {
  inputScript: {
    title: _r('前置脚本'),
    type: 'string',
    field: {
      template: 
      `// 输入值: {"temperature":26.3,"humidity":65}
// 输出值: {"temperature":26.3,"humidity":65,"ts":"2023-03-30 17:07:44"}
// function handler(data) {
//   if(!data){
//     data = {};
//   }
//   // 数据中增加当前时间参数
//   data["ts"] = moment().format('YYYY-MM-DD HH:mm:ss');
//   return data;
// }`,
      component: ScriptInput
    }
  },
  outputScript: {
    title: _r('后置脚本'),
    type: 'string',
    field: {
      template: 
      `// 输入值 data: [{"name":"temperature","value":26.3},{"name":"humidity","value":65}]
// 输出值 obj: {"temperature":26.3,"humidity":65}
// function handler(data) {
//   const arr = JSON.parse(Buffer.from(data).toString());
//   let obj = arr.reduce((acc, cur) => {
//     acc[cur.name] = cur.value;
//     return acc;
//   }, {});
//   return obj;
// }`,
      component: ScriptInput
    }
  }
}

const HttpRequestSetting = {
  type: 'object',
  properties: {
    method: {
      title: _r('请求方法'),
      type: 'string',
      enum: [
        'GET', 'POST', 'PUT', 'DELETE', 'PATCH'
      ]
    },
    url: {
      title: 'URL',
      type: 'string',
    },
    expire: {
      title: _r('过期时间'),
      type: 'number',
    },
    timeout: {
      title: _r('超时时间'),
      type: 'number',
    },
    params: {
      title: _r('参数'),
      type: 'object',
      field: { component: NoGroupFieldset },
      properties: {
        query: {
          title: _r('Query参数'),
          type: 'array',
          items: KV,
          field: {
            itemsRender: ParamsTable,
            attrs: { groupSize: { labelCol: { span: 24 } } }
          }
        },
        path: {
          title: _r('Path参数'),
          type: 'array',
          items: KV,
          field: {
            itemsRender: ParamsTable,
            attrs: { groupSize: { labelCol: { span: 24 } } }
          }
        },
      }
    },
    headers: {
      title: 'Headers',
      type: 'array',
      items: KV,
      field: {
        itemsRender: ParamsTable,
        attrs: { groupSize: { labelCol: { span: 24 } } }
      }
    },
    body: Body,
    authorization: {
      title: 'Auth',
      ...Authorization
    },
    ...scriptConfig
  },
  required: [ 'method', 'url', ],
}

const VariableInput = (props) => {
  const { input } = props
  const variableSchema = useField('variableSchema')
  console.log(variableSchema, 'variableSchema')

  const schema = convertSchema(variableSchema)

  return (
    <div className="ant-input" style={{ backgroundColor: '#f0f2f5', width: '100%' }}>
      <C is="CodeEditor.VariableEditor" {...input} schema={schema} stringify={true}></C>
    </div>
  )
}

const DBSetting = {
  type: 'object',
  properties: {
    tableName: {
      title: _r('表名'),
      type: 'string',
    },
    sendType: {
      title: _r('操作类型'),
      type: 'string',
      enum: [
        'query',
        'insert',
        'update',
        'delete'
      ],
      enum_title: [
        _r('查询'),
        _r('插入'),
        _r('修改'),
        _r('删除')
      ],
      field: {
        effect: ({ value }, form) => {
          setTimeout(() => {
            if (value === 'query') {
              form.change('setting.rawMode', true) 
            }
          })
        }
      }
    },
    rawMode: {
      title: _r('原生模式'),
      type: 'boolean',
      description: _r('勾选后，需输入sql语句，执行用户输入的sql语句'),
      field: {
        effect: ({ value }, form) => {
          setTimeout(() => {
            form.setFieldData(`setting.tableName`, { field: {required: true} })
            form.setFieldData(`setting.sendType`, { field: {required: true} })
            form.setFieldData(`setting.sql`, { field: {required: true} })
            form.setFieldData(`setting.tags`, { field: {required: true} })
          })
        }
      }
    },
    exOr: {
      title: _r('删除条件为或关系'),
      type: 'boolean',
      description: _r('执行删除操作时，条件是否为或关系，默认false为与')
    },
    sql: {
      title: _r('SQL语句'),
      type: 'string'
    },
    tags: {
      title: _r('字段配置'),
      type: 'array',
      items: {
        type: 'object',
        properties: {
          operator: {
            title: _r('符号'),
            type: 'string',
            enum: [ 'gt', 'gte', 'lt', 'lte' ],
            enum_title: [_r('大于'), _r('大于等于'), _r('小于'), _r('小于等于')]
          },
          value: {
            title: _r('目标值'),
            type: 'string',
            field: {
              component: VariableInput
            }
          },
          field: {
            title: _r('目标字段'),
            type: 'string',
            field: {
              component: VariableInput,
              effect: ({ name }, form) => {
                setTimeout(() => {
                  form.setFieldData(name, { field: {required: true} })
                })
              }
            }
          },
          isPrimaryKey: {
            title: _r('主键'),
            type: 'boolean'
          },
        }
      }
    }
  }
}

const Datasource = {
  name: 'group',
  title: _r('数据接口分组'),
  type: 'object',
  resource: 'ds/group',
  properties: {
    type: {
      type: 'string',
      title: _r('类型'),
      enum: [
        'http',
        'db'
      ],
      enum_title: [
        _r('HTTP数据'),
        _r('数据库数据')
      ]
    },
    name: {
      type: 'string',
      title: _r('名称')
    },
    remark: {
      title: _r('分组说明'),
      type: 'string',
    },
    setting: {
      type: 'object',
      title: _r('配置'),
      properties: {
        baseUrl: {
          type: 'string',
          title: 'BaseURL'
        },
        driverType: {
          type: 'string',
          title: _r('数据库类型'),
          enum: [
            'MySQL',
            'Postgres',
            'SQLserver',
            'MariaDB',
            'SQLite3'
          ]
        },
        filePath: {
          type: 'string',
          title: _r('sqlite路径')
        },
        username: {
          type: 'string',
          title: _r('用户名')
        },
        password: {
          type: 'string',
          title: _r('密码'),
          fieldType: 'password'
        },
        ip: {
          type: 'string',
          title: 'Ip',
          field: {
            validate: value => {
              var reg = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/
              reg.test
              if (!reg.test(value)) {
                return _r('IP地址格式错误')
              } else {
                return null
              }
            }
          }
        },
        port: {
          type: 'number',
          title: _r('端口'),
          // description: _r('端口号是0-65536'),
          field: {
            validate: value => {
              if (value < 0 || value > 65536) {
                return _r('端口号是0-65536')
              } else {
                return null
              }
            }
          }
        },
        dbName: {
          type: 'string',
          title: _r('数据库名称')
        },
        test: {
          type: 'string',
          title: _r('测试连接'),
          field: {
            component: () => {
              const setting = useField('setting') || {}
              const { t:_t1 } = useI18n()
              const onClick = async () => {
                const { json } = await api({ name: 'ds/group/validate' }).fetch('', {
                  method: 'POST',
                  body: JSON.stringify(setting)
                })
                if (json.valid) {
                  message.success(_t1('测试成功！'))
                } else {
                  message.error(json.error)
                }
              }
              return <Button onClick={onClick}>{_t1('测试')}</Button>
            }
          }
        },
        headers: {
          title: 'Headers',
          type: 'array',
          items: KV,
          field: {
            itemsRender: ParamsTable
          }
        },
        authorization: {
          title: 'Auth',
          ...Authorization
        },
        ...scriptConfig
      },
      field: { component: DatasourceSetting },
      // required: ['username', 'password', 'ip', 'port', 'dbName']
    }
  },
  listFields: ['name', 'type', 'createTime' ],
  required: [ 'name', 'type'],
  form: [ '*' ],
  permission: {
    add: true,
    edit: true,
    view: true,
    delete: true,
  },
}

const defaultValueComponent = props => {

  const { input, field } = props

  const [ show, setShow ] = React.useState(false)

  const fkey = field.key.replace('.defaultValue', '.variableType')

  const variableType = useField(fkey)

  const schema = {
    type: 'object',
    properties: {
      value: {
        ...variableType?.schema,
        title: '默认值',
      }
    }
  }

  const onClick = () => {
    if (!variableType?.invalid) {
      setShow(true)
    } else {
      message.error('参数存在错误，请先修改')
    }
  }

  const onChange = values => {
    input.onChange(values)
    setShow(false)
  }

  const initialValues = input.value ? input.value : {}
  return React.useMemo(() => {
    return <>
      <Button onClick={onClick} >点击配置</Button>
      <C is="I18nSchemaForm"
        formKey={`defaultValue.${JSON.stringify(initialValues)}`}
        title="默认值"
        saveText="确定"
        schema={_.cloneDeep(schema)}
        initialValues={_.cloneDeep(initialValues)}
        show={show}
        onSubmit={onChange}
        onClose={() => { setShow(false) }}
        component={C('Form.ModalLayout')}
      />
    </>
  }, [show])

}

const Operation = {
  name: 'interface',
  title: _r('数据接口操作'),
  type: 'object',
  resource: 'ds/interface',
  properties: {
    dataGroup: {
      type: 'object',
      title: _r('分组'),
      relateTo: 'Datasource',
      properties: {
        id: { type: 'string' },
        name: { type: 'string' }
      }
    },
    key: {
      title: _r('标识'),
      type: 'string',
      description: _r('操作的唯一标识，必须为英文字母、数值或下划线。该标识在调用接口时使用。')
    },
    name: {
      type: 'string',
      title: _r('名称')
    },
    variableSchema: {
      type: 'array',
      title: _r('参数'),
      items: {
        type: 'object',
        properties: {
          paramKey: {
            title: _r('参数名'),
            type: 'string',
            field: {
              validate: value => {
                const firstStr = value && value.slice(0, 1)
                if (/[0-9]/.test(firstStr)) {
                  return _r('首位不可为数字')
                } else {
                  return null
                }
              }
            }
          },
          variableType: {
            title: _r('参数类型'),
            type: 'object',
            field: {
              component: props => <C is='ParamTypeSchema' {...props} />
            }
          },
          defaultValue: {
            title: _r('默认值'),
            type: 'object',
            field: {
              component: defaultValueComponent
            },
            properties: {}
          }
        }
      },
    },
    setting: {
      type: 'object',
      title: _r('配置'),
      properties: {
        ...DBSetting.properties,
        ...HttpRequestSetting.properties,
      },
      field: { component: OperationSetting },
    }
  },
  listFields: ['name', 'key', 'setting.method', 'setting.url' ],
  required: [ 'name', 'key', 'dataGroup', 'setting', ],
  form: [ '*' ],
  filters: {
    submenu: [ 'name', 'dataGroup' ]
  },
  // permission: {
  //   add: true,
  //   edit: true,
  //   view: true,
  //   delete: true,
  // }
  rolePermission: [
    { key: 'interface.view', title: _r('查看') },
    { key: 'interface.add', title: _r('添加') },
    { key: 'interface.edit', title: _r('修改') },
    { key: 'interface.delete', title: _r('删除') }
  ],
}

const VarsFormSchema = {
  type: 'object',
  properties: {
    vars: {
      title: _r('请求变量'),
      type: 'array',
      items: KVNoVar,
      field: {
        itemsRender: ParamsTable,
        attrs: { groupSize: { labelCol: { span: 24 } } }
      }
    }
  }
}

const Dsp = {
  name: 'p',
  title: _r('数据接口运行'),
  type: 'object',
  resource: 'ds/p',
  properties: {},
  rolePermission: [
    { key: 'p.add', title: _r('调用') }
  ],
}

export { VarsFormSchema, convertSchema }

export default { Datasource, Operation, Dsp }
