import { Tooltip, Form, Input, } from 'antd';
import React from 'react';
import { QuestionCircleOutlined } from '@ant-design/icons'

const FieldGroup = ({ label, meta, input, field, tailLayout, children }) => {

  const { t:_t1 } = useI18n()

  const attrs = field.attrs || {}
  const error = meta.touched && (meta.error || meta.submitError)
  const extra = field?.description || field.help
  const size = (field.option && field.option.groupSize) || attrs.groupSize || {
    labelCol: {
      xs: { span: 24 },
      sm: { span: 5 }
    },
    wrapperCol: {
      xs: { span: 24 },
      sm: { span: 19, offset: tailLayout ? 5 : 0 }
    }
  }

  const groupProps = { ...size, required: field.required }

  if (error) {
    groupProps['validateStatus'] = 'error'
    groupProps['hasFeedback'] = true
    groupProps['help'] = error
  }
  let statsMethod = input?.name && input.name.substr(input.name.lastIndexOf('.') + 1) == 'statsMethod'
  const controlComponent = children ? children : (<Input {...input} {...attrs} />)

  let obj = {
    rate: { description: _t1('变化率：统计点的变化率为最新数据与上次数据的差值除以上次数据，数据有正有负，计算公式：（最新数据值-上次数据值）/上一次数据值') },
    count: { description: _t1('计数：统计数据点在定义时间周期内上数的总次数，新的周期清空重新计数') },
    min: { description: _t1('最小值：统计数据点在定义时间周期内的最小值') },
    max: { description: _t1('最大值：统计数据点在定义时间周期内的最大值') },
    mean: { description: _t1('平均值：对数据点在定义时间周期内的所有数据值求平均数') },
    sum: { description: _t1('求和：统计数据点在定义时间周期所有数据值的总和') },
    difference: { description: _t1('时段差：统计数据点在选定的单位周期每个周期的数据总和，周期内每次上数数据都会变化，新的周期数据会清零重新计算') },
    yoy: { description: _t1('同比比值：统计数据点在选定周期类型的同比率，如（今年的数据—去年的数据）/去年的数据*100%') },
    cumuyoy: { description: _t1('累计同比比值：') },
    mom: { description: _t1('环比比值：统计数据点在选定周期类型的环比率，以单位周期的数据总和进行计算，如按月统计：（当月数据总和—上月数据总和）/上月数据总和*100%') },
    addval: { description: _t1('增加值：统计数据点在定义周期单位，每个周期比上个周期增加的数量，如按月统计，计算的是这个月与上个月对比，增加的数量，计算公式是当月数据总和-上个月数据总和') },
    abs: { description: _t1('绝对值变化率：统计数据点的绝对值，数据永远大于等于0') }
  }

  return (
    <Form.Item
      label={
        label ?
          <>
            <span style={extra || statsMethod && input.value && obj[input.value] ? { marginRight: '6px' } : null} title={label}>{label}</span>
            {
              extra ? (
                <Tooltip placement="bottom" title={extra}>
                  <QuestionCircleOutlined className="label-des" style={{ color: 'rgba(0,0,0,.45)' }} />
                </Tooltip>
              ) : statsMethod && input?.value && obj[input.value]?.description ?
                (
                  <Tooltip placement="bottom" title={obj[input.value]?.description}>
                    <QuestionCircleOutlined className="label-des" style={{ color: 'rgba(0,0,0,.45)' }} />
                  </Tooltip>
                )
                : null
            }
          </> : label
      }
      {...groupProps}>
      {controlComponent}
      {!label && field?.schema?.type == 'boolean' && extra ? <Tooltip placement="bottom" title={extra}>
        <QuestionCircleOutlined className="label-des" style={{ color: 'rgba(0,0,0,.45)' }} />
      </Tooltip> : null}
    </Form.Item>
  )
}

export default FieldGroup