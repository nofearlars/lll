import _ from 'lodash'
import React, { useState, useRef } from 'react'
import { api } from 'xadmin'

const Context = React.createContext()
Context.displayName = 'DatasourceContext'

const TreeContext = React.createContext()
Context.displayName = 'DatasourceContext'

const ContextProvider = ({ children }) => {
  const [ state, setState ] = React.useState({ type: null, id: null, query: null })

  const addDatasource = () => {
    setState({ type: 'ds', id: null, query: null })
  }

  const addOperation = (ds) => {
    setState({ type: 'op', id: null, query: { dataGroup: ds } })
  }

  const editDatasource = (id) => {
    setState({ type: 'ds', id, query: null })
  }

  const editOperation = (id, ds) => {
    setState({ type: 'op', id, query: { dataGroup: ds } })
  }

  const reset = () => setState({ type: null, id: null, query: null })

  return (
    <Context.Provider value={{ state, setState, reset, addDatasource, addOperation, editDatasource, editOperation }}>
      {children}
    </Context.Provider >
  )
}

const TreeContextProvider = ({ children }) => {
  const [ data, setData ] = React.useState([])
  const [ searchData, setSearchData ] = React.useState([])
  const [ loading, setLoading ] = React.useState(false)

  const loadDatasource = async (widthLoading) => {
    setData([])
    widthLoading && setLoading(true)
    try {
      const { items } = await api('Datasource').query()
      setData(items.map(i => ({ ...i, children: _.find(data, d => d.id == i.id)?.children })))
    } catch (error) {
      return Promise.reject(error)
    } finally {
      widthLoading && setLoading(false)
    }
  }

  const loadOperation = async (dataSourceId, force=false) => {
    const ds = _.find(data, d => d.id == dataSourceId)
    if (!force && ds?.children) {
      return;
    }
    try {
      const {items} = await api('Operation').query({}, { filter: { dataGroupId: dataSourceId }})
      setData(data.map(d => {
        if(d.id == dataSourceId) {
          return { ...d, children: items }
        }
        return d
      }))
    } catch (error) {
      return Promise.reject(error)
    }
  }

  const loadSearch = async (value) => {
    if (value) {
      try {
        const ids = []
        const { items } = await api('Operation').query({}, { filter: { name: { '$regex': value } }})
        setSearchData(data.map(d => {
          const children = items.filter(item => d.id === item?.dataGroup?.id)
          if (children?.length) {
            ids.push(d.id)
          }
          return { ...d, children}
        }).filter(d => ids.indexOf(d.id) !== -1))
        return ids
      } catch (error) {
        return Promise.rejet(error)
      }
    } else {
      setSearchData(data.map(d => {
        return { ...d, children: null }
      }))
    }
  }

  React.useEffect(() => {
    loadDatasource()
  }, [ ])

  return (
    <TreeContext.Provider value={{ loading, data, searchData, loadDatasource, loadOperation, loadSearch }}>
      {children}
    </TreeContext.Provider >
  )
}

export default Context

export {
  Context,
  ContextProvider,
  TreeContext,
  TreeContextProvider
}