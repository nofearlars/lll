"use strict";(this.webpackChunk_airiot_editor=this.webpackChunk_airiot_editor||[]).push([[2625],{4657:(e,t,n)=>{n.r(t),n.d(t,{default:()=>z});var r=n(7462),a=n(4942),o=n(885),i=n(7363),l=n.n(i),s=n(3078),d=n(5907),c=n(1821),u=n(1002);const m=JSON.parse('{"functions":[{"name":"getTableList","access":"","virtual":false,"description":"<p>[工作表]查询工作表列表</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>getTableList().then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"filter","type":"Object","description":"<p>查询条件（可选）</p>","default":"","optional":"","nullable":""},{"name":"filter.limit","type":"Number","description":"<p>查询条数（默认30）</p>","default":"","optional":"","nullable":""},{"name":"filter.skip","type":"Number","description":"<p>跳过条数（默认0）</p>","default":"","optional":"","nullable":""},{"name":"filter.order","type":"Object","description":"<p>排序</p>","default":"","optional":"","nullable":""},{"name":"filter.fields","type":"Array","description":"<p>查询字段（默认name）</p>","default":"","optional":"","nullable":""},{"name":"filter.where","type":"Object","description":"<p>查询条件</p>","default":"","optional":"","nullable":""},{"name":"filter.where.name","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""},{"name":"filter.where.title","type":"String","description":"<p>工作表标题</p>","default":"","optional":"","nullable":""},{"name":"filter.where.schema","type":"Object","description":"<p>属性配置</p>","default":"","optional":"","nullable":""},{"name":"filter.where.dashboard","type":"Array","description":"<p>关联画面</p>","default":"","optional":"","nullable":""},{"name":"filter.where.permission","type":"Object","description":"<p>工作表权限</p>","default":"","optional":"","nullable":""},{"name":"filter.where.mutualRules","type":"Array","description":"<p>字段规则</p>","default":"","optional":"","nullable":""},{"name":"filter.where.errorNotice","type":"Array","description":"<p>错误提示</p>","default":"","optional":"","nullable":""},{"name":"filter.where.syncSettings","type":"Object","description":"<p>同步数据</p>","default":"","optional":"","nullable":""},{"name":"filter.where.creator","type":"Object","description":"<p>创建人</p>","default":"","optional":"","nullable":""},{"name":"filter.where.createTime","type":"String","description":"<p>创建时间</p>","default":"","optional":"","nullable":""}],"examples":["getTableList({ limit: 10, skip: 0, order: { name: \'DESC\' }, fields: [\'title\', \'device\'], where: { id: \'工作表名称\' } }).then(data => {\\r   console.log(data)\\r})"],"returns":{"type":"Object","description":"<p>{ total: 总条数, items: 工作表列表 }</p>"}},{"name":"getTableById","access":"","virtual":false,"description":"<p>[工作表]根据id查询工作表详情</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>getTableById(&quot;619344aa3752eb45f783a0c4&quot;).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"id","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>工作表数据</p>"}},{"name":"addTable","access":"","virtual":false,"description":"<p>[工作表]新增工作表</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>addTable({ id: \'测试表\', title: _r(\'测试表\') }).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"table","type":"Object","description":"<p>新建的工作表数据</p>","default":"","optional":"","nullable":""},{"name":"table.id","type":"String","description":"<p>工作表名称（必填）</p>","default":"","optional":"","nullable":""},{"name":"table.title","type":"String","description":"<p>工作表标题（必填）</p>","default":"","optional":"","nullable":""},{"name":"table.schema","type":"Object","description":"<p>属性配置</p>","default":"","optional":"","nullable":""},{"name":"table.dashboard","type":"Array","description":"<p>关联画面</p>","default":"","optional":"","nullable":""},{"name":"table.permission","type":"Object","description":"<p>工作表权限</p>","default":"","optional":"","nullable":""},{"name":"table.mutualRules","type":"Array","description":"<p>字段规则</p>","default":"","optional":"","nullable":""},{"name":"table.errorNotice","type":"Array","description":"<p>错误提示</p>","default":"","optional":"","nullable":""},{"name":"table.syncSettings","type":"Object","description":"<p>同步数据</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ InsertedID: 插入工作表的ID }</p>"}},{"name":"editTableById","access":"","virtual":false,"description":"<p>[工作表]修改工作表</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>editTableById(\'618c826bf39c079f64d3beae\', { title: _r(\'测试表\') }).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"id","type":"String","description":"<p>修改的工作表名称</p>","default":"","optional":"","nullable":""},{"name":"table","type":"Object","description":"<p>修改的工作表数据</p>","default":"","optional":"","nullable":""},{"name":"table.title","type":"String","description":"<p>工作表标题</p>","default":"","optional":"","nullable":""},{"name":"table.schema","type":"Object","description":"<p>属性配置</p>","default":"","optional":"","nullable":""},{"name":"table.dashboard","type":"Array","description":"<p>关联画面</p>","default":"","optional":"","nullable":""},{"name":"table.permission","type":"Object","description":"<p>工作表权限</p>","default":"","optional":"","nullable":""},{"name":"table.mutualRules","type":"Array","description":"<p>字段规则</p>","default":"","optional":"","nullable":""},{"name":"table.errorNotice","type":"Array","description":"<p>错误提示</p>","default":"","optional":"","nullable":""},{"name":"table.syncSettings","type":"Object","description":"<p>同步数据</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ status: &quot;OK&quot; } 修改成功</p>"}},{"name":"delTableById","access":"","virtual":false,"description":"<p>[工作表]删除工作表</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>delTableById(&quot;61a03d56b1bc77a1c795abcd&quot;).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"id","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ status: &quot;OK&quot; } 删除成功</p>"}},{"name":"getTableDataList","access":"","virtual":false,"description":"<p>[工作表数据]查询某个工作表数据</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>getTableDataList(\'工作表3\').then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"tableName","type":"String","description":"<p>工作表名称（必填）</p>","default":"","optional":"","nullable":""},{"name":"filter","type":"Object","description":"<p>查询条件（可选）</p>","default":"","optional":"","nullable":""},{"name":"filter.limit","type":"Number","description":"<p>查询条数（默认30）</p>","default":"","optional":"","nullable":""},{"name":"filter.skip","type":"Number","description":"<p>跳过条数（默认0）</p>","default":"","optional":"","nullable":""},{"name":"filter.sort","type":"Object","description":"<p>排序</p>","default":"","optional":"","nullable":""},{"name":"filter.project","type":"Object","description":"<p>查询字段（默认name）</p>","default":"","optional":"","nullable":""},{"name":"filter.where","type":"Object","description":"<p>查询条件</p>","default":"","optional":"","nullable":""}],"examples":["getTableDataList(\'工作表3\', {\\r  limit: 10, skip: 0, sort: { \'createTime\': -1 },\\r  project: { \'number-9B75\': 1, \'text-C19C\': 1 }, where: { \'number-9B75\': 2 }\\r}).then(data => {\\r  console.log(data)\\r})"],"returns":{"type":"Array","description":"<p>工作表数据列表</p>"}},{"name":"getTableDataById","access":"","virtual":false,"description":"<p>[工作表数据]根据id查询工作表数据详情</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>getTableDataById(&quot;测试表2&quot;, &quot;61943edd7d293211b1eade6f&quot;).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"tableName","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""},{"name":"id","type":"String","description":"<p>工作表数据ID</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>工作表数据详情</p>"}},{"name":"checkTableAdd","access":"","virtual":false,"description":"<p>[工作表数据]查询是否有工作表的添加权限</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>checkTableAdd(&quot;测试表2&quot;).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"tableName","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ add: true } 有添加权限</p>"}},{"name":"addTableData","access":"","virtual":false,"description":"<p>[工作表数据]新增一条工作表数据</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>addTableData(&quot;测试表2&quot;, { \'text-C19C\': \'人人人\', \'number-9B75\': 12 }).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"tableName","type":"Object","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""},{"name":"tableData","type":"Object","description":"<p>新增的工作表数据</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ InsertedID: 插入工作表的ID }</p>"}},{"name":"editTableDataById","access":"","virtual":false,"description":"<p>[工作表数据]修改工作表数据</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>editTableDataById(\'测试表2\', \'618c826bf39c079f64d3beae\', { \'text-C19C\': \'文本2\', }).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"tableName","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""},{"name":"id","type":"String","description":"<p>修改的工作表数据ID</p>","default":"","optional":"","nullable":""},{"name":"tableData","type":"Object","description":"<p>修改的工作表数据内容</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ status: &quot;OK&quot; } 修改成功</p>"}},{"name":"delTableDataById","access":"","virtual":false,"description":"<p>[工作表数据]删除工作表数据</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>delTableDataById(&quot;测试表2&quot;, &quot;61a03d56b1bc77a1c795abcd&quot;).then(data => {\\n   console.log(data)\\n})\\n</code></pre>","parameters":[{"name":"tableName","type":"String","description":"<p>工作表名称</p>","default":"","optional":"","nullable":""},{"name":"id","type":"String","description":"<p>工作表数据ID</p>","default":"","optional":"","nullable":""}],"examples":[],"returns":{"type":"Object","description":"<p>{ status: &quot;OK&quot; } 删除成功</p>"}},{"name":"getDVariable","access":"","virtual":false,"description":"<p>[画面]查询画面变量</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>const DVariable = getDVariable()\\n</code></pre>","parameters":[],"examples":[],"returns":{"type":"Object","description":"<p>画面变量数据</p>"}},{"name":"addEditDVariable","access":"","virtual":false,"description":"<p>[画面]添加/修改画面变量</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>addEditDVariable(\'aaa\', { bbb: \'ccc\' })\\n</code></pre>","parameters":[{"name":"key","type":"String","description":"<p>画面变量key</p>","default":"","optional":"","nullable":""},{"name":"value","type":"Any","description":"<p>画面变量值</p>","default":"","optional":"","nullable":""}],"examples":[]},{"name":"delDVariable","access":"","virtual":false,"description":"<p>[画面]删除画面变量</p>\\n<h3>使用示例</h3>\\n<pre class=\\"prettyprint source\\"><code>delDVariable(\'aaa\')\\n</code></pre>","parameters":[{"name":"key","type":"String","description":"<p>画面变量key</p>","default":"","optional":"","nullable":""}],"examples":[]}]}'),p={scriptFun:{ECMAScript中函数:{字符串:["anchor","big","blink","bold","charAt","charCodeAt","concat","fixed","fontcolor","fontsize","fromCharCode","indexOf","italics","lastIndexOf","localeCompare","match","replace","search","slice","small","split","strike","sub","substr","substring","sup","toLocaleLowerCase","toLocaleUpperCase","toLowerCase","toUpperCase"],数学:["abs","acos","asin","atan","atan2","ceil","cos","exp","floor","log","max","min","pow","random","round","sin","sqrt","tan"],日期时间:["Date","getDate","getDay","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","getTime","getTimezoneOffset","getUTCDate","getUTCDay","getUTCMonth","getUTCFullYear","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","parse","setDate","setMonth","setFullYear","setHours","setMinutes","setSeconds","setMilliseconds","setTime","setUTCDate","setUTCMonth","setUTCFullYear","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","toTimeString","toDateString","toUTCString","toLocaleString","toLocaleTimeString","toLocaleDateString","UTC"],数组:["concat","join","pop","push","reverse","shift","slice","sort","splice","toString","toLocaleString","unshift"],数字:["toExponential","toFixed","toPrecision","toString"],正则表达式:["compile","exec","test"],全局:["escape","eval","isNaN","parseFloat","parseInt","unescape"],JSON:["parse","stringify"]},html对dom操作的函数:{Document:["close","getElementById","getElementsByName","getElementsByTagName","open","write","writeln"],Element:["appendChild","cloneNode","compareDocumentPosition","getAttribute","getAttributeNode","hasAttribute","hasAttributes","hasChildNodes","insertBefore","isDefaultNamespace","isEqualNode","isSameNode","isSupported","normalize","removeAttribute","removeAttributeNode","removeChild","replaceChild","setAttribute","setAttributeNode","item"],Attribute:["getNamedItem","item","removeNamedItem","setNamedItem"]},Web存储:{localStorage:["setItem","getItem","removeItem","clear","key"],sessionStorage:["setItem","getItem","removeItem","clear","key"]},"Web Sql":{openDatabase:[],transaction:[],executeSql:[]},"Web Worker":{postMessage:[],onMessage:[]}},scriptFunDetail:{字符串:{anchor:{defination:"创建 HTML 锚",syntax:"stringObject.anchor(anchorname);",parameters:"{String} anchorname 为锚定义名称",return:"String",demo:"var txt='Hello world!'<br/>document.write(txt.anchor('myanchor'));"},big:{defination:"用大号字体显示字符串",syntax:"stringObject.big();",parameters:"{Null}",return:"String",demo:"var str='Hello world!'<br/>document.write(str.big());"},blink:{defination:"显示闪动字符串",syntax:"stringObject.blink();",parameters:"{Null}",return:"String",demo:"var str='Hello world!'<br/>document.write(str.blink());"},bold:{defination:"使用粗体显示字符串",syntax:"stringObject.bold();",parameters:"{Null}",return:"String",demo:"var str='Hello world!'<br/>document.write(str.bold());"},charAt:{defination:"返回在指定位置的字符",syntax:"stringObject.charAt(index);",parameters:"{Number} index 字符在字符串中的位置",return:"String",demo:"var str = 'Hello world!';<br/>document.write(str.charAt(1));"},charCodeAt:{defination:"返回在指定的位置的字符的 Unicode 编码",syntax:"stringObject.charCodeAt(index);",parameters:"{Number} index 字符在字符串中的位置",return:"Number",demo:"var str = 'Hello world!';<br/>document.write(str.charCodeAt(1));"},concat:{defination:"连接字符串",syntax:"stringObject.concat(stringX,stringX,...,stringX);",parameters:"{String} stringX 将被连接为一个字符串的一个或多个字符串对象",return:"String",demo:"var str1='Hello';<br/>var str2='world!';<br/>document.write(str1.concat(str2));"},fixed:{defination:"以打字机文本显示字符串",syntax:"stringObject.fixed();",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.fixed());"},fontcolor:{defination:"使用指定的颜色来显示字符串",syntax:"stringObject.fontcolor(color);",parameters:"{String}  color 为字符串规定 font-color",return:"String",demo:"var str='Hello world!';<br/>document.write(str.fontcolor('Red'));"},fontsize:{defination:"使用指定的尺寸来显示字符串",syntax:"stringObject.fontsize(size);",parameters:"{Number}  size 必须是从 1 至 7 的数字",return:"String",demo:"var str='Hello world!';<br/>document.write(str.fontsize(7));"},fromCharCode:{defination:"从字符编码创建一个字符串",syntax:"String.fromCharCode(numX,numX,...,numX);",parameters:"{Number}  numX 一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码",return:"String",demo:"document.write(String.fromCharCode(72,69,76,76,79));<br/>document.write(String.fromCharCode(65,66,67));"},indexOf:{defination:"检索字符串",syntax:"stringObject.indexOf(searchvalue,fromindex);",parameters:"{String}  searchvalue 必需 规定需检索的字符串值<br/>          {String}  fromindex 可选 规定在字符串中开始检索的位置",return:"Number",demo:"var str='Hello world!';<br/>document.write(str.indexOf('Hello'));<br/>document.write(str.indexOf('World');<br/>document.write(str.indexOf('world'));"},italics:{defination:"使用斜体显示字符串",syntax:"stringObject.italics();",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.italics());"},lastIndexOf:{defination:"从后向前搜索字符串",syntax:"stringObject.lastIndexOf(searchvalue,fromindex);",parameters:"{String} searchvalue 必需 规定需检索的字符串值<br/>          {String} fromindex 可选 规定在字符串中开始检索的位置",return:"Number",demo:"var str='Hello world!';<br/>document.write(str.lastIndexOf('Hello'));<br/>document.write(str.lastIndexOf('World');<br/>document.write(str.lastIndexOf('world'));"},link:{defination:"将字符串显示为链接",syntax:"stringObject.link(url);",parameters:"{String} url 规定要链接的 URL",return:"String",demo:"var str='Free Web Tutorials!';<br/>document.write(str.link('http://www.w3school.com.cn'));"},localeCompare:{defination:"用本地特定的顺序来比较两个字符串",syntax:"stringObject.localeCompare(target);",parameters:"{String} target 要以本地特定的顺序与 stringObject 进行比较的字符串",return:"Number",demo:"var str;<br/>str.sort (function(a,b){return a.localeCompare(b)});"},match:{defination:"找到一个或多个正则表达式的匹配",syntax:"stringObject.match(searchvalue);<br/>       stringObject.match(regexp)",parameters:"{String} searchvalue 规定要检索的字符串值<br/>          {RegExp} regexp 规定要匹配的模式的 RegExp 对象",return:"Array",demo:"var str1='Hello world!';<br/>var str='1 plus 2 equal 3';<br/>document.write(str1.match('world'));<br/>document.write(str.match(/d+/g));"},replace:{defination:"替换与正则表达式匹配的子串",syntax:"stringObject.replace(regexp/substr,replacement)",parameters:"{RegExp} regexp 规定子字符串或要替换的模式的 RegExp 对象<br/>          {String} replacement 规定了替换文本或生成替换文本的函数",return:"String",demo:"var str='Visit Microsoft!';<br/>document.write(str.replace(/Microsoft/, 'W3School'));"},search:{defination:"检索与正则表达式相匹配的值",syntax:"stringObject.search(regexp)",parameters:"{RegExp} regexp 检索的子串或是 RegExp 对象",return:"Number",demo:"var str='Visit W3School!';<br/>document.write(str.search(/W3School/));"},slice:{defination:"提取字符串的片断，并在新的字符串中返回被提取的部分",syntax:"stringObject.slice(start,end)",parameters:"{Number} start 要抽取的片断的起始下标<br/>          {Number} end 可选 紧接着要抽取的片段的结尾的下标",return:"String",demo:"var str='Hello happy world!';<br/>document.write(str.slice(6,11));"},small:{defination:"使用小字号来显示字符串",syntax:"stringObject.small()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.small());"},split:{defination:"把字符串分割为字符串数组",syntax:"stringObject.split(separator,howmany)",parameters:"{String} separator 字符串或正则表达式<br/>          {howmany} howmany 可选 该参数可指定返回的数组的最大长度",return:"Array",demo:"var str='How are you doing today?';<br/>document.write(str.split(' ',3));"},strike:{defination:"使用删除线来显示字符串",syntax:"stringObject.strike()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.strike());"},sub:{defination:"把字符串显示为下标",syntax:"stringObject.sub()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.sub());"},substr:{defination:"从起始索引号提取字符串中指定数目的字符",syntax:"stringObject.substr(start,length)",parameters:"{Number} start 要抽取的子串的起始下标<br/>          {Number} length 可选 子串中的字符数",return:"String",demo:"var str='Hello world!';<br/>document.write(str.substr(3,7));"},substring:{defination:"提取字符串中两个指定的索引号之间的字符",syntax:"stringObject.substring(start,stop)",parameters:"{Number} start 要提取的子串的开始位置<br/>          {Number} stop 要提取的子串的结束位置",return:"String",demo:"var str='Hello world!';<br/>document.write(str.substring(3,7));"},sup:{defination:"把字符串显示为上标",syntax:"stringObject.sup()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.sup());"},toLocaleLowerCase:{defination:"把字符串转换为小写",syntax:"stringObject.toLocaleLowerCase()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.toLocaleLowerCase());"},toLocaleUpperCase:{defination:"把字符串转换为大写",syntax:"stringObject.toLocaleUpperCase()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.toLocaleUpperCase());"},toLowerCase:{defination:"把字符串转换为小写",syntax:"stringObject.toLowerCase()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.toLowerCase());"},toUpperCase:{defination:"把字符串转换为大写",syntax:"stringObject.toUpperCase()",parameters:"{Null}",return:"String",demo:"var str='Hello world!';<br/>document.write(str.toUpperCase());"}},数学:{abs:{defination:"返回数的绝对值",syntax:"Math.abs(x);",parameters:"{Number} x 数值",return:"Number",demo:"document.write(Math.abs(-7.25));"},acos:{defination:"返回数的反余弦值",syntax:"Math.acos(x)",parameters:"{Number} x 必须是 -1.0 ~ 1.0 之间的数",return:"Number",demo:"document.write(Math.acos(0.64);"},asin:{defination:"返回数的反正弦值",syntax:"Math.asin(x)",parameters:"{Number} x 必须是 -1.0 ~ 1.0 之间的数",return:"Number",demo:"document.write(Math.asin(0.64);"},atan:{defination:"返回数的反正切值",syntax:"Math.atan(x)",parameters:"{Number} x 数值",return:"Number",demo:"document.write(Math.atan(0.50);"},atan2:{defination:"返回从x轴到点(x,y)的角度（介于-PI/2与PI/2弧度之间",syntax:"Math.atan2(y,x)",parameters:"{Number} y 指定点的 Y 坐标, {Number} x 指定点的 X 坐标",return:"Number",demo:"document.write(Math.atan2(0.50,0.50);"},ceil:{defination:"对数进行上舍入",syntax:"Math.ceil(x)",parameters:"{Number} x 数值",return:"Number",demo:"document.write(Math.ceil(0.60);"},cos:{defination:"返回数的余弦值",syntax:"Math.cos(x)",parameters:"{Number} x 数值",return:"Number",demo:"document.write(Math.cos(2*Math.PI));"},exp:{defination:"返回 e 的指数",syntax:"Math.exp(x)",parameters:"{Number} x 任意数值或表达式",return:"Number",demo:"document.write(Math.exp(5);"},floor:{defination:"对数进行下舍入",syntax:"Math.floor(x)",parameters:"{Number} x 任意数值或表达式",return:"Number",demo:"document.write(Math.floor(5.1);"},log:{defination:"返回数的自然对数",syntax:"Math.log(x)",parameters:"{Number} x 任意数值或表达式",return:"Number",demo:"document.write(Math.log(2.7183);"},max:{defination:"返回最大值",syntax:"Math.max(x...)",parameters:"{Number} x 0 或多个值",return:"Number",demo:"document.write(Math.max(7.25,7.30));"},min:{defination:"返回最小值",syntax:"Math.min(x...)",parameters:"{Number} x 0 或多个值",return:"Number",demo:"document.write(Math.min(7.25,7.30));"},pow:{defination:"返回指数幂",syntax:"Math.pow(x, y)",parameters:"{Number} x 底数, {Number} y 幂数",return:"Number",demo:"document.write(Math.pow(-2,4);"},random:{defination:"返回0 ~ 1之间的随机数",syntax:"Math.random()",parameters:"{Null}",return:"Number",demo:"document.write(Math.random());"},round:{defination:"把数四舍五入为最接近的整数",syntax:"Math.round(x)",parameters:"{Number} x 数值",return:"Number",demo:"document.write(Math.round(-4.60));"},sin:{defination:"返回正弦值",syntax:"Math.sin(x)",parameters:"{Number} x 一个以弧度表示的角",return:"Number",demo:"document.write(Math.sin(Math.PI/2);"},sqrt:{defination:"返回平方根",syntax:"Math.sqrt(x)",parameters:"{Number} x 必须是大于等于 0 的数",return:"Number",demo:"var a=Math.sqrt(0.64);"},tan:{defination:"返回正切值",syntax:"Math.tan(x)",parameters:"{Number} x 一个以弧度表示的角",return:"Number",demo:"document.write(Math.tan(0.50);"}},日期时间:{Date:{defination:"返回当日的日期和时间",syntax:"Date()",parameters:"{Null}",return:"String",demo:"document.write(Date());"},getDate:{defination:"从 Date 对象返回一个月中的某一天 (1 ~ 31)",syntax:"dateObject.getDate()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getDate());"},getDay:{defination:"从 Date 对象返回一周中的某一天 (0 ~ 6)",syntax:"dateObject.getDay()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getDay());"},getMonth:{defination:"从 Date 对象返回月份 (0 ~ 11)",syntax:"dateObject.getMonth()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getMonth());"},getFullYear:{defination:"从 Date 对象以四位数字返回年份",syntax:"dateObject.getFullYear()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getFullYear());"},getHours:{defination:"返回 Date 对象的小时 (0 ~ 23)",syntax:"dateObject.getHours()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getHours());"},getMinutes:{defination:"返回 Date 对象的分钟 (0 ~ 59)",syntax:"dateObject.getMinutes()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getMinutes());"},getSeconds:{defination:"返回 Date 对象的秒数 (0 ~ 59)",syntax:"dateObject.getSeconds()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getSeconds());"},getMilliseconds:{defination:"返回 Date 对象的毫秒(0 ~ 999)",syntax:"dateObject.getMilliseconds()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getMilliseconds());"},getTime:{defination:"返回 1970 年 1 月 1 日至今的毫秒数",syntax:"dateObject.getTime()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getTime() + 'milliseconds since 1970/01/01');"},getTimezoneOffset:{defination:"返回本地时间与格林威治标准时间 (GMT) 的分钟差",syntax:"dateObject.getTimezoneOffset()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getTimezoneOffset());"},getUTCDate:{defination:"根据世界时从 Date 对象返回月中的一天 (1 ~ 31)",syntax:"dateObject.getUTCDate()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCDate());"},getUTCDay:{defination:"根据世界时从 Date 对象返回周中的一天 (0 ~ 6)",syntax:"dateObject.getUTCDay()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCDay());"},getUTCMonth:{defination:"根根据世界时从 Date 对象返回月份 (0 ~ 11)",syntax:"dateObject.getUTCMonth()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCMonth());"},getUTCFullYear:{defination:"根据世界时从 Date 对象返回四位数的年份",syntax:"dateObject.getUTCFullYear()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCFullYear());"},getUTCHours:{defination:"根据世界时返回 Date 对象的小时 (0 ~ 23)",syntax:"dateObject.getUTCHours()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCHours());"},getUTCMinutes:{defination:"根据世界时返回 Date 对象的分钟 (0 ~ 59)",syntax:"dateObject.getUTCMinutes()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCMinutes());"},getUTCSeconds:{defination:"根据世界时返回 Date 对象的秒钟 (0 ~ 59)",syntax:"dateObject.getUTCSeconds()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCSeconds());"},getUTCMilliseconds:{defination:"根据世界时返回 Date 对象的毫秒(0 ~ 999)",syntax:"dateObject.getUTCMilliseconds()",parameters:"{Null}",return:"Number",demo:"var d = new Date()<br/>document.write(d.getUTCMilliseconds());"},parse:{defination:"返回1970年1月1日午夜到指定日期（字符串）的毫秒数",syntax:"Date.parse(datestring)",parameters:"{String} datestring 表示日期和时间的字符串",return:"Number",demo:"var d = Date.parse('Jul 8, 2005');"},setDate:{defination:"设置 Date 对象中月的某一天 (1 ~ 31)",syntax:"dateObject.setDate(day)",parameters:"{Number} day 表示一个月中的一天的一个数值（1 ~ 31）",return:"Number",demo:"var d = new Date();</br>d.setDate(15);"},setMonth:{defination:"设置 Date 对象中月份 (0 ~ 11)",syntax:"dateObject.setMonth(month,day)",parameters:"{Number} month 一个表示月份的数值</br>          {Number} day 可选 一个表示月的某一天的数值",return:"Number",demo:"var d = new Date();</br>d.setMonth(0);"},setFullYear:{defination:"设置 Date 对象中的年份（四位数字）",syntax:"dateObject.setFullYear(year,month,day)",parameters:"{Number} year 表示年份的四位整数</br>          {Number} month 可选 表示月份的数值<br/>          {Number} day 可选 表示月中某一天的数值",return:"Number",demo:"var d = new Date();</br>d.setFullYear(1992);"},setHours:{defination:"设置 Date 对象中的小时 (0 ~ 23)",syntax:"dateObject.setHours(hour,min,sec,millisec)",parameters:"{Number} hour 表示小时的数值</br>          {Number} min 可选 表示分钟的数值<br/>          {Number} sec 可选 表示秒的数值<br/>          {Number} millisec 可选 表示毫秒的数值",return:"Number",demo:"var d = new Date();</br>d.setHours(15);"},setMinutes:{defination:"设置 Date 对象中的分钟 (0 ~ 59)",syntax:"dateObject.setMinutes(min,sec,millisec)",parameters:"{Number} min 表示分钟的数值<br/>          {Number} sec 可选 表示秒的数值<br/>          {Number} millisec 可选 表示毫秒的数值",return:"Number",demo:"var d = new Date();</br>d.setMinutes(1);"},setSeconds:{defination:"设置 Date 对象中的秒钟 (0 ~ 59)",syntax:"dateObject.setSeconds(sec,millisec)",parameters:"{Number} sec 表示秒的数值<br/>          {Number} millisec 可选 表示毫秒的数值",return:"Number",demo:"var d = new Date();</br>d.setSeconds(1);"},setMilliseconds:{defination:"设置 Date 对象中的毫秒 (0 ~ 999)",syntax:"dateObject.setMilliseconds(millisec)",parameters:"{Number} millisec 用于设置 dateObject 毫秒字段",return:"Number",demo:"var d = new Date();</br>d.setMilliseconds(1);"},setTime:{defination:"以毫秒设置 Date 对象",syntax:"dateObject.setTime(millisec)",parameters:"{Number} millisec 要设置的日期和时间据 GMT 时间 1970 年 1 月 1 日午夜之间的毫秒数",return:"Undefined",demo:"var d = new Date();<br/>d.setTime(77771564221);<br/>document.write(d);"},setUTCDate:{defination:"根据世界时设置 Date 对象中月份的一天 (1 ~ 31)",syntax:"dateObject.setUTCDate(day)",parameters:"{Number} day 要给 dateObject 设置的一个月中的某一天",return:"Number",demo:"var d = new Date();<br/>d.setUTCDate(15);<br/>document.write(d);"},setUTCMonth:{defination:"根据世界时设置 Date 对象中的月份 (0 ~ 11)",syntax:"dateObject.setUTCMonth(month,day)",parameters:"{Number} month 要给 dateObject 设置的月份字段的值<br/>  {Number} day 在 1 ~ 31 之间的整数，用作 dateObject 的天字段",return:"Number",demo:"var d=new Date();<br/>d.setUTCMonth(0);<br/>document.write(d);"},setUTCFullYear:{defination:"根据世界时设置 Date 对象中的年份（四位数字）",syntax:"dateObject.setUTCFullYear(year,month,day)",parameters:"{Number} year 要给 dateObject 设置的年份字段的值<br/>  {Number} month 要给 dateObject 设置的月份字段的值<br/>  {Number} day 在 1 ~ 31 之间的整数，用作 dateObject 的天字段",return:"Number",demo:"var d = new Date();<br/>d.setUTCFullYear(1992);<br/>document.write(d);"},setUTCHours:{defination:"根据世界时设置 Date 对象中的小时 (0 ~ 23)",syntax:"dateObject.setUTCHours(hour,min,sec,millisec)",parameters:"{Number} hour 要给 dateObject 设置的小时字段的值<br/>  {Number} min 要给 dateObject 设置的分钟字段的值<br/>  {Number} sec 要给 dateObject 设置的秒字段的值<br/>  {Number} millisec 要给 dateObject 设置的毫秒字段的值",return:"Number",demo:"var d = new Date();<br/>d.setUTCHours(23);<br/>document.write(d);"},setUTCMinutes:{defination:"根据世界时设置 Date 对象中的分钟",syntax:"dateObject.setUTCMinutes(min,sec,millisec)",parameters:"{Number} min 要给 dateObject 设置的分钟字段的值<br/>  {Number} sec 要给 dateObject 设置的秒字段的值<br/>  {Number} millisec 要给 dateObject 设置的毫秒字段的值",return:"Number",demo:"var d = new Date();<br/>d.setUTCMinutes(1);<br/>document.write(d);"},setUTCSeconds:{defination:"根据世界时设置 Date 对象中的秒钟 (0 ~ 59)",syntax:"dateObject.setUTCSeconds(sec,millisec)",parameters:"{Number} sec 要给 dateObject 设置的秒字段的值<br/>  {Number} millisec 要给 dateObject 设置的毫秒字段的值",return:"Number",demo:"var d = new Date();<br/>d.setUTCSeconds(1);<br/>document.write(d);"},setUTCMilliseconds:{defination:"根据世界时设置 Date 对象中的毫秒 (0 ~ 999)",syntax:"dateObject.setUTCMilliseconds(millisec)",parameters:"{Number} millisec 要给 dateObject 设置的毫秒字段的值",return:"Number",demo:"var d = new Date();<br/>d.setUTCMilliseconds(1);<br/>document.write(d);"},toString:{defination:"把 Date 对象转换为字符串",syntax:"dateObject.toString()",parameters:"{Null}",return:"String",demo:"var d = new Date()'<br/>document.write(d.toString());"},toTimeString:{defination:"把 Date 对象的时间部分转换为字符串",syntax:"dateObject.toTimeString()",parameters:"{Null}",return:"String",demo:"var d = new Date()'<br/>document.write(d.toTimeString());"},toDateString:{defination:"把 Date 对象的日期部分转换为字符串",syntax:"dateObject.toDateString()",parameters:"{Null}",return:"String",demo:"var d = new Date();<br/>document.write(d.toDateString());"},toUTCString:{defination:"根据世界时，把 Date 对象转换为字符串",syntax:"dateObject.toUTCString()",parameters:"{Null}",return:"String",demo:"var d = new Date();</br>document.write(d.toUTCString());"},toLocaleString:{defination:"根据本地时间格式，把 Date 对象转换为字符串",syntax:"dateObject.toLocaleString()",parameters:"{Null}",return:"String",demo:"var d = new Date();</br>document.write(d.toLocaleString());"},toLocaleTimeString:{defination:"根据本地时间格式，把 Date 对象的时间部分转换为字符串",syntax:"dateObject.toLocaleTimeString()",parameters:"{Null}",return:"String",demo:"var d = new Date();</br>document.write(d.toLocaleTimeString());"},toLocaleDateString:{defination:"根据本地时间格式，把 Date 对象的日期部分转换为字符串",syntax:"dateObject.toLocaleDateString()",parameters:"{Null}",return:"String",demo:"var d = new Date();</br>document.write(d.toLocaleDateString());"},UTC:{defination:"根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数",syntax:"Date.UTC(year,month,day,hours,minutes,seconds,ms)",parameters:"{Number} year 表示年份的四位数字<br/>          {Number} month 表示月份的整数<br/>          {Number} day 表示日期的整数<br/>          {Number} hours 可选 表示小时的整数<br/>          {Number} minutes 可选 表示分钟的整数<br/>          {Number} seconds 可选 表示秒的整数<br/>          {Number} ms 可选 表示毫秒的整数",return:"Number",demo:"var d = Date.UTC(2005,7,8)"}},数组:{concat:{defination:"连接两个或更多的数组，并返回结果",syntax:"arrayObject.concat(arrayX,arrayX,...,arrayX)",parameters:"{Array} arrayX 该参数可以是具体的值，也可以是数组对象。可以是任意多个",return:"Array",demo:"var a = [1,2,3];<br/>document.write(a.concat(4,5));"},join:{defination:"把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔",syntax:"arrayObject.join(separator)",parameters:"{String} separator 指定要使用的分隔符",return:"String",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.join('.'));"},pop:{defination:"删除并返回数组的最后一个元素",syntax:"arrayObject.pop()",parameters:"{Null}",return:"String",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.pop());"},push:{defination:"向数组的末尾添加一个或更多元素，并返回新的长度",syntax:"arrayObject.push(newelement1,newelement2,...,newelementX)",parameters:"{String} newelement1 要添加到数组的第一个元素<br/>          {String} newelement2 可选 要添加到数组的第二个元素<br/>          {String} newelementX 可选 可添加多个元素",return:"Number",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.push('James'));"},reverse:{defination:"颠倒数组中元素的顺序",syntax:"arrayObject.reverse()",parameters:"{Null}",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.reverse());"},shift:{defination:"删除并返回数组的第一个元素",syntax:"arrayObject.shift()",parameters:"{Null}",return:"String",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.shift());"},slice:{defination:"从某个已有的数组返回选定的元素",syntax:"arrayObject.slice(start,end)",parameters:"{Number} start 开始位置<br/>          {Number} end 可选 结束位置",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.slice(1));"},sort:{defination:"对数组的元素进行排序",syntax:"arrayObject.sort(sortby)",parameters:"{Function} sortby 可选 规定排序顺序。必须是函数。",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.sort());"},splice:{defination:"删除元素，并向数组添加新元素",syntax:"arrayObject.splice(index,howmany,item1,...,itemX)",parameters:"{Number} index 规定添加/删除项目的位置，使用负数可从数组结尾处规定位置<br/>          {Number} howmany 要删除的项目数量<br/>          {String} item1, ..., itemX 向数组添加的新项目",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>arr.splice(2,1,'William');"},toString:{defination:"把数组转换为字符串，并返回结果",syntax:"arrayObject.toString()",parameters:"{Null}",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.toString());"},toLocaleString:{defination:"把数组转换为本地数组，并返回结果",syntax:"arrayObject.toLocaleString()",parameters:"{Null}",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.toLocaleString());"},unshift:{defination:"向数组的开头添加一个或更多元素，并返回新的长度",syntax:"arrayObject.unshift(newelement1,newelement2,...,newelementX)",parameters:"{String} newelement1 向数组添加的第一个元素<br/>          {String} newelement2 向数组添加的第二个元素<br/>          {String} newelementX 可添加若干个元素",return:"Array",demo:"var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.unshift('William');"}},数字:{toString:{defination:"把数字转换为字符串，使用指定的基数",syntax:"NumberObject.toString(radix)",parameters:"{Number} radix 可选 规定表示数字的基数，2 ~ 36 之间的整数",return:"String",demo:"var number = new Number(1337);<br/>document.write (number.toString());"},toLocaleString:{defination:"把数字转换为字符串，使用本地数字格式顺序",syntax:"NumberObject.toLocaleString()",parameters:"{Null}",return:"String",demo:""},toFixed:{defination:"把数字转换为字符串，结果的小数点后有指定位数的数字",syntax:"NumberObject.toFixed(num)",parameters:"{Number} num 规定小数的位数",return:"String",demo:"var num = new Number(13.37);<br/>document.write (num.toFixed(1));"},toExponential:{defination:"把对象的值转换为指数计数法",syntax:"NumberObject.toExponential(num)",parameters:"{Number} num 规定指数计数法中的小数位数",return:"String",demo:"var num = new Number(10000);<br/>document.write (num.toExponential(1));"},toPrecision:{defination:"把数字格式化为指定的长度",syntax:"NumberObject.toPrecision(num)",parameters:"{Number} num 规定必须被转换为指数计数法的最小位数",return:"String",demo:"var num = new Number(10000);<br/>document.write(num.toPrecision(4));"}},正则表达式:{compile:{defination:"编译正则表达式",syntax:"RegExpObject.compile(regexp,modifier)",parameters:"{RegExp} regexp 正则表达式<br/>          {String} modifier 规定匹配的类型",return:"Object",demo:"var str='Every man in the world! Every woman on earth!';<br/>patt=/(wo)?man/g;;<br/>patt.compile(patt);<br/>str2=str.replace(patt,'person');"},exec:{defination:"检索字符串中指定的值",syntax:"RegExpObject.exec(string)",parameters:"{String} 要检索的字符串",return:"Array",demo:'var str = "Visit W3School";<br/>var patt = new RegExp("W3School","g");<br/>var result;<br/>while ((result = patt.exec(str)) != null) {<br/>&nbsp&nbsp&nbsp&nbspdocument.write(result);<br/>&nbsp&nbsp&nbsp&nbspdocument.write(patt.lastIndex);<br/>}'},test:{defination:"检索字符串中指定的值",syntax:"RegExpObject.test(string)",parameters:"{String} string 要检测的字符串",return:"Boolean",demo:"var str = 'Visit W3School';<br/>var patt1 = new RegExp('W3School');<br/>var result = patt1.test(str);"}},全局:{escape:{defination:"对字符串进行编码",syntax:"escape(string)",parameters:"{String} string 要被转义或编码的字符串",return:"String",demo:"document.write(escape('?!=()#%&'));"},eval:{defination:"计算 JavaScript 字符串，并把它作为脚本代码来执行",syntax:"eval(string)",parameters:"{String} string 要计算的字符串",return:"Undefined",demo:"eval('x=10;y=20;document.write(x*y)');"},isNaN:{defination:"检查某个值是否是数字",syntax:"isNaN(x)",parameters:"{Number} x 要检测的值",return:"Boolean",demo:"document.write(isNaN(123));"},parseFloat:{defination:"解析一个字符串并返回一个浮点数",syntax:"parseFloat(string)",parameters:"{String} string 要被解析的字符串",return:"Number",demo:"document.write(parseFloat('10.00'));"},parseInt:{defination:"解析一个字符串并返回一个整数",syntax:"parseInt(string, radix)",parameters:"{String} string 要被解析的字符串<br/>          {Number} radix 表示要解析的数字的基数",return:"Number",demo:"parseInt('19',10);"},unescape:{defination:"对由 escape() 编码的字符串进行解码",syntax:"unescape(string)",parameters:"{String} string 要解码或反转义的字符串",return:"String",demo:"var test1='Visit W3School!';<br/>test1=escape(test1);"}},JSON:{parse:{defination:"将一个JSON字符串转换为JavaScript对象",syntax:"parse(text)",parameters:"{String} text 一个有效的JSON字符串",return:"Undefined",demo:"var str = '{'name':'leo', 'age':18}';<br/>document.write(JSON.parse(str));"},stringify:{defination:"将JavaScript值转换为JSON字符串参数",syntax:"stringify(value)",parameters:"{Object} value 要转换的JavaScript值",return:"Undefined",demo:"var str = {'name':'leo', 'age':18};<br/>document.write(JSON.stringify(str));"}},Document:{close:{defination:"关闭用 document.open() 方法打开的输出流，并显示选定的数据",syntax:"document.close()",parameters:"{Null}",return:"Object",demo:'var newDoc = document.open("text/html","replace");<br/>var txt = "<html><body>Learning about the DOM is FUN!</body></html>";<br/>newDoc.write(txt);<br/>newDoc.close();'},getElementById:{defination:"关闭用 document.open() 方法打开的输出流，并显示选定的数据",syntax:"document.getElementById(id)",parameters:"{String} id 元素id属性",return:"Object",demo:'var x = document.getElementById("myHeader");'},getElementsByName:{defination:"返回带有指定名称的对象集合",syntax:"document.getElementsByName(name)",parameters:"{String} name 元素name属性",return:"Object",demo:'var x = document.getElementsByName("myInput");'},getElementsByTagName:{defination:"返回拥有指定标签名的所有子元素的集合",syntax:"element.getElementsByTagName(tagname)",parameters:"{String} tagname 需要获得的子元素的标签名",return:"Object",demo:"var list=document.getElementsByTagName('UL')[0];<br/>    list.getElementsByTagName('LI')[0].innerHTML='Milk';"},open:{defination:"打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出",syntax:"document.open(mimetype,replace)",parameters:"{Object} mimetype 可选 规定正在写的文档的类型<br/>          {Object} replace 可选 新文档从父文档继承历史条目",return:"Object",demo:'var newDoc=document.open("text/html","replace");'},write:{defination:"向文档写 HTML 表达式 或 JavaScript 代码",syntax:"document.write(exp1,exp2,exp3,...)",parameters:"{String} exp1,exp2,exp3 想要写入的HTML或JavaScript",return:"Undefined",demo:'document.write("Hello World!");'},writeln:{defination:"等同于 write() 方法，不同的是在每个表达式之后写一个换行符",syntax:"document.writeln(exp1,exp2,exp3,...)",parameters:"{String} exp1,exp2,exp3 想要写入的HTML或JavaScript",return:"Undefined",demo:'document.writeln("Hello World!");'}},Element:{appendChild:{defination:"向元素添加新的子节点，作为最后一个子节点",syntax:"node.appendChild(node)",parameters:"{Object} node 希望添加的节点对象",return:"Object",demo:"document.getElementById('myList').appendChild(newListItem);"},cloneNode:{defination:"克隆元素",syntax:"node.cloneNode(deep)",parameters:"{Boolean} deep",return:"Object",demo:"var node=document.getElementById('myList2').lastChild.cloneNode(true);<br/>    document.getElementById('myList1').appendChild(node);"},compareDocumentPosition:{defination:"比较两个元素的文档位置",syntax:"node.compareDocumentPosition(node)",parameters:"{Object} node 规定于当前节点作比较的节点",return:"Number",demo:"var p1=document.getElementById('p1');<br/>    var p2=document.getElementById('p2');<brt/>    p1.compareDocumentPosition(p2);"},getAttribute:{defination:"返回元素节点的指定属性值",syntax:"element.getAttribute(attributename)",parameters:"{String} attributename 需要获得属性值的属性名称",return:"String",demo:"document.getElementsByTagName('a')[0].getAttribute('target');"},getAttributeNode:{defination:"返回指定的属性节点",syntax:"element.getAttributeNode(attributename)",parameters:"{String} attributename 需要返回的属性的名称",return:"Object",demo:"document.getElementsByTagName('a')[0].getAttributeNode('target');"},hasAttribute:{defination:"如果元素拥有指定属性，则返回true，否则返回 false",syntax:"element.hasAttribute(attributename)",parameters:"{String} attributename 需要检查是否存在的属性名称",return:"Boolean",demo:"document.getElementsByTagName('BUTTON')[0].hasAttribute('onclick');"},hasAttributes:{defination:"如果元素拥有属性，则返回 true，否则返回 false",syntax:"node.hasAttributes()",parameters:"{Null}",return:"Boolean",demo:"document.body.hasAttributes()"},hasChildNodes:{defination:"如果元素拥有子节点，则返回 true，否则 false",syntax:"node.hasChildNodes()",parameters:"{Null}",return:"Boolean",demo:"document.getElementById('myList').hasChildNodes();"},insertBefore:{defination:"在指定的已有的子节点之前插入新节点",syntax:"node.insertBefore(newnode,existingnode)",parameters:"{Object} newnode 需要插入的节点对象<br/>          {Object} existingnode 在其之前插入新节点的子节点",return:"Object",demo:"document.getElementById('myList').insertBefore(newItem,existingItem);"},isDefaultNamespace:{defination:"如果指定的 namespaceURI 是默认的，则返回 true，否则返回 false",syntax:"node.isDefaultNamespace(namespaceURI)",parameters:"{String} namespace 需要检查的命名空间的 URI",return:"Boolean",demo:"document.documentElement.isDefaultNamespace('http://www.w3.org/1999/xhtml');"},isEqualNode:{defination:"检查两个元素是否相等",syntax:"node.isEqualNode(node)",parameters:"{Object} node 希望与指定节点比较的节点",return:"Boolean",demo:"var item1=document.getElementById('myList1').firstChild;<br/>    var item2=document.getElementById('myList2').firstChild;<br/>    item1.isEqualNode(item2);"},isSameNode:{defination:"检查两个元素是否是相同的节点",syntax:"node.isSameNode(node)",parameters:"{Object} node 希望与指定节点比较的节点",return:"Boolean",demo:"var item1=document.getElementById('myList1');<br/>    var item2=document.getElementsByTagName('UL')[0];<br/>    item1.isSameNode(item2);"},isSupported:{defination:"如果元素支持指定特性，则返回 true",syntax:"node.isSupported(feature,version)",parameters:"{String} feature 定义需要检查是否得到支持的特性<br/>          {String} version 可选 定义需要检查是否得到支持的特性版本",return:"Boolean",demo:"var item=document.getElementsByTagName('BUTTON')[0];<br/>    item.isSupported('Core','2.0');"},normalize:{defination:"合并元素中相邻的文本节点，并移除空的文本节点",syntax:"node.normalize()",parameters:"{Null}",return:"Undefined",demo:"xmlDoc.getElementById('demo').normalize();"},removeAttribute:{defination:"从元素中移除指定属性",syntax:"element.removeAttribute(attributename)",parameters:"{String} attributename 希望移除的属性的名称",return:"Undefined",demo:"document.getElementsByTagName('H1')[0].removeAttribute('style');"},removeAttributeNode:{defination:"移除指定的属性节点，并返回被移除的节点",syntax:"element.removeAttributeNode(attributenode)",parameters:"{Object} attributenode 希望移除的属性节点",return:"Object",demo:"var n=document.getElementsByTagName('INPUT')[0];<br/>    var a=n.getAttributeNode('type');<br/>    n.removeAttributeNode(a);"},removeChild:{defination:"从元素中移除子节点",syntax:"node.removeChild(node)",parameters:"{Object} node 希望删除的节点对象",return:"Object",demo:"var list=document.getElementById('myList');<br/>    list.removeChild(list.childNodes[0]);"},replaceChild:{defination:"替换元素中的子节点",syntax:"node.replaceChild(newnode,oldnode)",parameters:"{Object} newnode 希望插入的节点对象<br/>          {Object} oldnode 希望删除的节点对象",return:"Object",demo:"document.getElementById('myList').replaceChild(newnode,oldnode);"},setAttribute:{defination:"把指定属性设置或更改为指定值",syntax:"element.setAttribute(attributename,attributevalue)",parameters:"{Object} attributename 希望添加的属性的名称<br/>          {Object} attributevalue 希望添加的属性值",return:"Undefined",demo:"document.getElementsByTagName('INPUT')[0].setAttribute('type','button');"},setAttributeNode:{defination:"设置或更改指定属性节点",syntax:"element.setAttributeNode(attributenode)",parameters:"{Object} attributenode 希望添加的属性节点",return:"Undefined",demo:"var atr=document.createAttribute('class');<br/>    atr.nodeValue='democlass';<br/>    document.getElementsByTagName('H1')[0].setAttributeNode(atr);"},item:{defination:"返回 NodeList 中位于指定下标的节点",syntax:"nodelist.item(index)",parameters:"{Number} index 被返回节点在节点列表中的索引",return:"Object",demo:"document.body.childNodes.item(0);"}},Attribute:{getNamedItem:{defination:"从 NamedNodeMap 返回指定的属性节点",syntax:"namednodemap.getNamedItem(name)",parameters:"{String} nodename 希望返回的 namedNodeMap 中节点的名称",return:"Object",demo:"var btn=document.getElementsByTagName('BUTTON')[0];<br/>    btn.attributes.getNamedItem('onclick').textContent;"},item:{defination:"返回 NamedNodeMap 中位于指定下标的节点",syntax:"namednodemap.item(index)",parameters:"{Number} index 希望返回的 namedNodeMap 中节点的索引",return:"Object",demo:"document.getElementsByTagName('BUTTON')[0].attributes.item(0).nodeName;"},removeNamedItem:{defination:"移除指定的属性节点",syntax:"namednodemap.removeNamedItem(nodename)",parameters:"{String} nodename 希望删除的 namedNodeMap 中节点的名称",return:"Object",demo:"var btn=document.getElementsByTagName('INPUT')[0];<br/>    btn.attributes.removeNamedItem('type');"},setNamedItem:{defination:"设置指定的属性节点（通过名称）",syntax:"namednodemap.setNamedItem(node)",parameters:"{Object} node 需要在 namedNodeMap 集合中添加/替换的节点",return:"Object",demo:"var btn=document.getElementsByTagName('h1')[0];<br/>    var typ=document.createAttribute('class');<br/>    typ.nodeValue='democlass';<br/>    btn.attributes.setNamedItem(typ);"}},localStorage:{setItem:{defination:"存储数据,键/值对始终存储为字符串",syntax:'localStorage.setItem(("key", "value");',parameters:"{String} key 键 <br/>          {String} value 值",return:"Undefined",demo:"localStorage.setItem('myCat', 'Tom');"},getItem:{defination:"读取数据，key存储为字符串",syntax:"localStorage.getItem(key);",parameters:"{String} key 键",return:"String",demo:"localStorage.getItem('myCat');"},removeItem:{defination:"删除单个数据，key存储为字符串",syntax:"localStorage.removeItem(key);",parameters:"{String} key 键",return:"Undefined",demo:"localStorage.removeItem('myCat');"},clear:{defination:"删除所有数据",syntax:"localStorage.clear();",parameters:"{Null}",return:"Undefined",demo:"localStorage.clear();"},key:{defination:"得到某个索引的key",syntax:"localStorage.key(index);",parameters:"{String} index 索引值",return:"String",demo:'localStorage.key("myCat");'},综合示例:{demo:"//获取对象\nvar localstroage = window.localStorage;\n//存储数据(存储名字为name值为value的变量)\nlocalstroage.setItem('name','value');\n//读取数据(读取localstroage对象名里为name的变量值)\nlocalstroage.getItem('name');\n//读取localstroage对象中的全部数据\nlocalstroage.valueOf();\n//删除某个指定数据\nlocalstroage.removeItem('name');\n//删除localstroage对象中所有的数据\nLocalstroage.clear();"}},sessionStorage:{setItem:{defination:"存储数据,键/值对始终存储为字符串",syntax:'sessionStorage.setItem(("key", "value");',parameters:"{String} key 键 <br/>          {String} value 值",return:"Undefined",demo:"sessionStorage.setItem('myCat', 'Tom');"},getItem:{defination:"读取数据，key存储为字符串",syntax:"sessionStorage.getItem(key);",parameters:"{String} key 键",return:"String",demo:"sessionStorage.getItem('myCat');"},removeItem:{defination:"删除单个数据，key存储为字符串",syntax:"sessionStorage.removeItem(key);",parameters:"{String} key 键",return:"Undefined",demo:"sessionStorage.removeItem('myCat');"},clear:{defination:"删除所有数据",syntax:"sessionStorage.clear();",parameters:"{Null}",return:"Undefined",demo:"localStorage.clear();"},key:{defination:"得到某个索引的key",syntax:"sessionStorage.key(index);",parameters:"{Null}",return:"String",demo:"localStorage.key('myCat');"},综合示例:{demo:"//获取对象\n                var sessionStorage = window.sessionStorage;\n                //存储数据(存储名字为name值为value的变量)\n                sessionStorage.setItem('name','value');\n                //读取数据(读取sessionStorage对象名里为name的变量值)\n                sessionStorage.getItem('name');\n                //读取sessionStorage对象中的全部数据\n                sessionStorage.valueOf();\n                //删除某个指定数据\n                sessionStorage.removeItem('name');\n                //删除sessionStorage对象中所有的数据\n                sessionStorage.clear();"}},"Web Sql":{openDatabase:{defination:"使用现有的数据库或者新建的数据库创建一个数据库对象",syntax:"openDatabase(name, version, discriptionText, estimatedSize);",parameters:"{String} Name 数据库名字<br/>          {String} Version 版本号<br/>          {String} discriptionText 描述文本<br/>          {Number} estimatedSize 数据库的大小",return:"Object",demo:"var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);"},transaction:{defination:"通过事务对象，执行提交或回滚操作",syntax:"transaction();",parameters:"{String} Name 数据库名字<br/>          {String} Version 版本号<br/>          {String} discriptionText 描述文本<br/>          {Number} estimatedSize 数据库的大小<br/>          {Function} creationCallback 回调函数",return:"Undefined",demo:"var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);<br/>db.transaction(function (tx) {<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)');<br/>});"},executeSql:{defination:"执行sql语句",syntax:"executeSql(sqlStatement, parameters, callBack, errorCallback);",parameters:"{String} sqlStatement sql语句<br/>          {String} parameters 可选 实参的数组<br/>          {Function} callback 可选 回调<br/>          {Function} errorCallback 出错时的回调",return:"Undefined",demo:'var db = openDatabase("mydb", "1.0", "Test DB", 2 * 1024 * 1024);<br/>db.transaction(function (tx) {<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql("CREATE TABLE IF NOT EXISTS LOGS (id unique, log)");<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql("INSERT INTO LOGS (id, log) VALUES (1, "菜鸟教程")");<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql("INSERT INTO LOGS (id, log) VALUES (2, "www.runoob.com")");<br/>});'}},"Web Worker":{postMessage:{defination:"发送数据",syntax:"postMessage();",parameters:"{Null}",return:"",demo:""},onMessage:{defination:"接收数据",syntax:"onMessage();",parameters:"{Null}",return:"",demo:""}}}};var b=n(3204),g=n(6640),y=n(6331);const f=function(e){var t=e.item,n=e.getCList,r=l().useState(!1),a=(0,o.Z)(r,2),i=a[0],d=a[1],u=useI18n().t;return l().createElement("span",{style:{float:"right"}},l().createElement(c.Popconfirm,{title:u("修改后，相关引用该脚本方法处均会被修改，请谨慎操作！"),onConfirm:function(){return d(!0)},style:{cursor:"pointer"},okText:u("确定"),cancelText:u("取消")},l().createElement(g.EditOutlined,null)),l().createElement(c.Popconfirm,{title:u("删除后，相关引用该脚本方法处均会被删除，请谨慎操作！"),onConfirm:function(){(0,s.api)({name:"core/scriptSetting"}).fetch("/".concat(null==t?void 0:t.id),{method:"DELETE"}).then((function(e){200==e.status&&(c.message.success(u("删除成功")),n())}))},style:{cursor:"pointer"},okText:u("确定"),cancelText:u("取消")},l().createElement(g.DeleteOutlined,{style:{marginLeft:3}})),l().createElement(c.Modal,{title:u("编辑函数"),visible:i,width:"80%",onCancel:function(){return d(!1)},footer:null},l().createElement(b.SchemaForm,{formKey:"add-function",schema:y.schema,initialValues:t,onSubmit:function(e){(0,s.api)({name:"core/scriptSetting"}).fetch("/".concat(null==e?void 0:e.id),{method:"PUT",body:JSON.stringify(e)}).then((function(){c.message.success(u("保存成功")),d(!1),n()}))}})))};var h=n(2611),x=n.n(h),v=n(3379),_=n.n(v),N=n(6245);_()(N.Z,{insert:"head",singleton:!1}),N.Z.locals;var w=c.Menu.SubMenu,S=(c.Layout.Header,c.Layout.Content),O=(c.Layout.Footer,c.Layout.Sider),T=c.Typography.Title,j=c.Typography.Paragraph,D=function(e){var t,n,r,a=e.dd,o=e.getDocParams,i=useI18n().t,s=[{title:i("名称"),dataIndex:"name",key:"name",width:300},{title:i("类型"),dataIndex:"type",key:"type"},{title:i("描述"),dataIndex:"description",key:"description",render:function(e){return l().createElement("span",{className:"doc-description",dangerouslySetInnerHTML:{__html:i(e)}})}}];return console.log(999,a),l().createElement(S,{style:{padding:"0 24px",height:500,overflowY:"scroll"}},l().createElement(T,{level:5},i("定义")),l().createElement(j,null,l().createElement("span",{dangerouslySetInnerHTML:{__html:i(a.description)}})),a.syntax&&l().createElement(l().Fragment,null,l().createElement(T,{level:5},i("语法")),l().createElement(j,null,l().createElement("pre",{className:"prettyprint source"},l().createElement("code",{dangerouslySetInnerHTML:{__html:a.syntax}})))),l().createElement(T,{level:5},i("参数")),l().createElement(j,null,x().isString(a.parameters)?l().createElement("span",{dangerouslySetInnerHTML:{__html:a.parameters}}):(null===(t=a.parameters)||void 0===t?void 0:t.length)>0&&l().createElement(c.Table,{size:"small",pagination:!1,dataSource:o(),columns:s})),l().createElement(T,{level:5},i("返回值")),l().createElement(j,null,a.returns&&l().createElement(l().Fragment,null,(null===(n=a.returns)||void 0===n?void 0:n.type)&&l().createElement(c.Tag,{color:"magenta",style:{marginBottom:5}},a.returns.type),l().createElement("span",{dangerouslySetInnerHTML:{__html:i(null===(r=a.returns)||void 0===r?void 0:r.description)}}))),l().createElement(C,{chooseDoc:a}))},E=function(e){var t=e.dd,n=useI18n().t;return l().createElement(S,{style:{padding:"0 24px",height:500,overflowY:"scroll"}},l().createElement(T,{level:5},n("名称")),l().createElement(j,null,l().createElement("span",{dangerouslySetInnerHTML:{__html:n(t.name)}})),l().createElement(T,{level:5},n("内容")),l().createElement(j,null,l().createElement("span",{dangerouslySetInnerHTML:{__html:t.content}})),l().createElement(T,{level:5},n("说明")),l().createElement(j,null,l().createElement("span",{dangerouslySetInnerHTML:{__html:t.description}})))},C=function(e){var t=e.chooseDoc,n=l().useState(!1),r=(0,o.Z)(n,2),a=r[0],i=r[1],s=useI18n().t;return t.highExample?l().createElement(l().Fragment,null,l().createElement(T,{level:5},s(a?"复杂示例":"简单示例"),l().createElement("span",{className:"doc-title-button",onClick:function(){return i(!a)}},"【".concat(s(a?"简单示例":"复杂示例"),"】"))),l().createElement(j,null,a?l().createElement("pre",{className:"prettyprint source"},l().createElement("code",{dangerouslySetInnerHTML:{__html:t.highExample}})):l().createElement("span",{dangerouslySetInnerHTML:{__html:t.example}}))):l().createElement(l().Fragment,null,l().createElement(T,{level:5},s("示例")),l().createElement(j,null,l().createElement("span",{dangerouslySetInnerHTML:{__html:t.example}})))},I=function(e){var t,n=e.apiDoc,r=e.choose,a=e.setChoose,o=e.customList,i=e.getCList,d=useI18n().t,u={};null==n||null===(t=n.functions)||void 0===t||t.forEach((function(e){var t,n,r,a=null===(t=e.description)||void 0===t?void 0:t.split("\n<h3>".concat(d("使用示例"),"</h3>\n")),o=null==a||null===(n=a[0])||void 0===n||null===(r=n.match(/\[[\s\S]+\]/g))||void 0===r?void 0:r[0];u[o]?u[o].push({name:e.name}):u[o]=[{name:e.name}]}));var m=[],b=[];for(var g in u){var y,h;"[画面]"===g?b=null===(y=u[g])||void 0===y?void 0:y.map((function(e){return l().createElement(c.Menu.Item,{key:e.name},e.name)})):m.push(l().createElement(w,{key:g,title:d(null==g?void 0:g.substring(1,g.length-1))},null===(h=u[g])||void 0===h?void 0:h.map((function(e){return l().createElement(c.Menu.Item,{key:e.name},e.name)}))))}var x=[],v=p.scriptFun;for(var _ in v){var N=[],S=function(e){var t;v[_][e].length>1?N.push(l().createElement(w,{key:e,title:e},null===(t=v[_][e])||void 0===t?void 0:t.map((function(t){return l().createElement(c.Menu.Item,{key:e+"-"+t},t)})))):N.push(l().createElement(c.Menu.Item,{key:_+"-"+e},e))};for(var O in v[_])S(O);x.push(l().createElement(w,{key:_,title:d(_)},N))}var T={};try{T=s.app.get("functionList2")}catch(e){console.error(e)}var j=Object.keys(T).map((function(e){return l().createElement(c.Menu.Item,{key:e},T[e].name)}));return l().createElement(c.Menu,{onClick:function(e){return a(e.key)},mode:"inline",defaultSelectedKeys:[r],defaultOpenKeys:["inside-function","[".concat(d("模型"),"]")],style:{height:"100%"}},l().createElement(w,{key:"inside-function",title:d("系统函数")},m),l().createElement(w,{key:"dashboard-function",title:d("画面函数")},b),l().createElement(w,{key:"custom-function",title:d("自定义函数")},null==o?void 0:o.map((function(e){return l().createElement(c.Menu.Item,{key:e.id},e.name,l().createElement(f,{item:e,getCList:i}))}))),l().createElement(w,{key:"two-function",title:d("二次开发函数")},j),x)},A=function(e,t,n){var r={name:"",description:"",parameters:[],example:""};if(m)for(var a in m){var o;null===(o=m[a])||void 0===o||o.forEach((function(t){var n,a,o,i,l=null===(n=t.description)||void 0===n?void 0:n.split("\n<h3>".concat(_r("使用示例"),"</h3>\n")),s=/\[[\s\S]+\]/g,d=null==l||null===(a=l[0])||void 0===a||null===(o=a.match(s))||void 0===o?void 0:o[0];t.name===e&&(r={name:_t1(t.name),type:d?d.substring(1,d.length-1):null,description:_t1(null==l||null===(i=l[0])||void 0===i?void 0:i.replace(s,"")),parameters:t.parameters,returns:t.returns,example:null==l?void 0:l[1],highExample:t.examples[0]})}))}if(null!=p&&p.scriptFunDetail){var i,l,s=e.split("-"),d=null===(i=p.scriptFunDetail)||void 0===i||null===(l=i[s[0]])||void 0===l?void 0:l[s[1]];d&&"object"===(0,u.Z)(d)&&(r={syntax:d.syntax,description:d.defination,parameters:d.parameters,returns:{type:d.return},example:'<pre class="prettyprint source"><code>'.concat(d.demo,"</code></pre>")})}if(t){var c=t.find((function(t){return t.id===e}));c&&(r=c)}return null!=n&&n[e]&&(r=null==n?void 0:n[e]),r};const k=function(e){var t,n,r=e.handleOk,a=l().useState(!1),i=(0,o.Z)(a,2),d=i[0],u=i[1],p=l().useState(null==m||null===(t=m.functions)||void 0===t||null===(n=t[0])||void 0===n?void 0:n.name),b=(0,o.Z)(p,2),g=b[0],y=b[1],f=l().useState([]),h=(0,o.Z)(f,2),v=h[0],_=h[1],N=useI18n().t,w={};try{w=s.app.get("functionList2")}catch(e){console.error(e)}l().useEffect((function(){S()}),[d]);var S=function(){(0,s.api)({name:"core/scriptSetting"}).query({fields:["content","description"]},{}).then((function(e){var t=e.items;_(t)}))},T=function(){var e=x().cloneDeep(A(g,v,w).parameters),t=[];return e&&e.forEach((function(n){n.key=n.name;var r=n.name.lastIndexOf("."),a=n.name.substring(0,r),o=e.filter((function(e){return e.name===a}))[0];o?o.children?o.children.push(n):o.children=[n]:t.push(n)})),t},j=A(g,v,w);return l().createElement(l().Fragment,null,l().createElement(c.Button.Group,{size:"small"},l().createElement(c.Button,{onClick:function(){u(!0)}},N("函数"))),l().createElement(c.Modal,{title:N("函数文档"),visible:d,okText:N("插入函数"),onOk:function(){r(function(e,t){if(null!=e&&e.syntax)return e.syntax;if(null!=e&&e.content){var n,r,a,o=null===(n=e.content.split("function "))||void 0===n||null===(r=n[1])||void 0===r||null===(a=r.split(" ("))||void 0===a?void 0:a[0];return o?o+"()":""}return t}(j,g)),u(!1)},onCancel:function(){u(!1)},width:"70%",bodyStyle:{padding:10}},l().createElement(c.Layout,{style:{backgroundColor:"#fff"}},l().createElement(O,{theme:"light",width:250,style:{height:500,overflowY:"scroll"}},l().createElement(I,{apiDoc:m,choose:g,setChoose:y,customList:v,getCList:S})),j.content?l().createElement(E,{dd:j,getDocParams:T}):l().createElement(D,{dd:j,getDocParams:T}))))};function B(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function M(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?B(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):B(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var U=function(e){var t=e.split("//////")[1];return t.replace(/function\ \(\)[^\u4E00-\u9FA5]+\}\(\)/g,(function(e){var t=e.match(/function \_[a-z0-9]+\([a-zA-Z\,\ ]*\)/g).map((function(e){var t,n=null===(t=e.match(/\([a-zA-Z\,\ ]+\)/g))||void 0===t?void 0:t[0];return null==n?void 0:n.substring(1,n.length-1)}));return"function aaa(".concat(t.join(","),") {}")}))},L=function(e,t){var n=s.app.get("dashboardWidgets"),r={};for(var a in t){var o,i,l=M(M({},t[a]),{},{props:[],funs:[]});for(var d in null==e?void 0:e[a]){var c,u;l.funs.push({key:"Widgets."+[a]+"."+[d]+"()",title:null==e||null===(c=e[a])||void 0===c||null===(u=c[d])||void 0===u?void 0:u.description})}if(null!==(o=t[a])&&void 0!==o&&null!==(i=o.structure)&&void 0!==i&&i.type){var m,p=null===(m=n[t[a].structure.type])||void 0===m?void 0:m.paramSchema,b=p?"function"==typeof p?p().properties:p.properties:{};for(var g in b)l.props.push({key:"Widgets."+[a]+"."+[g],title:"<"+b[g].type+">"+_t1(b[g].title)})}r[a]=l}return r},P=n(2716);function R(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function H(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?R(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):R(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var q=c.Menu.SubMenu,V=function e(t,n){for(var r,a=0;a<n.length;a++){var o=n[a];o.children&&(o.children.some((function(e){return e.key===t}))?r=o.key:e(t,o.children)&&(r=e(t,o.children)))}return r},F=function(e){var t,n,r=e.data,a=e.insertWidget,o=useI18n().t;return l().createElement(c.Menu,{className:"script-cellTree",mode:"inline",defaultOpenKeys:["funs"],onClick:function(e){var t=e.key;return a(t)}},l().createElement(q,{key:"props",title:o("属性")},null===(t=r.props)||void 0===t?void 0:t.map((function(e){return l().createElement(c.Menu.Item,{key:e.key},l().createElement(c.Tooltip,{title:"[".concat(o("属性"),"]").concat(e.title)},l().createElement("span",null,"[",o("属性"),"]",e.title)))}))),l().createElement(q,{key:"funs",title:o("方法")},null===(n=r.funs)||void 0===n?void 0:n.map((function(e){return l().createElement(c.Menu.Item,{key:e.key},l().createElement(c.Tooltip,{title:"[".concat(o("方法"),"]").concat(e.title)},l().createElement("span",null,"[",o("方法"),"]",e.title)))}))))};const W=function(e){var t=e.dashboardCells,n=e.insertWidget,r=s.app.get("dashboardWidgets"),a=(0,i.useState)([]),d=(0,o.Z)(a,2),u=d[0],m=d[1],p=(0,i.useState)(""),b=(0,o.Z)(p,2),g=b[0],y=b[1],f=(0,i.useState)(!0),h=(0,o.Z)(f,2),x=h[0],v=h[1],_=useI18n().t,N=function(e){var n,a,o;return"root"===e?_("画布"):null!==(n=t[e])&&void 0!==n&&null!==(a=n.params)&&void 0!==a&&null!==(o=a.base)&&void 0!==o&&o.__name__?t[e].params.base.__name__:r[t[e].structure.type]?r[t[e].structure.type].title:e},w=function e(t,n){var r,a,o,i,s=N(t.key),d=s.indexOf(g),u=s.substring(0,d),m=s.slice(d+g.length),p=d>-1?l().createElement("span",null,u,l().createElement("span",{className:"site-tree-search-value"},g),m):l().createElement("span",null,s);return l().createElement(c.Tree.TreeNode,{title:function(){return l().createElement(c.Popover,{placement:"bottom",content:function(){return l().createElement(F,{data:t,insertWidget:n})}},l().createElement("span",{onDoubleClick:function(){return n(t.key)}},p))},key:null!==(r=null==t||null===(a=t.props)||void 0===a||null===(o=a[0])||void 0===o?void 0:o.key)&&void 0!==r?r:Math.random()},null===(i=t.children)||void 0===i?void 0:i.map((function(t){return e(t,n)})))},S=function(e){var t={},n=[];for(var a in e)t[a]=H(H({},e[a]),{},{children:e[a].structure.children,parent:e[a].structure.parent});var o=[];Object.keys(t).forEach((function(e){var n=t[e],a="root"==n.parent,i=r[null==n?void 0:n.type],l=null==i?void 0:i.container,s=H(H({},n),{},{key:e,parent:a?null:n.parent,isLeaf:!l});"root"!=e&&o.push(s)}));var i=(0,P.Pm)({flatData:o,getKey:function(e){return e.key},getParentKey:function(e){return e.parent},rootKey:null});return n.push({key:"root",children:i,props:t.root.props,funs:t.root.funs}),n}(t);return l().createElement("div",null,l().createElement(c.Input,{style:{margin:"0 10px 8px 10px",width:"90%"},placeholder:_("请输入组件名"),onChange:function(e){var n=e.target.value,r=Object.keys(t).map((function(e){return H(H({},t[e]),{},{key:e,title:N(e)})})).map((function(e){return e.title.indexOf(n)>-1?V(e.key,S):null})).filter((function(e,t,n){return e&&n.indexOf(e)===t}));m(r.map((function(e){return"Widgets."+e+".data"}))),y(n),v(!0)}}),l().createElement(c.Tree,{onExpand:function(e){m(e),v(!1)},expandedKeys:u,autoExpandParent:x},null==S?void 0:S.map((function(e){return w(e,n)}))))};function G(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function J(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?G(Object(n),!0).forEach((function(t){(0,a.Z)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):G(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}n(204);const z=function(e){var t,n=l().useState("let a = '123';\nlet b = () => {\n  return 'OK'\n}\nMath.pow(2, 3);\n"),a=(0,o.Z)(n,2),i=a[0],u=(a[1],l().useRef(null)),m=l().useRef(null),p=function(e){if(e&&0!==e.length){var t=u.current.getPosition(),n=t.column+e.length;e+=u.current.getModel().getValueInRange({startLineNumber:t.lineNumber,startColumn:t.column,endLineNumber:t.lineNumber,endColumn:t.column+e.length});var r={identifier:{major:1,minor:1},range:new m.current.Range(t.lineNumber,t.column,t.lineNumber,n),text:e,forceMoveMarkers:!0};u.current.executeEdits("my-source",[r]),u.current.setPosition({column:n,lineNumber:t.lineNumber}),setTimeout((function(){u.current.focus()}),500)}};return l().createElement(l().Fragment,null,l().createElement(c.Row,{style:J({position:"absolute",zIndex:9999,right:50,top:16},e.btnStyle||{})},l().createElement(c.Col,null,l().createElement(k,{handleOk:p}))),l().createElement(c.Row,null,l().createElement(c.Col,{span:e.dashboardCells?19:24},l().createElement(d.C,(0,r.Z)({is:"CodeEditor",width:"100%",height:500,language:"javascript",value:i,editorDidMount:function(t,n){if(u.current=t,m.current=n,e.getFunctions){var r=function(e,t){var n=s.app.get("dashboardWidgets"),r={};for(var a in t){var o,i={};for(var l in e[a])i[l]="() => {}";if(null!==(o=t[a])&&void 0!==o&&o.type){var d,c=n[null===(d=t[a])||void 0===d?void 0:d.type].paramSchema,u=c?"function"==typeof c?c().properties:c.properties:{};for(var m in u)i[m]=u[m].title}r[a]=i}return r}(e.getFunctions(),e.dashboardCells);n.languages.typescript.javascriptDefaults.addExtraLib("let Widgets = "+JSON.stringify(r).replace(/\"\(\)\ \=\>\ \{\}\"/g,"() => {}"))}n.languages.typescript.javascriptDefaults.addExtraLib(U('import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";\nimport _regeneratorRuntime from "@babel/runtime/regenerator";\nimport { api } from \'xadmin\';\n//////\n\n/**\n * [工作表]查询工作表列表\n *\n * ### 使用示例\n *\n * ```\n * getTableList().then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {Object} filter - 查询条件（可选）\n * @param {Number} filter.limit - 查询条数（默认30）\n * @param {Number} filter.skip - 跳过条数（默认0）\n * @param {Object} filter.order - 排序\n * @param {Array} filter.fields - 查询字段（默认name）\n * @param {Object} filter.where - 查询条件\n * @param {String} filter.where.name - 工作表名称\n * @param {String} filter.where.title - 工作表标题\n * @param {Object} filter.where.schema - 属性配置\n * @param {Array} filter.where.dashboard - 关联画面\n * @param {Object} filter.where.permission - 工作表权限\n * @param {Array} filter.where.mutualRules - 字段规则\n * @param {Array} filter.where.errorNotice - 错误提示\n * @param {Object} filter.where.syncSettings - 同步数据\n * @param {Object} filter.where.creator - 创建人\n * @param {String} filter.where.createTime - 创建时间\n * @example \n * getTableList({ limit: 10, skip: 0, order: { name: \'DESC\' }, fields: [\'title\', \'device\'], where: { id: \'工作表名称\' } }).then(data => {\n *    console.log(data)\n * })\n * @returns {Object} { total: 总条数, items: 工作表列表 }\n */\nvar getTableList = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filter) {\n    var obj, result;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          filter = filter || {};\n          obj = {\n            limit: filter.limit || 30,\n            skip: filter.skip || 0,\n            order: filter.order,\n            fields: filter.fields,\n            withCount: true\n          };\n          _context.next = 4;\n          return api({\n            name: \'core/t/schema\'\n          }).query(obj, filter.where ? {\n            where: filter.where\n          } : {}).then(function (data) {\n            return data;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 4:\n          result = _context.sent;\n          return _context.abrupt("return", result);\n        case 6:\n        case "end":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getTableList(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表]根据id查询工作表详情\n *\n * ### 使用示例\n *\n * ```\n * getTableById("619344aa3752eb45f783a0c4").then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} id - 工作表名称\n * @returns {Object} 工作表数据\n */\nvar getTableById = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return api({\n            name: \'core/t/schema\'\n          }).get(id).then(function (data) {\n            return data;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context2.sent;\n          return _context2.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function getTableById(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表]新增工作表\n *\n * ### 使用示例\n *\n * ```\n * addTable({ id: \'测试表\', title: _r(\'测试表\') }).then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {Object} table - 新建的工作表数据\n * @param {String} table.id - 工作表名称（必填）\n * @param {String} table.title - 工作表标题（必填）\n * @param {Object} table.schema - 属性配置\n * @param {Array} table.dashboard - 关联画面\n * @param {Object} table.permission - 工作表权限\n * @param {Array} table.mutualRules - 字段规则\n * @param {Array} table.errorNotice - 错误提示\n * @param {Object} table.syncSettings - 同步数据\n * @returns {Object} { InsertedID: 插入工作表的ID }\n */\nvar addTable = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(table) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return api({\n            name: \'core/t/schema\'\n          }).fetch(\'\', {\n            method: \'POST\',\n            body: JSON.stringify(table)\n          }).then(function (data) {\n            return data === null || data === void 0 ? void 0 : data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context3.sent;\n          return _context3.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function addTable(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表]修改工作表\n *\n * ### 使用示例\n *\n * ```\n * editTableById(\'618c826bf39c079f64d3beae\', { title: _r(\'测试表\') }).then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} id - 修改的工作表名称\n * @param {Object} table - 修改的工作表数据\n * @param {String} table.title - 工作表标题\n * @param {Object} table.schema - 属性配置\n * @param {Array} table.dashboard - 关联画面\n * @param {Object} table.permission - 工作表权限\n * @param {Array} table.mutualRules - 字段规则\n * @param {Array} table.errorNotice - 错误提示\n * @param {Object} table.syncSettings - 同步数据\n * @returns {Object} { status: "OK" } 修改成功\n */\nvar editTableById = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id, table) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return api({\n            name: \'core/t/schema\'\n          }).fetch("/".concat(id), {\n            method: \'PATCH\',\n            body: JSON.stringify(table)\n          }).then(function (data) {\n            return data === null || data === void 0 ? void 0 : data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context4.sent;\n          return _context4.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function editTableById(_x4, _x5) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表]删除工作表\n *\n * ### 使用示例\n *\n * ```\n * delTableById("61a03d56b1bc77a1c795abcd").then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} id - 工作表名称\n * @returns {Object} { status: "OK" } 删除成功\n */\nvar delTableById = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return api({\n            name: \'core/t/schema\'\n          }).fetch("/".concat(id), {\n            method: \'DELETE\'\n          }).then(function (data) {\n            return data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context5.sent;\n          return _context5.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n  return function delTableById(_x6) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表数据]查询某个工作表数据\n *\n * ### 使用示例\n *\n * ```\n * getTableDataList(\'工作表3\').then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} tableName - 工作表名称（必填）\n * @param {Object} filter - 查询条件（可选）\n * @param {Number} filter.limit - 查询条数（默认30）\n * @param {Number} filter.skip - 跳过条数（默认0）\n * @param {Object} filter.sort - 排序\n * @param {Object} filter.project - 查询字段（默认name）\n * @param {Object} filter.where - 查询条件\n * @example \n * getTableDataList(\'工作表3\', {\n *   limit: 10, skip: 0, sort: { \'createTime\': -1 },\n *   project: { \'number-9B75\': 1, \'text-C19C\': 1 }, where: { \'number-9B75\': 2 }\n * }).then(data => {\n *   console.log(data)\n * })\n * @returns {Array} 工作表数据列表\n */\nvar getTableDataList = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(tableName, filter) {\n    var obj, querystr, result;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          filter = filter || {};\n          obj = {\n            limit: filter.limit || 30,\n            skip: filter.skip || 0,\n            sort: filter.sort,\n            project: filter.project,\n            filter: filter.where\n          };\n          querystr = encodeURIComponent(JSON.stringify(obj));\n          _context6.next = 5;\n          return api({\n            name: \'core/t\'\n          }).fetch("/".concat(tableName, "/d?query=").concat(querystr), {\n            method: \'GET\'\n          }).then(function (data) {\n            return data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 5:\n          result = _context6.sent;\n          return _context6.abrupt("return", result);\n        case 7:\n        case "end":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n  return function getTableDataList(_x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表数据]根据id查询工作表数据详情\n *\n * ### 使用示例\n *\n * ```\n * getTableDataById("测试表2", "61943edd7d293211b1eade6f").then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} tableName - 工作表名称\n * @param {String} id - 工作表数据ID\n * @returns {Object} 工作表数据详情\n */\nvar getTableDataById = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(tableName, id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return api({\n            name: "core/t/".concat(tableName, "/d")\n          }).get(id).then(function (data) {\n            return data;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context7.sent;\n          return _context7.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n  return function getTableDataById(_x9, _x10) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表数据]查询是否有工作表的添加权限\n *\n * ### 使用示例\n *\n * ```\n * checkTableAdd("测试表2").then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} tableName - 工作表名称\n * @returns {Object} { add: true } 有添加权限\n */\nvar checkTableAdd = /*#__PURE__*/function () {\n  var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(tableName) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return api({\n            name: \'core/t\'\n          }).get(tableName + \'/d/checkAdd\').then(function (data) {\n            return {\n              add: true\n            };\n          })["catch"](function (err) {\n            return {\n              add: false\n            };\n          });\n        case 2:\n          result = _context8.sent;\n          return _context8.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n  return function checkTableAdd(_x11) {\n    return _ref8.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表数据]新增一条工作表数据\n *\n * ### 使用示例\n *\n * ```\n * addTableData("测试表2", { \'text-C19C\': \'人人人\', \'number-9B75\': 12 }).then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {Object} tableName - 工作表名称\n * @param {Object} tableData - 新增的工作表数据\n * @returns {Object} { InsertedID: 插入工作表的ID }\n */\nvar addTableData = /*#__PURE__*/function () {\n  var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(tableName, tableData) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return api({\n            name: \'core/t\'\n          }).fetch("/".concat(tableName, "/d"), {\n            method: \'POST\',\n            body: JSON.stringify(tableData)\n          }).then(function (data) {\n            return data === null || data === void 0 ? void 0 : data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context9.sent;\n          return _context9.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n  return function addTableData(_x12, _x13) {\n    return _ref9.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表数据]修改工作表数据\n *\n * ### 使用示例\n *\n * ```\n * editTableDataById(\'测试表2\', \'618c826bf39c079f64d3beae\', { \'text-C19C\': \'文本2\', }).then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} tableName - 工作表名称\n * @param {String} id - 修改的工作表数据ID\n * @param {Object} tableData - 修改的工作表数据内容\n * @returns {Object} { status: "OK" } 修改成功\n */\nvar editTableDataById = /*#__PURE__*/function () {\n  var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(tableName, id, tableData) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return api({\n            name: \'core/t\'\n          }).fetch("/".concat(tableName, "/d/").concat(id), {\n            method: \'PATCH\',\n            body: JSON.stringify(tableData)\n          }).then(function (data) {\n            return data === null || data === void 0 ? void 0 : data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context10.sent;\n          return _context10.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n  return function editTableDataById(_x14, _x15, _x16) {\n    return _ref10.apply(this, arguments);\n  };\n}();\n\n/**\n * [工作表数据]删除工作表数据\n *\n * ### 使用示例\n *\n * ```\n * delTableDataById("测试表2", "61a03d56b1bc77a1c795abcd").then(data => {\n *    console.log(data)\n * })\n * ```\n * @param {String} tableName - 工作表名称\n * @param {String} id - 工作表数据ID\n * @returns {Object} { status: "OK" } 删除成功\n */\nvar delTableDataById = /*#__PURE__*/function () {\n  var _ref11 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(tableName, id) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return api({\n            name: \'core/t\'\n          }).fetch("/".concat(tableName, "/d/").concat(id), {\n            method: \'DELETE\'\n          }).then(function (data) {\n            return data.json;\n          })["catch"](function (err) {\n            return err;\n          });\n        case 2:\n          result = _context11.sent;\n          return _context11.abrupt("return", result);\n        case 4:\n        case "end":\n          return _context11.stop();\n      }\n    }, _callee11);\n  }));\n  return function delTableDataById(_x17, _x18) {\n    return _ref11.apply(this, arguments);\n  };\n}();\n\n// 兼容3.0\nvar getModelList = getTableList;\nvar getModelById = getTableById;\nvar addModel = addTable;\nvar editModelById = editTableById;\nvar delModelById = delTableById;\nvar getNodeList = getTableDataList;\nvar getNodeById = getTableDataById;\nvar addNode = addTableData;\nvar editNodeById = editTableDataById;\nvar delNodeById = delTableDataById;\n\n//////\nexport default {\n  getTableList: getTableList,\n  getTableById: getTableById,\n  addTable: addTable,\n  editTableById: editTableById,\n  delTableById: delTableById,\n  getTableDataList: getTableDataList,\n  getTableDataById: getTableDataById,\n  checkTableAdd: checkTableAdd,\n  addTableData: addTableData,\n  editTableDataById: editTableDataById,\n  delTableDataById: delTableDataById,\n  getModelList: getModelList,\n  getModelById: getModelById,\n  addModel: addModel,\n  editModelById: editModelById,\n  delModelById: delModelById,\n  getNodeList: getNodeList,\n  getNodeById: getNodeById,\n  addNode: addNode,\n  editNodeById: editNodeById,\n  delNodeById: delNodeById\n};')),n.languages.typescript.javascriptDefaults.addExtraLib(U("import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { api, app } from 'xadmin';\n//////\n\n/**\n * [画面]查询画面变量\n *\n * ### 使用示例\n *\n * ```\n * const DVariable = getDVariable()\n * ```\n * @returns {Object} 画面变量数据\n */\nvar getDVariable = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var customVar,\n      _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          customVar = _args[0].customVar;\n          return _context.abrupt(\"return\", customVar);\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getDVariable() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * [画面]添加/修改画面变量\n *\n * ### 使用示例\n *\n * ```\n * addEditDVariable('aaa', { bbb: 'ccc' })\n * ```\n * @param {String} key - 画面变量key\n * @param {Any} value - 画面变量值\n */\nfunction addEditDVariable(key, value) {\n  var _arguments$ = arguments[2],\n    customVar = _arguments$.customVar,\n    setCustomVar = _arguments$.setCustomVar;\n  setCustomVar(_objectSpread(_objectSpread({}, customVar), {}, _defineProperty({}, key, value)));\n}\n\n/**\n * [画面]删除画面变量\n *\n * ### 使用示例\n *\n * ```\n * delDVariable('aaa')\n * ```\n * @param {String} key - 画面变量key\n */\nfunction delDVariable(key) {\n  var _arguments$2 = arguments[1],\n    customVar = _arguments$2.customVar,\n    setCustomVar = _arguments$2.setCustomVar;\n  var result = customVar;\n  delete result[key];\n  setCustomVar(result);\n}\n\n//////\n/**\n * []修改画面组件属性\n *\n * ### 使用示例\n *\n * ```\n * dashboardUpdateCell('_E390BDAD', { content: '777' })\n * ```\n * @param {String} key - 画面组件key\n * @param {Object} params - 属性\n */\nfunction dashboardUpdateCell(key, params) {\n  var setCellParams = arguments[2].setCellParams;\n  setCellParams(key, 'base', params);\n}\n\n//////\n\nexport default {\n  getDVariable: getDVariable,\n  addEditDVariable: addEditDVariable,\n  delDVariable: delDVariable,\n  dashboardUpdateCell: dashboardUpdateCell\n};"))},defaultValue:"/** 这里要填写CSS **/",onChange:function(){}},e))),!x().isEmpty(e.dashboardCells)&&l().createElement(c.Col,{span:5,style:{maxHeight:e.height?(t=e.height,/^\d+$/.test(t.toString())?"".concat(t,"px"):t):500,overflowY:"scroll"}},l().createElement(W,{insertWidget:p,dashboardCells:L(e.getFunctions(),e.dashboardCells)}))))}},5301:()=>{_r("工作表数据"),_r("ECMAScript中函数"),_r("html对dom操作的函数"),_r("Web存储"),_r("<p>查询工作表列表</p>"),_r("<p>{ total: 总条数, items: 工作表列表 }</p>"),_r("<p>查询条件（可选）</p>"),_r("<p>查询条数（默认30）</p>"),_r("<p>跳过条数（默认0）</p>"),_r("<p>排序</p>"),_r("<p>查询字段（默认name）</p>"),_r("<p>查询条件</p>"),_r("<p>工作表名称</p>"),_r("<p>工作表标题</p>"),_r("<p>属性配置</p>"),_r("<p>关联画面</p>"),_r("<p>工作表权限</p>"),_r("<p>字段规则</p>"),_r("<p>错误提示</p>"),_r("<p>同步数据</p>"),_r("<p>创建人</p>"),_r("<p>创建时间</p>"),_r("<p>根据id查询工作表详情</p>"),_r("<p>工作表名称</p>"),_r("<p>工作表数据</p>"),_r("<p>新增工作表</p>"),_r("<p>新建的工作表数据</p>"),_r("<p>工作表名称（必填）</p>"),_r("<p>工作表标题（必填）</p>"),_r("<p>属性配置</p>"),_r("<p>关联画面</p>"),_r("<p>工作表权限</p>"),_r("<p>字段规则</p>"),_r("<p>错误提示</p>"),_r("<p>同步数据</p>"),_r("<p>{ InsertedID: 插入工作表的ID }</p>"),_r("<p>修改工作表</p>"),_r("<p>修改的工作表名称</p>"),_r("<p>修改的工作表数据</p>"),_r("<p>工作表标题</p>"),_r("<p>属性配置</p>"),_r("<p>关联画面</p>"),_r("<p>工作表权限</p>"),_r("<p>字段规则</p>"),_r("<p>错误提示</p>"),_r("<p>同步数据</p>"),_r("<p>{ status: &quot;OK&quot; } 修改成功</p>"),_r("<p>删除工作表</p>"),_r("<p>工作表名称</p>"),_r("<p>{ status: &quot;OK&quot; } 删除成功</p>"),_r("<p>查询某个工作表数据</p>"),_r("<p>工作表名称（必填）</p>"),_r("<p>查询条件（可选）</p>"),_r("<p>查询条数（默认30）</p>"),_r("<p>跳过条数（默认0）</p>"),_r("<p>排序</p>"),_r("<p>查询字段（默认name）</p>"),_r("<p>查询条件</p>"),_r("<p>工作表数据列表</p>"),_r("<p>根据id查询工作表数据详情</p>"),_r("<p>工作表数据ID</p>"),_r("<p>工作表数据详情</p>"),_r("<p>查询是否有工作表的添加权限</p>"),_r("<p>{ add: true } 有添加权限</p>"),_r("<p>新增一条工作表数据</p>"),_r("<p>工作表名称</p>"),_r("<p>新增的工作表数据</p>"),_r("<p>{ InsertedID: 插入工作表的ID }</p>"),_r("<p>修改工作表数据</p>"),_r("<p>修改的工作表数据ID</p>"),_r("<p>修改的工作表数据内容</p>"),_r("<p>删除工作表数据</p>"),_r("<p>工作表名称</p>"),_r("<p>工作表数据ID</p>"),_r("<p>查询画面变量</p>"),_r("<p>画面变量数据</p>"),_r("<p>添加/修改画面变量</p>"),_r("<p>画面变量key</p>"),_r("<p>画面变量值</p>"),_r("<p>删除画面变量</p>"),_r("<p>画面变量key</p>"),_r("<p>修改画面组件属性</p>"),_r("<p>画面组件key</p>"),_r("<p>属性</p>"),_r("<p></p>")},6245:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(4015),a=n.n(r),o=n(3645),i=n.n(o)()(a());i.push([e.id,".doc-description > p {\n  margin-bottom: 0px !important;\n}\n\n.doc-title-button {\n  cursor: pointer;\n  font-size: 12px;\n  color: dodgerblue;\n}\n\n.script-cellTree.ant-menu {\n  color: #333;\n  width: 250px;\n}\n\n.script-cellTree.ant-menu .ant-menu-submenu {\n  background-color: #eee;\n}\n\n.script-cellTree.ant-menu .ant-menu-submenu .ant-menu-submenu-title {\n  height: 30px;\n  line-height: 30px;\n}\n\n.script-cellTree.ant-menu .ant-menu-submenu .ant-menu-title-content {\n  line-height: 30px;\n}\n\n.script-cellTree .ant-menu-item {\n  height: 20px !important;\n  line-height: 20px !important;\n}\n\n.site-tree-search-value {\n  color: #f50;\n}\n","",{version:3,sources:["webpack://./src/components/apiDocEditor/apiDoc.css"],names:[],mappings:"AAAA;EACE,6BAA6B;AAC/B;;AAEA;EACE,eAAe;EACf,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,WAAW;EACX,YAAY;AACd;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,YAAY;EACZ,iBAAiB;AACnB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;EACvB,4BAA4B;AAC9B;;AAEA;EACE,WAAW;AACb",sourcesContent:[".doc-description > p {\n  margin-bottom: 0px !important;\n}\n\n.doc-title-button {\n  cursor: pointer;\n  font-size: 12px;\n  color: dodgerblue;\n}\n\n.script-cellTree.ant-menu {\n  color: #333;\n  width: 250px;\n}\n\n.script-cellTree.ant-menu .ant-menu-submenu {\n  background-color: #eee;\n}\n\n.script-cellTree.ant-menu .ant-menu-submenu .ant-menu-submenu-title {\n  height: 30px;\n  line-height: 30px;\n}\n\n.script-cellTree.ant-menu .ant-menu-submenu .ant-menu-title-content {\n  line-height: 30px;\n}\n\n.script-cellTree .ant-menu-item {\n  height: 20px !important;\n  line-height: 20px !important;\n}\n\n.site-tree-search-value {\n  color: #f50;\n}\n"],sourceRoot:""}]);const l=i}}]);
//# sourceMappingURL=2625.ef7bbecbb0f800dc5bee.js.map