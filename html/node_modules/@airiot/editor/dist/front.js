/*! For license information please see front.js.LICENSE.txt */
(()=>{var __webpack_modules__={5546:(e,t,r)=>{"use strict";r.r(t),r.d(t,{default:()=>ko});var n=r(7462),a=r(7363),o=r.n(a);const i=Recoil;var s,u=r(5861),l=r(4687),c=r.n(l),d=r(1002),m=r(2611),p=r.n(m),b=r(4942);function f(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var g=(s={"Getter must not have any formal parameters":"获取器不能有任何形式的参数","Setter must have exactly one formal parameter":"设置器必须只有一个形式参数","Setter function argument must not be a rest parameter":"设置器函数参数不能是其余参数","Class constructor may not be an async method":"类构造函数不能是异步方法","Class constructor may not be an accessor":"类构造函数不能是访问器","Missing initializer in %0 declaration":"在%0声明中缺少初始化器","Unexpected token =":"意外的符号 =","Duplicate binding %0":"重复绑定 %0","A class may only have one constructor":"一个类只能有一个构造函数","Duplicate __proto__ fields are not allowed in object literals":"在对象字面量中不允许有重复的 __proto__ 字段","%0 loop variable declaration may not have an initializer":"%0循环变量声明可能没有初始化器","Generator declarations are not allowed in legacy contexts":"在遗留上下文中不允许生成器声明","Illegal break statement":"非法的 break 语句","Illegal continue statement":"非法的 continue 语句","Unexpected token":"意外的符号","Illegal 'use strict' directive in function with non-simple parameter list":"在具有非简单参数列表的函数中非法的 'use strict' 指令","Illegal return statement":"非法的 return 语句","Keyword must not contain escaped characters":"关键字不能包含转义字符","Invalid hexadecimal escape sequence":"无效的十六进制转义序列","Invalid left-hand side in assignment":"在赋值中无效的左侧","Invalid left-hand side in for-in":"在for-in中无效的左侧","Invalid left-hand side in for-loop":"在for-loop中无效的左侧","Invalid regular expression":"无效的正则表达式","let is disallowed as a lexically bound name":"let作为词法绑定名称是不允许的"},(0,b.Z)(s,"Unexpected token","意外的符号"),(0,b.Z)(s,"More than one default clause in switch statement","在switch语句中有多于一个的default子句"),(0,b.Z)(s,"Illegal newline after throw","在throw后面非法的换行符"),(0,b.Z)(s,"Unexpected token","意外的符号"),(0,b.Z)(s,"Missing catch or finally after try","在try后面缺少catch或finally"),(0,b.Z)(s,"Rest parameter must be last formal parameter","其余参数必须是最后的形式参数"),(0,b.Z)(s,"%0 '%1' has already been declared","%0 '%1' 已经被声明"),(0,b.Z)(s,"Classes may not have static property named prototype","类不能有名为prototype的静态属性"),(0,b.Z)(s,"Catch variable may not be eval or arguments in strict mode","在严格模式下，捕获变量不能是eval或arguments"),(0,b.Z)(s,"Delete of an unqualified identifier in strict mode.","在严格模式下删除一个无资格的标识符"),(0,b.Z)(s,"In strict mode code, functions can only be declared at top level or inside a block","在严格模式代码中，函数只能在顶级或块内部声明"),(0,b.Z)(s,"Function name may not be eval or arguments in strict mode","在严格模式下，函数名不能是eval或arguments"),(0,b.Z)(s,"Assignment to eval or arguments is not allowed in strict mode","在严格模式下，不允许给eval或arguments赋值"),(0,b.Z)(s,"Postfix increment/decrement may not have eval or arguments operand in strict mode","在严格模式下，后缀递增/递减可能没有eval或arguments操作数"),(0,b.Z)(s,"Prefix increment/decrement may not have eval or arguments operand in strict mode","在严格模式下，前缀递增/递减可能没有eval或arguments操作数"),(0,b.Z)(s,"Strict mode code may not include a with statement","严格模式代码不能包含一个with语句"),(0,b.Z)(s,"Octal literals are not allowed in strict mode.","在严格模式下，不允许八进制字面量"),(0,b.Z)(s,"Strict mode function may not have duplicate parameter names","严格模式函数可能没有重复的参数名称"),(0,b.Z)(s,"Parameter name eval or arguments is not allowed in strict mode","在严格模式下，参数名eval或arguments是不允许的"),(0,b.Z)(s,"Use of future reserved word in strict mode","在严格模式下，使用未来保留的单词"),(0,b.Z)(s,"Variable name may not be eval or arguments in strict mode","在严格模式下，变量名可能不是eval或arguments"),(0,b.Z)(s,"Octal literals are not allowed in template strings.","在模板字符串中，不允许八进制字面量"),(0,b.Z)(s,"Unexpected end of input","意外的输入结束"),(0,b.Z)(s,"Unexpected identifier","意外的标识符"),(0,b.Z)(s,"Unexpected number","意外的数字"),(0,b.Z)(s,"Unexpected reserved word","意外的保留字"),(0,b.Z)(s,"Unexpected string","意外的字符串"),(0,b.Z)(s,"Unexpected quasi %0","意外的准 %0"),(0,b.Z)(s,"Unexpected token %0","意外的符号 %0"),(0,b.Z)(s,"Unexpected token ILLEGAL","意外的非法符号"),(0,b.Z)(s,"Undefined label '%0'","未定义的标签 '%0'"),(0,b.Z)(s,"Invalid regular expression: missing /","无效的正则表达式：缺少 /"),s);function y(e,t){try{return t.parseScript(e),null}catch(e){return g[e.description]||e.description}}var h,v,A=function(e){return p().isArray(e)?e.map((function(e){return"variable"===e.type?"variable('".concat(e.variable.path,"')"):e.text})).join(""):null},D=function(e,t,r){if(t)return y(A(e),r);if(p().isArray(e)){var n,a=e.filter((function(e){return"formula"===e.type})),o=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return f(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?f(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw o}}}}(a);try{for(o.s();!(n=o.n()).done;){var i=n.value,s=y(A(i.children),r);if(s)return s}}catch(e){o.e(e)}finally{o.f()}return null}return null},x=r(7956),C={Object:{hasOwnProperty:{definition:"返回一个布尔值，指示对象自身属性中是否具有指定的属性",syntax:"object.hasOwnProperty(prop)",parameters:"{String} prop - 要检查的属性名称",return:"Boolean",demo:"var obj = { x: 1, y: 2 };<br/>console.log(obj.hasOwnProperty('x'));"},isPrototypeOf:{definition:"返回一个布尔值，表示指定对象是否在另一个对象的原型链中",syntax:"prototypeObj.isPrototypeOf(object)",parameters:"{Object} prototypeObj - 要检查的对象是否在该对象的原型链中",return:"Boolean",demo:"function Foo() {}<br/>function Bar() {}<br/>Bar.prototype = Object.create(Foo.prototype);<br/>var obj = new Bar();<br/>console.log(Foo.prototype.isPrototypeOf(obj));"},propertyIsEnumerable:{definition:"返回一个布尔值，指示指定的属性是否可枚举",syntax:"object.propertyIsEnumerable(prop)",parameters:"{String} prop - 要检查的属性名称",return:"Boolean",demo:"var obj = { x: 1, y: 2 };<br/>console.log(obj.propertyIsEnumerable('x'));"},toString:{definition:"返回表示对象的字符串",syntax:"object.toString()",parameters:"{Null}",return:"String",demo:"var obj = { x: 1, y: 2 };<br/>console.log(obj.toString());"},valueOf:{definition:"返回指定对象的原始值",syntax:"object.valueOf()",parameters:"{Null}",return:"Any",demo:"var obj = { x: 1, y: 2 };<br/>console.log(obj.valueOf());"},toLocaleString:{definition:"返回对象的本地化字符串表示",syntax:"object.toLocaleString()",parameters:"{Null}",return:"String",demo:"var num = 123456.789;<br/>console.log(num.toLocaleString('en-US'));"}},String:{length:{definition:"返回字符串的长度",syntax:"string.length",return:"Number",demo:"var str = 'Hello, World!';<br/>console.log(str.length);"},anchor:{definition:"创建 HTML 锚链接",syntax:"string.anchor(name)",parameters:"{String} name - 锚链接的名称",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.anchor('myAnchor'));"},at:{definition:"返回指定索引位置的字符",syntax:"string.at(index)",parameters:"{Number} index - 字符的索引位置",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.at(7));"},big:{definition:"使用大号字体显示字符串",syntax:"string.big()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.big());"},blink:{definition:"以闪烁的文本显示字符串",syntax:"string.blink()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.blink());"},bold:{definition:"使用粗体显示字符串",syntax:"string.bold()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.bold());"},charAt:{definition:"返回指定索引位置的字符",syntax:"string.charAt(index)",parameters:"{Number} index - 字符的索引位置",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.charAt(7));"},charCodeAt:{definition:"返回指定索引位置的字符的 Unicode 编码",syntax:"string.charCodeAt(index)",parameters:"{Number} index - 字符的索引位置",return:"Number",demo:"var str = 'Hello, World!';<br/>console.log(str.charCodeAt(7));"},codePointAt:{definition:"返回指定索引位置的字符的 Unicode 码点值",syntax:"string.codePointAt(index)",parameters:"{Number} index - 字符的索引位置",return:"Number",demo:"var str = 'Hello, World!';<br/>console.log(str.codePointAt(7));"},concat:{definition:"将多个字符串连接成一个新字符串",syntax:"string.concat(string1, string2, ...)",parameters:"{String} string1, string2, ... - 要连接的字符串",return:"String",demo:"var str1 = 'Hello,';<br/>var str2 = ' World!';<br/>console.log(str1.concat(str2));"},endsWith:{definition:"判断字符串是否以指定的子字符串结尾",syntax:"string.endsWith(searchString, length)",parameters:"{String} searchString - 要搜索的子字符串<br/>{Number} length (可选) - 从原始字符串末尾开始搜索的位置，默认为原始字符串的长度",return:"Boolean",demo:"var str = 'Hello, World!';<br/>console.log(str.endsWith('World!'));"},fontcolor:{definition:"使用指定的颜色显示字符串",syntax:"string.fontcolor(color)",parameters:"{String} color - 字符串的颜色",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.fontcolor('blue'));"},fontsize:{definition:"使用指定的字体大小显示字符串",syntax:"string.fontsize(size)",parameters:"{String} size - 字体大小",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.fontsize('5'));"},fixed:{definition:"以打字机文本显示字符串",syntax:"string.fixed()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.fixed());"},includes:{definition:"判断字符串是否包含指定的子字符串",syntax:"string.includes(searchString, position)",parameters:"{String} searchString - 要搜索的子字符串<br/>{Number} position (可选) - 开始搜索的位置，默认为 0",return:"Boolean",demo:"var str = 'Hello, World!';<br/>console.log(str.includes('World'));"},indexOf:{definition:"返回指定子字符串第一次出现的索引位置",syntax:"string.indexOf(searchValue, fromIndex)",parameters:"{String} searchValue - 要搜索的子字符串<br/>{Number} fromIndex (可选) - 开始搜索的位置，默认为 0",return:"Number",demo:"var str = 'Hello, World!';<br/>console.log(str.indexOf('World'));"},italics:{definition:"使用斜体显示字符串",syntax:"string.italics()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.italics());"},lastIndexOf:{definition:"返回指定子字符串最后一次出现的索引位置",syntax:"string.lastIndexOf(searchValue, fromIndex)",parameters:"{String} searchValue - 要搜索的子字符串<br/>{Number} fromIndex (可选) - 开始搜索的位置，默认为字符串的末尾",return:"Number",demo:"var str = 'Hello, World!';<br/>console.log(str.lastIndexOf('o'));"},link:{definition:"创建 HTML 锚链接",syntax:"string.link(url)",parameters:"{String} url - 链接的 URL",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.link('https://www.example.com'));"},localeCompare:{definition:"按照本地特定的顺序比较两个字符串",syntax:"string.localeCompare(compareString, locales, options)",parameters:"{String} compareString - 要比较的字符串<br/>{String or Array} locales (可选) - 一个或多个用来指定比较规则的语言环境标记，或者用来启用自定义排序规则的一个字符串数组<br/>{Object} options (可选) - 一个用来定制比较行为的对象",return:"Number",demo:"var str1 = 'apple';<br/>var str2 = 'banana';<br/>console.log(str1.localeCompare(str2));"},match:{definition:"检索字符串与正则表达式匹配的结果",syntax:"string.match(regexp)",parameters:"{RegExp} regexp - 用于匹配的正则表达式",return:"Array or Null",demo:"var str = 'Hello, World!';<br/>console.log(str.match(/o/g));"},matchAll:{definition:"返回一个包含字符串中所有匹配正则表达式的结果的迭代器",syntax:"string.matchAll(regexp)",parameters:"{RegExp} regexp - 用于匹配的正则表达式",return:"Iterator",demo:"var str = 'Hello, World!';<br/>var matches = str.matchAll(/o/g);<br/>for (const match of matches) {<br/>&nbsp;&nbsp;console.log(match[0]);<br/>}"},normalize:{definition:"返回字符串的 Unicode 正规化形式",syntax:"string.normalize(form)",parameters:"{String} form (可选) - 指定正规化形式的字符串，可以是 'NFC'、'NFD'、'NFKC' 或 'NFKD'",return:"String",demo:"var str = 'Café';<br/>console.log(str.normalize('NFD'));"},padEnd:{definition:"将字符串用指定字符从末尾填充到指定长度",syntax:"string.padEnd(targetLength, padString)",parameters:"{Number} targetLength - 填充后字符串的目标长度<br/>{String} padString (可选) - 用于填充的字符，默认为空格",return:"String",demo:"var str = 'Hello';<br/>console.log(str.padEnd(10, '.'));"},padStart:{definition:"将字符串用指定字符从开头填充到指定长度",syntax:"string.padStart(targetLength, padString)",parameters:"{Number} targetLength - 填充后字符串的目标长度<br/>{String} padString (可选) - 用于填充的字符，默认为空格",return:"String",demo:"var str = 'Hello';<br/>console.log(str.padStart(10, '.'));"},repeat:{definition:"将字符串重复指定次数",syntax:"string.repeat(count)",parameters:"{Number} count - 重复的次数",return:"String",demo:"var str = 'Hello';<br/>console.log(str.repeat(3));"},replace:{definition:"替换字符串中的匹配项",syntax:"string.replace(searchValue, replaceValue)",parameters:"{String or RegExp} searchValue - 要替换的子字符串或正则表达式<br/>{String or Function} replaceValue - 替换的字符串或替换函数",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.replace('World', 'John'));"},replaceAll:{definition:"替换字符串中的所有匹配项",syntax:"string.replaceAll(searchValue, replaceValue)",parameters:"{String or RegExp} searchValue - 要替换的子字符串或正则表达式<br/>{String or Function} replaceValue - 替换的字符串或替换函数",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.replaceAll('o', 'a'));"},search:{definition:"搜索字符串中指定的值并返回索引位置",syntax:"string.search(regexp)",parameters:"{RegExp} regexp - 用于搜索的正则表达式",return:"Number",demo:"var str = 'Hello, World!';<br/>console.log(str.search(/o/));"},slice:{definition:"提取字符串的指定部分",syntax:"string.slice(startIndex, endIndex)",parameters:"{Number} startIndex - 提取的起始索引位置<br/>{Number} endIndex (可选) - 提取的结束索引位置（不包括该位置的字符）",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.slice(7));"},small:{definition:"使用小号字体显示字符串",syntax:"string.small()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.small());"},split:{definition:"将字符串分割为字符串数组",syntax:"string.split(separator, limit)",parameters:"{String or RegExp} separator - 分隔符字符串或正则表达式<br/>{Number} limit (可选) - 限制返回的分割片段数量",return:"Array",demo:"var str = 'Hello, World!';<br/>console.log(str.split(', '));"},strike:{definition:"使用删除线显示字符串",syntax:"string.strike()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.strike());"},sub:{definition:"使用下标显示字符串",syntax:"string.sub()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.sub());"},substr:{definition:"提取字符串中从指定位置开始的指定长度的子字符串",syntax:"string.substr(startIndex, length)",parameters:"{Number} startIndex - 子字符串的起始索引位置<br/>{Number} length (可选) - 要提取的子字符串的长度",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.substr(7, 5));"},substring:{definition:"提取字符串中两个指定索引之间的字符",syntax:"string.substring(indexStart, indexEnd)",parameters:"{Number} indexStart - 提取的起始索引位置<br/>{Number} indexEnd (可选) - 提取的结束索引位置（不包括该位置的字符）",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.substring(7, 12));"},sup:{definition:"使用上标显示字符串",syntax:"string.sup()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.sup());"},startsWith:{definition:"判断字符串是否以指定的子字符串开头",syntax:"string.startsWith(searchString, position)",parameters:"{String} searchString - 要搜索的子字符串<br/>{Number} position (可选) - 开始搜索的位置，默认为 0",return:"Boolean",demo:"var str = 'Hello, World!';<br/>console.log(str.startsWith('Hello'));"},toString:{definition:"返回字符串对象的原始字符串表示",syntax:"string.toString()",parameters:"{Null}",return:"String",demo:"var str = new String('Hello, World!');<br/>console.log(str.toString());"},trim:{definition:"去除字符串两端的空白字符",syntax:"string.trim()",parameters:"{Null}",return:"String",demo:"var str = '   Hello, World!   ';<br/>console.log(str.trim());"},trimStart:{definition:"去除字符串开头的空白字符",syntax:"string.trimStart()",parameters:"{Null}",return:"String",demo:"var str = '   Hello, World!';<br/>console.log(str.trimStart());"},trimLeft:{definition:"去除字符串开头的空白字符",syntax:"string.trimLeft()",parameters:"{Null}",return:"String",demo:"var str = '   Hello, World!';<br/>console.log(str.trimLeft());"},trimEnd:{definition:"去除字符串末尾的空白字符",syntax:"string.trimEnd()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!   ';<br/>console.log(str.trimEnd());"},trimRight:{definition:"去除字符串末尾的空白字符",syntax:"string.trimRight()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!   ';<br/>console.log(str.trimRight());"},toLocaleLowerCase:{definition:"将字符串转换为小写，并根据主机的语言环境进行本地化处理",syntax:"string.toLocaleLowerCase()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.toLocaleLowerCase());"},toLocaleUpperCase:{definition:"将字符串转换为大写，并根据主机的语言环境进行本地化处理",syntax:"string.toLocaleUpperCase()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.toLocaleUpperCase());"},toLowerCase:{definition:"将字符串转换为小写",syntax:"string.toLowerCase()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.toLowerCase());"},toUpperCase:{definition:"将字符串转换为大写",syntax:"string.toUpperCase()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.toUpperCase());"},valueOf:{definition:"返回指定对象的原始值",syntax:"string.valueOf()",parameters:"{Null}",return:"String",demo:"var str = new String('Hello, World!');<br/>console.log(str.valueOf());"},isWellFormed:{definition:"检查字符串是否是一个形式良好的 Unicode 字符串",syntax:"string.isWellFormed()",parameters:"{Null}",return:"Boolean",demo:"var str = 'Hello, World!';<br/>console.log(str.isWellFormed());"},toWellFormed:{definition:"返回一个形式良好的 Unicode 字符串",syntax:"string.toWellFormed()",parameters:"{Null}",return:"String",demo:"var str = 'Hello, World!';<br/>console.log(str.toWellFormed());"}},Number:{toExponential:{definition:"以指数表示法返回该数字的字符串表示",syntax:"number.toExponential(fractionDigits)",parameters:"{Number} fractionDigits (可选) - 小数位数",return:"String",demo:"var num = 123.456789;<br/>console.log(num.toExponential(2));"},toFixed:{definition:"使用定点表示法返回该数字的字符串表示，指定小数位数",syntax:"number.toFixed(fractionDigits)",parameters:"{Number} fractionDigits - 小数位数",return:"String",demo:"var num = 123.456789;<br/>console.log(num.toFixed(2));"},toPrecision:{definition:"返回该数字的字符串表示，指定有效数字的总位数",syntax:"number.toPrecision(precision)",parameters:"{Number} precision - 有效数字的总位数",return:"String",demo:"var num = 123.456789;<br/>console.log(num.toPrecision(4));"},toString:{definition:"返回数字的字符串表示",syntax:"number.toString(radix)",parameters:"{Number} radix (可选) - 进制数，默认为 10",return:"String",demo:"var num = 123;<br/>console.log(num.toString(2));"},valueOf:{definition:"返回指定对象的原始值",syntax:"number.valueOf()",parameters:"{Null}",return:"Number",demo:"var num = new Number(123);<br/>console.log(num.valueOf());"},toLocaleString:{definition:"返回该数字的字符串表示，根据主机的语言环境进行本地化处理",syntax:"number.toLocaleString()",parameters:"{Null}",return:"String",demo:"var num = 1234567.89;<br/>console.log(num.toLocaleString());"}},Array:{length:{definition:"返回数组的长度",syntax:"array.length",parameters:"{Null}",return:"Number",demo:"var arr = [1, 2, 3];<br/>console.log(arr.length);"},at:{definition:"返回指定索引处的元素值",syntax:"array.at(index)",parameters:"{Number} index - 索引值",return:"Any",demo:"var arr = ['a', 'b', 'c'];<br/>console.log(arr.at(1));"},concat:{definition:"将多个数组或值合并为一个新数组",syntax:"array.concat(value1, value2, ..., valueN)",parameters:"{Any} value1, value2, ..., valueN - 要合并的数组或值",return:"Array",demo:"var arr1 = [1, 2, 3];<br/>var arr2 = [4, 5];<br/>var newArr = arr1.concat(arr2);<br/>console.log(newArr);"},copyWithin:{definition:"将数组的一部分元素复制到同一数组中的另一个位置",syntax:"array.copyWithin(target, start, end)",parameters:"{Number} target - 复制的目标位置索引<br/>{Number} start (可选) - 复制的起始位置索引，默认为 0<br/>{Number} end (可选) - 复制的结束位置索引，默认为数组长度",return:"Array",demo:"var arr = [1, 2, 3, 4, 5];<br/>arr.copyWithin(0, 3);<br/>console.log(arr);"},fill:{definition:"用一个固定值填充数组的所有元素",syntax:"array.fill(value, start, end)",parameters:"{Any} value - 填充的值<br/>{Number} start (可选) - 填充的起始位置索引，默认为 0<br/>{Number} end (可选) - 填充的结束位置索引，默认为数组长度",return:"Array",demo:"var arr = [1, 2, 3];<br/>arr.fill(0);<br/>console.log(arr);"},find:{definition:"返回数组中满足条件的第一个元素的值",syntax:"array.find(callback, thisArg)",parameters:"{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",return:"Any",demo:"var arr = [1, 2, 3];<br/>var result = arr.find(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(result);"},findIndex:{definition:"返回数组中满足条件的第一个元素的索引",syntax:"array.findIndex(callback, thisArg)",parameters:"{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",return:"Number",demo:"var arr = [1, 2, 3];<br/>var index = arr.findIndex(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(index);"},findLast:{definition:"返回数组中满足条件的最后一个元素的值",syntax:"array.findLast(callback, thisArg)",parameters:"{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",return:"Any",demo:"var arr = [1, 2, 3];<br/>var result = arr.findLast(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(result);"},findLastIndex:{definition:"返回数组中满足条件的最后一个元素的索引",syntax:"array.findLastIndex(callback, thisArg)",parameters:"{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",return:"Number",demo:"var arr = [1, 2, 3];<br/>var index = arr.findLastIndex(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(index);"},lastIndexOf:{definition:"返回指定元素在数组中最后出现的索引",syntax:"array.lastIndexOf(searchElement, fromIndex)",parameters:"{Any} searchElement - 要查找的元素值<br/>{Number} fromIndex (可选) - 开始搜索的索引，默认为数组末尾",return:"Number",demo:"var arr = [1, 2, 3, 2, 1];<br/>console.log(arr.lastIndexOf(2));"},pop:{definition:"删除并返回数组的最后一个元素",syntax:"array.pop()",parameters:"{Null}",return:"Any",demo:"var arr = [1, 2, 3];<br/>console.log(arr.pop());"},push:{definition:"向数组末尾添加一个或多个元素，并返回新的长度",syntax:"array.push(element1, element2, ..., elementN)",parameters:"{Any} element1, element2, ..., elementN - 要添加的元素",return:"Number",demo:"var arr = [1, 2, 3];<br/>console.log(arr.push(4, 5));"},reverse:{definition:"颠倒数组中元素的顺序",syntax:"array.reverse()",parameters:"{Null}",return:"Array",demo:"var arr = [1, 2, 3];<br/>arr.reverse();<br/>console.log(arr);"},shift:{definition:"删除并返回数组的第一个元素",syntax:"array.shift()",parameters:"{Null}",return:"Any",demo:"var arr = [1, 2, 3];<br/>console.log(arr.shift());"},unshift:{definition:"向数组的开头添加一个或多个元素，并返回新的长度",syntax:"array.unshift(element1, element2, ..., elementN)",parameters:"{Any} element1, element2, ..., elementN - 要添加的元素",return:"Number",demo:"var arr = [1, 2, 3];<br/>console.log(arr.unshift(0));"},slice:{definition:"从数组中提取指定范围的元素，返回一个新数组",syntax:"array.slice(start, end)",parameters:"{Number} start (可选) - 提取的起始位置索引，默认为 0<br/>{Number} end (可选) - 提取的结束位置索引，默认为数组长度",return:"Array",demo:"var arr = [1, 2, 3, 4, 5];<br/>var newArr = arr.slice(1, 4);<br/>console.log(newArr);"},sort:{definition:"对数组元素进行排序",syntax:"array.sort(compareFunction)",parameters:"{Function} compareFunction (可选) - 指定排序规则的比较函数",return:"Array",demo:"var arr = [3, 1, 2];<br/>arr.sort();<br/>console.log(arr);"},splice:{definition:"删除、替换或添加数组的元素，并返回被删除的元素组成的数组",syntax:"array.splice(start, deleteCount, item1, item2, ..., itemN)",parameters:"{Number} start - 开始修改的索引位置<br/>{Number} deleteCount (可选) - 要删除的元素个数<br/>{Any} item1, item2, ..., itemN (可选) - 要添加到数组的元素",return:"Array",demo:"var arr = [1, 2, 3, 4, 5];<br/>var deletedItems = arr.splice(2, 2, 'a', 'b');<br/>console.log(deletedItems);"},includes:{definition:"判断数组是否包含指定元素",syntax:"array.includes(searchElement, fromIndex)",parameters:"{Any} searchElement - 要查找的元素值<br/>{Number} fromIndex (可选) - 开始搜索的索引，默认为 0",return:"Boolean",demo:"var arr = [1, 2, 3];<br/>console.log(arr.includes(2));"},indexOf:{definition:"返回指定元素在数组中第一次出现的索引",syntax:"array.indexOf(searchElement, fromIndex)",parameters:"{Any} searchElement - 要查找的元素值<br/>{Number} fromIndex (可选) - 开始搜索的索引，默认为 0",return:"Number",demo:"var arr = [1, 2, 3, 2, 1];<br/>console.log(arr.indexOf(2));"},join:{definition:"将数组的所有元素连接成一个字符串",syntax:"array.join(separator)",parameters:"{String} separator (可选) - 指定连接元素的分隔符，默认为逗号",return:"String",demo:"var arr = ['Hello', 'World'];<br/>console.log(arr.join(' '));"},keys:{definition:"返回数组中每个元素的索引迭代器",syntax:"array.keys()",parameters:"{Null}",return:"Iterator",demo:"var arr = ['a', 'b', 'c'];<br/>var iterator = arr.keys();<br/>for (var key of iterator) {<br/>&nbsp;&nbsp;console.log(key);<br/>}"},entries:{definition:"返回数组中每个元素的索引和值迭代器",syntax:"array.entries()",parameters:"{Null}",return:"Iterator",demo:"var arr = ['a', 'b', 'c'];<br/>var iterator = arr.entries();<br/>for (var entry of iterator) {<br/>&nbsp;&nbsp;console.log(entry);<br/>}"},values:{definition:"返回数组中每个元素的值迭代器",syntax:"array.values()",parameters:"{Null}",return:"Iterator",demo:"var arr = ['a', 'b', 'c'];<br/>var iterator = arr.values();<br/>for (var value of iterator) {<br/>&nbsp;&nbsp;console.log(value);<br/>}"},forEach:{definition:"对数组的每个元素执行指定操作",syntax:"array.forEach(callback, thisArg)",parameters:"{Function} callback - 对每个元素执行的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",return:"{Null}",demo:"var arr = [1, 2, 3];<br/>arr.forEach(function(element) {<br/>&nbsp;&nbsp;console.log(element);<br/>});"},filter:{definition:"根据指定条件筛选数组的元素，并返回一个新数组",syntax:"array.filter(callback, thisArg)",parameters:"{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",return:"Array",demo:"var arr = [1, 2, 3, 4, 5];<br/>var newArr = arr.filter(function(element) {<br/>&nbsp;&nbsp;return element > 2;<br/>});<br/>console.log(newArr);"},flat:{definition:"将嵌套多维数组转换为一维数组",syntax:"array.flat(depth)",parameters:"{Number} depth (可选) - 指定递归展开的深度，默认为 1",return:"Array",demo:"var arr = [1, [2, [3, 4], 5]];<br/>var flatArr = arr.flat();<br/>console.log(flatArr);"},flatMap:{definition:"先对数组中的每个元素执行映射函数，然后将结果展平成一个新数组",syntax:"array.flatMap(callback, thisArg)",parameters:"{Function} callback - 对每个元素执行的映射函数<br/>{Any} thisArg (可选) - 映射函数中的 this 值，默认为 undefined",return:"Array",demo:"var arr = [1, 2, 3];<br/>var newArr = arr.flatMap(function(element) {<br/>&nbsp;&nbsp;return [element, element * 2];<br/>});<br/>console.log(newArr);"},map:{definition:"对数组的每个元素执行指定映射操作，并返回一个新数组",syntax:"array.map(callback, thisArg)",parameters:"{Function} callback - 对每个元素执行的映射函数<br/>{Any} thisArg (可选) - 映射函数中的 this 值，默认为 undefined",return:"Array",demo:"var arr = [1, 2, 3];<br/>var newArr = arr.map(function(element) {<br/>&nbsp;&nbsp;return element * 2;<br/>});<br/>console.log(newArr);"},every:{definition:"判断数组中的所有元素是否满足指定条件",syntax:"array.every(callback, thisArg)",parameters:"{Function} callback - 对每个元素执行的条件判断函数<br/>{Any} thisArg (可选) - 条件判断函数中的 this 值，默认为 undefined",return:"Boolean",demo:"var arr = [1, 2, 3];<br/>var result = arr.every(function(element) {<br/>&nbsp;&nbsp;return element > 0;<br/>});<br/>console.log(result);"},some:{definition:"判断数组中是否存在满足指定条件的元素",syntax:"array.some(callback, thisArg)",parameters:"{Function} callback - 对每个元素执行的条件判断函数<br/>{Any} thisArg (可选) - 条件判断函数中的 this 值，默认为 undefined",return:"Boolean",demo:"var arr = [1, 2, 3];<br/>var result = arr.some(function(element) {<br/>&nbsp;&nbsp;return element > 2;<br/>});<br/>console.log(result);"},reduce:{definition:"对数组的每个元素执行指定归约操作，返回一个累计值",syntax:"array.reduce(callback, initialValue)",parameters:"{Function} callback - 对每个元素执行的归约函数<br/>{Any} initialValue (可选) - 归约的初始值",return:"Any",demo:"var arr = [1, 2, 3];<br/>var sum = arr.reduce(function(accumulator, currentValue) {<br/>&nbsp;&nbsp;return accumulator + currentValue;<br/>}, 0);<br/>console.log(sum);"},reduceRight:{definition:"对数组的每个元素执行指定归约操作（从右到左），返回一个累计值",syntax:"array.reduceRight(callback, initialValue)",parameters:"{Function} callback - 对每个元素执行的归约函数<br/>{Any} initialValue (可选) - 归约的初始值",return:"Any",demo:"var arr = [1, 2, 3];<br/>var sum = arr.reduceRight(function(accumulator, currentValue) {<br/>&nbsp;&nbsp;return accumulator + currentValue;<br/>}, 0);<br/>console.log(sum);"},toLocaleString:{definition:"返回数组的元素转换为字符串后的本地化表示",syntax:"array.toLocaleString(locales, options)",parameters:"{String|Array} locales (可选) - 指定要使用的语言或语言数组，默认为宿主环境的默认语言<br/>{Object} options (可选) - 可配置的选项对象",return:"String",demo:"var arr = [1, 2, 3];<br/>console.log(arr.toLocaleString('en-US'));"},toString:{definition:"将数组转换为字符串",syntax:"array.toString()",parameters:"{Null}",return:"String",demo:"var arr = [1, 2, 3];<br/>console.log(arr.toString());"},toReversed:{definition:"返回一个将数组元素颠倒顺序的新数组",syntax:"array.toReversed()",parameters:"{Null}",return:"Array",demo:"var arr = [1, 2, 3];<br/>var reversedArr = arr.toReversed();<br/>console.log(reversedArr);"},toSorted:{definition:"返回一个按升序排列数组元素的新数组",syntax:"array.toSorted()",parameters:"{Null}",return:"Array",demo:"var arr = [3, 1, 2];<br/>var sortedArr = arr.toSorted();<br/>console.log(sortedArr);"},toSpliced:{definition:"返回一个删除指定元素后的新数组",syntax:"array.toSpliced(index, deleteCount)",parameters:"{Number} index - 要删除的元素的索引<br/>{Number} deleteCount - 要删除的元素个数",return:"Array",demo:"var arr = [1, 2, 3, 4, 5];<br/>var splicedArr = arr.toSpliced(2, 2);<br/>console.log(splicedArr);"},with:{definition:"使用给定的对象调用数组的方法",syntax:"array.with(thisArg)",parameters:"{Any} thisArg - 方法调用的 this 值",return:"{Any}",demo:"var arr = [1, 2, 3];<br/>var sum = arr.with(Math).reduce(function(accumulator, currentValue) {<br/>&nbsp;&nbsp;return accumulator + currentValue;<br/>}, 0);<br/>console.log(sum);"}},Boolean:{toString:{definition:"将布尔值转换为字符串",syntax:"boolean.toString()",parameters:"{Null}",return:"String",demo:"var bool = true;<br/>console.log(bool.toString());"},valueOf:{definition:"返回布尔值的原始值",syntax:"boolean.valueOf()",parameters:"{Null}",return:"Boolean",demo:"var bool = new Boolean(true);<br/>console.log(bool.valueOf());"}},Date:{toString:{definition:"将日期对象转换为字符串",syntax:"date.toString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toString());"},toDateString:{definition:"返回日期的字符串表示，不包含时间部分",syntax:"date.toDateString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toDateString());"},toTimeString:{definition:"返回时间的字符串表示，不包含日期部分",syntax:"date.toTimeString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toTimeString());"},toISOString:{definition:"返回日期对象的字符串表示，采用ISO格式",syntax:"date.toISOString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toISOString());"},toUTCString:{definition:"根据世界时，将日期对象转换为字符串",syntax:"date.toUTCString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toUTCString());"},toGMTString:{definition:"根据格林威治时间，将日期对象转换为字符串",syntax:"date.toGMTString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toGMTString());"},getDate:{definition:"返回日期的天数（1-31）",syntax:"date.getDate()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getDate());"},setDate:{definition:"设置日期的天数",syntax:"date.setDate(day)",parameters:"day: Number (1-31)",return:"Number",demo:"var date = new Date();<br/>date.setDate(15);"},getDay:{definition:"返回星期几的索引（0-6）",syntax:"date.getDay()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getDay());"},getFullYear:{definition:"返回四位数的年份",syntax:"date.getFullYear()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getFullYear());"},setFullYear:{definition:"设置四位数的年份",syntax:"date.setFullYear(year)",parameters:"year: Number",return:"Number",demo:"var date = new Date();<br/>date.setFullYear(2022);"},getHours:{definition:"返回小时数（0-23）",syntax:"date.getHours()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getHours());"},setHours:{definition:"设置小时数",syntax:"date.setHours(hour)",parameters:"hour: Number (0-23)",return:"Number",demo:"var date = new Date();<br/>date.setHours(12);"},getMilliseconds:{definition:"返回毫秒数（0-999）",syntax:"date.getMilliseconds()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getMilliseconds());"},setMilliseconds:{definition:"设置毫秒数",syntax:"date.setMilliseconds(ms)",parameters:"ms: Number (0-999)",return:"Number",demo:"var date = new Date();<br/>date.setMilliseconds(500);"},getMinutes:{definition:"返回分钟数（0-59）",syntax:"date.getMinutes()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getMinutes());"},setMinutes:{definition:"设置分钟数",syntax:"date.setMinutes(minutes)",parameters:"minutes: Number (0-59)",return:"Number",demo:"var date = new Date();<br/>date.setMinutes(30);"},getMonth:{definition:"返回月份的索引（0-11）",syntax:"date.getMonth()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getMonth());"},setMonth:{definition:"设置月份的索引",syntax:"date.setMonth(month)",parameters:"month: Number (0-11)",return:"Number",demo:"var date = new Date();<br/>date.setMonth(9);"},getSeconds:{definition:"返回秒数（0-59）",syntax:"date.getSeconds()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getSeconds());"},setSeconds:{definition:"设置秒数",syntax:"date.setSeconds(seconds)",parameters:"seconds: Number (0-59)",return:"Number",demo:"var date = new Date();<br/>date.setSeconds(45);"},getTime:{definition:"返回自 1970 年 1 月 1 日 00:00:00 UTC 以来的毫秒数",syntax:"date.getTime()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getTime());"},setTime:{definition:"设置日期对象的毫秒数",syntax:"date.setTime(milliseconds)",parameters:"milliseconds: Number",return:"Number",demo:"var date = new Date();<br/>date.setTime(1623934800000);"},getTimezoneOffset:{definition:"返回当前时区与UTC之间的分钟差",syntax:"date.getTimezoneOffset()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getTimezoneOffset());"},getUTCDate:{definition:"根据世界时返回日期的天数（1-31）",syntax:"date.getUTCDate()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCDate());"},setUTCDate:{definition:"根据世界时设置日期的天数",syntax:"date.setUTCDate(day)",parameters:"day: Number (1-31)",return:"Number",demo:"var date = new Date();<br/>date.setUTCDate(20);"},getUTCDay:{definition:"根据世界时返回星期几的索引（0-6）",syntax:"date.getUTCDay()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCDay());"},getUTCFullYear:{definition:"根据世界时返回四位数的年份",syntax:"date.getUTCFullYear()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCFullYear());"},setUTCFullYear:{definition:"根据世界时设置四位数的年份",syntax:"date.setUTCFullYear(year)",parameters:"year: Number",return:"Number",demo:"var date = new Date();<br/>date.setUTCFullYear(2022);"},getUTCHours:{definition:"根据世界时返回小时数（0-23）",syntax:"date.getUTCHours()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCHours());"},setUTCHours:{definition:"根据世界时设置小时数",syntax:"date.setUTCHours(hour)",parameters:"hour: Number (0-23)",return:"Number",demo:"var date = new Date();<br/>date.setUTCHours(8);"},getUTCMilliseconds:{definition:"根据世界时返回毫秒数（0-999）",syntax:"date.getUTCMilliseconds()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCMilliseconds());"},setUTCMilliseconds:{definition:"根据世界时设置毫秒数",syntax:"date.setUTCMilliseconds(ms)",parameters:"ms: Number (0-999)",return:"Number",demo:"var date = new Date();<br/>date.setUTCMilliseconds(500);"},getUTCMinutes:{definition:"根据世界时返回分钟数（0-59）",syntax:"date.getUTCMinutes()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCMinutes());"},setUTCMinutes:{definition:"根据世界时设置分钟数",syntax:"date.setUTCMinutes(minutes)",parameters:"minutes: Number (0-59)",return:"Number",demo:"var date = new Date();<br/>date.setUTCMinutes(30);"},getUTCMonth:{definition:"根据世界时返回月份的索引（0-11）",syntax:"date.getUTCMonth()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCMonth());"},setUTCMonth:{definition:"根据世界时设置月份的索引",syntax:"date.setUTCMonth(month)",parameters:"month: Number (0-11)",return:"Number",demo:"var date = new Date();<br/>date.setUTCMonth(9);"},getUTCSeconds:{definition:"根据世界时返回秒数（0-59）",syntax:"date.getUTCSeconds()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getUTCSeconds());"},setUTCSeconds:{definition:"根据世界时设置秒数",syntax:"date.setUTCSeconds(seconds)",parameters:"seconds: Number (0-59)",return:"Number",demo:"var date = new Date();<br/>date.setUTCSeconds(45);"},valueOf:{definition:"返回日期对象的原始值",syntax:"date.valueOf()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.valueOf());"},getYear:{definition:"返回年份的后两位数",syntax:"date.getYear()",parameters:"{Null}",return:"Number",demo:"var date = new Date();<br/>console.log(date.getYear());"},setYear:{definition:"设置年份的后两位数",syntax:"date.setYear(year)",parameters:"year: Number",return:"Number",demo:"var date = new Date();<br/>date.setYear(22);"},toJSON:{definition:"将日期对象转换为JSON字符串",syntax:"date.toJSON()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toJSON());"},toLocaleString:{definition:"返回日期对象的本地字符串表示",syntax:"date.toLocaleString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toLocaleString());"},toLocaleDateString:{definition:"返回日期对象的本地日期字符串表示",syntax:"date.toLocaleDateString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toLocaleDateString());"},toLocaleTimeString:{definition:"返回日期对象的本地时间字符串表示",syntax:"date.toLocaleTimeString()",parameters:"{Null}",return:"String",demo:"var date = new Date();<br/>console.log(date.toLocaleTimeString());"}},Math:{abs:{definition:"返回一个数的绝对值",syntax:"Math.abs(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.abs(-5));"},acos:{definition:"返回一个数的反余弦值",syntax:"Math.acos(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.acos(0.5));"},acosh:{definition:"返回一个数的反双曲余弦值",syntax:"Math.acosh(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.acosh(2));"},asin:{definition:"返回一个数的反正弦值",syntax:"Math.asin(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.asin(0.5));"},asinh:{definition:"返回一个数的反双曲正弦值",syntax:"Math.asinh(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.asinh(1));"},atan:{definition:"返回一个数的反正切值",syntax:"Math.atan(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.atan(1));"},atanh:{definition:"返回一个数的反双曲正切值",syntax:"Math.atanh(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.atanh(0.5));"},atan2:{definition:"返回两个数的反正切值",syntax:"Math.atan2(y, x)",parameters:"y: Number, x: Number",return:"Number",demo:"console.log(Math.atan2(1, 1));"},ceil:{definition:"对一个数进行上取整",syntax:"Math.ceil(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.ceil(4.3));"},cbrt:{definition:"返回一个数的立方根",syntax:"Math.cbrt(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.cbrt(8));"},expm1:{definition:"返回e的x次方减1的值",syntax:"Math.expm1(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.expm1(1));"},clz32:{definition:"返回一个数在二进制表示中前导零的个数",syntax:"Math.clz32(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.clz32(1));"},cos:{definition:"返回一个数的余弦值",syntax:"Math.cos(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.cos(Math.PI));"},cosh:{definition:"返回一个数的双曲余弦值",syntax:"Math.cosh(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.cosh(0));"},exp:{definition:"返回e的x次方",syntax:"Math.exp(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.exp(1));"},floor:{definition:"对一个数进行下取整",syntax:"Math.floor(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.floor(4.7));"},fround:{definition:"返回一个数的单精度浮点表示",syntax:"Math.fround(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.fround(0.1 + 0.2));"},hypot:{definition:"返回一组数的平方和的平方根",syntax:"Math.hypot(...args)",parameters:"args: Number",return:"Number",demo:"console.log(Math.hypot(3, 4));"},imul:{definition:"返回两个数相乘的32位整数结果",syntax:"Math.imul(x, y)",parameters:"x: Number, y: Number",return:"Number",demo:"console.log(Math.imul(2, 3));"},log:{definition:"返回一个数的自然对数",syntax:"Math.log(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.log(10));"},log1p:{definition:"返回一个数加1的自然对数",syntax:"Math.log1p(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.log1p(1));"},log2:{definition:"返回一个数以2为底的对数",syntax:"Math.log2(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.log2(8));"},log10:{definition:"返回一个数以10为底的对数",syntax:"Math.log10(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.log10(100));"},max:{definition:"返回一组数中的最大值",syntax:"Math.max(...args)",parameters:"args: Number",return:"Number",demo:"console.log(Math.max(1, 2, 3));"},min:{definition:"返回一组数中的最小值",syntax:"Math.min(...args)",parameters:"args: Number",return:"Number",demo:"console.log(Math.min(1, 2, 3));"},pow:{definition:"返回一个数的指定次幂",syntax:"Math.pow(base, exponent)",parameters:"base: Number, exponent: Number",return:"Number",demo:"console.log(Math.pow(2, 3));"},random:{definition:"返回一个0到1之间的随机数",syntax:"Math.random()",return:"Number",demo:"console.log(Math.random());"},round:{definition:"对一个数进行四舍五入",syntax:"Math.round(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.round(4.5));"},sign:{definition:"返回一个数的符号",syntax:"Math.sign(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.sign(-3));"},sin:{definition:"返回一个数的正弦值",syntax:"Math.sin(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.sin(Math.PI / 2));"},sinh:{definition:"返回一个数的双曲正弦值",syntax:"Math.sinh(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.sinh(0));"},sqrt:{definition:"返回一个数的平方根",syntax:"Math.sqrt(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.sqrt(9));"},tan:{definition:"返回一个数的正切值",syntax:"Math.tan(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.tan(0));"},tanh:{definition:"返回一个数的双曲正切值",syntax:"Math.tanh(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.tanh(0));"},trunc:{definition:"去除一个数的小数部分，返回整数部分",syntax:"Math.trunc(x)",parameters:"x: Number",return:"Number",demo:"console.log(Math.trunc(4.9));"},E:{definition:"常量，自然对数的底数e",syntax:"Math.E",return:"Number",demo:"console.log(Math.E);"},LN10:{definition:"常量，10的自然对数",syntax:"Math.LN10",return:"Number",demo:"console.log(Math.LN10);"},LN2:{definition:"常量，2的自然对数",syntax:"Math.LN2",return:"Number",demo:"console.log(Math.LN2);"},LOG10E:{definition:"常量，以10为底的e的对数",syntax:"Math.LOG10E",return:"Number",demo:"console.log(Math.LOG10E);"},LOG2E:{definition:"常量，以2为底的e的对数",syntax:"Math.LOG2E",return:"Number",demo:"console.log(Math.LOG2E);"},PI:{definition:"常量，圆周率π",syntax:"Math.PI",return:"Number",demo:"console.log(Math.PI);"},SQRT1_2:{definition:"常量，1/2的平方根",syntax:"Math.SQRT1_2",return:"Number",demo:"console.log(Math.SQRT1_2);"},SQRT2:{definition:"常量，2的平方根",syntax:"Math.SQRT2",return:"Number",demo:"console.log(Math.SQRT2);"}},_:{length:{definition:"返回集合的长度",syntax:"_.length(collection)",parameters:"collection: Array | Object | String",return:"Number",demo:"console.log(_.length([1, 2, 3]));"},name:{definition:"获取函数的名称",syntax:"_.name(func)",parameters:"func: Function",return:"String",demo:"console.log(_.name(_.map));"},arguments:{definition:"获取函数的参数列表",syntax:"_.arguments(func)",parameters:"func: Function",return:"Array",demo:"console.log(_.arguments(_.map));"},caller:{definition:"获取函数的调用者",syntax:"_.caller(func)",parameters:"func: Function",return:"Function",demo:"console.log(_.caller(_.map));"},prototype:{definition:"获取对象的原型",syntax:"_.prototype(value)",parameters:"value: any",return:"Object",demo:"console.log(_.prototype([]));"},templateSettings:{definition:"获取或设置模板引擎的设置",syntax:"_.templateSettings",return:"Object",demo:"console.log(_.templateSettings.escape);"},after:{definition:"创建一个函数，调用n次后才会执行",syntax:"_.after(n, func)",parameters:"n: Number, func: Function",return:"Function",demo:"const greet = _.after(3, () => console.log('Hello!'));<br/>greet();<br/>greet();<br/>greet();"},ary:{definition:"创建一个函数，限制函数的参数个数",syntax:"_.ary(func, n)",parameters:"func: Function, n: Number",return:"Function",demo:"const add = (a, b) => a + b;<br/>const addTwo = _.ary(add, 2);<br/>console.log(addTwo(1, 2, 3));"},assign:{definition:"将源对象的可枚举属性复制到目标对象",syntax:"_.assign(object, ...sources)",parameters:"object: Object, sources: Object",return:"Object",demo:"const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assign(obj1, obj2);<br/>console.log(merged);"},assignIn:{definition:"将所有可枚举属性从一个或多个源对象复制到目标对象",syntax:"_.assignIn(object, ...sources)",parameters:"object: Object, sources: Object",return:"Object",demo:"const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assignIn(obj1, obj2);<br/>console.log(merged);"},assignInWith:{definition:"将所有可枚举属性从一个或多个源对象复制到目标对象，可自定义复制行为",syntax:"_.assignInWith(object, ...sources, customizer)",parameters:"object: Object, sources: Object, customizer: Function",return:"Object",demo:"const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assignInWith(obj1, obj2, (objValue, srcValue) => objValue || srcValue);<br/>console.log(merged);"},assignWith:{definition:"将源对象的可枚举属性复制到目标对象，可自定义复制行为",syntax:"_.assignWith(object, ...sources, customizer)",parameters:"object: Object, sources: Object, customizer: Function",return:"Object",demo:"const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assignWith(obj1, obj2, (objValue, srcValue) => objValue || srcValue);<br/>console.log(merged);"},at:{definition:"从对象中获取指定路径的值",syntax:"_.at(object, paths)",parameters:"object: Object, paths: (string | string[])",return:"Array",demo:"const obj = { a: { b: { c: 3 } } };<br/>const value = _.at(obj, ['a.b.c']);<br/>console.log(value);"},before:{definition:"创建一个函数，调用n次后不再执行",syntax:"_.before(n, func)",parameters:"n: Number, func: Function",return:"Function",demo:"const greet = _.before(3, () => console.log('Hello!'));<br/>greet();<br/>greet();<br/>greet();"},bind:{definition:"创建一个绑定上下文的函数",syntax:"_.bind(func, thisArg, ...partials)",parameters:"func: Function, thisArg: any, partials: any",return:"Function",demo:"const greet = function (message) {<br/>  console.log(`${message} ${this.name}!`);<br/>};<br/>const boundGreet = _.bind(greet, { name: 'Alice' }, 'Hello');<br/>boundGreet();"},bindAll:{definition:"绑定对象中的所有方法到对象本身",syntax:"_.bindAll(object, ...methodNames)",parameters:"object: Object, methodNames: (string | string[])",return:"Object",demo:"const obj = {<br/>  name: 'Alice',<br/>  greet() {<br/>    console.log(`Hello, ${this.name}!`);<br/>  },<br/>};<br/><br/>_.bindAll(obj, 'greet');<br/>obj.greet();"},bindKey:{definition:"创建一个绑定上下文和指定键的函数",syntax:"_.bindKey(object, key, ...partials)",parameters:"object: Object, key: string, partials: any",return:"Function",demo:"const obj = {<br/>  name: 'Alice',<br/>  greet(message) {<br/>    console.log(`${message} ${this.name}!`);<br/>  },<br/>};<br/><br/>const boundGreet = _.bindKey(obj, 'greet', 'Hello');<br/>boundGreet();"},castArray:{definition:"将值转换为数组",syntax:"_.castArray(value)",parameters:"value: any",return:"Array",demo:"console.log(_.castArray(1));<br/>console.log(_.castArray({ a: 1 }));<br/>console.log(_.castArray([1, 2, 3]));"},chain:{definition:"创建一个lodash链式调用的封装对象",syntax:"_.chain(value)",parameters:"value: any",return:"Object",demo:"const result = _.chain([1, 2, 3])<br/>  .map(n => n * 2)<br/>  .filter(n => n % 3 === 0)<br/>  .value();<br/>console.log(result);"},chunk:{definition:"将数组分割成指定大小的块",syntax:"_.chunk(array, size)",parameters:"array: Array, size: Number",return:"Array",demo:"const array = [1, 2, 3, 4, 5, 6];<br/>const chunks = _.chunk(array, 2);<br/>console.log(chunks);"},compact:{definition:"创建一个移除所有假值的数组副本",syntax:"_.compact(array)",parameters:"array: Array",return:"Array",demo:"const array = [1, 0, null, '', undefined, 2, false];<br/>const compactArray = _.compact(array);<br/>console.log(compactArray);"},concat:{definition:"将多个数组或值连接成一个数组",syntax:"_.concat(array, ...values)",parameters:"array: Array, values: any",return:"Array",demo:"const array1 = [1];<br/>const array2 = [2];<br/>const concatenated = _.concat(array1, array2, [3], 4);<br/>console.log(concatenated);"},cond:{definition:"创建一个函数，根据断言函数返回的结果执行对应的函数",syntax:"_.cond(pairs)",parameters:"pairs: Array",return:"Function",demo:"const classify = _.cond([<br/>  [n => n < 0, n => 'negative'],<br/>  [n => n === 0, n => 'zero'],<br/>  [n => n > 0, n => 'positive'],<br/>]);<br/><br/>console.log(classify(5));<br/>console.log(classify(0));<br/>console.log(classify(-5));"},conforms:{definition:"创建一个断言函数，根据对象的属性是否满足特定条件返回结果",syntax:"_.conforms(source)",parameters:"source: Object",return:"Function",demo:"const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const criteria = _.conforms({<br/>  age: age => age < 30,<br/>});<br/><br/>const filtered = _.filter(users, criteria);<br/>console.log(filtered);"},constant:{definition:"创建一个返回固定值的函数",syntax:"_.constant(value)",parameters:"value: any",return:"Function",demo:"const alwaysTrue = _.constant(true);<br/>console.log(alwaysTrue());<br/>console.log(alwaysTrue());"},countBy:{definition:"根据迭代函数的结果对集合中的元素进行分组统计",syntax:"_.countBy(collection, iteratee)",parameters:"collection: Array | Object, iteratee: Function",return:"Object",demo:"const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 25 },<br/>];<br/><br/>const countByAge = _.countBy(users, user => user.age);<br/>console.log(countByAge);"},create:{definition:"创建一个具有指定原型的对象",syntax:"_.create(prototype, properties)",parameters:"prototype: Object, properties: Object",return:"Object",demo:"const person = {<br/>  greet() {<br/>    console.log(`Hello, ${this.name}!`);<br/>  },<br/>};<br/><br/>const alice = _.create(person, { name: 'Alice' });<br/>alice.greet();"},curry:{definition:"创建一个柯里化的函数",syntax:"_.curry(func, arity)",parameters:"func: Function, arity: Number",return:"Function",demo:"const add = (a, b, c) => a + b + c;<br/>const curriedAdd = _.curry(add);<br/>console.log(curriedAdd(1)(2)(3));<br/>console.log(curriedAdd(1, 2)(3));<br/>console.log(curriedAdd(1, 2, 3));"},curryRight:{definition:"从右到左创建一个柯里化的函数",syntax:"_.curryRight(func, arity)",parameters:"func: Function, arity: Number",return:"Function",demo:"const divide = (a, b, c) => a / b / c;<br/>const curriedDivide = _.curryRight(divide);<br/>console.log(curriedDivide(12)(6)(2));<br/>console.log(curriedDivide(12, 6)(2));<br/>console.log(curriedDivide(12, 6, 2));"},debounce:{definition:"创建一个防抖函数，延迟执行函数的调用，直到一段时间内没有新的调用",syntax:"_.debounce(func, wait, options)",parameters:"func: Function, wait: Number, options: Object",return:"Function",demo:"window.addEventListener('scroll', _.debounce(() => {<br/>  console.log('Scroll event debounced.');<br/>}, 200));"},defaults:{definition:"将指定对象的属性复制到目标对象，但只复制目标对象不存在的属性",syntax:"_.defaults(object, ...sources)",parameters:"object: Object, sources: Object",return:"Object",demo:"const obj1 = { a: 1 };<br/>const obj2 = { b: 2, c: 3 };<br/>const merged = _.defaults(obj1, obj2);<br/>console.log(merged);"},defaultsDeep:{definition:"将指定对象的属性复制到目标对象的深层属性中，但只复制目标对象不存在的属性",syntax:"_.defaultsDeep(object, ...sources)",parameters:"object: Object, sources: Object",return:"Object",demo:"const obj1 = { a: { b: 1 } };<br/>const obj2 = { a: { c: 2 } };<br/>const merged = _.defaultsDeep(obj1, obj2);<br/>console.log(merged);"},defer:{definition:"延迟调用函数，直到当前调用栈清空",syntax:"_.defer(func, ...args)",parameters:"func: Function, args: any",return:"Number",demo:"_.defer(() => {<br/>  console.log('Deferred function called.');<br/>});"},delay:{definition:"延迟调用函数，经过指定的延迟时间后执行",syntax:"_.delay(func, wait, ...args)",parameters:"func: Function, wait: Number, args: any",return:"Number",demo:"_.delay(() => {<br/>  console.log('Delayed function called.');<br/>}, 2000);"},difference:{definition:"创建一个剔除所有给定数组中的元素后的数组",syntax:"_.difference(array, ...values)",parameters:"array: Array, values: Array",return:"Array",demo:"const array1 = [1, 2, 3, 4, 5];<br/>const array2 = [3, 4, 5, 6, 7];<br/>const diff = _.difference(array1, array2);<br/>console.log(diff);"},differenceBy:{definition:"根据迭代函数的结果创建一个剔除所有给定数组中的元素后的数组",syntax:"_.differenceBy(array, ...values, iteratee)",parameters:"array: Array, values: Array, iteratee: Function | string",return:"Array",demo:"const array1 = [1.1, 2.2, 3.3, 4.4, 5.5];<br/>const array2 = [3.3, 4.4, 5.5, 6.6, 7.7];<br/>const diff = _.differenceBy(array1, array2, Math.floor);<br/>console.log(diff);"},differenceWith:{definition:"使用比较函数创建一个剔除所有给定数组中的元素后的数组",syntax:"_.differenceWith(array, values, comparator)",parameters:"array: Array, values: Array, comparator: Function",return:"Array",demo:"const array1 = [{ x: 1, y: 2 }, { x: 2, y: 3 }];<br/>const array2 = [{ x: 1, y: 2 }];<br/>const diff = _.differenceWith(array1, array2, _.isEqual);<br/>console.log(diff);"},drop:{definition:"创建一个剔除指定数量元素后的数组",syntax:"_.drop(array, n)",parameters:"array: Array, n: Number",return:"Array",demo:"const array = [1, 2, 3, 4, 5];<br/>const dropped = _.drop(array, 2);<br/>console.log(dropped);"},dropRight:{definition:"创建一个剔除指定数量元素后的倒序数组",syntax:"_.dropRight(array, n)",parameters:"array: Array, n: Number",return:"Array",demo:"const array = [1, 2, 3, 4, 5];<br/>const droppedRight = _.dropRight(array, 2);<br/>console.log(droppedRight);"},dropRightWhile:{definition:"创建一个剔除满足条件的元素后的倒序数组",syntax:"_.dropRightWhile(array, predicate)",parameters:"array: Array, predicate: Function | Object",return:"Array",demo:"const users = [<br/>  { name: 'Alice', active: true },<br/>  { name: 'Bob', active: true },<br/>  { name: 'Charlie', active: false },<br/>];<br/><br/>const droppedRight = _.dropRightWhile(users, user => !user.active);<br/>console.log(droppedRight);"},dropWhile:{definition:"创建一个剔除满足条件的元素后的数组",syntax:"_.dropWhile(array, predicate)",parameters:"array: Array, predicate: Function | Object",return:"Array",demo:"const users = [<br/>  { name: 'Alice', active: false },<br/>  { name: 'Bob', active: false },<br/>  { name: 'Charlie', active: true },<br/>];<br/><br/>const dropped = _.dropWhile(users, user => !user.active);<br/>console.log(dropped);"},fill:{definition:"用指定值填充数组的元素",syntax:"_.fill(array, value, start, end)",parameters:"array: Array, value: any, start: Number, end: Number",return:"Array",demo:"const array = [1, 2, 3, 4, 5];<br/>_.fill(array, 'a', 1, 4);<br/>console.log(array);"},filter:{definition:"根据断言函数筛选出符合条件的元素",syntax:"_.filter(collection, predicate)",parameters:"collection: Array | Object, predicate: Function | Object",return:"Array",demo:"const users = [<br/>  { name: 'Alice', active: true },<br/>  { name: 'Bob', active: false },<br/>  { name: 'Charlie', active: true },<br/>];<br/><br/>const filtered = _.filter(users, user => user.active);<br/>console.log(filtered);"},flatMap:{definition:"先映射每个元素，然后将结果扁平化为一个新数组",syntax:"_.flatMap(collection, iteratee)",parameters:"collection: Array | Object, iteratee: Function",return:"Array",demo:"const array = [1, 2, 3];<br/>const doubled = _.flatMap(array, num => [num, num * 2]);<br/>console.log(doubled);"},flatMapDeep:{definition:"递归地先映射每个元素，然后将结果扁平化为一个新数组",syntax:"_.flatMapDeep(collection, iteratee)",parameters:"collection: Array | Object, iteratee: Function",return:"Array",demo:"const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flatMapDeep(array, num => [num, num * 2]);<br/>console.log(flattened);"},flatMapDepth:{definition:"指定递归深度地先映射每个元素，然后将结果扁平化为一个新数组",syntax:"_.flatMapDepth(collection, iteratee, depth)",parameters:"collection: Array | Object, iteratee: Function, depth: Number",return:"Array",demo:"const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flatMapDepth(array, num => [num, num * 2], 2);<br/>console.log(flattened);"},flatten:{definition:"扁平化数组",syntax:"_.flatten(array)",parameters:"array: Array",return:"Array",demo:"const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flatten(array);<br/>console.log(flattened);"},flattenDeep:{definition:"递归地扁平化数组",syntax:"_.flattenDeep(array)",parameters:"array: Array",return:"Array",demo:"const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flattenDeep(array);<br/>console.log(flattened);"},flattenDepth:{definition:"指定递归深度地扁平化数组",syntax:"_.flattenDepth(array, depth)",parameters:"array: Array, depth: Number",return:"Array",demo:"const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flattenDepth(array, 2);<br/>console.log(flattened);"},flip:{definition:"创建一个接受参数顺序相反的函数",syntax:"_.flip(func)",parameters:"func: Function",return:"Function",demo:"const subtract = (a, b) => a - b;<br/>const flippedSubtract = _.flip(subtract);<br/>console.log(flippedSubtract(5, 10));"},flow:{definition:"创建一个函数，依次调用给定的函数，将每个函数的返回值作为下一个函数的参数",syntax:"_.flow(...funcs)",parameters:"funcs: Function[]",return:"Function",demo:"const add = (a, b) => a + b;<br/>const square = x => x * x;<br/>const addThenSquare = _.flow(add, square);<br/>console.log(addThenSquare(2, 3));"},flowRight:{definition:"创建一个函数，依次调用给定的函数，将每个函数的返回值作为下一个函数的参数（从右到左）",syntax:"_.flowRight(...funcs)",parameters:"funcs: Function[]",return:"Function",demo:"const add = (a, b) => a + b;<br/>const square = x => x * x;<br/>const squareThenAdd = _.flowRight(square, add);<br/>console.log(squareThenAdd(2, 3));"},fromPairs:{definition:"将键值对数组转换为对象",syntax:"_.fromPairs(pairs)",parameters:"pairs: Array",return:"Object",demo:"const pairs = [['a', 1], ['b', 2], ['c', 3]];<br/>const obj = _.fromPairs(pairs);<br/>console.log(obj);"},functions:{definition:"获取对象自身可枚举属性名组成的数组",syntax:"_.functions(object)",parameters:"object: Object",return:"Array",demo:"const object = {<br/>  a: () => {},<br/>  b: () => {},<br/>  c: () => {}<br/>};<br/><br/>const funcs = _.functions(object);<br/>console.log(funcs);"},functionsIn:{definition:"获取对象自身和继承的可枚举属性名组成的数组",syntax:"_.functionsIn(object)",parameters:"object: Object",return:"Array",demo:"function Foo() {<br/>  this.a = () => {};<br/>  this.b = () => {};<br/>}<br/><br/>Foo.prototype.c = () => {};<br/><br/>const object = new Foo();<br/>const funcs = _.functionsIn(object);<br/>console.log(funcs);"},groupBy:{definition:"根据指定条件对集合进行分组",syntax:"_.groupBy(collection, iteratee)",parameters:"collection: Array | Object, iteratee: Function | Object",return:"Object",demo:"const users = [<br/>  { name: 'Alice', age: 20 },<br/>  { name: 'Bob', age: 25 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const grouped = _.groupBy(users, 'age');<br/>console.log(grouped);"},initial:{definition:"获取除了最后一个元素外的所有元素组成的数组",syntax:"_.initial(array)",parameters:"array: Array",return:"Array",demo:"const array = [1, 2, 3, 4, 5];<br/>const initial = _.initial(array);<br/>console.log(initial);"},intersection:{definition:"创建一个包含所有给定数组中共有元素的数组",syntax:"_.intersection(...arrays)",parameters:"arrays: Array[]",return:"Array",demo:"const array1 = [1, 2, 3];<br/>const array2 = [2, 3, 4];<br/>const array3 = [3, 4, 5];<br/>const intersection = _.intersection(array1, array2, array3);<br/>console.log(intersection);"},intersectionBy:{definition:"使用迭代函数创建一个包含所有给定数组中共有元素的数组",syntax:"_.intersectionBy(...arrays, iteratee)",parameters:"arrays: Array[], iteratee: Function",return:"Array",demo:"const array1 = [1.1, 2.2, 3.3];<br/>const array2 = [2.2, 3.3, 4.4];<br/>const array3 = [3.3, 4.4, 5.5];<br/>const intersection = _.intersectionBy(array1, array2, array3, Math.floor);<br/>console.log(intersection);"},intersectionWith:{definition:"使用比较函数创建一个包含所有给定数组中共有元素的数组",syntax:"_.intersectionWith(...arrays, comparator)",parameters:"arrays: Array[], comparator: Function",return:"Array",demo:"const array1 = [{ x: 1, y: 2 }, { x: 2, y: 3 }];<br/>const array2 = [{ x: 2, y: 3 }, { x: 3, y: 4 }];<br/>const array3 = [{ x: 3, y: 4 }, { x: 4, y: 5 }];<br/>const intersection = _.intersectionWith(array1, array2, array3, _.isEqual);<br/>console.log(intersection);"},invert:{definition:"创建一个对象，其键值对是原始对象的值和键的对应关系",syntax:"_.invert(object)",parameters:"object: Object",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const inverted = _.invert(object);<br/>console.log(inverted);"},invertBy:{definition:"根据迭代函数创建一个对象，其键值对是原始对象的值和键的对应关系",syntax:"_.invertBy(object, iteratee)",parameters:"object: Object, iteratee: Function",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const inverted = _.invertBy(object, String);<br/>console.log(inverted);"},invokeMap:{definition:"对集合中的每个元素调用相应的方法，并返回结果组成的数组",syntax:"_.invokeMap(collection, path, ...args)",parameters:"collection: Array | Object, path: Function | Array | string, args: any[]",return:"Array",demo:"const objects = [{ a: 1, b: 2 }, { a: 3, b: 4 }];<br/>const result = _.invokeMap(objects, 'a.toFixed', 1);<br/>console.log(result);"},iteratee:{definition:"转换参数为一个可以作为迭代函数的函数",syntax:"_.iteratee(value)",parameters:"value: any",return:"Function",demo:"const iteratee = _.iteratee('a.b.c');<br/>console.log(iteratee({ a: { b: { c: 42 } } }));"},keyBy:{definition:"根据指定条件将集合转换为以指定键为索引的对象",syntax:"_.keyBy(collection, iteratee)",parameters:"collection: Array | Object, iteratee: Function | Object | string",return:"Object",demo:"const users = [<br/>  { id: '1', name: 'Alice' },<br/>  { id: '2', name: 'Bob' },<br/>  { id: '3', name: 'Charlie' },<br/>];<br/><br/>const indexed = _.keyBy(users, 'id');<br/>console.log(indexed);"},keys:{definition:"获取对象自身可枚举属性名组成的数组",syntax:"_.keys(object)",parameters:"object: Object",return:"Array",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const keys = _.keys(object);<br/>console.log(keys);"},keysIn:{definition:"获取对象自身和继承的可枚举属性名组成的数组",syntax:"_.keysIn(object)",parameters:"object: Object",return:"Array",demo:"function Foo() {<br/>  this.a = 1;<br/>  this.b = 2;<br/>}<br/><br/>Foo.prototype.c = 3;<br/><br/>const object = new Foo();<br/>const keys = _.keysIn(object);<br/>console.log(keys);"},map:{definition:"对集合中的每个元素调用相应的方法，并返回结果组成的数组",syntax:"_.map(collection, iteratee)",parameters:"collection: Array | Object, iteratee: Function",return:"Array",demo:"const array = [1, 2, 3];<br/>const doubled = _.map(array, n => n * 2);<br/>console.log(doubled);"},mapKeys:{definition:"根据指定条件将对象的键转换为新的键",syntax:"_.mapKeys(object, iteratee)",parameters:"object: Object, iteratee: Function",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const mapped = _.mapKeys(object, (value, key) => key.toUpperCase());<br/>console.log(mapped);"},mapValues:{definition:"根据指定条件对对象的值进行转换",syntax:"_.mapValues(object, iteratee)",parameters:"object: Object, iteratee: Function",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const mapped = _.mapValues(object, n => n * 2);<br/>console.log(mapped);"},matches:{definition:"创建一个深度比较的对象",syntax:"_.matches(source)",parameters:"source: Object",return:"Function",demo:"const object = { a: 1, b: 2 };<br/>const matcher = _.matches({ b: 2 });<br/>console.log(matcher(object));"},matchesProperty:{definition:"创建一个基于对象的属性和值的深度比较的函数",syntax:"_.matchesProperty(path, srcValue)",parameters:"path: Array | string, srcValue: any",return:"Function",demo:"const object = { a: 1, b: 2 };<br/>const matcher = _.matchesProperty('b', 2);<br/>console.log(matcher(object));"},memoize:{definition:"创建一个记忆化的函数，缓存其结果",syntax:"_.memoize(func, [resolver])",parameters:"func: Function, resolver: Function",return:"Function",demo:"const expensiveFunc = n => {<br/>  console.log('Computing...');<br/>  return n * 2;<br/>};<br/><br/>const memoizedFunc = _.memoize(expensiveFunc);<br/>console.log(memoizedFunc(5));<br/>console.log(memoizedFunc(5)); // Output should be cached"},merge:{definition:"将源对象的可枚举属性合并到目标对象",syntax:"_.merge(object, ...sources)",parameters:"object: Object, sources: Object[]",return:"Object",demo:"const object = { a: 1 };<br/>const source = { b: 2 };<br/>const merged = _.merge(object, source);<br/>console.log(merged);"},mergeWith:{definition:"使用自定义合并函数将源对象的可枚举属性合并到目标对象",syntax:"_.mergeWith(object, ...sources, customizer)",parameters:"object: Object, sources: Object[], customizer: Function",return:"Object",demo:"const object = { a: [1], b: [2] };<br/>const source = { a: [3], b: [4] };<br/><br/>const merged = _.mergeWith(object, source, (objValue, srcValue) => objValue.concat(srcValue));<br/>console.log(merged);"},method:{definition:"创建一个调用给定对象的指定方法的函数",syntax:"_.method(path, [...args])",parameters:"path: Array | string, args: any[]",return:"Function",demo:"const objects = [<br/>  { name: 'Alice', age: 20 },<br/>  { name: 'Bob', age: 25 },<br/>  { name: 'Charlie', age: 30 },<br/>];<br/><br/>const getName = _.method('name');<br/>const names = _.map(objects, getName);<br/>console.log(names);"},methodOf:{definition:"创建一个在给定对象上调用指定方法的函数",syntax:"_.methodOf(object, [...args])",parameters:"object: Object, args: any[]",return:"Function",demo:"const object = {<br/>  greeting: 'Hello',<br/>  greet(name) {<br/>    return `${this.greeting}, ${name}!`;<br/>  },<br/>};<br/><br/>const greet = _.methodOf(object);<br/>console.log(greet('Alice'));"},mixin:{definition:"向Lodash对象中添加自定义方法",syntax:"_.mixin([options={}], [source=lodash])",parameters:"options: Object, source: Object",return:"void",demo:"_.mixin({<br/>  multiply(a, b) {<br/>    return a * b;<br/>  }<br/>});<br/><br/>console.log(_.multiply(2, 3));"},negate:{definition:"创建一个否定给定函数返回结果的函数",syntax:"_.negate(predicate)",parameters:"predicate: Function",return:"Function",demo:"const isEven = n => n % 2 === 0;<br/>const isOdd = _.negate(isEven);<br/><br/>console.log(isOdd(3)); // true<br/>console.log(isOdd(4)); // false"},nthArg:{definition:"创建一个接受参数数组并返回第n个参数的函数",syntax:"_.nthArg(n)",parameters:"n: number",return:"Function",demo:"const func = _.nthArg(1);<br/>console.log(func('a', 'b', 'c')); // 'b'"},omit:{definition:"创建一个排除指定属性的对象副本",syntax:"_.omit(object, [...props])",parameters:"object: Object, props: string[]",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const omitted = _.omit(object, ['a', 'c']);<br/>console.log(omitted);"},omitBy:{definition:"根据断言函数排除对象的属性",syntax:"_.omitBy(object, predicate)",parameters:"object: Object, predicate: Function",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const omitted = _.omitBy(object, n => n % 2 === 0);<br/>console.log(omitted);"},once:{definition:"创建一个函数，调用不超过一次",syntax:"_.once(func)",parameters:"func: Function",return:"Function",demo:"const initialize = _.once(() => {<br/>  console.log('Initializing...');<br/>});<br/><br/>initialize(); // 'Initializing...'<br/>initialize(); // (no output)"},orderBy:{definition:"根据指定条件对集合进行排序",syntax:"_.orderBy(collection, iteratees, orders)",parameters:"collection: Array | Object, iteratees: Function[] | string[], orders: string[]",return:"Array",demo:"const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const sorted = _.orderBy(users, ['name', 'age'], ['asc', 'desc']);<br/>console.log(sorted);"},over:{definition:"创建一个接受一系列函数并返回其结果数组的函数",syntax:"_.over(...fns)",parameters:"fns: Function[]",return:"Function",demo:"const square = n => n * n;<br/>const double = n => n * 2;<br/>const squareAndDouble = _.over(square, double);<br/>console.log(squareAndDouble(5)); // [25, 10]"},overArgs:{definition:"创建一个函数，调用时将参数转换为对应函数的预期参数",syntax:"_.overArgs(func, [transforms])",parameters:"func: Function, transforms: Function[] | Object[]",return:"Function",demo:"const greet = (firstName, lastName) => `Hello, ${firstName} ${lastName}!`;<br/>const capitalize = str => str.toUpperCase();<br/><br/>const greetAndCapitalize = _.overArgs(greet, [capitalize, capitalize]);<br/>console.log(greetAndCapitalize('alice', 'smith')); // 'Hello, ALICE SMITH!'"},overEvery:{definition:"创建一个接受一系列断言函数并返回布尔值的函数，当所有断言函数都返回truthy时，返回true",syntax:"_.overEvery(...predicates)",parameters:"predicates: Function[]",return:"Function",demo:"const isEven = n => n % 2 === 0;<br/>const isPositive = n => n > 0;<br/>const isEvenAndPositive = _.overEvery(isEven, isPositive);<br/><br/>console.log(isEvenAndPositive(4)); // true<br/>console.log(isEvenAndPositive(-2)); // false"},overSome:{definition:"创建一个接受一系列断言函数并返回布尔值的函数，当至少有一个断言函数返回truthy时，返回true",syntax:"_.overSome(...predicates)",parameters:"predicates: Function[]",return:"Function",demo:"const isEven = n => n % 2 === 0;<br/>const isPositive = n => n > 0;<br/>const isEvenOrPositive = _.overSome(isEven, isPositive);<br/><br/>console.log(isEvenOrPositive(4)); // true<br/>console.log(isEvenOrPositive(-2)); // true"},partial:{definition:"创建一个函数，调用时传递部分参数，返回一个接受剩余参数的函数",syntax:"_.partial(func, [...partials])",parameters:"func: Function, partials: any[]",return:"Function",demo:"const greet = (greeting, name) => `${greeting}, ${name}!`;<br/>const sayHello = _.partial(greet, 'Hello');<br/>console.log(sayHello('Alice')); // 'Hello, Alice!'"},partialRight:{definition:"创建一个函数，调用时传递部分参数，返回一个接受先前传递的参数的函数",syntax:"_.partialRight(func, [...partials])",parameters:"func: Function, partials: any[]",return:"Function",demo:"const greet = (greeting, name) => `${greeting}, ${name}!`;<br/>const greetAlice = _.partialRight(greet, 'Alice');<br/>console.log(greetAlice('Hello')); // 'Hello, Alice!'"},partition:{definition:"根据断言函数将集合的元素分成两个数组，一个是符合条件的元素，另一个是不符合条件的元素",syntax:"_.partition(collection, predicate)",parameters:"collection: Array | Object, predicate: Function",return:"Array",demo:"const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const [adults, minors] = _.partition(users, user => user.age >= 18);<br/>console.log(adults);<br/>console.log(minors);"},pick:{definition:"创建一个从对象中选择指定属性的对象副本",syntax:"_.pick(object, [...props])",parameters:"object: Object, props: string[]",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const picked = _.pick(object, ['a', 'c']);<br/>console.log(picked);"},pickBy:{definition:"根据断言函数选择对象的属性",syntax:"_.pickBy(object, predicate)",parameters:"object: Object, predicate: Function",return:"Object",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const picked = _.pickBy(object, n => n % 2 === 0);<br/>console.log(picked);"},property:{definition:"创建一个返回给定对象的指定属性的函数",syntax:"_.property(path)",parameters:"path: Array | string",return:"Function",demo:"const objects = [<br/>  { name: 'Alice', age: 20 },<br/>  { name: 'Bob', age: 25 },<br/>  { name: 'Charlie', age: 30 },<br/>];<br/><br/>const getAge = _.property('age');<br/>const ages = _.map(objects, getAge);<br/>console.log(ages);"},propertyOf:{definition:"创建一个返回给定对象指定属性的函数",syntax:"_.propertyOf(object)",parameters:"object: Object",return:"Function",demo:"const object = { a: { b: { c: 1 } } };<br/>const getValue = _.propertyOf(object);<br/>console.log(getValue('a.b.c')); // 1"},pull:{definition:"从数组中移除指定的值，并返回移除的值组成的数组",syntax:"_.pull(array, ...values)",parameters:"array: any[], values: any[]",return:"Array",demo:"const array = [1, 2, 3, 1, 2, 3];<br/>const removed = _.pull(array, 2, 3);<br/>console.log(removed); // [2, 3]<br/>console.log(array); // [1, 1]"},pullAll:{definition:"从数组中移除指定的值，并返回移除的值组成的数组",syntax:"_.pullAll(array, values)",parameters:"array: any[], values: any[]",return:"Array",demo:"const array = [1, 2, 3, 1, 2, 3];<br/>const removed = _.pullAll(array, [2, 3]);<br/>console.log(removed); // [2, 3]<br/>console.log(array); // [1, 1]"},pullAllBy:{definition:"根据迭代函数从数组中移除指定的值，并返回移除的值组成的数组",syntax:"_.pullAllBy(array, values, [iteratee=_.identity])",parameters:"array: any[], values: any[], iteratee: Function",return:"Array",demo:"const array = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 1 }, { x: 2 }, { x: 3 }];<br/>const removed = _.pullAllBy(array, [{ x: 2 }, { x: 3 }], 'x');<br/>console.log(removed); // [{ x: 2 }, { x: 3 }]<br/>console.log(array); // [{ x: 1 }, { x: 1 }]"},pullAllWith:{definition:"使用比较函数从数组中移除指定的值，并返回移除的值组成的数组",syntax:"_.pullAllWith(array, values, [comparator])",parameters:"array: any[], values: any[], comparator: Function",return:"Array",demo:"const array = [{ x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }];<br/>const removed = _.pullAllWith(array, [{ x: 2, y: 2 }, { x: 3, y: 3 }], _.isEqual);<br/>console.log(removed); // [{ x: 2, y: 2 }, { x: 3, y: 3 }]<br/>console.log(array); // [{ x: 1, y: 1 }, { x: 1, y: 1 }]"},pullAt:{definition:"根据索引值从数组中移除对应的元素，并返回移除的元素组成的数组",syntax:"_.pullAt(array, [...indexes])",parameters:"array: any[], indexes: number[]",return:"Array",demo:"const array = ['a', 'b', 'c', 'd'];<br/>const removed = _.pullAt(array, [1, 3]);<br/>console.log(removed); // ['b', 'd']<br/>console.log(array); // ['a', 'c']"},range:{definition:"创建一个包含指定范围内数字的数组",syntax:"_.range([start=0], end, [step=1])",parameters:"start: number, end: number, step: number",return:"Array",demo:"const numbers = _.range(1, 10, 2);<br/>console.log(numbers); // [1, 3, 5, 7, 9]"},rangeRight:{definition:"创建一个包含指定范围内数字的数组，从右到左生成",syntax:"_.rangeRight([start=0], end, [step=1])",parameters:"start: number, end: number, step: number",return:"Array",demo:"const numbers = _.rangeRight(1, 10, 2);<br/>console.log(numbers); // [9, 7, 5, 3, 1]"},rearg:{definition:"创建一个函数，调用时根据指定的参数索引顺序重新排列参数",syntax:"_.rearg(func, indexes)",parameters:"func: Function, indexes: number[]",return:"Function",demo:"const greet = (greeting, name) => `${greeting}, ${name}!`;<br/>const greetAndReverse = _.rearg(greet, [1, 0]);<br/>console.log(greetAndReverse('Hello', 'Alice')); // 'Alice, Hello!'"},reject:{definition:"根据断言函数排除集合的元素",syntax:"_.reject(collection, predicate)",parameters:"collection: Array | Object, predicate: Function",return:"Array",demo:"const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const youngUsers = _.reject(users, user => user.age >= 30);<br/>console.log(youngUsers);"},remove:{definition:"根据断言函数移除数组中符合条件的元素，并返回移除的元素组成的数组",syntax:"_.remove(array, predicate)",parameters:"array: any[], predicate: Function",return:"Array",demo:"const array = [1, 2, 3, 4, 5];<br/>const removed = _.remove(array, n => n % 2 === 0);<br/>console.log(removed); // [2, 4]<br/>console.log(array); // [1, 3, 5]"},rest:{definition:"创建一个函数，调用时从指定索引开始接收参数",syntax:"_.rest(func, [start=func.length-1])",parameters:"func: Function, start: number",return:"Function",demo:"const logArguments = (...args) => console.log(args);<br/>const logRestArguments = _.rest(logArguments, 2);<br/><br/>logRestArguments(1, 2, 3, 4); // [3, 4]"},reverse:{definition:"反转数组或字符串",syntax:"_.reverse(collection)",parameters:"collection: Array | string",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const reversedArray = _.reverse(array);<br/>console.log(reversedArray); // [5, 4, 3, 2, 1]<br/><br/>const string = 'Hello';<br/>const reversedString = _.reverse(string);<br/>console.log(reversedString); // 'olleH'"},sampleSize:{definition:"从数组或字符串中随机获取指定数量的元素",syntax:"_.sampleSize(collection, n)",parameters:"collection: Array | string, n: number",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const sample = _.sampleSize(array, 3);<br/>console.log(sample); // [2, 4, 1]<br/><br/>const string = 'Hello';<br/>const sampleString = _.sampleSize(string, 2);<br/>console.log(sampleString); // 'ol'"},set:{definition:"设置对象指定路径上的值。如果路径不存在，则会创建它",syntax:"_.set(object, path, value)",parameters:"object: Object, path: Array | string, value: any",return:"Object",demo:"const object = {};<br/><br/>_.set(object, 'a[0].b.c', 42);<br/>console.log(object); // { a: [{ b: { c: 42 } }] }"},setWith:{definition:"设置对象指定路径上的值。如果路径不存在，则会创建它。使用自定义的值计算函数",syntax:"_.setWith(object, path, value, customizer)",parameters:"object: Object, path: Array | string, value: any, customizer: Function",return:"Object",demo:"const object = {};<br/><br/>_.setWith(object, 'a[0].b.c', 42, Object);<br/>console.log(object); // { a: [{ b: { c: 42 } }] }"},shuffle:{definition:"随机打乱数组或字符串的顺序",syntax:"_.shuffle(collection)",parameters:"collection: Array | string",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const shuffledArray = _.shuffle(array);<br/>console.log(shuffledArray); // [4, 2, 1, 5, 3]<br/><br/>const string = 'Hello';<br/>const shuffledString = _.shuffle(string);<br/>console.log(shuffledString); // 'oHelL'"},slice:{definition:"返回数组或字符串的片段",syntax:"_.slice(collection, [start=0], [end=collection.length])",parameters:"collection: Array | string, start: number, end: number",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const slicedArray = _.slice(array, 1, 3);<br/>console.log(slicedArray); // [2, 3]<br/><br/>const string = 'Hello';<br/>const slicedString = _.slice(string, 1, 4);<br/>console.log(slicedString); // 'ell'"},sortBy:{definition:"根据指定的属性排序集合的元素",syntax:"_.sortBy(collection, [iteratees])",parameters:"collection: Array | Object, iteratees: (Function | Array)",return:"Array",demo:"const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const sortedUsers = _.sortBy(users, ['age']);<br/>console.log(sortedUsers);"},sortedUniq:{definition:"返回一个去重并排序的数组",syntax:"_.sortedUniq(array)",parameters:"array: Array",return:"Array",demo:"const array = [1, 2, 2, 3, 4, 4, 5];<br/>const sortedUniqArray = _.sortedUniq(array);<br/>console.log(sortedUniqArray); // [1, 2, 3, 4, 5]"},sortedUniqBy:{definition:"根据迭代函数返回的结果对数组进行去重并排序",syntax:"_.sortedUniqBy(array, [iteratee=_.identity])",parameters:"array: Array, iteratee: Function",return:"Array",demo:"const array = [1.1, 1.2, 2.3, 2.4, 3.5, 3.6];<br/>const sortedUniqByArray = _.sortedUniqBy(array, Math.floor);<br/>console.log(sortedUniqByArray); // [1.1, 2.3, 3.5]"},split:{definition:"将字符串按指定的分隔符拆分成数组",syntax:"_.split(string, separator, [limit])",parameters:"string: string, separator: RegExp | string, limit: number",return:"Array",demo:"const string = 'Hello, World!';<br/>const words = _.split(string, ' ');<br/>console.log(words); // ['Hello,', 'World!']"},spread:{definition:"创建一个函数，调用时将接收到的参数作为单独的参数传递给另一个函数",syntax:"_.spread(func, [start=0])",parameters:"func: Function, start: number",return:"Function",demo:"const sum = (a, b, c) => a + b + c;<br/>const spreadSum = _.spread(sum);<br/><br/>console.log(spreadSum([1, 2, 3])); // 6"},tail:{definition:"返回数组或字符串的除第一个元素外的剩余部分",syntax:"_.tail(array)",parameters:"array: Array | string",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const tailArray = _.tail(array);<br/>console.log(tailArray); // [2, 3, 4, 5]<br/><br/>const string = 'Hello';<br/>const tailString = _.tail(string);<br/>console.log(tailString); // 'ello'"},take:{definition:"返回数组或字符串的前n个元素",syntax:"_.take(array, [n=1])",parameters:"array: Array | string, n: number",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const takenArray = _.take(array, 3);<br/>console.log(takenArray); // [1, 2, 3]<br/><br/>const string = 'Hello';<br/>const takenString = _.take(string, 2);<br/>console.log(takenString); // 'He'"},takeRight:{definition:"返回数组或字符串的后n个元素",syntax:"_.takeRight(array, [n=1])",parameters:"array: Array | string, n: number",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const takenRightArray = _.takeRight(array, 3);<br/>console.log(takenRightArray); // [3, 4, 5]<br/><br/>const string = 'Hello';<br/>const takenRightString = _.takeRight(string, 2);<br/>console.log(takenRightString); // 'lo'"},takeRightWhile:{definition:"从数组或字符串的末尾开始获取元素，直到断言函数返回假值",syntax:"_.takeRightWhile(array, [predicate=_.identity])",parameters:"array: Array | string, predicate: Function",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const takenRightWhileArray = _.takeRightWhile(array, n => n > 2);<br/>console.log(takenRightWhileArray); // [3, 4, 5]<br/><br/>const string = 'Hello';<br/>const takenRightWhileString = _.takeRightWhile(string, c => c !== 'o');<br/>console.log(takenRightWhileString); // 'Hell'"},takeWhile:{definition:"从数组或字符串的开头开始获取元素，直到断言函数返回假值",syntax:"_.takeWhile(array, [predicate=_.identity])",parameters:"array: Array | string, predicate: Function",return:"Array | string",demo:"const array = [1, 2, 3, 4, 5];<br/>const takenWhileArray = _.takeWhile(array, n => n < 4);<br/>console.log(takenWhileArray); // [1, 2, 3]<br/><br/>const string = 'Hello';<br/>const takenWhileString = _.takeWhile(string, c => c !== 'o');<br/>console.log(takenWhileString); // 'Hell'"},tap:{definition:"调用函数，并传递值，然后返回该值",syntax:"_.tap(value, interceptor)",parameters:"value: any, interceptor: Function",return:"any",demo:"const greet = name => `Hello, ${name}!`;<br/>const tappedGreet = _.tap(greet, console.log);<br/><br/>tappedGreet('Alice'); // 'Hello, Alice!' (printed to console)"},throttle:{definition:"创建一个节流函数，确保在指定的时间间隔内最多只调用一次函数",syntax:"_.throttle(func, [wait=0], [options={}])",parameters:"func: Function, wait: number, options: Object",return:"Function",demo:"const logMessage = message => console.log(message);<br/>const throttledLog = _.throttle(logMessage, 1000);<br/><br/>throttledLog('Hello'); // 'Hello' (printed to console)<br/>throttledLog('World'); // (nothing printed)<br/><br/>// After 1 second<br/>throttledLog('OpenAI'); // 'OpenAI' (printed to console)"},thru:{definition:"通过将值传递给函数并返回该函数的结果来链式调用方法",syntax:"_.thru(value, interceptor)",parameters:"value: any, interceptor: Function",return:"any",demo:"const double = n => n * 2;<br/>const result = _.thru(5, double);<br/>console.log(result); // 10"},toArray:{definition:"将值转换为数组",syntax:"_.toArray(value)",parameters:"value: any",return:"Array",demo:"const object = { a: 1, b: 2 };<br/>const array = _.toArray(object);<br/>console.log(array); // [1, 2]<br/><br/>const string = 'Hello';<br/>const stringArray = _.toArray(string);<br/>console.log(stringArray); // ['H', 'e', 'l', 'l', 'o']"},toPairs:{definition:"将对象转换为[key, value]对的数组",syntax:"_.toPairs(object)",parameters:"object: Object",return:"Array",demo:"const object = { a: 1, b: 2 };<br/>const pairs = _.toPairs(object);<br/>console.log(pairs); // [['a', 1], ['b', 2]]"},toPairsIn:{definition:"将对象自身和继承的可枚举属性转换为[key, value]对的数组",syntax:"_.toPairsIn(object)",parameters:"object: Object",return:"Array",demo:"function Shape() {<br/>  this.x = 0;<br/>  this.y = 0;<br/>}<br/><br/>Shape.prototype.z = 0;<br/><br/>const shape = new Shape();<br/>const pairsIn = _.toPairsIn(shape);<br/>console.log(pairsIn); // [['x', 0], ['y', 0], ['z', 0]]"},toPath:{definition:"将字符串转换为路径数组",syntax:"_.toPath(value)",parameters:"value: any",return:"Array",demo:"const path = _.toPath('a.b[0].c');<br/>console.log(path); // ['a', 'b', '0', 'c']"},toPlainObject:{definition:"将对象的原型链上的属性复制到新的普通对象上",syntax:"_.toPlainObject(value)",parameters:"value: any",return:"Object",demo:"const person = Object.create({ name: 'Alice' });<br/>person.age = 25;<br/><br/>const plainObject = _.toPlainObject(person);<br/>console.log(plainObject); // { age: 25 }"},transform:{definition:"对对象的自身和继承的可枚举属性进行迭代并应用转换函数",syntax:"_.transform(object, [iteratee=_.identity], [accumulator])",parameters:"object: Object, iteratee: Function, accumulator: any",return:"any",demo:"const object = { a: 1, b: 2, c: 1 };<br/><br/>const result = _.transform(object, (result, value, key) => {<br/>  (result[value] || (result[value] = [])).push(key);<br/>}, {});<br/><br/>console.log(result); // { '1': ['a', 'c'], '2': ['b'] }"},unary:{definition:"创建一个接受一个参数的函数",syntax:"_.unary(func)",parameters:"func: Function",return:"Function",demo:"const binaryFn = (a, b) => a + b;<br/>const unaryFn = _.unary(binaryFn);<br/><br/>console.log(unaryFn(1, 2)); // 3"},union:{definition:"创建一个按顺序排列的唯一值的数组",syntax:"_.union([arrays])",parameters:"arrays: Array[]",return:"Array",demo:"const array1 = [2];<br/>const array2 = [1, 2];<br/><br/>const unionArray = _.union(array1, array2);<br/>console.log(unionArray); // [2, 1]"},unionBy:{definition:"根据转换函数对数组的元素进行比较，创建一个按顺序排列的唯一值的数组",syntax:"_.unionBy([arrays], [iteratee=_.identity])",parameters:"arrays: Array[], iteratee: Function",return:"Array",demo:"const array1 = [2.1];<br/>const array2 = [1.2, 2.3];<br/><br/>const unionByArray = _.unionBy(array1, array2, Math.floor);<br/>console.log(unionByArray); // [2.1, 1.2]"},unionWith:{definition:"使用比较函数对数组的元素进行比较，创建一个按顺序排列的唯一值的数组",syntax:"_.unionWith([arrays], [comparator])",parameters:"arrays: Array[], comparator: Function",return:"Array",demo:"const objects1 = [{ x: 1, y: 2 }, { x: 2, y: 1 }];<br/>const objects2 = [{ x: 1, y: 1 }, { x: 1, y: 2 }];<br/><br/>const unionWithArray = _.unionWith(objects1, objects2, _.isEqual);<br/>console.log(unionWithArray); // [{ x: 1, y: 2 }, { x: 2, y: 1 }, { x: 1, y: 1 }]"},uniq:{definition:"创建一个去重后的数组",syntax:"_.uniq(array)",parameters:"array: Array",return:"Array",demo:"const array = [1, 2, 2, 3, 3, 4, 5, 5];<br/>const uniqueArray = _.uniq(array);<br/>console.log(uniqueArray); // [1, 2, 3, 4, 5]"},uniqBy:{definition:"根据转换函数创建一个去重后的数组",syntax:"_.uniqBy(array, [iteratee=_.identity])",parameters:"array: Array, iteratee: Function",return:"Array",demo:"const array = [1.1, 1.2, 2.3, 2.4, 3.5];<br/>const uniqueByArray = _.uniqBy(array, Math.floor);<br/>console.log(uniqueByArray); // [1.1, 2.3, 3.5]"},uniqWith:{definition:"使用比较函数创建一个去重后的数组",syntax:"_.uniqWith(array, [comparator])",parameters:"array: Array, comparator: Function",return:"Array",demo:"const objects = [{ x: 1, y: 2 }, { x: 2, y: 1 }, { x: 1, y: 2 }];<br/><br/>const uniqueWithArray = _.uniqWith(objects, _.isEqual);<br/>console.log(uniqueWithArray); // [{ x: 1, y: 2 }, { x: 2, y: 1 }]"},unset:{definition:"从对象中删除指定路径的属性",syntax:"_.unset(object, path)",parameters:"object: Object, path: string | Array",return:"boolean",demo:"const object = { 'a': [{ 'b': { 'c': 7 } }] };<br/><br/>_.unset(object, 'a[0].b.c');<br/>console.log(object); // { 'a': [{}] }"},unzip:{definition:"将多个数组的对应元素组合成新的数组",syntax:"_.unzip(arrays)",parameters:"arrays: Array[]",return:"Array",demo:"const zipped = [['a', 1, true], ['b', 2, false]];<br/>const unzipped = _.unzip(zipped);<br/>console.log(unzipped); // [['a', 'b'], [1, 2], [true, false]]"},unzipWith:{definition:"将多个数组的对应元素组合成新的数组，并使用指定的迭代器对每个组合进行处理",syntax:"_.unzipWith(arrays, [iteratee=_.identity])",parameters:"arrays: Array[], iteratee: Function",return:"Array",demo:"const zipped = [[1, 10, 100], [2, 20, 200]];<br/>const unzippedWith = _.unzipWith(zipped, _.add);<br/>console.log(unzippedWith); // [3, 30, 300]"},update:{definition:"根据指定路径更新对象的属性值",syntax:"_.update(object, path, updater)",parameters:"object: Object, path: string | Array, updater: Function",return:"Object",demo:"const object = { 'a': [{ 'b': { 'c': 3 } }] };<br/><br/>const updatedObject = _.update(object, 'a[0].b.c', n => n * 2);<br/>console.log(updatedObject); // { 'a': [{ 'b': { 'c': 6 } }] }"},updateWith:{definition:"根据指定路径和自定义函数更新对象的属性值",syntax:"_.updateWith(object, path, updater, [customizer])",parameters:"object: Object, path: string | Array, updater: Function, customizer: Function",return:"Object",demo:"const object = { 'a': [{ 'b': { 'c': 3 } }] };<br/><br/>const updatedObject = _.updateWith(object, 'a[0].b.c', n => n * 2);<br/>console.log(updatedObject); // { 'a': [{ 'b': { 'c': 6 } }] }"},values:{definition:"提取对象自身可枚举属性的值，返回一个数组",syntax:"_.values(object)",parameters:"object: Object",return:"Array",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const valuesArray = _.values(object);<br/>console.log(valuesArray); // [1, 2, 3]"},valuesIn:{definition:"提取对象自身和继承的可枚举属性的值，返回一个数组",syntax:"_.valuesIn(object)",parameters:"object: Object",return:"Array",demo:"function Shape() {<br/>  this.x = 0;<br/>  this.y = 0;<br/>}<br/><br/>Shape.prototype.z = 0;<br/><br/>const shape = new Shape();<br/>const valuesInArray = _.valuesIn(shape);<br/>console.log(valuesInArray); // [0, 0, 0]"},without:{definition:"创建一个不包含指定值的数组副本",syntax:"_.without(array, [values])",parameters:"array: Array, values: ...any",return:"Array",demo:"const array = [1, 2, 3, 4, 5];<br/>const newArray = _.without(array, 2, 4);<br/>console.log(newArray); // [1, 3, 5]"},words:{definition:"将字符串拆分为单词数组",syntax:"_.words([string=''], [pattern])",parameters:"string: string, pattern: RegExp",return:"Array",demo:"const sentence = 'Hello, world!';<br/>const wordsArray = _.words(sentence);<br/>console.log(wordsArray); // ['Hello', 'world']"},wrap:{definition:"将函数包装在一个函数中，并将其作为第一个参数传递给封装函数",syntax:"_.wrap(value, [wrapper=identity])",parameters:"value: any, wrapper: Function",return:"Function",demo:"const greet = name => `Hello, ${name}!`;<br/>const wrappedGreet = _.wrap(greet, func => `*${func('John')}*`);<br/>console.log(wrappedGreet()); // '*Hello, John!*'"},xor:{definition:"创建一个排除了所有给定数组的元素后的数组",syntax:"_.xor([arrays])",parameters:"arrays: Array[]",return:"Array",demo:"const array1 = [2, 1];<br/>const array2 = [2, 3];<br/><br/>const xorArray = _.xor(array1, array2);<br/>console.log(xorArray); // [1, 3]"},xorBy:{definition:"根据转换函数对数组进行比较，创建一个排除了所有给定数组的元素后的数组",syntax:"_.xorBy([arrays], [iteratee=_.identity])",parameters:"arrays: Array[], iteratee: Function",return:"Array",demo:"const array1 = [2.1, 1.2];<br/>const array2 = [2.3, 3.4];<br/><br/>const xorByArray = _.xorBy(array1, array2, Math.floor);<br/>console.log(xorByArray); // [1.2, 3.4]"},xorWith:{definition:"使用比较函数对数组进行比较，创建一个排除了所有给定数组的元素后的数组",syntax:"_.xorWith([arrays], [comparator])",parameters:"arrays: Array[], comparator: Function",return:"Array",demo:"const objects1 = [{ x: 1, y: 2 }, { x: 2, y: 1 }];<br/>const objects2 = [{ x: 1, y: 1 }, { x: 1, y: 2 }];<br/><br/>const xorWithArray = _.xorWith(objects1, objects2, _.isEqual);<br/>console.log(xorWithArray); // [{ x: 2, y: 1 }, { x: 1, y: 1 }]"},zip:{definition:"创建一个组合了多个数组对应位置元素的新数组",syntax:"_.zip([arrays])",parameters:"arrays: Array[]",return:"Array",demo:"const array1 = ['a', 'b', 'c'];<br/>const array2 = [1, 2, 3];<br/><br/>const zippedArray = _.zip(array1, array2);<br/>console.log(zippedArray); // [['a', 1], ['b', 2], ['c', 3]]"},zipObject:{definition:"将两个数组组合成一个对象，以第一个数组作为键名，第二个数组作为对应的值",syntax:"_.zipObject([props=[]], [values=[]])",parameters:"props: Array, values: Array",return:"Object",demo:"const props = ['a', 'b', 'c'];<br/>const values = [1, 2, 3];<br/><br/>const zipObject = _.zipObject(props, values);<br/>console.log(zipObject); // { 'a': 1, 'b': 2, 'c': 3 }"},zipObjectDeep:{definition:"将两个数组组合成一个嵌套对象，以第一个数组作为键路径，第二个数组作为对应的值",syntax:"_.zipObjectDeep([props=[]], [values=[]])",parameters:"props: Array, values: Array",return:"Object",demo:"const props = [['a'], ['b'], ['c']];<br/>const values = [1, 2, 3];<br/><br/>const zipObjectDeep = _.zipObjectDeep(props, values);<br/>console.log(zipObjectDeep); // { 'a': { 'b': { 'c': 3 } } }"},zipWith:{definition:"创建一个组合了多个数组对应位置元素的新数组，并使用指定的迭代器对每个组合进行处理",syntax:"_.zipWith([arrays], [iteratee=_.identity])",parameters:"arrays: Array[], iteratee: Function",return:"Array",demo:"const array1 = [1, 2, 3];<br/>const array2 = [4, 5, 6];<br/><br/>const zipWithArray = _.zipWith(array1, array2, (a, b) => a + b);<br/>console.log(zipWithArray); // [5, 7, 9]"},entries:{definition:"返回对象自身可枚举属性的键值对数组",syntax:"_.entries(object)",parameters:"object: Object",return:"Array",demo:"const object = { a: 1, b: 2, c: 3 };<br/>const entriesArray = _.entries(object);<br/>console.log(entriesArray); // [['a', 1], ['b', 2], ['c', 3]]"},entriesIn:{definition:"返回对象自身和继承的可枚举属性的键值对数组",syntax:"_.entriesIn(object)",parameters:"object: Object",return:"Array",demo:"function Shape() {<br/>  this.x = 0;<br/>  this.y = 0;<br/>}<br/><br/>Shape.prototype.z = 0;<br/><br/>const shape = new Shape();<br/>const entriesInArray = _.entriesIn(shape);<br/>console.log(entriesInArray); // [['x', 0], ['y', 0], ['z', 0]]"},extend:{definition:"将源对象的可枚举属性扩展到目标对象上",syntax:"_.extend(destination, [sources])",parameters:"destination: Object, sources: Object[]",return:"Object",demo:"const object = { a: 1 };<br/>const other = { b: 2 };<br/><br/>const extendedObject = _.extend(object, other);<br/>console.log(extendedObject); // { a: 1, b: 2 }"},extendWith:{definition:"将源对象的可枚举属性扩展到目标对象上，并使用自定义函数处理冲突的属性",syntax:"_.extendWith(destination, [sources], [customizer])",parameters:"destination: Object, sources: Object[], customizer: Function",return:"Object",demo:"const object = { a: 1 };<br/>const other = { b: 2 };<br/><br/>const extendedObject = _.extendWith(object, other, (objValue, srcValue) => objValue === 1 ? 3 : srcValue);<br/>console.log(extendedObject); // { a: 3, b: 2 }"},add:{definition:"两个数相加",syntax:"_.add(augend, addend)",parameters:"augend: number, addend: number",return:"number",demo:"const sum = _.add(2, 3);<br/>console.log(sum); // 5"},attempt:{definition:"尝试调用函数，如果函数抛出错误，则返回错误对象",syntax:"_.attempt(func, [args])",parameters:"func: Function, args: ...any",return:"any",demo:"const result = _.attempt(JSON.parse, '{\"x\": 1}');<br/><br/>if (_.isError(result)) {<br/>  console.log('Parsing failed');<br/>} else {<br/>  console.log(result); // { x: 1 }<br/>}"},camelCase:{definition:"将字符串转换为驼峰命名法",syntax:"_.camelCase([string=''])",parameters:"string: string",return:"string",demo:"const camelCaseString = _.camelCase('Foo Bar');<br/>console.log(camelCaseString); // 'fooBar'"},capitalize:{definition:"将字符串的第一个字符转换为大写，其他字符转换为小写",syntax:"_.capitalize([string=''])",parameters:"string: string",return:"string",demo:"const capitalizedString = _.capitalize('hello');<br/>console.log(capitalizedString); // 'Hello'"},ceil:{definition:"将数字向上取整",syntax:"_.ceil(number, [precision=0])",parameters:"number: number, precision: number",return:"number",demo:"const roundedNumber = _.ceil(4.006);<br/>console.log(roundedNumber); // 5"},clamp:{definition:"将数字限制在指定范围内",syntax:"_.clamp(number, [lower], upper)",parameters:"number: number, lower: number, upper: number",return:"number",demo:"const clampedNumber = _.clamp(7, 3, 5);<br/>console.log(clampedNumber); // 5"},clone:{definition:"创建一个浅拷贝的值",syntax:"_.clone(value)",parameters:"value: any",return:"any",demo:"const object = { a: 1 };<br/>const clonedObject = _.clone(object);<br/>console.log(clonedObject); // { a: 1 }<br/>console.log(object === clonedObject); // false"},cloneDeep:{definition:"创建一个深拷贝的值",syntax:"_.cloneDeep(value)",parameters:"value: any",return:"any",demo:"const object = { a: 1 };<br/>const clonedObject = _.cloneDeep(object);<br/>console.log(clonedObject); // { a: 1 }<br/>console.log(object === clonedObject); // false"},cloneDeepWith:{definition:"创建一个深拷贝的值，并使用自定义函数进行转换",syntax:"_.cloneDeepWith(value, [customizer])",parameters:"value: any, customizer: Function",return:"any",demo:"const object = { a: 1 };<br/>const clonedObject = _.cloneDeepWith(object, value => [value]);<br/>console.log(clonedObject); // [{ a: 1 }]<br/>console.log(object === clonedObject); // false"},cloneWith:{definition:"创建一个浅拷贝的值，并使用自定义函数进行转换",syntax:"_.cloneWith(value, [customizer])",parameters:"value: any, customizer: Function",return:"any",demo:"const object = { a: 1 };<br/>const clonedObject = _.cloneWith(object, value => [value]);<br/>console.log(clonedObject); // [{ a: 1 }]<br/>console.log(object === clonedObject); // false"},conformsTo:{definition:"检查对象是否符合给定的属性约束",syntax:"_.conformsTo(object, source)",parameters:"object: Object, source: Object",return:"boolean",demo:"const object = { a: 1, b: 2 };<br/>const conforms = _.conformsTo(object, { b: n => n > 1 });<br/>console.log(conforms); // true"},deburr:{definition:"将字符串中的重音字符转换为对应的非重音字符",syntax:"_.deburr([string=''])",parameters:"string: string",return:"string",demo:"const deburredString = _.deburr('déjà vu');<br/>console.log(deburredString); // 'deja vu'"},defaultTo:{definition:"如果给定值为null或undefined，则返回默认值",syntax:"_.defaultTo(value, defaultValue)",parameters:"value: any, defaultValue: any",return:"any",demo:"const result1 = _.defaultTo(1, 10);<br/>console.log(result1); // 1<br/><br/>const result2 = _.defaultTo(null, 10);<br/>console.log(result2); // 10<br/><br/>const result3 = _.defaultTo(undefined, 10);<br/>console.log(result3); // 10"},divide:{definition:"两个数相除",syntax:"_.divide(dividend, divisor)",parameters:"dividend: number, divisor: number",return:"number",demo:"const quotient = _.divide(6, 3);<br/>console.log(quotient); // 2"},endsWith:{definition:"检查字符串是否以给定的目标字符串结尾",syntax:"_.endsWith([string=''], target, [position=string.length])",parameters:"string: string, target: string, position: number",return:"boolean",demo:"const endsWithFoo = _.endsWith('foobar', 'bar');<br/>console.log(endsWithFoo); // true<br/><br/>const endsWithBar = _.endsWith('foobar', 'foo');<br/>console.log(endsWithBar); // false"},eq:{definition:"执行严格相等比较，判断两个值是否相等",syntax:"_.eq(value, other)",parameters:"value: any, other: any",return:"boolean",demo:"const equal = _.eq(1, 1);<br/>console.log(equal); // true<br/><br/>const notEqual = _.eq(1, '1');<br/>console.log(notEqual); // false"},escape:{definition:"转义字符串中的特殊字符",syntax:"_.escape([string=''])",parameters:"string: string",return:"string",demo:"const escapedString = _.escape('<p>Hello, world!</p>');<br/>console.log(escapedString); // '&lt;p&gt;Hello, world!&lt;/p&gt;'"},escapeRegExp:{definition:"转义字符串中的正则表达式特殊字符",syntax:"_.escapeRegExp([string=''])",parameters:"string: string",return:"string",demo:"const escapedRegExp = _.escapeRegExp('[lodash](https://lodash.com/)');<br/>console.log(escapedRegExp); // '\\[lodash\\]\\(https://lodash\\.com/\\)'"},every:{definition:"对集合中的每个元素应用断言函数，如果所有元素都满足条件，则返回true",syntax:"_.every(collection, [predicate=_.identity])",parameters:"collection: Array|Object, predicate: Function",return:"boolean",demo:"const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const allUnder40 = _.every(users, user => user.age < 40);<br/>console.log(allUnder40); // true<br/><br/>const allOver30 = _.every(users, user => user.age > 30);<br/>console.log(allOver30); // false"},find:{definition:"返回集合中满足条件的第一个元素",syntax:"_.find(collection, [predicate=_.identity], [fromIndex=0])",parameters:"collection: Array|Object, predicate: Function, fromIndex: number",return:"any",demo:"const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const user = _.find(users, user => user.age > 30);<br/>console.log(user); // { name: 'Jane', age: 30 }"},findIndex:{definition:"返回集合中满足条件的第一个元素的索引",syntax:"_.findIndex(array, [predicate=_.identity], [fromIndex=0])",parameters:"array: Array, predicate: Function, fromIndex: number",return:"number",demo:"const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const index = _.findIndex(users, user => user.age > 30);<br/>console.log(index); // 1"},findKey:{definition:"返回集合中满足条件的第一个元素的键",syntax:"_.findKey(object, [predicate=_.identity])",parameters:"object: Object, predicate: Function",return:"string|null",demo:"const users = {<br/>  john: { name: 'John', age: 25 },<br/>  jane: { name: 'Jane', age: 30 },<br/>  jim: { name: 'Jim', age: 35 }<br/>};<br/><br/>const key = _.findKey(users, user => user.age > 30);<br/>console.log(key); // 'jane'"},findLast:{definition:"返回集合中满足条件的最后一个元素",syntax:"_.findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])",parameters:"collection: Array|Object, predicate: Function, fromIndex: number",return:"any",demo:"const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const user = _.findLast(users, user => user.age > 30);<br/>console.log(user); // { name: 'Jim', age: 35 }"},findLastIndex:{definition:"返回集合中满足条件的最后一个元素的索引",syntax:"_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])",parameters:"array: Array, predicate: Function, fromIndex: number",return:"number",demo:"const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const index = _.findLastIndex(users, user => user.age > 30);<br/>console.log(index); // 2"},findLastKey:{definition:"返回集合中满足条件的最后一个元素的键",syntax:"_.findLastKey(object, [predicate=_.identity])",parameters:"object: Object, predicate: Function",return:"string|null",demo:"const users = {<br/>  john: { name: 'John', age: 25 },<br/>  jane: { name: 'Jane', age: 30 },<br/>  jim: { name: 'Jim', age: 35 }<br/>};<br/><br/>const key = _.findLastKey(users, user => user.age > 30);<br/>console.log(key); // 'jim'"},floor:{definition:"将数字向下取整",syntax:"_.floor(number, [precision=0])",parameters:"number: number, precision: number",return:"number",demo:"const roundedNumber = _.floor(4.006);<br/>console.log(roundedNumber); // 4"},forEach:{definition:"对集合中的每个元素应用迭代函数",syntax:"_.forEach(collection, [iteratee=_.identity])",parameters:"collection: Array|Object, iteratee: Function",return:"void",demo:"_.forEach([1, 2, 3], number => {<br/>  console.log(number);<br/>});<br/><br/>// Output:<br/>// 1<br/>// 2<br/>// 3"},forEachRight:{definition:"对集合中的每个元素应用迭代函数，从最后一个元素开始迭代",syntax:"_.forEachRight(collection, [iteratee=_.identity])",parameters:"collection: Array|Object, iteratee: Function",return:"void",demo:"_.forEachRight([1, 2, 3], number => {<br/>  console.log(number);<br/>});<br/><br/>// Output:<br/>// 3<br/>// 2<br/>// 1"},forIn:{definition:"遍历对象的可枚举属性并应用迭代函数",syntax:"_.forIn(object, [iteratee=_.identity])",parameters:"object: Object, iteratee: Function",return:"void",demo:"const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forIn(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// a 1<br/>// b 2<br/>// c 3"},forInRight:{definition:"从最后一个可枚举属性开始，遍历对象并应用迭代函数",syntax:"_.forInRight(object, [iteratee=_.identity])",parameters:"object: Object, iteratee: Function",return:"void",demo:"const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forInRight(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// c 3<br/>// b 2<br/>// a 1"},forOwn:{definition:"遍历对象的自身可枚举属性并应用迭代函数",syntax:"_.forOwn(object, [iteratee=_.identity])",parameters:"object: Object, iteratee: Function",return:"void",demo:"const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forOwn(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// a 1<br/>// b 2<br/>// c 3"},forOwnRight:{definition:"从最后一个自身可枚举属性开始，遍历对象并应用迭代函数",syntax:"_.forOwnRight(object, [iteratee=_.identity])",parameters:"object: Object, iteratee: Function",return:"void",demo:"const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forOwnRight(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// c 3<br/>// b 2<br/>// a 1"},get:{definition:"获取对象的属性值",syntax:"_.get(object, path, [defaultValue])",parameters:"object: Object, path: string|Array, defaultValue: any",return:"any",demo:"const object = { a: { b: { c: 1 } } };<br/><br/>const value = _.get(object, 'a.b.c');<br/>console.log(value); // 1<br/><br/>const defaultValue = _.get(object, 'a.b.d', 'default');<br/>console.log(defaultValue); // 'default'"},gt:{definition:"检查第一个值是否大于第二个值",syntax:"_.gt(value, other)",parameters:"value: any, other: any",return:"boolean",demo:"const result = _.gt(5, 3);<br/>console.log(result); // true"},gte:{definition:"检查第一个值是否大于或等于第二个值",syntax:"_.gte(value, other)",parameters:"value: any, other: any",return:"boolean",demo:"const result1 = _.gte(5, 3);<br/>console.log(result1); // true<br/><br/>const result2 = _.gte(3, 3);<br/>console.log(result2); // true"},has:{definition:"检查对象是否具有指定属性",syntax:"_.has(object, path)",parameters:"object: Object, path: string|Array",return:"boolean",demo:"const object = { a: 1, b: 2 };<br/><br/>const hasA = _.has(object, 'a');<br/>console.log(hasA); // true<br/><br/>const hasC = _.has(object, 'c');<br/>console.log(hasC); // false"},hasIn:{definition:"检查对象是否具有指定路径的属性（包括继承的属性）",syntax:"_.hasIn(object, path)",parameters:"object: Object, path: string|Array",return:"boolean",demo:"const object = { a: 1 };<br/>const inheritedObject = Object.create(object);<br/><br/>const hasA = _.hasIn(inheritedObject, 'a');<br/>console.log(hasA); // true<br/><br/>const hasB = _.hasIn(inheritedObject, 'b');<br/>console.log(hasB); // false"},head:{definition:"获取数组的第一个元素",syntax:"_.head(array)",parameters:"array: Array",return:"any",demo:"const array = [1, 2, 3];<br/><br/>const firstElement = _.head(array);<br/>console.log(firstElement); // 1"},identity:{definition:"返回接收到的第一个参数",syntax:"_.identity(value)",parameters:"value: any",return:"any",demo:"const result = _.identity(42);<br/>console.log(result); // 42"},includes:{definition:"检查集合中是否包含指定值",syntax:"_.includes(collection, value, [fromIndex=0])",parameters:"collection: Array|Object|string, value: any, fromIndex: number",return:"boolean",demo:"const array = [1, 2, 3];<br/>const object = { a: 1, b: 2 };<br/><br/>const includes1 = _.includes(array, 2);<br/>console.log(includes1); // true<br/><br/>const includes2 = _.includes(object, 1);<br/>console.log(includes2); // true<br/><br/>const includes3 = _.includes('hello', 'e');<br/>console.log(includes3); // true"},indexOf:{definition:"返回数组中首次出现指定值的索引，从前往后搜索",syntax:"_.indexOf(array, value, [fromIndex=0])",parameters:"array: Array, value: any, fromIndex: number",return:"number",demo:"const array = [1, 2, 1, 2];<br/><br/>const index = _.indexOf(array, 2);<br/>console.log(index); // 1"},inRange:{definition:"检查指定值是否在指定范围内，范围为[start=0, end]",syntax:"_.inRange(number, [start=0], end)",parameters:"number: number, start: number, end: number",return:"boolean",demo:"const inRange1 = _.inRange(3, 2, 5);<br/>console.log(inRange1); // true<br/><br/>const inRange2 = _.inRange(1, 2, 5);<br/>console.log(inRange2); // false"},invoke:{definition:"调用集合中每个元素的方法",syntax:"_.invoke(collection, path, [...args])",parameters:"collection: Array|Object, path: string|Array, args: any",return:"Array",demo:"const array = ['hello', 'world'];<br/><br/>const result = _.invoke(array, 'toUpperCase');<br/>console.log(result); // ['HELLO', 'WORLD']"},isArguments:{definition:"检查值是否为Arguments对象",syntax:"_.isArguments(value)",parameters:"value: any",return:"boolean",demo:"const args = (function() {<br/>  return arguments;<br/>})();<br/><br/>const isArgs = _.isArguments(args);<br/>console.log(isArgs); // true"},isArray:{definition:"检查值是否为数组",syntax:"_.isArray(value)",parameters:"value: any",return:"boolean",demo:"const isArray1 = _.isArray([1, 2, 3]);<br/>console.log(isArray1); // true<br/><br/>const isArray2 = _.isArray('hello');<br/>console.log(isArray2); // false"},isArrayBuffer:{definition:"检查值是否为ArrayBuffer对象",syntax:"_.isArrayBuffer(value)",parameters:"value: any",return:"boolean",demo:"const buffer = new ArrayBuffer(8);<br/><br/>const isArrayBuffer = _.isArrayBuffer(buffer);<br/>console.log(isArrayBuffer); // true"},isArrayLike:{definition:"检查值是否类似数组，即具有类数组的特征",syntax:"_.isArrayLike(value)",parameters:"value: any",return:"boolean",demo:"const arrayLike1 = 'hello';<br/>const arrayLike2 = [1, 2, 3];<br/><br/>const isArrayLike1 = _.isArrayLike(arrayLike1);<br/>console.log(isArrayLike1); // true<br/><br/>const isArrayLike2 = _.isArrayLike(arrayLike2);<br/>console.log(isArrayLike2); // true"},isArrayLikeObject:{definition:"检查值是否既是对象又是类数组",syntax:"_.isArrayLikeObject(value)",parameters:"value: any",return:"boolean",demo:"const arrayLikeObject = { 0: 'hello', 1: 'world', length: 2 };<br/><br/>const isArrayLikeObject = _.isArrayLikeObject(arrayLikeObject);<br/>console.log(isArrayLikeObject); // true"},isBoolean:{definition:"检查值是否为布尔值",syntax:"_.isBoolean(value)",parameters:"value: any",return:"boolean",demo:"const isBoolean1 = _.isBoolean(true);<br/>console.log(isBoolean1); // true<br/><br/>const isBoolean2 = _.isBoolean(0);<br/>console.log(isBoolean2); // false"},isBuffer:{definition:"检查值是否为Buffer对象",syntax:"_.isBuffer(value)",parameters:"value: any",return:"boolean",demo:"const buffer = Buffer.from('hello');<br/><br/>const isBuffer = _.isBuffer(buffer);<br/>console.log(isBuffer); // true"},isDate:{definition:"检查值是否为日期对象",syntax:"_.isDate(value)",parameters:"value: any",return:"boolean",demo:"const date = new Date();<br/><br/>const isDate = _.isDate(date);<br/>console.log(isDate); // true"},isElement:{definition:"检查值是否为DOM元素",syntax:"_.isElement(value)",parameters:"value: any",return:"boolean",demo:"const element = document.createElement('div');<br/><br/>const isElement = _.isElement(element);<br/>console.log(isElement); // true"},isEmpty:{definition:"检查值是否为空，为空的情况包括：null、undefined、空字符串、空数组、空对象",syntax:"_.isEmpty(value)",parameters:"value: any",return:"boolean",demo:"const isEmpty1 = _.isEmpty(null);<br/>console.log(isEmpty1); // true<br/><br/>const isEmpty2 = _.isEmpty([]);<br/>console.log(isEmpty2); // true<br/><br/>const isEmpty3 = _.isEmpty({});<br/>console.log(isEmpty3); // true<br/><br/>const isEmpty4 = _.isEmpty('');<br/>console.log(isEmpty4); // true"},isEqual:{definition:"执行深度比较以确定两个值是否相等",syntax:"_.isEqual(value, other)",parameters:"value: any, other: any",return:"boolean",demo:"const object1 = { a: 1 };<br/>const object2 = { a: 1 };<br/><br/>const isEqual = _.isEqual(object1, object2);<br/>console.log(isEqual); // true"},isEqualWith:{definition:"使用自定义比较器执行深度比较以确定两个值是否相等",syntax:"_.isEqualWith(value, other, [customizer])",parameters:"value: any, other: any, customizer: Function",return:"boolean",demo:"const object1 = { a: 1 };<br/>const object2 = { a: 1 };<br/><br/>const isEqual = _.isEqualWith(object1, object2, (val1, val2) => val1 === val2);<br/>console.log(isEqual); // true"},isError:{definition:"检查值是否为Error对象",syntax:"_.isError(value)",parameters:"value: any",return:"boolean",demo:"const error = new Error('An error occurred');<br/><br/>const isError = _.isError(error);<br/>console.log(isError); // true"},isFinite:{definition:"检查值是否为有限数值",syntax:"_.isFinite(value)",parameters:"value: any",return:"boolean",demo:"const isFinite1 = _.isFinite(42);<br/>console.log(isFinite1); // true<br/><br/>const isFinite2 = _.isFinite(Infinity);<br/>console.log(isFinite2); // false"},isFunction:{definition:"检查值是否为函数",syntax:"_.isFunction(value)",parameters:"value: any",return:"boolean",demo:"const isFunction1 = _.isFunction(() => {});<br/>console.log(isFunction1); // true<br/><br/>const isFunction2 = _.isFunction('hello');<br/>console.log(isFunction2); // false"},isInteger:{definition:"检查值是否为整数",syntax:"_.isInteger(value)",parameters:"value: any",return:"boolean",demo:"const isInteger1 = _.isInteger(42);<br/>console.log(isInteger1); // true<br/><br/>const isInteger2 = _.isInteger(3.14);<br/>console.log(isInteger2); // false"},isLength:{definition:"检查值是否为有效的数组长度",syntax:"_.isLength(value)",parameters:"value: any",return:"boolean",demo:"const isLength1 = _.isLength(3);<br/>console.log(isLength1); // true<br/><br/>const isLength2 = _.isLength(-1);<br/>console.log(isLength2); // false"},isMap:{definition:"检查值是否为Map对象",syntax:"_.isMap(value)",parameters:"value: any",return:"boolean",demo:"const map = new Map();<br/><br/>const isMap = _.isMap(map);<br/>console.log(isMap); // true"},isMatch:{definition:"执行部分深度比较以确定对象是否包含给定的键值对",syntax:"_.isMatch(object, source)",parameters:"object: Object, source: Object",return:"boolean",demo:"const object = { a: 1, b: 2 };<br/><br/>const isMatch1 = _.isMatch(object, { a: 1 });<br/>console.log(isMatch1); // true<br/><br/>const isMatch2 = _.isMatch(object, { b: 1 });<br/>console.log(isMatch2); // false"},isMatchWith:{definition:"使用自定义比较器执行部分深度比较以确定对象是否包含给定的键值对",syntax:"_.isMatchWith(object, source, [customizer])",parameters:"object: Object, source: Object, customizer: Function",return:"boolean",demo:"const object = { a: 1, b: 2 };<br/><br/>const isMatch = _.isMatchWith(object, { a: 1 }, (val1, val2) => val1 === val2);<br/>console.log(isMatch); // true"},isNaN:{definition:"检查值是否为NaN",syntax:"_.isNaN(value)",parameters:"value: any",return:"boolean",demo:"const isNaN1 = _.isNaN(NaN);<br/>console.log(isNaN1); // true<br/><br/>const isNaN2 = _.isNaN(0 / 0);<br/>console.log(isNaN2); // true<br/><br/>const isNaN3 = _.isNaN(42);<br/>console.log(isNaN3); // false"},isNative:{definition:"检查值是否为原生函数",syntax:"_.isNative(value)",parameters:"value: any",return:"boolean",demo:"const isNative = _.isNative(Array.prototype.push);<br/>console.log(isNative); // true"},isNil:{definition:"检查值是否为null或undefined",syntax:"_.isNil(value)",parameters:"value: any",return:"boolean",demo:"const isNil1 = _.isNil(null);<br/>console.log(isNil1); // true<br/><br/>const isNil2 = _.isNil(undefined);<br/>console.log(isNil2); // true<br/><br/>const isNil3 = _.isNil(0);<br/>console.log(isNil3); // false"},isNull:{definition:"检查值是否为null",syntax:"_.isNull(value)",parameters:"value: any",return:"boolean",demo:"const isNull1 = _.isNull(null);<br/>console.log(isNull1); // true<br/><br/>const isNull2 = _.isNull(undefined);<br/>console.log(isNull2); // false"},isNumber:{definition:"检查值是否为数值",syntax:"_.isNumber(value)",parameters:"value: any",return:"boolean",demo:"const isNumber1 = _.isNumber(42);<br/>console.log(isNumber1); // true<br/><br/>const isNumber2 = _.isNumber('42');<br/>console.log(isNumber2); // false"},isObject:{definition:"检查值是否为对象",syntax:"_.isObject(value)",parameters:"value: any",return:"boolean",demo:"const isObject1 = _.isObject({});<br/>console.log(isObject1); // true<br/><br/>const isObject2 = _.isObject([]);<br/>console.log(isObject2); // true<br/><br/>const isObject3 = _.isObject(null);<br/>console.log(isObject3); // false"},isObjectLike:{definition:"检查值是否为对象或类对象",syntax:"_.isObjectLike(value)",parameters:"value: any",return:"boolean",demo:"const isObjectLike1 = _.isObjectLike({});<br/>console.log(isObjectLike1); // true<br/><br/>const isObjectLike2 = _.isObjectLike([]);<br/>console.log(isObjectLike2); // true<br/><br/>const isObjectLike3 = _.isObjectLike(null);<br/>console.log(isObjectLike3); // false"},isPlainObject:{definition:"检查值是否为纯对象，即通过对象字面量或Object构造函数创建的对象",syntax:"_.isPlainObject(value)",parameters:"value: any",return:"boolean",demo:"const isPlainObject1 = _.isPlainObject({});<br/>console.log(isPlainObject1); // true<br/><br/>const isPlainObject2 = _.isPlainObject(Object.create(null));<br/>console.log(isPlainObject2); // true<br/><br/>const isPlainObject3 = _.isPlainObject([]);<br/>console.log(isPlainObject3); // false"},isRegExp:{definition:"检查值是否为正则表达式对象",syntax:"_.isRegExp(value)",parameters:"value: any",return:"boolean",demo:"const isRegExp = _.isRegExp(/abc/);<br/>console.log(isRegExp); // true"},isSafeInteger:{definition:"检查值是否为安全整数",syntax:"_.isSafeInteger(value)",parameters:"value: any",return:"boolean",demo:"const isSafeInteger1 = _.isSafeInteger(42);<br/>console.log(isSafeInteger1); // true<br/><br/>const isSafeInteger2 = _.isSafeInteger(9007199254740992);<br/>console.log(isSafeInteger2); // false"},isSet:{definition:"检查值是否为Set对象",syntax:"_.isSet(value)",parameters:"value: any",return:"boolean",demo:"const set = new Set();<br/><br/>const isSet = _.isSet(set);<br/>console.log(isSet); // true"},isString:{definition:"检查值是否为字符串",syntax:"_.isString(value)",parameters:"value: any",return:"boolean",demo:"const isString1 = _.isString('hello');<br/>console.log(isString1); // true<br/><br/>const isString2 = _.isString(42);<br/>console.log(isString2); // false"},isSymbol:{definition:"检查值是否为符号",syntax:"_.isSymbol(value)",parameters:"value: any",return:"boolean",demo:"const symbol = Symbol('mySymbol');<br/><br/>const isSymbol = _.isSymbol(symbol);<br/>console.log(isSymbol); // true"},isTypedArray:{definition:"检查值是否为类型化数组",syntax:"_.isTypedArray(value)",parameters:"value: any",return:"boolean",demo:"const typedArray = new Int32Array();<br/><br/>const isTypedArray = _.isTypedArray(typedArray);<br/>console.log(isTypedArray); // true"},isUndefined:{definition:"检查值是否为undefined",syntax:"_.isUndefined(value)",parameters:"value: any",return:"boolean",demo:"const isUndefined1 = _.isUndefined(undefined);<br/>console.log(isUndefined1); // true<br/><br/>const isUndefined2 = _.isUndefined(null);<br/>console.log(isUndefined2); // false"},isWeakMap:{definition:"检查值是否为WeakMap对象",syntax:"_.isWeakMap(value)",parameters:"value: any",return:"boolean",demo:"const weakMap = new WeakMap();<br/><br/>const isWeakMap = _.isWeakMap(weakMap);<br/>console.log(isWeakMap); // true"},isWeakSet:{definition:"检查值是否为WeakSet对象",syntax:"_.isWeakSet(value)",parameters:"value: any",return:"boolean",demo:"const weakSet = new WeakSet();<br/><br/>const isWeakSet = _.isWeakSet(weakSet);<br/>console.log(isWeakSet); // true"},join:{definition:"将数组中的所有元素转化为字符串并连接起来",syntax:"_.join(array, [separator=','])",parameters:"array: Array, separator: string",return:"string",demo:"const array = ['Hello', 'World'];<br/><br/>const joinedString = _.join(array, ' ');<br/>console.log(joinedString); // 'Hello World'"},kebabCase:{definition:"将字符串转化为kebab case格式（单词之间使用连字符-分隔）",syntax:"_.kebabCase(string)",parameters:"string: string",return:"string",demo:"const kebabCase = _.kebabCase('helloWorld');<br/>console.log(kebabCase); // 'hello-world'"},last:{definition:"获取数组中的最后一个元素",syntax:"_.last(array)",parameters:"array: Array",return:"any",demo:"const array = ['apple', 'banana', 'orange'];<br/><br/>const lastElement = _.last(array);<br/>console.log(lastElement); // 'orange'"},lastIndexOf:{definition:"返回数组中指定元素最后一次出现的索引",syntax:"_.lastIndexOf(array, value, [fromIndex=array.length-1])",parameters:"array: Array, value: any, fromIndex: number",return:"number",demo:"const array = [1, 2, 3, 4, 3, 2, 1];<br/><br/>const lastIndex1 = _.lastIndexOf(array, 3);<br/>console.log(lastIndex1); // 4<br/><br/>const lastIndex2 = _.lastIndexOf(array, 3, 3);<br/>console.log(lastIndex2); // 2"},lowerCase:{definition:"将字符串转化为小写，并将非单词字符替换为连字符-",syntax:"_.lowerCase(string)",parameters:"string: string",return:"string",demo:"const lowerCase = _.lowerCase('Hello World!');<br/>console.log(lowerCase); // 'hello-world'"},lowerFirst:{definition:"将字符串的首字母转化为小写",syntax:"_.lowerFirst(string)",parameters:"string: string",return:"string",demo:"const lowerFirst = _.lowerFirst('Hello');<br/>console.log(lowerFirst); // 'hello'"},lt:{definition:"检查第一个值是否小于第二个值",syntax:"_.lt(value, other)",parameters:"value: any, other: any",return:"boolean",demo:"const isLessThan = _.lt(3, 5);<br/>console.log(isLessThan); // true"},lte:{definition:"检查第一个值是否小于或等于第二个值",syntax:"_.lte(value, other)",parameters:"value: any, other: any",return:"boolean",demo:"const isLessThanOrEqualTo = _.lte(3, 3);<br/>console.log(isLessThanOrEqualTo); // true"},max:{definition:"返回数组中的最大值",syntax:"_.max(array)",parameters:"array: Array",return:"any",demo:"const array = [1, 3, 2, 5, 4];<br/><br/>const maxValue = _.max(array);<br/>console.log(maxValue); // 5"},maxBy:{definition:"根据迭代器返回的结果获取数组中的最大值",syntax:"_.maxBy(array, [iteratee=_.identity])",parameters:"array: Array, iteratee: Function",return:"any",demo:"const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Mary', age: 25 },<br/>  { name: 'Peter', age: 35 }<br/>];<br/><br/>const oldestUser = _.maxBy(users, user => user.age);<br/>console.log(oldestUser); // { name: 'Peter', age: 35 }"},mean:{definition:"计算数组中所有数值的平均值",syntax:"_.mean(array)",parameters:"array: Array",return:"number",demo:"const array = [1, 2, 3, 4, 5];<br/><br/>const meanValue = _.mean(array);<br/>console.log(meanValue); // 3"},meanBy:{definition:"根据迭代器返回的结果计算数组中所有数值的平均值",syntax:"_.meanBy(array, [iteratee=_.identity])",parameters:"array: Array, iteratee: Function",return:"number",demo:"const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Mary', age: 25 },<br/>  { name: 'Peter', age: 35 }<br/>];<br/><br/>const averageAge = _.meanBy(users, user => user.age);<br/>console.log(averageAge); // 30"},min:{definition:"返回数组中的最小值",syntax:"_.min(array)",parameters:"array: Array",return:"any",demo:"const array = [1, 3, 2, 5, 4];<br/><br/>const minValue = _.min(array);<br/>console.log(minValue); // 1"},minBy:{definition:"根据迭代器返回的结果获取数组中的最小值",syntax:"_.minBy(array, [iteratee=_.identity])",parameters:"array: Array, iteratee: Function",return:"any",demo:"const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Mary', age: 25 },<br/>  { name: 'Peter', age: 35 }<br/>];<br/><br/>const youngestUser = _.minBy(users, user => user.age);<br/>console.log(youngestUser); // { name: 'Mary', age: 25 }"},stubArray:{definition:"创建一个空数组",syntax:"_.stubArray()",parameters:"",return:"Array",demo:"const array = _.stubArray();<br/>console.log(array); // []"},stubFalse:{definition:"返回false",syntax:"_.stubFalse()",parameters:"",return:"boolean",demo:"const result = _.stubFalse();<br/>console.log(result); // false"},stubObject:{definition:"创建一个空对象",syntax:"_.stubObject()",parameters:"",return:"Object",demo:"const object = _.stubObject();<br/>console.log(object); // {}"},stubString:{definition:"返回空字符串",syntax:"_.stubString()",parameters:"",return:"string",demo:"const string = _.stubString();<br/>console.log(string); // ''"},stubTrue:{definition:"返回true",syntax:"_.stubTrue()",parameters:"",return:"boolean",demo:"const result = _.stubTrue();<br/>console.log(result); // true"},multiply:{definition:"返回两个数的乘积",syntax:"_.multiply(multiplier, multiplicand)",parameters:"multiplier: number, multiplicand: number",return:"number",demo:"const product = _.multiply(6, 7);<br/>console.log(product); // 42"},nth:{definition:"获取数组中第n个元素",syntax:"_.nth(array, [n=0])",parameters:"array: Array, n: number",return:"any",demo:"const array = ['a', 'b', 'c', 'd'];<br/><br/>const nthElement = _.nth(array, 2);<br/>console.log(nthElement); // 'c'"},noConflict:{definition:"将全局变量中的`_`恢复为之前的值，并返回`lodash`对象",syntax:"_.noConflict()",parameters:"",return:"Object",demo:"_.noConflict();<br/><br/>// 此时`_`不再是`lodash`库<br/>const result = _.add(1, 2);<br/>console.log(result); // Uncaught ReferenceError: _ is not defined"},noop:{definition:"一个什么都不做的空函数",syntax:"_.noop()",parameters:"",return:"undefined",demo:"_.noop();<br/><br/>// 该函数不会产生任何输出或副作用"},now:{definition:"返回当前时间的时间戳",syntax:"_.now()",parameters:"",return:"number",demo:"const timestamp = _.now();<br/>console.log(timestamp); // 1624224929532"},pad:{definition:"用指定的字符将字符串填充为指定的长度",syntax:"_.pad(string, [length=0], [chars=' '])",parameters:"string: string, length: number, chars: string",return:"string",demo:"const paddedString = _.pad('hello', 8, '*');<br/>console.log(paddedString); // '**hello*'"},padEnd:{definition:"用指定的字符将字符串填充到指定的长度（末尾填充）",syntax:"_.padEnd(string, [length=0], [chars=' '])",parameters:"string: string, length: number, chars: string",return:"string",demo:"const paddedString = _.padEnd('hello', 8, '*');<br/>console.log(paddedString); // 'hello***'"},padStart:{definition:"用指定的字符将字符串填充到指定的长度（开头填充）",syntax:"_.padStart(string, [length=0], [chars=' '])",parameters:"string: string, length: number, chars: string",return:"string",demo:"const paddedString = _.padStart('hello', 8, '*');<br/>console.log(paddedString); // '***hello'"},parseInt:{definition:"将字符串转化为整数",syntax:"_.parseInt(string, [radix=10])",parameters:"string: string, radix: number",return:"number",demo:"const parsedInt = _.parseInt('42');<br/>console.log(parsedInt); // 42"},random:{definition:"生成一个在指定范围内的随机数",syntax:"_.random([lower=0], [upper=1], [floating])",parameters:"lower: number, upper: number, floating: boolean",return:"number",demo:"const randomNum = _.random(1, 10);<br/>console.log(randomNum); // 7"},reduce:{definition:"将数组或对象中的元素累积为一个值",syntax:"_.reduce(collection, [iteratee=_.identity], [accumulator])",parameters:"collection: Array or Object, iteratee: Function, accumulator: any",return:"any",demo:"const array = [1, 2, 3, 4, 5];<br/><br/>const sum = _.reduce(array, (accumulator, value) => accumulator + value, 0);<br/>console.log(sum); // 15"},reduceRight:{definition:"将数组或对象中的元素从右到左累积为一个值",syntax:"_.reduceRight(collection, [iteratee=_.identity], [accumulator])",parameters:"collection: Array or Object, iteratee: Function, accumulator: any",return:"any",demo:"const array = [1, 2, 3, 4, 5];<br/><br/>const sum = _.reduceRight(array, (accumulator, value) => accumulator + value, 0);<br/>console.log(sum); // 15"},repeat:{definition:"重复指定次数的字符串",syntax:"_.repeat(string, [n=1])",parameters:"string: string, n: number",return:"string",demo:"const repeatedString = _.repeat('hello', 3);<br/>console.log(repeatedString); // 'hellohellohello'"},replace:{definition:"替换字符串中的匹配部分",syntax:"_.replace(string, pattern, replacement)",parameters:"string: string, pattern: RegExp or string, replacement: string or Function",return:"string",demo:"const replacedString = _.replace('Hello World', 'World', 'Universe');<br/>console.log(replacedString); // 'Hello Universe'"},result:{definition:"根据对象路径获取对应的值",syntax:"_.result(object, path, [defaultValue])",parameters:"object: Object, path: string or Array, defaultValue: any",return:"any",demo:"const object = { name: 'John', age: 30 };<br/><br/>const name = _.result(object, 'name');<br/>console.log(name); // 'John'"},round:{definition:"将数值四舍五入到指定的精度",syntax:"_.round(number, [precision=0])",parameters:"number: number, precision: number",return:"number",demo:"const roundedNumber = _.round(3.14159, 2);<br/>console.log(roundedNumber); // 3.14"},runInContext:{definition:"使用指定的`lodash`对象运行函数",syntax:"_.runInContext([context=root])",parameters:"context: Object",return:"Function",demo:"const lodash = _.runInContext();<br/><br/>const array = [1, 2, 3];<br/>const square = lodash.map(array, num => num * num);<br/>console.log(square); // [1, 4, 9]"},sample:{definition:"随机返回数组或对象中的一个元素",syntax:"_.sample(collection)",parameters:"collection: Array or Object",return:"any",demo:"const array = [1, 2, 3, 4, 5];<br/><br/>const randomElement = _.sample(array);<br/>console.log(randomElement); // e.g., 3"},size:{definition:"获取数组或对象的长度",syntax:"_.size(collection)",parameters:"collection: Array or Object",return:"number",demo:"const array = [1, 2, 3, 4, 5];<br/>const object = { a: 1, b: 2, c: 3 };<br/><br/>const arraySize = _.size(array);<br/>const objectSize = _.size(object);<br/><br/>console.log(arraySize); // 5<br/>console.log(objectSize); // 3"},snakeCase:{definition:"将字符串转换为蛇形命名法（小写单词之间使用下划线连接）",syntax:"_.snakeCase(string)",parameters:"string: string",return:"string",demo:"const snakeCaseString = _.snakeCase('Hello World');<br/>console.log(snakeCaseString); // 'hello_world'"},some:{definition:"检查集合中是否至少有一个元素满足条件",syntax:"_.some(collection, [predicate=_.identity])",parameters:"collection: Array or Object, predicate: Function",return:"boolean",demo:"const array = [1, 2, 3, 4, 5];<br/><br/>const hasEvenNumber = _.some(array, num => num % 2 === 0);<br/>console.log(hasEvenNumber); // true"},sortedIndex:{definition:"确定在已排序的数组中插入值的索引位置",syntax:"_.sortedIndex(array, value)",parameters:"array: Array, value: any",return:"number",demo:"const array = [10, 20, 30, 40, 50];<br/><br/>const index = _.sortedIndex(array, 35);<br/>console.log(index); // 3"},sortedIndexBy:{definition:"使用迭代器确定在已排序的数组中插入值的索引位置",syntax:"_.sortedIndexBy(array, value, [iteratee=_.identity])",parameters:"array: Array, value: any, iteratee: Function",return:"number",demo:"const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Alice', age: 40 },<br/>  { name: 'Bob', age: 50 }<br/>];<br/><br/>const index = _.sortedIndexBy(users, { name: 'Charlie', age: 35 }, 'age');<br/>console.log(index); // 1"},sortedIndexOf:{definition:"在已排序的数组中查找第一个匹配值的索引",syntax:"_.sortedIndexOf(array, value)",parameters:"array: Array, value: any",return:"number",demo:"const array = [10, 20, 30, 40, 50, 50, 50];<br/><br/>const index = _.sortedIndexOf(array, 50);<br/>console.log(index); // 4"},sortedLastIndex:{definition:"确定在已排序的数组中插入值的最后一个索引位置",syntax:"_.sortedLastIndex(array, value)",parameters:"array: Array, value: any",return:"number",demo:"const array = [10, 20, 30, 40, 50];<br/><br/>const index = _.sortedLastIndex(array, 35);<br/>console.log(index); // 4"},sortedLastIndexBy:{definition:"使用迭代器确定在已排序的数组中插入值的最后一个索引位置",syntax:"_.sortedLastIndexBy(array, value, [iteratee=_.identity])",parameters:"array: Array, value: any, iteratee: Function",return:"number",demo:"const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Alice', age: 40 },<br/>  { name: 'Bob', age: 50 }<br/>];<br/><br/>const index = _.sortedLastIndexBy(users, { name: 'Charlie', age: 35 }, 'age');<br/>console.log(index); // 2"},sortedLastIndexOf:{definition:"在已排序的数组中查找最后一个匹配值的索引",syntax:"_.sortedLastIndexOf(array, value)",parameters:"array: Array, value: any",return:"number",demo:"const array = [10, 20, 30, 40, 50, 50, 50];<br/><br/>const index = _.sortedLastIndexOf(array, 50);<br/>console.log(index); // 6"},startCase:{definition:"将字符串转换为以空格分隔的大写单词形式",syntax:"_.startCase(string)",parameters:"string: string",return:"string",demo:"const startCaseString = _.startCase('hello world');<br/>console.log(startCaseString); // 'Hello World'"},startsWith:{definition:"检查字符串是否以指定的字符串开始",syntax:"_.startsWith(string, target, [position=0])",parameters:"string: string, target: string, position: number",return:"boolean",demo:"const string = 'Hello World';<br/><br/>const startsWithHello = _.startsWith(string, 'Hello');<br/>console.log(startsWithHello); // true"},subtract:{definition:"计算两个数的差",syntax:"_.subtract(minuend, subtrahend)",parameters:"minuend: number, subtrahend: number",return:"number",demo:"const difference = _.subtract(10, 5);<br/>console.log(difference); // 5"},sum:{definition:"计算数组或对象中的所有数值的总和",syntax:"_.sum(collection)",parameters:"collection: Array or Object",return:"number",demo:"const array = [1, 2, 3, 4, 5];<br/>const object = { a: 1, b: 2, c: 3 };<br/><br/>const arraySum = _.sum(array);<br/>const objectSum = _.sum(object);<br/><br/>console.log(arraySum); // 15<br/>console.log(objectSum); // 6"},sumBy:{definition:"根据迭代器计算数组或对象中的所有元素的总和",syntax:"_.sumBy(collection, [iteratee=_.identity])",parameters:"collection: Array or Object, iteratee: Function",return:"number",demo:"const users = [<br/>  { name: 'John', age: 30, score: 100 },<br/>  { name: 'Alice', age: 40, score: 200 },<br/>  { name: 'Bob', age: 50, score: 150 }<br/>];<br/><br/>const totalScore = _.sumBy(users, 'score');<br/>console.log(totalScore); // 450"},template:{definition:"使用占位符替换字符串模板中的值",syntax:"_.template(string, [options={}])",parameters:"string: string, options: Object",return:"Function",demo:"const compiled = _.template('Hello <%= user %>!');<br/><br/>const result = compiled({ user: 'Alice' });<br/>console.log(result); // 'Hello Alice!'"},times:{definition:"调用迭代器指定次数并返回结果",syntax:"_.times(n, [iteratee=_.identity])",parameters:"n: number, iteratee: Function",return:"Array",demo:"const squares = _.times(5, n => n * n);<br/>console.log(squares); // [0, 1, 4, 9, 16]"},toFinite:{definition:"将值转换为有限数",syntax:"_.toFinite(value)",parameters:"value: any",return:"number",demo:"const finiteNumber = _.toFinite(3.14);<br/>console.log(finiteNumber); // 3.14"},toInteger:{definition:"将值转换为整数",syntax:"_.toInteger(value)",parameters:"value: any",return:"number",demo:"const integer = _.toInteger('42');<br/>console.log(integer); // 42"},toLength:{definition:"将值转换为有效数组长度",syntax:"_.toLength(value)",parameters:"value: any",return:"number",demo:"const length = _.toLength('3.14');<br/>console.log(length); // 3"},toLower:{definition:"将字符串转换为小写",syntax:"_.toLower(string)",parameters:"string: string",return:"string",demo:"const lowerCaseString = _.toLower('Hello World');<br/>console.log(lowerCaseString); // 'hello world'"},toNumber:{definition:"将值转换为数字",syntax:"_.toNumber(value)",parameters:"value: any",return:"number",demo:"const number = _.toNumber('42.5');<br/>console.log(number); // 42.5"},toSafeInteger:{definition:"将值转换为安全整数",syntax:"_.toSafeInteger(value)",parameters:"value: any",return:"number",demo:"const safeInteger = _.toSafeInteger('9007199254740992');<br/>console.log(safeInteger); // 9007199254740992"},toString:{definition:"将值转换为字符串",syntax:"_.toString(value)",parameters:"value: any",return:"string",demo:"const string = _.toString(123);<br/>console.log(string); // '123'"},toUpper:{definition:"将字符串转换为大写",syntax:"_.toUpper(string)",parameters:"string: string",return:"string",demo:"const upperCaseString = _.toUpper('Hello World');<br/>console.log(upperCaseString); // 'HELLO WORLD'"},trim:{definition:"去除字符串两侧的空格或指定字符",syntax:"_.trim(string, [chars=whitespace])",parameters:"string: string, chars: string",return:"string",demo:"const trimmedString = _.trim('  Hello World  ');<br/>console.log(trimmedString); // 'Hello World'"},trimEnd:{definition:"去除字符串末尾的空格或指定字符",syntax:"_.trimEnd(string, [chars=whitespace])",parameters:"string: string, chars: string",return:"string",demo:"const trimmedString = _.trimEnd('  Hello World  ');<br/>console.log(trimmedString); // '  Hello World'"},trimStart:{definition:"去除字符串开头的空格或指定字符",syntax:"_.trimStart(string, [chars=whitespace])",parameters:"string: string, chars: string",return:"string",demo:"const trimmedString = _.trimStart('  Hello World  ');<br/>console.log(trimmedString); // 'Hello World  '"},truncate:{definition:"根据指定的长度截断字符串并添加省略号",syntax:"_.truncate(string, [options={}])",parameters:"string: string, options: Object",return:"string",demo:"const truncatedString = _.truncate('Hello World', { length: 7 });<br/>console.log(truncatedString); // 'Hello...'"},unescape:{definition:"将HTML实体转换为对应的字符",syntax:"_.unescape(string)",parameters:"string: string",return:"string",demo:"const unescapedString = _.unescape('Hello &amp; World');<br/>console.log(unescapedString); // 'Hello & World'"},uniqueId:{definition:"生成唯一标识符",syntax:"_.uniqueId([prefix=''])",parameters:"prefix: string",return:"string",demo:"const id1 = _.uniqueId('user_');<br/>const id2 = _.uniqueId('user_');<br/><br/>console.log(id1); // 'user_1'<br/>console.log(id2); // 'user_2'"},upperCase:{definition:"将字符串转换为大写并以空格分隔单词",syntax:"_.upperCase(string)",parameters:"string: string",return:"string",demo:"const upperCaseString = _.upperCase('hello world');<br/>console.log(upperCaseString); // 'HELLO WORLD'"},upperFirst:{definition:"将字符串的第一个字符转换为大写",syntax:"_.upperFirst(string)",parameters:"string: string",return:"string",demo:"const upperFirstString = _.upperFirst('hello world');<br/>console.log(upperFirstString); // 'Hello world'"},each:{definition:"迭代数组或对象的每个元素，并对其执行回调函数",syntax:"_.each(collection, [iteratee=_.identity])",parameters:"collection: Array or Object, iteratee: Function",return:"undefined",demo:"_.each([1, 2, 3], value => console.log(value));<br/>// Output:<br/>// 1<br/>// 2<br/>// 3"},eachRight:{definition:"反向迭代数组或对象的每个元素，并对其执行回调函数",syntax:"_.eachRight(collection, [iteratee=_.identity])",parameters:"collection: Array or Object, iteratee: Function",return:"undefined",demo:"_.eachRight([1, 2, 3], value => console.log(value));<br/>// Output:<br/>// 3<br/>// 2<br/>// 1"},first:{definition:"获取数组或字符串的第一个元素",syntax:"_.first(array)",parameters:"array: Array or string",return:"any",demo:"const firstElement = _.first([1, 2, 3]);<br/>console.log(firstElement); // 1"},VERSION:{definition:"lodash库的版本号",syntax:"_.VERSION",return:"string",demo:"console.log(_.VERSION); // '4.17.21'"}},formulajs:(h={ABS:{definition:"返回一个数的绝对值",syntax:"ABS(number)",parameters:"number: number",return:"number"},ACCRINT:{definition:"计算从付息期开始到某个日期之间的累计应计利息",syntax:"ACCRINT(issue, firstInterest, settlement, rate, par, frequency, [basis])",parameters:"issue: Date, firstInterest: Date, settlement: Date, rate: number, par: number, frequency: number, basis: number",return:"number"},ACCRINTM:{definition:"计算在付息期内的累计应计利息",syntax:"ACCRINTM(issue, settlement, rate, par, basis)",parameters:"issue: Date, settlement: Date, rate: number, par: number, basis: number",return:"number"},ACOS:{definition:"返回一个数的反余弦值（单位为弧度）",syntax:"ACOS(number)",parameters:"number: number",return:"number"},ACOSH:{definition:"返回一个数的反双曲余弦值",syntax:"ACOSH(number)",parameters:"number: number",return:"number"},ACOT:{definition:"返回一个数的反余切值（单位为弧度）",syntax:"ACOT(number)",parameters:"number: number",return:"number"},ACOTH:{definition:"返回一个数的反双曲余切值",syntax:"ACOTH(number)",parameters:"number: number",return:"number"},ADD:{definition:"对两个数或范围的所有单元格执行加法操作",syntax:"ADD(...values)",parameters:"values: number or Range",return:"number"},AGGREGATE:{definition:"根据指定的选项对范围进行聚合计算",syntax:"AGGREGATE(function, options, ...values)",parameters:"function: number, options: number, values: number or Range",return:"number"},AMORDEGRC:{definition:"根据一年中的天数计算基于部分偿还的固定收益证券的应计折旧",syntax:"AMORDEGRC(cost, purchaseDate, firstPeriod, salvage, period, rate, basis)",parameters:"cost: number, purchaseDate: Date, firstPeriod: Date, salvage: number, period: number, rate: number, basis: number",return:"number"},AMORLINC:{definition:"根据一年中的天数计算基于完全偿还的固定收益证券的应计折旧",syntax:"AMORLINC(cost, purchaseDate, firstPeriod, salvage, period, rate, basis)",parameters:"cost: number, purchaseDate: Date, firstPeriod: Date, salvage: number, period: number, rate: number, basis: number",return:"number"},AND:{definition:"检查多个条件是否都为 TRUE，如果是则返回 TRUE，否则返回 FALSE",syntax:"AND(...logicalValues)",parameters:"logicalValues: boolean",return:"boolean"},ARABIC:{definition:"将罗马数字转换为阿拉伯数字",syntax:"ARABIC(romanNumber)",parameters:"romanNumber: string",return:"number"},ARGS2ARRAY:{definition:"将参数列表转换为数组",syntax:"ARGS2ARRAY(...args)",parameters:"args: any",return:"Array"},ASC:{definition:"返回给定字符的字符编码",syntax:"ASC(text)",parameters:"text: string",return:"number"},ASIN:{definition:"返回一个数的反正弦值（单位为弧度）",syntax:"ASIN(number)",parameters:"number: number",return:"number"},ASINH:{definition:"返回一个数的反双曲正弦值",syntax:"ASINH(number)",parameters:"number: number",return:"number"},ATAN:{definition:"返回一个数的反正切值（单位为弧度）",syntax:"ATAN(number)",parameters:"number: number",return:"number"},ATAN2:{definition:"返回点的极坐标，即从原点到点 (x_num, y_num) 之间的直线与正 x 轴之间的夹角（单位为弧度）",syntax:"ATAN2(xNum, yNum)",parameters:"xNum: number, yNum: number",return:"number"},ATANH:{definition:"返回一个数的反双曲正切值",syntax:"ATANH(number)",parameters:"number: number",return:"number"},AVEDEV:{definition:"计算一组数的平均绝对偏差",syntax:"AVEDEV(...values)",parameters:"values: number",return:"number"},AVERAGE:{definition:"计算一组数的算术平均值",syntax:"AVERAGE(...values)",parameters:"values: number",return:"number"},AVERAGEA:{definition:"计算一组数的算术平均值，包括对布尔值和文本的处理",syntax:"AVERAGEA(...values)",parameters:"values: number or boolean or string",return:"number"},AVERAGEIF:{definition:"根据指定条件计算一组数的条件平均值",syntax:"AVERAGEIF(range, criteria, [averageRange])",parameters:"range: Range, criteria: string or number or boolean, averageRange: Range (optional)",return:"number"},AVERAGEIFS:{definition:"根据多个条件计算一组数的条件平均值",syntax:"AVERAGEIFS(averageRange, criteriaRange1, criteria1, [criteriaRange2, criteria2, ...])",parameters:"averageRange: Range, criteriaRange1: Range, criteria1: string or number or boolean, criteriaRange2: Range, criteria2: string or number or boolean, ...",return:"number"},BAHTTEXT:{definition:"将数字转换为泰国文字格式",syntax:"BAHTTEXT(number)",parameters:"number: number",return:"string"},BASE:{definition:"将数字转换为指定基数的文本格式",syntax:"BASE(number, radix, [minLength])",parameters:"number: number, radix: number, minLength: number (optional)",return:"string"},BESSELI:{definition:"计算修正的贝塞尔函数 I(n, x)",syntax:"BESSELI(n, x)",parameters:"n: number, x: number",return:"number"},BESSELJ:{definition:"计算贝塞尔函数 J(n, x)",syntax:"BESSELJ(n, x)",parameters:"n: number, x: number",return:"number"},BESSELK:{definition:"计算贝塞尔函数 K(n, x)",syntax:"BESSELK(n, x)",parameters:"n: number, x: number",return:"number"},BESSELY:{definition:"计算贝塞尔函数 Y(n, x)",syntax:"BESSELY(n, x)",parameters:"n: number, x: number",return:"number"},BETA:{definition:"计算贝塔函数值",syntax:"BETA(x, y)",parameters:"x: number, y: number",return:"number"},BETADIST:{definition:"计算贝塔分布的累积分布函数值",syntax:"BETADIST(x, alpha, beta, [lowerBound], [upperBound])",parameters:"x: number, alpha: number, beta: number, lowerBound: number (optional), upperBound: number (optional)",return:"number"},BETAINV:{definition:"计算贝塔分布的反函数值",syntax:"BETAINV(probability, alpha, beta, [lowerBound], [upperBound])",parameters:"probability: number, alpha: number, beta: number, lowerBound: number (optional), upperBound: number (optional)",return:"number"},BIN2DEC:{definition:"将二进制数转换为十进制数",syntax:"BIN2DEC(binaryNumber)",parameters:"binaryNumber: string",return:"number"},BIN2HEX:{definition:"将二进制数转换为十六进制数",syntax:"BIN2HEX(binaryNumber, [minLength])",parameters:"binaryNumber: string, minLength: number (optional)",return:"string"},BIN2OCT:{definition:"将二进制数转换为八进制数",syntax:"BIN2OCT(binaryNumber, [minLength])",parameters:"binaryNumber: string, minLength: number (optional)",return:"string"},BINOMDIST:{definition:"计算二项分布的概率",syntax:"BINOMDIST(successes, trials, probability, [cumulative])",parameters:"successes: number, trials: number, probability: number, cumulative: boolean (optional)",return:"number"},CEILING:{definition:"将数向上取整为最接近的指定因数的倍数",syntax:"CEILING(number, [factor])",parameters:"number: number, factor: number (optional)",return:"number"},CELL:{definition:"返回单元格的属性信息，例如格式、地址和内容类型",syntax:"CELL(infoType, reference)",parameters:"infoType: string, reference: Range",return:"various"},CHAR:{definition:"根据字符编码返回字符",syntax:"CHAR(charCode)",parameters:"charCode: number",return:"string"},CHIDIST:{definition:"计算卡方分布的单尾概率",syntax:"CHIDIST(x, degreesOfFreedom)",parameters:"x: number, degreesOfFreedom: number",return:"number"},CHIINV:{definition:"计算卡方分布的反函数值",syntax:"CHIINV(probability, degreesOfFreedom)",parameters:"probability: number, degreesOfFreedom: number",return:"number"},CHISQ:{definition:"计算卡方分布的值",syntax:"CHISQ(x, degreesOfFreedom)",parameters:"x: number, degreesOfFreedom: number",return:"number"},CHITEST:{definition:"执行卡方检验以检测独立性",syntax:"CHITEST(actualRange, expectedRange)",parameters:"actualRange: Range, expectedRange: Range",return:"number"},CHOOSE:{definition:"根据索引返回选项列表中的元素",syntax:"CHOOSE(index, choice1, choice2, ...)",parameters:"index: number, choice1: any, choice2: any, ...",return:"any"},CLEAN:{definition:"从文本中删除非打印字符",syntax:"CLEAN(text)",parameters:"text: string",return:"string"},CODE:{definition:"返回文本中第一个字符的字符编码",syntax:"CODE(text)",parameters:"text: string",return:"number"},COLUMN:{definition:"返回包含指定单元格引用的列号",syntax:"COLUMN(reference)",parameters:"reference: Range",return:"number"},COLUMNS:{definition:"返回指定区域中的列数",syntax:"COLUMNS(range)",parameters:"range: Range",return:"number"},COMBIN:{definition:"计算从给定集合中选择指定数量的对象的组合数",syntax:"COMBIN(n, k)",parameters:"n: number, k: number",return:"number"},COMPLEX:{definition:"将实部和虚部的系数用于创建复数",syntax:"COMPLEX(real, [imaginary], [suffix])",parameters:"real: number, imaginary: number (optional), suffix: string (optional)",return:"complex number"},CONCAT:{definition:"将多个文本字符串连接为一个字符串",syntax:"CONCAT(text1, text2, ...)",parameters:"text1: string, text2: string, ...",return:"string"},CONCATENATE:{definition:"将多个文本字符串连接为一个字符串",syntax:"CONCATENATE(text1, text2, ...)",parameters:"text1: string, text2: string, ...",return:"string"},CONFIDENCE:{definition:"计算总体均值的置信区间范围",syntax:"CONFIDENCE(alpha, standardDeviation, size)",parameters:"alpha: number, standardDeviation: number, size: number",return:"number"},"CONFIDENCE.NORM":{definition:"计算正态分布总体均值的置信区间范围",syntax:"CONFIDENCE.NORM(alpha, standardDeviation, size)",parameters:"alpha: number, standardDeviation: number, size: number",return:"number"},"CONFIDENCE.T":{definition:"计算 t 分布总体均值的置信区间范围",syntax:"CONFIDENCE.T(alpha, standardDeviation, size)",parameters:"alpha: number, standardDeviation: number, size: number",return:"number"},CONVERT:{definition:"将数值从一种度量单位转换为另一种度量单位",syntax:"CONVERT(value, fromUnit, toUnit)",parameters:"value: number, fromUnit: string, toUnit: string",return:"number"},CORREL:{definition:"计算两个数据集之间的相关性",syntax:"CORREL(dataSet1, dataSet2)",parameters:"dataSet1: Range, dataSet2: Range",return:"number"},COS:{definition:"计算给定角度的余弦值",syntax:"COS(angle)",parameters:"angle: number",return:"number"},COSH:{definition:"计算给定角度的双曲余弦值",syntax:"COSH(angle)",parameters:"angle: number",return:"number"},COUNT:{definition:"计算给定数据集中的数字个数",syntax:"COUNT(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"},COUNTA:{definition:"计算给定数据集中的非空单元格个数",syntax:"COUNTA(value1, value2, ...)",parameters:"value1: any, value2: any, ...",return:"number"},COUNTBLANK:{definition:"计算给定数据集中的空单元格个数",syntax:"COUNTBLANK(range)",parameters:"range: Range",return:"number"},COUNTIF:{definition:"根据指定条件计算数据集中满足条件的单元格个数",syntax:"COUNTIF(range, criteria)",parameters:"range: Range, criteria: string or number or boolean",return:"number"},COUNTIFS:{definition:"根据多个条件计算数据集中满足所有条件的单元格个数",syntax:"COUNTIFS(criteriaRange1, criteria1, [criteriaRange2, criteria2, ...])",parameters:"criteriaRange1: Range, criteria1: string or number or boolean, criteriaRange2: Range, criteria2: string or number or boolean, ...",return:"number"},COUPDAYBS:{definition:"计算从结算日到下一付息日之间的天数",syntax:"COUPDAYBS(settlement, maturity, frequency, [basis])",parameters:"settlement: Date, maturity: Date, frequency: number, basis: number (optional)",return:"number"},COUPDAYS:{definition:"计算在结算日和到期日之间的天数",syntax:"COUPDAYS(settlement, maturity, frequency, [basis])",parameters:"settlement: Date, maturity: Date, frequency: number, basis: number (optional)",return:"number"},COUPDAYSNC:{definition:"计算在结算日和下一付息日之间的天数，不考虑其他支付条件",syntax:"COUPDAYSNC(settlement, maturity, frequency, [basis])",parameters:"settlement: Date, maturity: Date, frequency: number, basis: number (optional)",return:"number"},COUPNCD:{definition:"返回下一付息日的日期",syntax:"COUPNCD(settlement, maturity, frequency, [basis])",parameters:"settlement: Date, maturity: Date, frequency: number, basis: number (optional)",return:"Date"},COUPNUM:{definition:"计算在结算日和到期日之间的付息期数",syntax:"COUPNUM(settlement, maturity, frequency, [basis])",parameters:"settlement: Date, maturity: Date, frequency: number, basis: number (optional)",return:"number"},COUPPCD:{definition:"返回上一付息日的日期",syntax:"COUPPCD(settlement, maturity, frequency, [basis])",parameters:"settlement: Date, maturity: Date, frequency: number, basis: number (optional)",return:"Date"}},(0,b.Z)(h,"COSH",{definition:"计算给定角度的双曲余弦值",syntax:"COSH(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"COT",{definition:"计算给定角度的余切值",syntax:"COT(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"COTH",{definition:"计算给定角度的双曲余切值",syntax:"COTH(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"COUNT",{definition:"计算给定数据集中的数字个数",syntax:"COUNT(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"COUNTA",{definition:"计算给定数据集中的非空单元格个数",syntax:"COUNTA(value1, value2, ...)",parameters:"value1: any, value2: any, ...",return:"number"}),(0,b.Z)(h,"COUNTBLANK",{definition:"计算给定数据集中的空单元格个数",syntax:"COUNTBLANK(range)",parameters:"range: Range",return:"number"}),(0,b.Z)(h,"COUNTIF",{definition:"根据指定条件计算数据集中满足条件的单元格个数",syntax:"COUNTIF(range, criteria)",parameters:"range: Range, criteria: string or number or boolean",return:"number"}),(0,b.Z)(h,"COUNTIFS",{definition:"根据多个条件计算数据集中满足所有条件的单元格个数",syntax:"COUNTIFS(criteriaRange1, criteria1, [criteriaRange2, criteria2, ...])",parameters:"criteriaRange1: Range, criteria1: string or number or boolean, criteriaRange2: Range, criteria2: string or number or boolean, ...",return:"number"}),(0,b.Z)(h,"COUNTUNIQUE",{definition:"计算给定数据集中的唯一值的个数",syntax:"COUNTUNIQUE(value1, value2, ...)",parameters:"value1: any, value2: any, ...",return:"number"}),(0,b.Z)(h,"CURRENCY",{definition:"将给定数字格式化为货币",syntax:"CURRENCY(value, [symbol])",parameters:"value: number, symbol: string (optional)",return:"string"}),(0,b.Z)(h,"CURRENCYCONVERT",{definition:"将数值从一种货币单位转换为另一种货币单位",syntax:"CURRENCYCONVERT(value, fromCurrency, toCurrency, [conversionType])",parameters:"value: number, fromCurrency: string, toCurrency: string, conversionType: number (optional)",return:"number"}),(0,b.Z)(h,"CURRENTCELL",{definition:"返回包含公式的单元格的引用",syntax:"CURRENTCELL()",parameters:"",return:"Range"}),(0,b.Z)(h,"CUSTOMFUNCTIONS",{definition:"返回已定义的自定义函数的列表",syntax:"CUSTOMFUNCTIONS()",parameters:"",return:"array of strings"}),(0,b.Z)(h,"DATE",{definition:"返回给定年、月、日的日期",syntax:"DATE(year, month, day)",parameters:"year: number, month: number, day: number",return:"Date"}),(0,b.Z)(h,"DATEDIF",{definition:"计算两个日期之间的差异",syntax:"DATEDIF(startDate, endDate, unit)",parameters:"startDate: Date, endDate: Date, unit: string",return:"number"}),(0,b.Z)(h,"DATEVALUE",{definition:"将日期字符串转换为日期值",syntax:"DATEVALUE(date)",parameters:"date: string",return:"Date"}),(0,b.Z)(h,"DAY",{definition:"返回给定日期的日份",syntax:"DAY(date)",parameters:"date: Date",return:"number"}),(0,b.Z)(h,"DAYS",{definition:"计算两个日期之间的天数差",syntax:"DAYS(startDate, endDate)",parameters:"startDate: Date, endDate: Date",return:"number"}),(0,b.Z)(h,"DAYS360",{definition:"计算两个日期之间的360天数差",syntax:"DAYS360(startDate, endDate, [method])",parameters:"startDate: Date, endDate: Date, method: number (optional)",return:"number"}),(0,b.Z)(h,"DB",{definition:"返回给定资产在指定时期内的折旧费用",syntax:"DB(cost, salvage, life, period, [month])",parameters:"cost: number, salvage: number, life: number, period: number, month: number (optional)",return:"number"}),(0,b.Z)(h,"DCOUNT",{definition:"根据指定条件计算数据集中满足条件的单元格个数",syntax:"DCOUNT(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DCOUNTA",{definition:"计算数据集中满足非空条件的单元格个数",syntax:"DCOUNTA(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DCOUNTBLANK",{definition:"计算数据集中满足空条件的单元格个数",syntax:"DCOUNTBLANK(database, field)",parameters:"database: Range, field: string",return:"number"}),(0,b.Z)(h,"DCOUNTUNIQUE",{definition:"计算数据集中满足唯一值条件的单元格个数",syntax:"DCOUNTUNIQUE(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DECIMAL",{definition:"将给定文本表示的数字转换为十进制数",syntax:"DECIMAL(text, [base])",parameters:"text: string, base: number (optional)",return:"number"}),(0,b.Z)(h,"DEGREES",{definition:"将给定弧度转换为度数",syntax:"DEGREES(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"DELTA",{definition:"如果两个值相等，则返回1；否则返回0",syntax:"DELTA(value1, value2)",parameters:"value1: number, value2: number",return:"number"}),(0,b.Z)(h,"DEVSQ",{definition:"计算数据集的偏差平方和",syntax:"DEVSQ(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"DGET",{definition:"根据指定条件从数据库中提取单个记录",syntax:"DGET(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"any"}),(0,b.Z)(h,"DISC",{definition:"计算有价证券的贴现率",syntax:"DISC(settlement, maturity, pr, redemption, [basis])",parameters:"settlement: Date, maturity: Date, pr: number, redemption: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"DMAX",{definition:"从数据库中返回满足条件的最大值",syntax:"DMAX(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"any"}),(0,b.Z)(h,"DMIN",{definition:"从数据库中返回满足条件的最小值",syntax:"DMIN(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"any"}),(0,b.Z)(h,"DOLLAR",{definition:"将给定数字格式化为货币，可指定小数位数和货币符号",syntax:"DOLLAR(value, [decimals])",parameters:"value: number, decimals: number (optional)",return:"string"}),(0,b.Z)(h,"DOLLARDE",{definition:"将以分为单位的价格转换为以小数表示的价格",syntax:"DOLLARDE(fractionalDollar, [fraction])",parameters:"fractionalDollar: number, fraction: number (optional)",return:"number"}),(0,b.Z)(h,"DOLLARFR",{definition:"将以小数表示的价格转换为以分为单位的价格",syntax:"DOLLARFR(decimalDollar, [fraction])",parameters:"decimalDollar: number, fraction: number (optional)",return:"number"}),(0,b.Z)(h,"DPRODUCT",{definition:"在数据库中计算满足条件的数值字段的乘积",syntax:"DPRODUCT(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DSTDEV",{definition:"计算在数据库中满足条件的数值字段的样本标准偏差",syntax:"DSTDEV(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DSTDEVP",{definition:"计算在数据库中满足条件的数值字段的总体标准偏差",syntax:"DSTDEVP(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DSUM",{definition:"在数据库中计算满足条件的数值字段的总和",syntax:"DSUM(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DURATION",{definition:"计算固定利率债券的修正久期",syntax:"DURATION(settlement, maturity, coupon, yield, frequency, [basis])",parameters:"settlement: Date, maturity: Date, coupon: number, yield: number, frequency: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"DVAR",{definition:"计算在数据库中满足条件的数值字段的样本方差",syntax:"DVAR(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"DVARP",{definition:"计算在数据库中满足条件的数值字段的总体方差",syntax:"DVARP(database, field, criteria)",parameters:"database: Range, field: string, criteria: Range",return:"number"}),(0,b.Z)(h,"EDATE",{definition:"返回给定日期之后或之前指定月份数的日期",syntax:"EDATE(startDate, months)",parameters:"startDate: Date, months: number",return:"Date"}),(0,b.Z)(h,"EFFECT",{definition:"根据名义年利率和每年复利计息次数，计算实际年利率",syntax:"EFFECT(nominalRate, npery)",parameters:"nominalRate: number, npery: number",return:"number"}),(0,b.Z)(h,"ENCODEURL",{definition:"将 URL 字符串进行 URL 编码",syntax:"ENCODEURL(url)",parameters:"url: string",return:"string"}),(0,b.Z)(h,"EOMONTH",{definition:"返回给定日期所在月份的月底日期",syntax:"EOMONTH(startDate, months)",parameters:"startDate: Date, months: number",return:"Date"}),(0,b.Z)(h,"ERF",{definition:"计算高斯误差函数的值",syntax:"ERF(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"ERFC",{definition:"计算补余误差函数的值",syntax:"ERFC(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"ERROR.TYPE",{definition:"返回错误值的类型",syntax:"ERROR.TYPE(errorValue)",parameters:"errorValue: any",return:"number"}),(0,b.Z)(h,"EURO",{definition:"将给定数字格式化为欧元货币",syntax:"EURO(value)",parameters:"value: number",return:"string"}),(0,b.Z)(h,"EUROCONVERT",{definition:"将数值从一种欧元货币单位转换为另一种欧元货币单位",syntax:"EUROCONVERT(value, sourceCurrency, targetCurrency, [fullPrecision], [triangulationPrecision])",parameters:"value: number, sourceCurrency: string, targetCurrency: string, fullPrecision: boolean (optional), triangulationPrecision: number (optional)",return:"number"}),(0,b.Z)(h,"EVEN",{definition:"将给定数值向上取整为最接近的偶数",syntax:"EVEN(value)",parameters:"value: number",return:"number"}),(0,b.Z)(h,"EXACT",{definition:"比较两个文本字符串是否完全相同",syntax:"EXACT(text1, text2)",parameters:"text1: string, text2: string",return:"boolean"}),(0,b.Z)(h,"EXP",{definition:"计算 e 的指定次幂",syntax:"EXP(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"EXPON.DIST",{definition:"计算指数分布的概率密度函数或累积分布函数",syntax:"EXPON.DIST(x, lambda, [cumulative])",parameters:"x: number, lambda: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"FACT",{definition:"计算给定数值的阶乘",syntax:"FACT(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"FACTDOUBLE",{definition:"计算给定数值的双阶乘",syntax:"FACTDOUBLE(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"FALSE",{definition:"返回逻辑值 FALSE",syntax:"FALSE()",return:"boolean"}),(0,b.Z)(h,"FDIST",{definition:"计算 Fisher 分布的累积分布函数",syntax:"FDIST(x, degreesFreedom1, degreesFreedom2)",parameters:"x: number, degreesFreedom1: number, degreesFreedom2: number",return:"number"}),(0,b.Z)(h,"FINDB",{definition:"在文本字符串中查找指定子字符串的起始位置（不区分大小写）",syntax:"FINDB(findText, withinText, [startIndex])",parameters:"findText: string, withinText: string, startIndex: number (optional)",return:"number"}),(0,b.Z)(h,"FIND",{definition:"在文本字符串中查找指定子字符串的起始位置（区分大小写）",syntax:"FIND(findText, withinText, [startIndex])",parameters:"findText: string, withinText: string, startIndex: number (optional)",return:"number"}),(0,b.Z)(h,"FINV",{definition:"计算 Fisher 分布的反函数",syntax:"FINV(probability, degreesFreedom1, degreesFreedom2)",parameters:"probability: number, degreesFreedom1: number, degreesFreedom2: number",return:"number"}),(0,b.Z)(h,"FISHER",{definition:"计算 Fisher 变换后的值",syntax:"FISHER(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"FISHERINV",{definition:"计算 Fisher 变换的逆值",syntax:"FISHERINV(y)",parameters:"y: number",return:"number"}),(0,b.Z)(h,"FIXED",{definition:"将给定数字按指定小数位数和用逗号分隔的千位分隔符进行格式化",syntax:"FIXED(value, [decimals], [noCommas])",parameters:"value: number, decimals: number (optional), noCommas: boolean (optional)",return:"string"}),(0,b.Z)(h,"FLOOR",{definition:"将给定数值向下取整为最接近的指定因子的倍数",syntax:"FLOOR(value, factor)",parameters:"value: number, factor: number",return:"number"}),(0,b.Z)(h,"FLOOR.MATH",{definition:"将给定数值向下取整为最接近的指定因子的倍数，可指定取整方式",syntax:"FLOOR.MATH(value, factor, [mode])",parameters:"value: number, factor: number, mode: number (optional)",return:"number"}),(0,b.Z)(h,"FLOOR.PRECISE",{definition:"将给定数值向下取整为最接近的指定因子的倍数",syntax:"FLOOR.PRECISE(value, factor)",parameters:"value: number, factor: number",return:"number"}),(0,b.Z)(h,"FORECAST",{definition:"使用线性回归计算给定 x 值对应的 y 值",syntax:"FORECAST(x, knownYs, knownXs)",parameters:"x: number, knownYs: Range, knownXs: Range",return:"number"}),(0,b.Z)(h,"FORMULATEXT",{definition:"返回指定单元格中公式的文本表示形式",syntax:"FORMULATEXT(reference)",parameters:"reference: Range",return:"string"}),(0,b.Z)(h,"FREQUENCY",{definition:"计算数据集中在给定区间内的值的频率分布",syntax:"FREQUENCY(data, bins)",parameters:"data: Range, bins: Range",return:"Array"}),(0,b.Z)(h,"FTEST",{definition:"计算两个数据集之间的方差比",syntax:"FTEST(array1, array2)",parameters:"array1: Range, array2: Range",return:"number"}),(0,b.Z)(h,"FV",{definition:"计算投资或贷款的未来价值",syntax:"FV(rate, nper, pmt, [pv], [type])",parameters:"rate: number, nper: number, pmt: number, pv: number (optional), type: number (optional)",return:"number"}),(0,b.Z)(h,"FVSCHEDULE",{definition:"根据多个不同的复利率计算投资的未来价值",syntax:"FVSCHEDULE(principal, schedule)",parameters:"principal: number, schedule: Range",return:"number"}),(0,b.Z)(h,"GAMMA",{definition:"计算伽马函数的值",syntax:"GAMMA(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"GAMMA.DIST",{definition:"计算伽马分布的概率密度函数或累积分布函数",syntax:"GAMMA.DIST(x, alpha, beta, [cumulative])",parameters:"x: number, alpha: number, beta: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"GAMMA.INV",{definition:"计算伽马分布的反函数",syntax:"GAMMA.INV(probability, alpha, beta)",parameters:"probability: number, alpha: number, beta: number",return:"number"}),(0,b.Z)(h,"GAMMALN",{definition:"计算伽马函数的自然对数",syntax:"GAMMALN(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"GAMMALN.PRECISE",{definition:"计算伽马函数的自然对数",syntax:"GAMMALN.PRECISE(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"GAUSS",{definition:"计算标准正态分布的累积分布函数",syntax:"GAUSS(z)",parameters:"z: number",return:"number"}),(0,b.Z)(h,"GCD",{definition:"计算给定数值的最大公约数",syntax:"GCD(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"GEOMEAN",{definition:"计算给定数值的几何平均值",syntax:"GEOMEAN(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"GESTEP",{definition:"如果给定数值大于等于阈值，返回 1；否则返回 0",syntax:"GESTEP(number, step)",parameters:"number: number, step: number",return:"number"}),(0,b.Z)(h,"GROWTH",{definition:"基于已知 x 值和 y 值，计算指数回归的预测结果",syntax:"GROWTH(knownYs, [knownXs], [newXs], [const])",parameters:"knownYs: Range, knownXs: Range (optional), newXs: Range (optional), const: boolean (optional)",return:"Array"}),(0,b.Z)(h,"HARMEAN",{definition:"计算给定数值的调和平均值",syntax:"HARMEAN(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"HEX2BIN",{definition:"将十六进制数转换为二进制数",syntax:"HEX2BIN(number, [places])",parameters:"number: string, places: number (optional)",return:"string"}),(0,b.Z)(h,"HEX2DEC",{definition:"将十六进制数转换为十进制数",syntax:"HEX2DEC(number)",parameters:"number: string",return:"number"}),(0,b.Z)(h,"HEX2OCT",{definition:"将十六进制数转换为八进制数",syntax:"HEX2OCT(number, [places])",parameters:"number: string, places: number (optional)",return:"string"}),(0,b.Z)(h,"HLOOKUP",{definition:"在水平范围内查找指定值，并返回对应的垂直范围内的值",syntax:"HLOOKUP(lookupValue, table, rowIndex, [rangeLookup])",parameters:"lookupValue: any, table: Range, rowIndex: number, rangeLookup: boolean (optional)",return:"any"}),(0,b.Z)(h,"HOUR",{definition:"从给定日期或时间值中提取小时部分",syntax:"HOUR(value)",parameters:"value: date or time",return:"number"}),(0,b.Z)(h,"HYPERLINK",{definition:"创建一个链接，将显示文本指向指定的 URL",syntax:"HYPERLINK(url, [linkText])",parameters:"url: string, linkText: string (optional)",return:"string"}),(0,b.Z)(h,"HYPGEOM.DIST",{definition:"计算超几何分布的概率密度函数或累积分布函数",syntax:"HYPGEOM.DIST(x, sampleS, numberSample, populationS, [cumulative])",parameters:"x: number, sampleS: number, numberSample: number, populationS: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"IF",{definition:"根据给定条件返回不同的结果",syntax:"IF(condition, valueIfTrue, valueIfFalse)",parameters:"condition: boolean, valueIfTrue: any, valueIfFalse: any",return:"any"}),(0,b.Z)(h,"IFERROR",{definition:"如果表达式返回错误值，返回指定的值，否则返回表达式的结果",syntax:"IFERROR(value, valueIfError)",parameters:"value: any, valueIfError: any",return:"any"}),(0,b.Z)(h,"IFNA",{definition:"如果表达式返回 #N/A 错误，返回指定的值，否则返回表达式的结果",syntax:"IFNA(value, valueIfNa)",parameters:"value: any, valueIfNa: any",return:"any"}),(0,b.Z)(h,"IMABS",{definition:"计算复数的绝对值",syntax:"IMABS(inumber)",parameters:"inumber: complex number",return:"number"}),(0,b.Z)(h,"IMAGINARY",{definition:"从复数中提取虚部",syntax:"IMAGINARY(inumber)",parameters:"inumber: complex number",return:"number"}),(0,b.Z)(h,"IMARGUMENT",{definition:"计算复数的辐角",syntax:"IMARGUMENT(inumber)",parameters:"inumber: complex number",return:"number"}),(0,b.Z)(h,"IMCONJUGATE",{definition:"计算复数的共轭复数",syntax:"IMCONJUGATE(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMCOS",{definition:"计算复数的余弦值",syntax:"IMCOS(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMCOSH",{definition:"计算复数的双曲余弦值",syntax:"IMCOSH(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMCOT",{definition:"计算复数的余切值",syntax:"IMCOT(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMCSC",{definition:"计算复数的余割值",syntax:"IMCSC(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMCSCH",{definition:"计算复数的双曲余割值",syntax:"IMCSCH(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMDIV",{definition:"计算两个复数的商",syntax:"IMDIV(inumber1, inumber2)",parameters:"inumber1: complex number, inumber2: complex number",return:"complex number"}),(0,b.Z)(h,"IMEXP",{definition:"计算复数的指数函数值",syntax:"IMEXP(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMLN",{definition:"计算复数的自然对数",syntax:"IMLN(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMLOG10",{definition:"计算复数的以 10 为底的对数",syntax:"IMLOG10(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMLOG2",{definition:"计算复数的以 2 为底的对数",syntax:"IMLOG2(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMPOWER",{definition:"计算复数的指定幂次方",syntax:"IMPOWER(inumber, number)",parameters:"inumber: complex number, number: number",return:"complex number"}),(0,b.Z)(h,"IMPRODUCT",{definition:"计算多个复数的乘积",syntax:"IMPRODUCT(inumber1, inumber2, ...)",parameters:"inumber1: complex number, inumber2: complex number, ...",return:"complex number"}),(0,b.Z)(h,"IMREAL",{definition:"从复数中提取实部",syntax:"IMREAL(inumber)",parameters:"inumber: complex number",return:"number"}),(0,b.Z)(h,"IMSEC",{definition:"计算复数的正割值",syntax:"IMSEC(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMSECH",{definition:"计算复数的双曲正割值",syntax:"IMSECH(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMSIN",{definition:"计算复数的正弦值",syntax:"IMSIN(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMSINH",{definition:"计算复数的双曲正弦值",syntax:"IMSINH(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMSQRT",{definition:"计算复数的平方根",syntax:"IMSQRT(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"IMSUB",{definition:"计算两个复数的差",syntax:"IMSUB(inumber1, inumber2)",parameters:"inumber1: complex number, inumber2: complex number",return:"complex number"}),(0,b.Z)(h,"IMSUM",{definition:"计算多个复数的和",syntax:"IMSUM(inumber1, inumber2, ...)",parameters:"inumber1: complex number, inumber2: complex number, ...",return:"complex number"}),(0,b.Z)(h,"IMTAN",{definition:"计算复数的正切值",syntax:"IMTAN(inumber)",parameters:"inumber: complex number",return:"complex number"}),(0,b.Z)(h,"INDEX",{definition:"返回给定范围内指定行和列的单元格值",syntax:"INDEX(range, row, [column])",parameters:"range: Range, row: number, column: number (optional)",return:"any"}),(0,b.Z)(h,"INDIRECT",{definition:"返回由给定字符串构建的单元格引用的值",syntax:"INDIRECT(refText, [a1])",parameters:"refText: string, a1: boolean (optional)",return:"any"}),(0,b.Z)(h,"INT",{definition:"向下取整，返回小于或等于给定数值的最大整数",syntax:"INT(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"INTERCEPT",{definition:"计算线性回归线的截距",syntax:"INTERCEPT(knownYs, knownXs)",parameters:"knownYs: Range, knownXs: Range",return:"number"}),(0,b.Z)(h,"INTRATE",{definition:"计算定期利息的利率",syntax:"INTRATE(settlement, maturity, investment, redemption, basis)",parameters:"settlement: date, maturity: date, investment: number, redemption: number, basis: number",return:"number"}),(0,b.Z)(h,"IPMT",{definition:"计算定期支付期间的利息部分",syntax:"IPMT(rate, period, periods, presentValue, [futureValue], [type])",parameters:"rate: number, period: number, periods: number, presentValue: number, futureValue: number (optional), type: number (optional)",return:"number"}),(0,b.Z)(h,"IRR",{definition:"计算一系列现金流的内部收益率",syntax:"IRR(values, [guess])",parameters:"values: Range, guess: number (optional)",return:"number"}),(0,b.Z)(h,"ISBLANK",{definition:"检查给定单元格是否为空",syntax:"ISBLANK(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISERR",{definition:"检查给定值是否为除 #N/A 之外的错误值",syntax:"ISERR(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISERROR",{definition:"检查给定值是否为任何错误值",syntax:"ISERROR(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISEVEN",{definition:"检查给定数值是否为偶数",syntax:"ISEVEN(value)",parameters:"value: number",return:"boolean"}),(0,b.Z)(h,"ISFORMULA",{definition:"检查给定单元格是否包含公式",syntax:"ISFORMULA(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISLOGICAL",{definition:"检查给定值是否为逻辑值",syntax:"ISLOGICAL(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISNA",{definition:"检查给定值是否为 #N/A 错误",syntax:"ISNA(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISNONTEXT",{definition:"检查给定值是否为非文本值",syntax:"ISNONTEXT(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISNUMBER",{definition:"检查给定值是否为数值",syntax:"ISNUMBER(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISO.CEILING",{definition:"按指定倍数将数值向上舍入到最接近的整数或指定的倍数",syntax:"ISO.CEILING(number, [significance])",parameters:"number: number, significance: number (optional)",return:"number"}),(0,b.Z)(h,"ISODD",{definition:"检查给定数值是否为奇数",syntax:"ISODD(value)",parameters:"value: number",return:"boolean"}),(0,b.Z)(h,"ISPMT",{definition:"计算固定利率下特定支付期间的利息支付额",syntax:"ISPMT(rate, period, periods, presentValue)",parameters:"rate: number, period: number, periods: number, presentValue: number",return:"number"}),(0,b.Z)(h,"ISREF",{definition:"检查给定值是否为引用",syntax:"ISREF(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"ISTEXT",{definition:"检查给定值是否为文本",syntax:"ISTEXT(value)",parameters:"value: any",return:"boolean"}),(0,b.Z)(h,"KURT",{definition:"计算一组数据的峰度（峰值与正态分布峰值之间的差异程度）",syntax:"KURT(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"LARGE",{definition:"返回一组数据中第 k 个最大值",syntax:"LARGE(array, k)",parameters:"array: Range, k: number",return:"number"}),(0,b.Z)(h,"LCM",{definition:"计算一组数的最小公倍数",syntax:"LCM(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"LEFT",{definition:"从文本字符串的左侧提取指定数量的字符",syntax:"LEFT(text, [numChars])",parameters:"text: string, numChars: number (optional)",return:"string"}),(0,b.Z)(h,"LEN",{definition:"返回文本字符串中的字符数",syntax:"LEN(text)",parameters:"text: string",return:"number"}),(0,b.Z)(h,"LINEST",{definition:"计算最佳拟合直线的统计信息",syntax:"LINEST(knownYs, [knownXs], [const], [stats])",parameters:"knownYs: Range, knownXs: Range (optional), const: boolean (optional), stats: boolean (optional)",return:"array or value"}),(0,b.Z)(h,"LN",{definition:"计算数值的自然对数",syntax:"LN(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"LOG",{definition:"计算数值的对数",syntax:"LOG(number, [base])",parameters:"number: number, base: number (optional)",return:"number"}),(0,b.Z)(h,"LOG10",{definition:"计算数值的以 10 为底的对数",syntax:"LOG10(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"LOGEST",{definition:"根据指定的数据集计算最佳拟合指数曲线的统计信息",syntax:"LOGEST(knownYs, [knownXs], [const], [stats])",parameters:"knownYs: Range, knownXs: Range (optional), const: boolean (optional), stats: boolean (optional)",return:"array or value"}),(0,b.Z)(h,"LOGINV",{definition:"计算指定均值和标准差的对数正态分布的反函数值",syntax:"LOGINV(probability, mean, standardDev)",parameters:"probability: number, mean: number, standardDev: number",return:"number"}),(0,b.Z)(h,"LOGNORM.DIST",{definition:"计算指定均值和标准差的对数正态分布的概率密度函数值",syntax:"LOGNORM.DIST(x, mean, standardDev, [cumulative])",parameters:"x: number, mean: number, standardDev: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"LOGNORM.INV",{definition:"计算指定均值和标准差的对数正态分布的反函数值",syntax:"LOGNORM.INV(probability, mean, standardDev)",parameters:"probability: number, mean: number, standardDev: number",return:"number"}),(0,b.Z)(h,"LOOKUP",{definition:"在向量或数组中查找一个值，并返回该值所在位置的对应值",syntax:"LOOKUP(lookupValue, lookupVector, [resultVector])",parameters:"lookupValue: any, lookupVector: Range, resultVector: Range (optional)",return:"any"}),(0,b.Z)(h,"LOWER",{definition:"将文本字符串转换为小写",syntax:"LOWER(text)",parameters:"text: string",return:"string"}),(0,b.Z)(h,"MATCH",{definition:"查找指定值在向量或数组中的位置",syntax:"MATCH(lookupValue, lookupArray, [matchType])",parameters:"lookupValue: any, lookupArray: Range, matchType: number (optional)",return:"number"}),(0,b.Z)(h,"MAX",{definition:"返回一组数值中的最大值",syntax:"MAX(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"MAXA",{definition:"返回一组数值或文本中的最大值（不计算空值）",syntax:"MAXA(value1, value2, ...)",parameters:"value1: any, value2: any, ...",return:"any"}),(0,b.Z)(h,"MDETERM",{definition:"计算给定矩阵的行列式",syntax:"MDETERM(array)",parameters:"array: Range",return:"number"}),(0,b.Z)(h,"MDURATION",{definition:"计算修正久期，即一种测量债券价格对于收益率变化的敏感度指标",syntax:"MDURATION(settlement, maturity, coupon, yld, frequency, [basis])",parameters:"settlement: Date, maturity: Date, coupon: number, yld: number, frequency: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"MEDIAN",{definition:"返回一组数值中的中位数",syntax:"MEDIAN(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"MID",{definition:"从文本字符串的指定位置开始提取指定数量的字符",syntax:"MID(text, startNum, numChars)",parameters:"text: string, startNum: number, numChars: number",return:"string"}),(0,b.Z)(h,"MIN",{definition:"返回一组数值中的最小值",syntax:"MIN(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"MINA",{definition:"返回一组数值或文本中的最小值（不计算空值）",syntax:"MINA(value1, value2, ...)",parameters:"value1: any, value2: any, ...",return:"any"}),(0,b.Z)(h,"MINVERSE",{definition:"计算给定矩阵的逆矩阵",syntax:"MINVERSE(array)",parameters:"array: Range",return:"array"}),(0,b.Z)(h,"MIRR",{definition:"计算一系列现金流的修改内部收益率",syntax:"MIRR(values, financeRate, reinvestRate)",parameters:"values: Range, financeRate: number, reinvestRate: number",return:"number"}),(0,b.Z)(h,"MMULT",{definition:"计算两个矩阵的乘积",syntax:"MMULT(array1, array2)",parameters:"array1: Range, array2: Range",return:"array"}),(0,b.Z)(h,"MOD",{definition:"返回两个数相除的余数",syntax:"MOD(number, divisor)",parameters:"number: number, divisor: number",return:"number"}),(0,b.Z)(h,"MODE",{definition:"返回一组数值中的众数（出现频率最高的值）",syntax:"MODE(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"number or array"}),(0,b.Z)(h,"MODE.MULT",{definition:"返回一组数值中的多个众数（出现频率最高的值）",syntax:"MODE.MULT(value1, value2, ...)",parameters:"value1: number, value2: number, ...",return:"array"}),(0,b.Z)(h,"MONTH",{definition:"返回给定日期的月份",syntax:"MONTH(date)",parameters:"date: Date",return:"number"}),(0,b.Z)(h,"MROUND",{definition:"将数值舍入到指定的倍数",syntax:"MROUND(number, multiple)",parameters:"number: number, multiple: number",return:"number"}),(0,b.Z)(h,"MULTINOMIAL",{definition:"计算一组数的多项式系数",syntax:"MULTINOMIAL(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"MUNIT",{definition:"生成给定维度的单位矩阵",syntax:"MUNIT(dimension)",parameters:"dimension: number",return:"array"}),(0,b.Z)(h,"N",{definition:"将给定值转换为数值",syntax:"N(value)",parameters:"value: any",return:"number"}),(0,b.Z)(h,"NA",{definition:"返回错误值 #N/A",syntax:"NA()",parameters:"",return:"error"}),(0,b.Z)(h,"NEGBINOM.DIST",{definition:"计算负二项分布的概率密度函数值",syntax:"NEGBINOM.DIST(x, r, p, [cumulative])",parameters:"x: number, r: number, p: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"NETWORKDAYS",{definition:"计算两个日期之间的工作日数",syntax:"NETWORKDAYS(startDate, endDate, [holidays])",parameters:"startDate: Date, endDate: Date, holidays: Range (optional)",return:"number"}),(0,b.Z)(h,"NOMINAL",{definition:"计算指定名义利率和复利期数下的年利率",syntax:"NOMINAL(effectiveRate, periods)",parameters:"effectiveRate: number, periods: number",return:"number"}),(0,b.Z)(h,"NORM.DIST",{definition:"计算正态分布的概率密度函数值",syntax:"NORM.DIST(x, mean, standardDev, [cumulative])",parameters:"x: number, mean: number, standardDev: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"NORM.INV",{definition:"计算指定均值和标准差的正态分布的反函数值",syntax:"NORM.INV(probability, mean, standardDev)",parameters:"probability: number, mean: number, standardDev: number",return:"number"}),(0,b.Z)(h,"NORM.S.DIST",{definition:"计算标准正态分布的概率密度函数值",syntax:"NORM.S.DIST(x, [cumulative])",parameters:"x: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"NORM.S.INV",{definition:"计算标准正态分布的反函数值",syntax:"NORM.S.INV(probability)",parameters:"probability: number",return:"number"}),(0,b.Z)(h,"NOT",{definition:"对逻辑值进行取反操作",syntax:"NOT(logical)",parameters:"logical: boolean",return:"boolean"}),(0,b.Z)(h,"NOW",{definition:"返回当前日期和时间",syntax:"NOW()",parameters:"",return:"Date"}),(0,b.Z)(h,"NPER",{definition:"计算定期支付额、利率和期数下的贷款或投资的净现值",syntax:"NPER(rate, payment, presentValue, [futureValue], [type])",parameters:"rate: number, payment: number, presentValue: number, futureValue: number (optional), type: number (optional)",return:"number"}),(0,b.Z)(h,"NPV",{definition:"计算一系列现金流的净现值",syntax:"NPV(rate, value1, value2, ...)",parameters:"rate: number, value1: number, value2: number, ...",return:"number"}),(0,b.Z)(h,"NUMBERVALUE",{definition:"将文本字符串转换为数值，根据指定的千位分隔符和小数分隔符进行解析",syntax:"NUMBERVALUE(text, [decimalSeparator], [groupSeparator])",parameters:"text: string, decimalSeparator: string (optional), groupSeparator: string (optional)",return:"number"}),(0,b.Z)(h,"ODD",{definition:"将数值向上取整为最接近的奇数",syntax:"ODD(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"OFFSET",{definition:"返回给定范围的相对偏移范围",syntax:"OFFSET(reference, rows, cols, [height], [width])",parameters:"reference: Range, rows: number, cols: number, height: number (optional), width: number (optional)",return:"Range"}),(0,b.Z)(h,"OR",{definition:"对一组逻辑值进行逻辑或操作",syntax:"OR(logical1, logical2, ...)",parameters:"logical1: boolean, logical2: boolean, ...",return:"boolean"}),(0,b.Z)(h,"PEARSON",{definition:"计算两组数值之间的皮尔逊相关系数",syntax:"PEARSON(array1, array2)",parameters:"array1: Range, array2: Range",return:"number"}),(0,b.Z)(h,"PERCENTILE.EXC",{definition:"计算一组数值中的指定百分位数（排除最高和最低值）",syntax:"PERCENTILE.EXC(array, k)",parameters:"array: Range, k: number",return:"number"}),(0,b.Z)(h,"PERCENTILE.INC",{definition:"计算一组数值中的指定百分位数（包括最高和最低值）",syntax:"PERCENTILE.INC(array, k)",parameters:"array: Range, k: number",return:"number"}),(0,b.Z)(h,"PERCENTRANK.EXC",{definition:"计算一组数值中给定值的百分等级（排除最高和最低值）",syntax:"PERCENTRANK.EXC(array, x, [significance])",parameters:"array: Range, x: number, significance: number (optional)",return:"number"}),(0,b.Z)(h,"PERCENTRANK.INC",{definition:"计算一组数值中给定值的百分等级（包括最高和最低值）",syntax:"PERCENTRANK.INC(array, x, [significance])",parameters:"array: Range, x: number, significance: number (optional)",return:"number"}),(0,b.Z)(h,"PERMUT",{definition:"计算从给定数目的对象中选择若干个对象的排列数",syntax:"PERMUT(number, numberChosen)",parameters:"number: number, numberChosen: number",return:"number"}),(0,b.Z)(h,"PHI",{definition:"计算标准正态分布的累积分布函数值",syntax:"PHI(x)",parameters:"x: number",return:"number"}),(0,b.Z)(h,"PI",{definition:"返回圆周率 π (pi)",syntax:"PI()",parameters:"",return:"number"}),(0,b.Z)(h,"PMT",{definition:"计算等额分期付款的每期付款额",syntax:"PMT(rate, numPeriods, presentValue, [futureValue], [type])",parameters:"rate: number, numPeriods: number, presentValue: number, futureValue: number (optional), type: number (optional)",return:"number"}),(0,b.Z)(h,"POISSON.DIST",{definition:"计算泊松分布的概率密度函数值",syntax:"POISSON.DIST(x, mean, [cumulative])",parameters:"x: number, mean: number, cumulative: boolean (optional)",return:"number"}),(0,b.Z)(h,"POWER",{definition:"计算给定数的指定次幂",syntax:"POWER(number, power)",parameters:"number: number, power: number",return:"number"}),(0,b.Z)(h,"PPMT",{definition:"计算贷款或投资的指定期数下的本金偿还额",syntax:"PPMT(rate, period, numPeriods, presentValue, [futureValue], [type])",parameters:"rate: number, period: number, numPeriods: number, presentValue: number, futureValue: number (optional), type: number (optional)",return:"number"}),(0,b.Z)(h,"PRICE",{definition:"计算定期支付利息的债券的价格",syntax:"PRICE(settlement, maturity, rate, yld, redemption, [frequency], [basis])",parameters:"settlement: Date, maturity: Date, rate: number, yld: number, redemption: number, frequency: number (optional), basis: number (optional)",return:"number"}),(0,b.Z)(h,"PRICEDISC",{definition:"计算折价债券的价格",syntax:"PRICEDISC(settlement, maturity, discount, redemption, [basis])",parameters:"settlement: Date, maturity: Date, discount: number, redemption: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"PRICEMAT",{definition:"计算到期付息的债券的价格",syntax:"PRICEMAT(settlement, maturity, issue, rate, yld, [basis])",parameters:"settlement: Date, maturity: Date, issue: Date, rate: number, yld: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"PROB",{definition:"计算一组数值落在指定区间的概率",syntax:"PROB(range, probabilityRange, [lowerLimit], [upperLimit])",parameters:"range: Range, probabilityRange: Range, lowerLimit: number (optional), upperLimit: number (optional)",return:"number"}),(0,b.Z)(h,"PRODUCT",{definition:"计算一组数值的乘积",syntax:"PRODUCT(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"PROPER",{definition:"将给定文本字符串中的每个单词的首字母大写",syntax:"PROPER(text)",parameters:"text: string",return:"string"}),(0,b.Z)(h,"PV",{definition:"计算未来支付的现值",syntax:"PV(rate, numPeriods, payment, [futureValue], [type])",parameters:"rate: number, numPeriods: number, payment: number, futureValue: number (optional), type: number (optional)",return:"number"}),(0,b.Z)(h,"QUARTILE.EXC",{definition:"计算一组数值的指定四分位数（排除最高和最低值）",syntax:"QUARTILE.EXC(array, quart)",parameters:"array: Range, quart: number",return:"number"}),(0,b.Z)(h,"QUARTILE.INC",{definition:"计算一组数值的指定四分位数（包括最高和最低值）",syntax:"QUARTILE.INC(array, quart)",parameters:"array: Range, quart: number",return:"number"}),(0,b.Z)(h,"QUOTIENT",{definition:"计算两个数的整除结果",syntax:"QUOTIENT(numerator, denominator)",parameters:"numerator: number, denominator: number",return:"number"}),(0,b.Z)(h,"RADIANS",{definition:"将角度值转换为弧度值",syntax:"RADIANS(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"RAND",{definition:"返回 0 到 1 之间的随机数",syntax:"RAND()",parameters:"",return:"number"}),(0,b.Z)(h,"RANDBETWEEN",{definition:"返回指定范围内的随机整数",syntax:"RANDBETWEEN(bottom, top)",parameters:"bottom: number, top: number",return:"number"}),(0,b.Z)(h,"RANK.AVG",{definition:"计算一组数值中给定值的平均排名",syntax:"RANK.AVG(number, array, [order])",parameters:"number: number, array: Range, order: number (optional)",return:"number"}),(0,b.Z)(h,"RANK.EQ",{definition:"计算一组数值中给定值的排名",syntax:"RANK.EQ(number, array, [order])",parameters:"number: number, array: Range, order: number (optional)",return:"number"}),(0,b.Z)(h,"RATE",{definition:"计算投资的每期利率",syntax:"RATE(numPeriods, payment, presentValue, [futureValue], [type], [guess])",parameters:"numPeriods: number, payment: number, presentValue: number, futureValue: number (optional), type: number (optional), guess: number (optional)",return:"number"}),(0,b.Z)(h,"RECEIVED",{definition:"计算债券的实际收益",syntax:"RECEIVED(settlement, maturity, investment, discount, [basis])",parameters:"settlement: Date, maturity: Date, investment: number, discount: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"REPLACE",{definition:"替换文本字符串中的一部分文本",syntax:"REPLACE(oldText, start, numChars, newText)",parameters:"oldText: string, start: number, numChars: number, newText: string",return:"string"}),(0,b.Z)(h,"REPT",{definition:"重复文本字符串多次",syntax:"REPT(text, numberTimes)",parameters:"text: string, numberTimes: number",return:"string"}),(0,b.Z)(h,"RIGHT",{definition:"返回文本字符串的最右侧指定字符数",syntax:"RIGHT(text, numChars)",parameters:"text: string, numChars: number",return:"string"}),(0,b.Z)(h,"ROMAN",{definition:"将阿拉伯数字转换为罗马数字",syntax:"ROMAN(number, [form])",parameters:"number: number, form: number (optional)",return:"string"}),(0,b.Z)(h,"ROUND",{definition:"将数值四舍五入到指定的位数",syntax:"ROUND(number, numDigits)",parameters:"number: number, numDigits: number",return:"number"}),(0,b.Z)(h,"ROUNDDOWN",{definition:"向下舍入数值到指定的位数",syntax:"ROUNDDOWN(number, numDigits)",parameters:"number: number, numDigits: number",return:"number"}),(0,b.Z)(h,"ROUNDUP",{definition:"向上舍入数值到指定的位数",syntax:"ROUNDUP(number, numDigits)",parameters:"number: number, numDigits: number",return:"number"}),(0,b.Z)(h,"ROW",{definition:"返回包含指定单元格的行号",syntax:"ROW([reference])",parameters:"reference: Range (optional)",return:"number"}),(0,b.Z)(h,"ROWS",{definition:"返回指定范围内的行数",syntax:"ROWS(array)",parameters:"array: Range",return:"number"}),(0,b.Z)(h,"RSQ",{definition:"计算给定数据集的 R 平方值",syntax:"RSQ(knownY, knownX)",parameters:"knownY: Range, knownX: Range",return:"number"}),(0,b.Z)(h,"SEARCH",{definition:"在文本字符串中查找子字符串的位置",syntax:"SEARCH(findText, withinText, [start])",parameters:"findText: string, withinText: string, start: number (optional)",return:"number"}),(0,b.Z)(h,"SECOND",{definition:"返回包含指定日期或时间的秒数",syntax:"SECOND(serialNumber)",parameters:"serialNumber: Date",return:"number"}),(0,b.Z)(h,"SERIESSUM",{definition:"计算幂级数的和",syntax:"SERIESSUM(x, n, m, coefficients)",parameters:"x: number, n: number, m: number, coefficients: Range",return:"number"}),(0,b.Z)(h,"SIGN",{definition:"返回数值的符号",syntax:"SIGN(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"SIN",{definition:"返回给定角度的正弦值",syntax:"SIN(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"SINH",{definition:"返回给定角度的双曲正弦值",syntax:"SINH(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"SKEW",{definition:"计算一组数据的偏度",syntax:"SKEW(range)",parameters:"range: Range",return:"number"}),(0,b.Z)(h,"SLN",{definition:"计算固定资产的直线折旧",syntax:"SLN(cost, salvage, life)",parameters:"cost: number, salvage: number, life: number",return:"number"}),(0,b.Z)(h,"SLOPE",{definition:"计算线性回归线的斜率",syntax:"SLOPE(knownY, knownX)",parameters:"knownY: Range, knownX: Range",return:"number"}),(0,b.Z)(h,"SMALL",{definition:"返回一组数值中第 k 小的值",syntax:"SMALL(array, k)",parameters:"array: Range, k: number",return:"number"}),(0,b.Z)(h,"SQRT",{definition:"返回给定数值的平方根",syntax:"SQRT(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"SQRTPI",{definition:"返回给定数值乘以 π 的平方根",syntax:"SQRTPI(number)",parameters:"number: number",return:"number"}),(0,b.Z)(h,"STANDARDIZE",{definition:"标准化给定数值",syntax:"STANDARDIZE(x, mean, standardDev)",parameters:"x: number, mean: number, standardDev: number",return:"number"}),(0,b.Z)(h,"STDEV.P",{definition:"计算总体的标准偏差",syntax:"STDEV.P(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"STDEV.S",{definition:"计算样本的标准偏差",syntax:"STDEV.S(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"STDEVA",{definition:"计算包含数值和逻辑值的样本的标准偏差",syntax:"STDEVA(value1, value2, ...)",parameters:"value1: number/logical, value2: number/logical, ...",return:"number"}),(0,b.Z)(h,"STDEVP",{definition:"计算总体的标准偏差",syntax:"STDEVP(value1, value2, ...)",parameters:"value1: number/logical, value2: number/logical, ...",return:"number"}),(0,b.Z)(h,"STDEVPA",{definition:"计算包含数值和逻辑值的总体的标准偏差",syntax:"STDEVPA(value1, value2, ...)",parameters:"value1: number/logical, value2: number/logical, ...",return:"number"}),(0,b.Z)(h,"STEYX",{definition:"计算与线性回归线的 Y 值的预测值之间的标准误差",syntax:"STEYX(knownY, knownX)",parameters:"knownY: Range, knownX: Range",return:"number"}),(0,b.Z)(h,"SUBSTITUTE",{definition:"在文本字符串中替换指定的文本",syntax:"SUBSTITUTE(text, oldText, newText, [instanceNum])",parameters:"text: string, oldText: string, newText: string, instanceNum: number (optional)",return:"string"}),(0,b.Z)(h,"SUBTOTAL",{definition:"使用指定的聚合函数计算指定范围的子总计",syntax:"SUBTOTAL(functionNum, range1, [range2], ...)",parameters:"functionNum: number, range1: Range, range2: Range (optional), ...",return:"number"}),(0,b.Z)(h,"SUM",{definition:"计算一组数值的和",syntax:"SUM(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"SUMIF",{definition:"根据指定的条件对一组数值进行求和",syntax:"SUMIF(range, criteria, [sumRange])",parameters:"range: Range, criteria: string/number/boolean, sumRange: Range (optional)",return:"number"}),(0,b.Z)(h,"SUMIFS",{definition:"根据多个条件对一组数值进行求和",syntax:"SUMIFS(sumRange, criteriaRange1, criteria1, [criteriaRange2, criteria2], ...)",parameters:"sumRange: Range, criteriaRange1: Range, criteria1: string/number/boolean, criteriaRange2: Range (optional), criteria2: string/number/boolean (optional), ...",return:"number"}),(0,b.Z)(h,"SUMPRODUCT",{definition:"计算一组数组的逐元素乘积的和",syntax:"SUMPRODUCT(array1, array2, ...)",parameters:"array1: Range, array2: Range, ...",return:"number"}),(0,b.Z)(h,"SUMSQ",{definition:"计算一组数值的平方和",syntax:"SUMSQ(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"SYD",{definition:"计算固定资产的年限总和折旧",syntax:"SYD(cost, salvage, life, period)",parameters:"cost: number, salvage: number, life: number, period: number",return:"number"}),(0,b.Z)(h,"T",{definition:"将数值或布尔值转换为文本",syntax:"T(value)",parameters:"value: number/boolean",return:"string"}),(0,b.Z)(h,"TAN",{definition:"返回给定角度的正切值",syntax:"TAN(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"TANH",{definition:"返回给定角度的双曲正切值",syntax:"TANH(angle)",parameters:"angle: number",return:"number"}),(0,b.Z)(h,"TBILLEQ",{definition:"计算根据贴现率和到期日得到的国库券的当期收益率",syntax:"TBILLEQ(settlement, maturity, discount)",parameters:"settlement: Date, maturity: Date, discount: number",return:"number"}),(0,b.Z)(h,"TBILLPRICE",{definition:"计算给定贴现率的国库券的价格",syntax:"TBILLPRICE(settlement, maturity, discount)",parameters:"settlement: Date, maturity: Date, discount: number",return:"number"}),(0,b.Z)(h,"TBILLYIELD",{definition:"计算给定价格的国库券的收益率",syntax:"TBILLYIELD(settlement, maturity, price)",parameters:"settlement: Date, maturity: Date, price: number",return:"number"}),(0,b.Z)(h,"TEXT",{definition:"将数值或日期格式化为文本",syntax:"TEXT(value, formatText)",parameters:"value: number/Date, formatText: string",return:"string"}),(0,b.Z)(h,"TIME",{definition:"返回给定小时、分钟和秒数的时间值",syntax:"TIME(hour, minute, second)",parameters:"hour: number, minute: number, second: number",return:"Date"}),(0,b.Z)(h,"TIMEVALUE",{definition:"将文本时间转换为时间值",syntax:"TIMEVALUE(timeText)",parameters:"timeText: string",return:"Date"}),(0,b.Z)(h,"TODAY",{definition:"返回当前日期",syntax:"TODAY()",return:"Date"}),(0,b.Z)(h,"TRANSPOSE",{definition:"将行向量转置为列向量，或将列向量转置为行向量",syntax:"TRANSPOSE(array)",parameters:"array: Range",return:"array"}),(0,b.Z)(h,"TRIM",{definition:"删除文本字符串中多余的空格",syntax:"TRIM(text)",parameters:"text: string",return:"string"}),(0,b.Z)(h,"TRIMMEAN",{definition:"计算一组数据的修剪平均值",syntax:"TRIMMEAN(range, percent)",parameters:"range: Range, percent: number",return:"number"}),(0,b.Z)(h,"TRUE",{definition:"返回逻辑值 TRUE",syntax:"TRUE()",return:"boolean"}),(0,b.Z)(h,"TRUNC",{definition:"截断数值到指定的位数",syntax:"TRUNC(number, numDigits)",parameters:"number: number, numDigits: number",return:"number"}),(0,b.Z)(h,"TTEST",{definition:"计算两组数据之间的 t 检验结果",syntax:"TTEST(array1, array2, tails, type)",parameters:"array1: Range, array2: Range, tails: number, type: number (optional)",return:"number"}),(0,b.Z)(h,"TYPE",{definition:"返回值的类型",syntax:"TYPE(value)",parameters:"value: any",return:"number"}),(0,b.Z)(h,"UNICHAR",{definition:"根据 Unicode 值返回字符",syntax:"UNICHAR(number)",parameters:"number: number",return:"string"}),(0,b.Z)(h,"UNICODE",{definition:"返回指定字符的 Unicode 值",syntax:"UNICODE(text)",parameters:"text: string",return:"number"}),(0,b.Z)(h,"UPPER",{definition:"将文本字符串转换为大写",syntax:"UPPER(text)",parameters:"text: string",return:"string"}),(0,b.Z)(h,"VALUE",{definition:"将文本字符串转换为数值",syntax:"VALUE(text)",parameters:"text: string",return:"number"}),(0,b.Z)(h,"VAR.P",{definition:"计算总体的方差",syntax:"VAR.P(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"VAR.S",{definition:"计算样本的方差",syntax:"VAR.S(number1, number2, ...)",parameters:"number1: number, number2: number, ...",return:"number"}),(0,b.Z)(h,"VARA",{definition:"计算包含数值和逻辑值的样本的方差",syntax:"VARA(value1, value2, ...)",parameters:"value1: number/logical, value2: number/logical, ...",return:"number"}),(0,b.Z)(h,"VARP",{definition:"计算总体的方差",syntax:"VARP(value1, value2, ...)",parameters:"value1: number/logical, value2: number/logical, ...",return:"number"}),(0,b.Z)(h,"VARPA",{definition:"计算包含数值和逻辑值的总体的方差",syntax:"VARPA(value1, value2, ...)",parameters:"value1: number/logical, value2: number/logical, ...",return:"number"}),(0,b.Z)(h,"VDB",{definition:"计算指定期间内的折旧值",syntax:"VDB(cost, salvage, life, startPeriod, endPeriod, [factor], [noSwitch])",parameters:"cost: number, salvage: number, life: number, startPeriod: number, endPeriod: number, factor: number (optional), noSwitch: boolean (optional)",return:"number"}),(0,b.Z)(h,"VLOOKUP",{definition:"根据指定的值在某个范围内查找并返回相应的值",syntax:"VLOOKUP(lookupValue, range, index, [isSorted])",parameters:"lookupValue: any, range: Range, index: number, isSorted: boolean (optional)",return:"any"}),(0,b.Z)(h,"WEEKDAY",{definition:"返回给定日期的星期几",syntax:"WEEKDAY(date, [returnType])",parameters:"date: Date, returnType: number (optional)",return:"number"}),(0,b.Z)(h,"WEIBULL",{definition:"计算 Weibull 分布的密度函数值",syntax:"WEIBULL(x, alpha, beta, cumulative)",parameters:"x: number, alpha: number, beta: number, cumulative: boolean",return:"number"}),(0,b.Z)(h,"WORKDAY",{definition:"返回从指定日期开始经过指定工作日数量后的日期",syntax:"WORKDAY(startDate, numDays, [holidays])",parameters:"startDate: Date, numDays: number, holidays: Range (optional)",return:"Date"}),(0,b.Z)(h,"XIRR",{definition:"计算不规则现金流的内部收益率",syntax:"XIRR(cashFlow, dates, [guess])",parameters:"cashFlow: Range, dates: Range, guess: number (optional)",return:"number"}),(0,b.Z)(h,"XNPV",{definition:"计算不规则现金流的净现值",syntax:"XNPV(rate, cashFlow, dates)",parameters:"rate: number, cashFlow: Range, dates: Range",return:"number"}),(0,b.Z)(h,"YEAR",{definition:"返回给定日期的年份",syntax:"YEAR(date)",parameters:"date: Date",return:"number"}),(0,b.Z)(h,"YEARFRAC",{definition:"计算两个日期之间的年份差值",syntax:"YEARFRAC(startDate, endDate, [basis])",parameters:"startDate: Date, endDate: Date, basis: number (optional)",return:"number"}),(0,b.Z)(h,"YIELD",{definition:"计算固定利率证券的收益率",syntax:"YIELD(settlement, maturity, rate, pr, redemption, [frequency], [basis])",parameters:"settlement: Date, maturity: Date, rate: number, pr: number, redemption: number, frequency: number (optional), basis: number (optional)",return:"number"}),(0,b.Z)(h,"YIELDDISC",{definition:"计算贴现证券的收益率",syntax:"YIELDDISC(settlement, maturity, price, redemption, [basis])",parameters:"settlement: Date, maturity: Date, price: number, redemption: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"YIELDMAT",{definition:"计算到期付息证券的收益率",syntax:"YIELDMAT(settlement, maturity, issue, rate, price, [basis])",parameters:"settlement: Date, maturity: Date, issue: Date, rate: number, price: number, basis: number (optional)",return:"number"}),(0,b.Z)(h,"Z.TEST",{definition:"计算正态分布的 z 检验结果",syntax:"Z.TEST(range, [mu], [sigma])",parameters:"range: Range, mu: number (optional), sigma: number (optional)",return:"number"}),h),moment:{moment:{definition:"JavaScript 日期处理类库",syntax:"moment([date], [format], [strict])",parameters:"[date]: string/Date/moment/momentInput/undefined, [format]: string/boolean/undefined, [strict]: boolean/undefined",return:"Moment",demo:"const now = moment();<br/>const date = moment('2022-01-01', 'YYYY-MM-DD');<br/>console.log(now.format('YYYY-MM-DD')); // Output: current date<br/>console.log(date.format('YYYY-MM-DD')); // Output: 2022-01-01"}},SQL:(v={SELECT:{definition:"从数据库中检索数据。",demo:"SELECT * FROM employees;"},INSERT:{definition:"将新数据插入数据库表。",demo:"INSERT INTO customers (name, email) VALUES ('John Doe', 'john@example.com');"},UPDATE:{definition:"更新数据库表中的现有数据。",demo:"UPDATE products SET price = 20 WHERE category = 'Electronics';"},DELETE:{definition:"从数据库表中删除数据。",demo:"DELETE FROM orders WHERE order_date < '2023-01-01';"},CREATE:{definition:"创建新的数据库对象，如表、视图等。",demo:"CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(255));"},ALTER:{definition:"修改现有的数据库对象，如表结构。",demo:"ALTER TABLE products ADD COLUMN description TEXT;"},DROP:{definition:"删除数据库对象，如表、视图等。",demo:"DROP TABLE customers;"},JOIN:{definition:"在多个表之间根据关联条件联接数据。",demo:"SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;"},WHERE:{definition:"指定检索条件，过滤数据库中的数据。",demo:"SELECT * FROM products WHERE price > 50;"},"ORDER BY":{definition:"按指定的列对检索结果进行排序。",demo:"SELECT * FROM employees ORDER BY last_name, first_name;"},"GROUP BY":{definition:"将结果集按指定的列分组，通常与聚合函数一起使用。",demo:"SELECT department, AVG(salary) FROM employees GROUP BY department;"},HAVING:{definition:"在GROUP BY之后，过滤分组后的数据。",demo:"SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;"},COUNT:{definition:"统计满足条件的行数或非重复值的数量。",demo:"SELECT COUNT(*) FROM orders;"},SUM:{definition:"计算指定列的数值总和。",demo:"SELECT SUM(price) FROM products;"},AVG:{definition:"计算指定列的数值平均值。",demo:"SELECT AVG(age) FROM students;"},MAX:{definition:"找出指定列的最大值。",demo:"SELECT MAX(salary) FROM employees;"},MIN:{definition:"找出指定列的最小值。",demo:"SELECT MIN(population) FROM cities;"},BETWEEN:{definition:"判断某个值是否在指定的范围之间。",demo:"SELECT * FROM products WHERE price BETWEEN 10 AND 50;"},LIKE:{definition:"用于模糊匹配，通常与通配符一起使用。",demo:"SELECT * FROM customers WHERE name LIKE 'John%';"},IN:{definition:"判断某个值是否在一组值之中。",demo:"SELECT * FROM products WHERE category IN ('Electronics', 'Clothing');"},NOT:{definition:"否定一个条件。",demo:"SELECT * FROM students WHERE NOT grade = 'A';"},EXISTS:{definition:"判断子查询是否返回结果。",demo:"SELECT name FROM employees WHERE EXISTS (SELECT * FROM orders WHERE orders.employee_id = employees.id);"},UNION:{definition:"将多个查询结果集合并为一个结果集。",demo:"SELECT product_name FROM products_2022 UNION SELECT product_name FROM products_2023;"},DISTINCT:{definition:"去除查询结果中的重复行。",demo:"SELECT DISTINCT category FROM products;"},AS:{definition:"为列或表起别名，用于提高查询可读性。",demo:"SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM employees;"},"INNER JOIN":{definition:"返回两个表中匹配的行。",demo:"SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id;"},"LEFT JOIN":{definition:"返回左侧表中的所有行和右侧表中匹配的行。",demo:"SELECT * FROM departments LEFT JOIN employees ON departments.id = employees.department_id;"},"RIGHT JOIN":{definition:"返回右侧表中的所有行和左侧表中匹配的行。",demo:"SELECT * FROM employees RIGHT JOIN orders ON employees.id = orders.employee_id;"},"FULL JOIN":{definition:"返回两个表中的所有行，并在不匹配时填充NULL值。",demo:"SELECT * FROM students FULL JOIN scores ON students.id = scores.student_id;"},ON:{definition:"指定联接条件。",demo:"SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;"}},(0,b.Z)(v,"AS",{definition:"为列或表起别名，用于提高查询可读性。",demo:"SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM employees;"}),(0,b.Z)(v,"NULL",{definition:"表示未知值或缺失数据。",demo:"SELECT * FROM customers WHERE email IS NULL;"}),(0,b.Z)(v,"IS",{definition:"用于比较值是否是某种特定值，通常与NULL一起使用。",demo:"SELECT * FROM orders WHERE status IS NOT NULL;"}),(0,b.Z)(v,"LIMIT",{definition:"限制返回的结果行数。",demo:"SELECT * FROM products LIMIT 10;"}),(0,b.Z)(v,"OFFSET",{definition:"指定返回结果的起始行位置。",demo:"SELECT * FROM employees LIMIT 5 OFFSET 10;"}),(0,b.Z)(v,"TOP",{definition:"在某些数据库中，限制返回的结果行数。",demo:"SELECT TOP 5 * FROM orders;"}),(0,b.Z)(v,"DISTINCTROW",{definition:"仅在某些数据库中，去除查询结果中的重复行。",demo:"SELECT DISTINCTROW category FROM products;"}),(0,b.Z)(v,"AS",{definition:"为列或表起别名，用于提高查询可读性。",demo:"SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM employees;"}),(0,b.Z)(v,"JOIN",{definition:"在多个表之间根据关联条件联接数据。",demo:"SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;"}),(0,b.Z)(v,"WHERE",{definition:"指定检索条件，过滤数据库中的数据。",demo:"SELECT * FROM products WHERE price > 50;"}),(0,b.Z)(v,"ORDER BY",{definition:"按指定的列对检索结果进行排序。",demo:"SELECT * FROM employees ORDER BY last_name, first_name;"}),(0,b.Z)(v,"GROUP BY",{definition:"将结果集按指定的列分组，通常与聚合函数一起使用。",demo:"SELECT department, AVG(salary) FROM employees GROUP BY department;"}),(0,b.Z)(v,"HAVING",{definition:"在GROUP BY之后，过滤分组后的数据。",demo:"SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;"}),v)},E=function(e,t,r){var n=e&&e[t]&&e[t][r];return n?React.createElement(React.Fragment,null,React.createElement("div",{className:"detail-item-title"},"定义"),React.createElement("div",{className:"detail-item"},n.definition),n.syntax?React.createElement(React.Fragment,null,React.createElement("div",{className:"detail-item-title"},"语法"),React.createElement("div",{className:"detail-item"},n.syntax)):null,n.syntax?React.createElement(React.Fragment,null,React.createElement("div",{className:"detail-item-title"},"参数"),React.createElement("div",{className:"detail-item"},n.parameters)):null,n.syntax?React.createElement(React.Fragment,null,React.createElement("div",{className:"detail-item-title"},"返回"),React.createElement("div",{className:"detail-item"},n.return)):null,n.demo?React.createElement(React.Fragment,null,React.createElement("div",{className:"detail-item-title"},"例子"),React.createElement("div",{className:"detail-item"},React.createElement("code",{dangerouslySetInnerHTML:{__html:n.demo}}))):null):null};const B=C;function _(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function w(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?_(Object(r),!0).forEach((function(t){(0,b.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):_(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function F(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return O(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?O(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw o}}}}function O(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var S=Object.keys(p()),N=Object.getOwnPropertyNames(Math),k=function(){var e=(0,u.Z)(c().mark((function e(t,r){var n,a,o,i,s,u,l,d,m,p,b,f,g,y,h;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=[],a=Object.keys(r),t&&-1!==t.indexOf("formulajs")){o={id:"formulajs",title:"公式函数",type:"object",insert:!1,properties:{},description:"JavaScript实现大多数Microsoft Excel公式函数。"},i=F(a);try{for(i.s();!(s=i.n()).done;)u=s.value,o.properties["formulajs.".concat(u)]={title:"formulajs.".concat(u),type:"string",nodeType:"function"}}catch(e){i.e(e)}finally{i.f()}n.push(o)}if(t&&-1!==t.indexOf("lodash")){for(l={id:"_",title:"工具函数",type:"object",insert:!1,properties:{},description:"Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。"},d=0,m=S;d<m.length;d++)p=m[d],l.properties[p]={title:"_.".concat(p),type:"string",nodeType:"function"};n.push(l)}if(t&&-1!==t.indexOf("Math")){b={id:"Math",title:"数学函数",type:"object",insert:!1,properties:{},description:"JavaScript内置数学函数"},f=F(N);try{for(f.s();!(g=f.n()).done;)y=g.value,b.properties["Math.".concat(y)]={title:"Math.".concat(y),type:"string",nodeType:"function"}}catch(e){f.e(e)}finally{f.f()}n.push(b)}return t&&-1!==t.indexOf("moment")&&((h={id:"moment",title:"日期函数",type:"object",insert:!1,properties:{},description:"JavaScript内置数学函数"}).properties.moment={title:"moment",type:"string",nodeType:"function"},n.push(h)),e.abrupt("return",n);case 7:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}();var R=r(6362),j=(0,i.atom)({key:"variable.key",default:(0,R.O1)(12)}),T=(0,i.atom)({key:"variable.schema",default:null}),I=(0,i.atom)({key:"variable.formula",default:null}),M=(0,i.atom)({key:"variable.data",default:null}),P=(0,i.atom)({key:"variable.varAndFun",default:{}}),L=(0,i.atom)({key:"variable.select",default:null}),Z=(0,i.atom)({key:"variable.nodeType",default:null}),U=(0,i.atom)({key:"variable.limit",default:null}),W=(0,i.atom)({key:"variable.hasLoading",default:null}),V=(0,i.atom)({key:"variable.stringify",default:!1}),q=(0,i.atom)({key:"variable.funcExt",default:[]}),H=(0,i.atom)({key:"variable.attrExt",default:[]}),z=(0,i.atom)({key:"variable.isFormulaAtom",default:!1}),Y=((0,i.atom)({key:"variable.customStringify",default:null}),(0,i.atom)({key:"variable.isSelectFormula",default:!1})),G=(0,i.atom)({key:"variable.error",default:!1}),J=(0,i.atom)({key:"variable.formulajsAtom",default:null}),K=(0,i.atom)({key:"variable.esprimaAtom",default:null}),X=(0,i.selector)({key:"variable.finalSchema",get:function(e){var t=e.get,r=t(T),n=t(M),a=(t(q),t(Y)),o=t(z);return!r&&n?(0,R.Cy)(n):r?a||o?function(e,t){return w(w({},e),{},{properties:w(w({},(null==e?void 0:e.properties)||{}),{})})}(r):r:{type:"object",properties:{}}}}),Q=(0,i.selector)({key:"variable.functionSchema",get:function(e){var t=e.get,r=t(Y),n=t(z),a=t(q),o=t(J);return(r||n)&&o?k(a,o):[]}}),$=(0,i.selector)({key:"variable.attrSchema",get:function(e){return function(e){var t=[];if(e&&-1!==e.indexOf("SQL")){var r,n={id:"SQL",title:"SQL",type:"object",insert:!1,properties:{},description:"SQL关键字"},a=F(p().keys(B.SQL));try{for(a.s();!(r=a.n()).done;){var o=r.value;n.properties[o]={title:o,type:"string",nodeType:"attr"}}}catch(e){a.e(e)}finally{a.f()}t.push(n)}return t}((0,e.get)(H))}}),ee=(0,i.selector)({key:"variable.expected",get:function(e){var t=e.get,r=t(T),n=t(I),a=t(M),o=a||(0,R.c8)(r),i=(0,x.Qx)(null==n?void 0:n.origin,o),s=p().isArray(i)?"array":(0,d.Z)(i),u=t(z),l=t(K);return console.log(l,"esprima"),D((null==n?void 0:n.origin)||[],u,l),{error:null,result:i,type:s,reality:!!a}}});var te=r(885);function re(e){return"[object Object]"===Object.prototype.toString.call(e)}function ne(e){var t,r;return!1!==re(e)&&(void 0===(t=e.constructor)||!1!==re(r=t.prototype)&&!1!==r.hasOwnProperty("isPrototypeOf"))}function ae(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];throw Error("[Immer] minified error nr: "+e+(r.length?" "+r.map((function(e){return"'"+e+"'"})).join(","):"")+". Find the full error at: https://bit.ly/3cXEKWf")}function oe(e){return!!e&&!!e[qe]}function ie(e){var t;return!!e&&(function(e){if(!e||"object"!=typeof e)return!1;var t=Object.getPrototypeOf(e);if(null===t)return!0;var r=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return r===Object||"function"==typeof r&&Function.toString.call(r)===He}(e)||Array.isArray(e)||!!e[Ve]||!!(null===(t=e.constructor)||void 0===t?void 0:t[Ve])||de(e)||me(e))}function se(e,t,r){void 0===r&&(r=!1),0===ue(e)?(r?Object.keys:ze)(e).forEach((function(n){r&&"symbol"==typeof n||t(n,e[n],e)})):e.forEach((function(r,n){return t(n,r,e)}))}function ue(e){var t=e[qe];return t?t.i>3?t.i-4:t.i:Array.isArray(e)?1:de(e)?2:me(e)?3:0}function le(e,t){return 2===ue(e)?e.has(t):Object.prototype.hasOwnProperty.call(e,t)}function ce(e,t,r){var n=ue(e);2===n?e.set(t,r):3===n?e.add(r):e[t]=r}function de(e){return Le&&e instanceof Map}function me(e){return Ze&&e instanceof Set}function pe(e){return e.o||e.t}function be(e){if(Array.isArray(e))return Array.prototype.slice.call(e);var t=Ye(e);delete t[qe];for(var r=ze(t),n=0;n<r.length;n++){var a=r[n],o=t[a];!1===o.writable&&(o.writable=!0,o.configurable=!0),(o.get||o.set)&&(t[a]={configurable:!0,writable:!0,enumerable:o.enumerable,value:e[a]})}return Object.create(Object.getPrototypeOf(e),t)}function fe(e,t){return void 0===t&&(t=!1),ye(e)||oe(e)||!ie(e)||(ue(e)>1&&(e.set=e.add=e.clear=e.delete=ge),Object.freeze(e),t&&se(e,(function(e,t){return fe(t,!0)}),!0)),e}function ge(){ae(2)}function ye(e){return null==e||"object"!=typeof e||Object.isFrozen(e)}function he(e){var t=Ge[e];return t||ae(18,e),t}function ve(){return Me}function Ae(e,t){t&&(he("Patches"),e.u=[],e.s=[],e.v=t)}function De(e){xe(e),e.p.forEach(Ee),e.p=null}function xe(e){e===Me&&(Me=e.l)}function Ce(e){return Me={p:[],l:Me,h:e,m:!0,_:0}}function Ee(e){var t=e[qe];0===t.i||1===t.i?t.j():t.g=!0}function Be(e,t){t._=t.p.length;var r=t.p[0],n=void 0!==e&&e!==r;return t.h.O||he("ES5").S(t,e,n),n?(r[qe].P&&(De(t),ae(4)),ie(e)&&(e=_e(t,e),t.l||Fe(t,e)),t.u&&he("Patches").M(r[qe].t,e,t.u,t.s)):e=_e(t,r,[]),De(t),t.u&&t.v(t.u,t.s),e!==We?e:void 0}function _e(e,t,r){if(ye(t))return t;var n=t[qe];if(!n)return se(t,(function(a,o){return we(e,n,t,a,o,r)}),!0),t;if(n.A!==e)return t;if(!n.P)return Fe(e,n.t,!0),n.t;if(!n.I){n.I=!0,n.A._--;var a=4===n.i||5===n.i?n.o=be(n.k):n.o,o=a,i=!1;3===n.i&&(o=new Set(a),a.clear(),i=!0),se(o,(function(t,o){return we(e,n,a,t,o,r,i)})),Fe(e,a,!1),r&&e.u&&he("Patches").N(n,r,e.u,e.s)}return n.o}function we(e,t,r,n,a,o,i){if(oe(a)){var s=_e(e,a,o&&t&&3!==t.i&&!le(t.R,n)?o.concat(n):void 0);if(ce(r,n,s),!oe(s))return;e.m=!1}else i&&r.add(a);if(ie(a)&&!ye(a)){if(!e.h.D&&e._<1)return;_e(e,a),t&&t.A.l||Fe(e,a)}}function Fe(e,t,r){void 0===r&&(r=!1),!e.l&&e.h.D&&e.m&&fe(t,r)}function Oe(e,t){var r=e[qe];return(r?pe(r):e)[t]}function Se(e,t){if(t in e)for(var r=Object.getPrototypeOf(e);r;){var n=Object.getOwnPropertyDescriptor(r,t);if(n)return n;r=Object.getPrototypeOf(r)}}function Ne(e){e.P||(e.P=!0,e.l&&Ne(e.l))}function ke(e){e.o||(e.o=be(e.t))}function Re(e,t,r){var n=de(t)?he("MapSet").F(t,r):me(t)?he("MapSet").T(t,r):e.O?function(e,t){var r=Array.isArray(e),n={i:r?1:0,A:t?t.A:ve(),P:!1,I:!1,R:{},l:t,t:e,k:null,o:null,j:null,C:!1},a=n,o=Je;r&&(a=[n],o=Ke);var i=Proxy.revocable(a,o),s=i.revoke,u=i.proxy;return n.k=u,n.j=s,u}(t,r):he("ES5").J(t,r);return(r?r.A:ve()).p.push(n),n}function je(e){return oe(e)||ae(22,e),function e(t){if(!ie(t))return t;var r,n=t[qe],a=ue(t);if(n){if(!n.P&&(n.i<4||!he("ES5").K(n)))return n.t;n.I=!0,r=Te(t,a),n.I=!1}else r=Te(t,a);return se(r,(function(t,a){n&&function(e,t){return 2===ue(e)?e.get(t):e[t]}(n.t,t)===a||ce(r,t,e(a))})),3===a?new Set(r):r}(e)}function Te(e,t){switch(t){case 2:return new Map(e);case 3:return Array.from(e)}return be(e)}var Ie,Me,Pe="undefined"!=typeof Symbol&&"symbol"==typeof Symbol("x"),Le="undefined"!=typeof Map,Ze="undefined"!=typeof Set,Ue="undefined"!=typeof Proxy&&void 0!==Proxy.revocable&&"undefined"!=typeof Reflect,We=Pe?Symbol.for("immer-nothing"):((Ie={})["immer-nothing"]=!0,Ie),Ve=Pe?Symbol.for("immer-draftable"):"__$immer_draftable",qe=Pe?Symbol.for("immer-state"):"__$immer_state",He=("undefined"!=typeof Symbol&&Symbol.iterator,""+Object.prototype.constructor),ze="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:void 0!==Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames,Ye=Object.getOwnPropertyDescriptors||function(e){var t={};return ze(e).forEach((function(r){t[r]=Object.getOwnPropertyDescriptor(e,r)})),t},Ge={},Je={get:function(e,t){if(t===qe)return e;var r=pe(e);if(!le(r,t))return function(e,t,r){var n,a=Se(t,r);return a?"value"in a?a.value:null===(n=a.get)||void 0===n?void 0:n.call(e.k):void 0}(e,r,t);var n=r[t];return e.I||!ie(n)?n:n===Oe(e.t,t)?(ke(e),e.o[t]=Re(e.A.h,n,e)):n},has:function(e,t){return t in pe(e)},ownKeys:function(e){return Reflect.ownKeys(pe(e))},set:function(e,t,r){var n=Se(pe(e),t);if(null==n?void 0:n.set)return n.set.call(e.k,r),!0;if(!e.P){var a=Oe(pe(e),t),o=null==a?void 0:a[qe];if(o&&o.t===r)return e.o[t]=r,e.R[t]=!1,!0;if(function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}(r,a)&&(void 0!==r||le(e.t,t)))return!0;ke(e),Ne(e)}return e.o[t]===r&&(void 0!==r||t in e.o)||Number.isNaN(r)&&Number.isNaN(e.o[t])||(e.o[t]=r,e.R[t]=!0),!0},deleteProperty:function(e,t){return void 0!==Oe(e.t,t)||t in e.t?(e.R[t]=!1,ke(e),Ne(e)):delete e.R[t],e.o&&delete e.o[t],!0},getOwnPropertyDescriptor:function(e,t){var r=pe(e),n=Reflect.getOwnPropertyDescriptor(r,t);return n?{writable:!0,configurable:1!==e.i||"length"!==t,enumerable:n.enumerable,value:r[t]}:n},defineProperty:function(){ae(11)},getPrototypeOf:function(e){return Object.getPrototypeOf(e.t)},setPrototypeOf:function(){ae(12)}},Ke={};se(Je,(function(e,t){Ke[e]=function(){return arguments[0]=arguments[0][0],t.apply(this,arguments)}})),Ke.deleteProperty=function(e,t){return Ke.set.call(this,e,t,void 0)},Ke.set=function(e,t,r){return Je.set.call(this,e[0],t,r,e[0])};var Xe=function(){function e(e){var t=this;this.O=Ue,this.D=!0,this.produce=function(e,r,n){if("function"==typeof e&&"function"!=typeof r){var a=r;r=e;var o=t;return function(e){var t=this;void 0===e&&(e=a);for(var n=arguments.length,i=Array(n>1?n-1:0),s=1;s<n;s++)i[s-1]=arguments[s];return o.produce(e,(function(e){var n;return(n=r).call.apply(n,[t,e].concat(i))}))}}var i;if("function"!=typeof r&&ae(6),void 0!==n&&"function"!=typeof n&&ae(7),ie(e)){var s=Ce(t),u=Re(t,e,void 0),l=!0;try{i=r(u),l=!1}finally{l?De(s):xe(s)}return"undefined"!=typeof Promise&&i instanceof Promise?i.then((function(e){return Ae(s,n),Be(e,s)}),(function(e){throw De(s),e})):(Ae(s,n),Be(i,s))}if(!e||"object"!=typeof e){if(void 0===(i=r(e))&&(i=e),i===We&&(i=void 0),t.D&&fe(i,!0),n){var c=[],d=[];he("Patches").M(e,i,c,d),n(c,d)}return i}ae(21,e)},this.produceWithPatches=function(e,r){if("function"==typeof e)return function(r){for(var n=arguments.length,a=Array(n>1?n-1:0),o=1;o<n;o++)a[o-1]=arguments[o];return t.produceWithPatches(r,(function(t){return e.apply(void 0,[t].concat(a))}))};var n,a,o=t.produce(e,r,(function(e,t){n=e,a=t}));return"undefined"!=typeof Promise&&o instanceof Promise?o.then((function(e){return[e,n,a]})):[o,n,a]},"boolean"==typeof(null==e?void 0:e.useProxies)&&this.setUseProxies(e.useProxies),"boolean"==typeof(null==e?void 0:e.autoFreeze)&&this.setAutoFreeze(e.autoFreeze)}var t=e.prototype;return t.createDraft=function(e){ie(e)||ae(8),oe(e)&&(e=je(e));var t=Ce(this),r=Re(this,e,void 0);return r[qe].C=!0,xe(t),r},t.finishDraft=function(e,t){var r=(e&&e[qe]).A;return Ae(r,t),Be(void 0,r)},t.setAutoFreeze=function(e){this.D=e},t.setUseProxies=function(e){e&&!Ue&&ae(20),this.O=e},t.applyPatches=function(e,t){var r;for(r=t.length-1;r>=0;r--){var n=t[r];if(0===n.path.length&&"replace"===n.op){e=n.value;break}}r>-1&&(t=t.slice(r+1));var a=he("Patches").$;return oe(e)?a(e,t):this.produce(e,(function(e){return a(e,t)}))},e}(),Qe=new Xe,$e=Qe.produce,et=(Qe.produceWithPatches.bind(Qe),Qe.setAutoFreeze.bind(Qe),Qe.setUseProxies.bind(Qe),Qe.applyPatches.bind(Qe),Qe.createDraft.bind(Qe)),tt=Qe.finishDraft.bind(Qe);function rt(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var nt=new WeakMap,at=new WeakMap,ot=new WeakMap,it=new WeakMap,st=new WeakMap,ut=new WeakMap,lt=new WeakMap;function ct(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function dt(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ct(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ct(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function mt(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var pt,bt=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=!t,n=t?At(e):e,a=pt.None,o=pt.None,i=0,s=null;for(var u of n){var l=u.codePointAt(0);if(!l)break;var c=kt(u,l);if([a,o]=r?[o,c]:[c,a],Rt(a,pt.ZWJ)&&Rt(o,pt.ExtPict)&&!Mt(r?e.substring(0,i):e.substring(0,e.length-i)))break;if(Rt(a,pt.RI)&&Rt(o,pt.RI)&&!(s=null!==s?!s:!!r||Lt(e.substring(0,e.length-i))))break;if(a!==pt.None&&o!==pt.None&&Tt(a,o))break;i+=u.length}return i||1},ft=/\s/,gt=/[\u0021-\u0023\u0025-\u002A\u002C-\u002F\u003A\u003B\u003F\u0040\u005B-\u005D\u005F\u007B\u007D\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E3B\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/,yt=/['\u2018\u2019]/,ht=(e,t,r)=>{if(r){var n=e.length-t;return[e.slice(n,e.length),e.slice(0,n)]}return[e.slice(0,t),e.slice(t)]},vt=function e(t,r){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(ft.test(t))return!1;if(yt.test(t)){var a=bt(r,n),[o,i]=ht(r,a,n);if(e(o,i,n))return!0}return!gt.test(t)},At=function*(e){for(var t=e.length-1,r=0;r<e.length;r++){var n=e.charAt(t-r);if(xt(n.charCodeAt(0))){var a=e.charAt(t-r-1);if(Dt(a.charCodeAt(0))){yield a+n,r++;continue}}yield n}},Dt=e=>e>=55296&&e<=56319,xt=e=>e>=56320&&e<=57343;!function(e){e[e.None=0]="None",e[e.Extend=1]="Extend",e[e.ZWJ=2]="ZWJ",e[e.RI=4]="RI",e[e.Prepend=8]="Prepend",e[e.SpacingMark=16]="SpacingMark",e[e.L=32]="L",e[e.V=64]="V",e[e.T=128]="T",e[e.LV=256]="LV",e[e.LVT=512]="LVT",e[e.ExtPict=1024]="ExtPict",e[e.Any=2048]="Any"}(pt||(pt={}));var Ct=/^(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])$/,Et=/^(?:[\u0600-\u0605\u06DD\u070F\u0890\u0891\u08E2\u0D4E]|\uD804[\uDCBD\uDCCD\uDDC2\uDDC3]|\uD806[\uDD3F\uDD41\uDE3A\uDE84-\uDE89]|\uD807\uDD46)$/,Bt=/^(?:[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BF\u09C0\u09C7\u09C8\u09CB\u09CC\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0\u0CC1\u0CC3\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0D02\u0D03\u0D3F\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D82\u0D83\u0DD0\u0DD1\u0DD8-\u0DDE\u0DF2\u0DF3\u0E33\u0EB3\u0F3E\u0F3F\u0F7F\u1031\u103B\u103C\u1056\u1057\u1084\u1715\u1734\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A6D-\u1A72\u1B04\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF7\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BE-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC]|\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD45\uDD46\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDDCE\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB1\uDCB2\uDCB9\uDCBB\uDCBC\uDCBE\uDCC1\uDDB0\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF26]|\uD806[\uDC2C-\uDC2E\uDC38\uDD31-\uDD35\uDD37\uDD38\uDD3D\uDD40\uDD42\uDDD1-\uDDD3\uDDDC-\uDDDF\uDDE4\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4\uDD8A-\uDD8E\uDD93\uDD94\uDD96\uDEF5\uDEF6]|\uD81B[\uDF51-\uDF87\uDFF0\uDFF1]|\uD834[\uDD66\uDD6D])$/,_t=/^[\u1100-\u115F\uA960-\uA97C]$/,wt=/^[\u1160-\u11A7\uD7B0-\uD7C6]$/,Ft=/^[\u11A8-\u11FF\uD7CB-\uD7FB]$/,Ot=/^[\uAC00\uAC1C\uAC38\uAC54\uAC70\uAC8C\uACA8\uACC4\uACE0\uACFC\uAD18\uAD34\uAD50\uAD6C\uAD88\uADA4\uADC0\uADDC\uADF8\uAE14\uAE30\uAE4C\uAE68\uAE84\uAEA0\uAEBC\uAED8\uAEF4\uAF10\uAF2C\uAF48\uAF64\uAF80\uAF9C\uAFB8\uAFD4\uAFF0\uB00C\uB028\uB044\uB060\uB07C\uB098\uB0B4\uB0D0\uB0EC\uB108\uB124\uB140\uB15C\uB178\uB194\uB1B0\uB1CC\uB1E8\uB204\uB220\uB23C\uB258\uB274\uB290\uB2AC\uB2C8\uB2E4\uB300\uB31C\uB338\uB354\uB370\uB38C\uB3A8\uB3C4\uB3E0\uB3FC\uB418\uB434\uB450\uB46C\uB488\uB4A4\uB4C0\uB4DC\uB4F8\uB514\uB530\uB54C\uB568\uB584\uB5A0\uB5BC\uB5D8\uB5F4\uB610\uB62C\uB648\uB664\uB680\uB69C\uB6B8\uB6D4\uB6F0\uB70C\uB728\uB744\uB760\uB77C\uB798\uB7B4\uB7D0\uB7EC\uB808\uB824\uB840\uB85C\uB878\uB894\uB8B0\uB8CC\uB8E8\uB904\uB920\uB93C\uB958\uB974\uB990\uB9AC\uB9C8\uB9E4\uBA00\uBA1C\uBA38\uBA54\uBA70\uBA8C\uBAA8\uBAC4\uBAE0\uBAFC\uBB18\uBB34\uBB50\uBB6C\uBB88\uBBA4\uBBC0\uBBDC\uBBF8\uBC14\uBC30\uBC4C\uBC68\uBC84\uBCA0\uBCBC\uBCD8\uBCF4\uBD10\uBD2C\uBD48\uBD64\uBD80\uBD9C\uBDB8\uBDD4\uBDF0\uBE0C\uBE28\uBE44\uBE60\uBE7C\uBE98\uBEB4\uBED0\uBEEC\uBF08\uBF24\uBF40\uBF5C\uBF78\uBF94\uBFB0\uBFCC\uBFE8\uC004\uC020\uC03C\uC058\uC074\uC090\uC0AC\uC0C8\uC0E4\uC100\uC11C\uC138\uC154\uC170\uC18C\uC1A8\uC1C4\uC1E0\uC1FC\uC218\uC234\uC250\uC26C\uC288\uC2A4\uC2C0\uC2DC\uC2F8\uC314\uC330\uC34C\uC368\uC384\uC3A0\uC3BC\uC3D8\uC3F4\uC410\uC42C\uC448\uC464\uC480\uC49C\uC4B8\uC4D4\uC4F0\uC50C\uC528\uC544\uC560\uC57C\uC598\uC5B4\uC5D0\uC5EC\uC608\uC624\uC640\uC65C\uC678\uC694\uC6B0\uC6CC\uC6E8\uC704\uC720\uC73C\uC758\uC774\uC790\uC7AC\uC7C8\uC7E4\uC800\uC81C\uC838\uC854\uC870\uC88C\uC8A8\uC8C4\uC8E0\uC8FC\uC918\uC934\uC950\uC96C\uC988\uC9A4\uC9C0\uC9DC\uC9F8\uCA14\uCA30\uCA4C\uCA68\uCA84\uCAA0\uCABC\uCAD8\uCAF4\uCB10\uCB2C\uCB48\uCB64\uCB80\uCB9C\uCBB8\uCBD4\uCBF0\uCC0C\uCC28\uCC44\uCC60\uCC7C\uCC98\uCCB4\uCCD0\uCCEC\uCD08\uCD24\uCD40\uCD5C\uCD78\uCD94\uCDB0\uCDCC\uCDE8\uCE04\uCE20\uCE3C\uCE58\uCE74\uCE90\uCEAC\uCEC8\uCEE4\uCF00\uCF1C\uCF38\uCF54\uCF70\uCF8C\uCFA8\uCFC4\uCFE0\uCFFC\uD018\uD034\uD050\uD06C\uD088\uD0A4\uD0C0\uD0DC\uD0F8\uD114\uD130\uD14C\uD168\uD184\uD1A0\uD1BC\uD1D8\uD1F4\uD210\uD22C\uD248\uD264\uD280\uD29C\uD2B8\uD2D4\uD2F0\uD30C\uD328\uD344\uD360\uD37C\uD398\uD3B4\uD3D0\uD3EC\uD408\uD424\uD440\uD45C\uD478\uD494\uD4B0\uD4CC\uD4E8\uD504\uD520\uD53C\uD558\uD574\uD590\uD5AC\uD5C8\uD5E4\uD600\uD61C\uD638\uD654\uD670\uD68C\uD6A8\uD6C4\uD6E0\uD6FC\uD718\uD734\uD750\uD76C\uD788]$/,St=/^[\uAC01-\uAC1B\uAC1D-\uAC37\uAC39-\uAC53\uAC55-\uAC6F\uAC71-\uAC8B\uAC8D-\uACA7\uACA9-\uACC3\uACC5-\uACDF\uACE1-\uACFB\uACFD-\uAD17\uAD19-\uAD33\uAD35-\uAD4F\uAD51-\uAD6B\uAD6D-\uAD87\uAD89-\uADA3\uADA5-\uADBF\uADC1-\uADDB\uADDD-\uADF7\uADF9-\uAE13\uAE15-\uAE2F\uAE31-\uAE4B\uAE4D-\uAE67\uAE69-\uAE83\uAE85-\uAE9F\uAEA1-\uAEBB\uAEBD-\uAED7\uAED9-\uAEF3\uAEF5-\uAF0F\uAF11-\uAF2B\uAF2D-\uAF47\uAF49-\uAF63\uAF65-\uAF7F\uAF81-\uAF9B\uAF9D-\uAFB7\uAFB9-\uAFD3\uAFD5-\uAFEF\uAFF1-\uB00B\uB00D-\uB027\uB029-\uB043\uB045-\uB05F\uB061-\uB07B\uB07D-\uB097\uB099-\uB0B3\uB0B5-\uB0CF\uB0D1-\uB0EB\uB0ED-\uB107\uB109-\uB123\uB125-\uB13F\uB141-\uB15B\uB15D-\uB177\uB179-\uB193\uB195-\uB1AF\uB1B1-\uB1CB\uB1CD-\uB1E7\uB1E9-\uB203\uB205-\uB21F\uB221-\uB23B\uB23D-\uB257\uB259-\uB273\uB275-\uB28F\uB291-\uB2AB\uB2AD-\uB2C7\uB2C9-\uB2E3\uB2E5-\uB2FF\uB301-\uB31B\uB31D-\uB337\uB339-\uB353\uB355-\uB36F\uB371-\uB38B\uB38D-\uB3A7\uB3A9-\uB3C3\uB3C5-\uB3DF\uB3E1-\uB3FB\uB3FD-\uB417\uB419-\uB433\uB435-\uB44F\uB451-\uB46B\uB46D-\uB487\uB489-\uB4A3\uB4A5-\uB4BF\uB4C1-\uB4DB\uB4DD-\uB4F7\uB4F9-\uB513\uB515-\uB52F\uB531-\uB54B\uB54D-\uB567\uB569-\uB583\uB585-\uB59F\uB5A1-\uB5BB\uB5BD-\uB5D7\uB5D9-\uB5F3\uB5F5-\uB60F\uB611-\uB62B\uB62D-\uB647\uB649-\uB663\uB665-\uB67F\uB681-\uB69B\uB69D-\uB6B7\uB6B9-\uB6D3\uB6D5-\uB6EF\uB6F1-\uB70B\uB70D-\uB727\uB729-\uB743\uB745-\uB75F\uB761-\uB77B\uB77D-\uB797\uB799-\uB7B3\uB7B5-\uB7CF\uB7D1-\uB7EB\uB7ED-\uB807\uB809-\uB823\uB825-\uB83F\uB841-\uB85B\uB85D-\uB877\uB879-\uB893\uB895-\uB8AF\uB8B1-\uB8CB\uB8CD-\uB8E7\uB8E9-\uB903\uB905-\uB91F\uB921-\uB93B\uB93D-\uB957\uB959-\uB973\uB975-\uB98F\uB991-\uB9AB\uB9AD-\uB9C7\uB9C9-\uB9E3\uB9E5-\uB9FF\uBA01-\uBA1B\uBA1D-\uBA37\uBA39-\uBA53\uBA55-\uBA6F\uBA71-\uBA8B\uBA8D-\uBAA7\uBAA9-\uBAC3\uBAC5-\uBADF\uBAE1-\uBAFB\uBAFD-\uBB17\uBB19-\uBB33\uBB35-\uBB4F\uBB51-\uBB6B\uBB6D-\uBB87\uBB89-\uBBA3\uBBA5-\uBBBF\uBBC1-\uBBDB\uBBDD-\uBBF7\uBBF9-\uBC13\uBC15-\uBC2F\uBC31-\uBC4B\uBC4D-\uBC67\uBC69-\uBC83\uBC85-\uBC9F\uBCA1-\uBCBB\uBCBD-\uBCD7\uBCD9-\uBCF3\uBCF5-\uBD0F\uBD11-\uBD2B\uBD2D-\uBD47\uBD49-\uBD63\uBD65-\uBD7F\uBD81-\uBD9B\uBD9D-\uBDB7\uBDB9-\uBDD3\uBDD5-\uBDEF\uBDF1-\uBE0B\uBE0D-\uBE27\uBE29-\uBE43\uBE45-\uBE5F\uBE61-\uBE7B\uBE7D-\uBE97\uBE99-\uBEB3\uBEB5-\uBECF\uBED1-\uBEEB\uBEED-\uBF07\uBF09-\uBF23\uBF25-\uBF3F\uBF41-\uBF5B\uBF5D-\uBF77\uBF79-\uBF93\uBF95-\uBFAF\uBFB1-\uBFCB\uBFCD-\uBFE7\uBFE9-\uC003\uC005-\uC01F\uC021-\uC03B\uC03D-\uC057\uC059-\uC073\uC075-\uC08F\uC091-\uC0AB\uC0AD-\uC0C7\uC0C9-\uC0E3\uC0E5-\uC0FF\uC101-\uC11B\uC11D-\uC137\uC139-\uC153\uC155-\uC16F\uC171-\uC18B\uC18D-\uC1A7\uC1A9-\uC1C3\uC1C5-\uC1DF\uC1E1-\uC1FB\uC1FD-\uC217\uC219-\uC233\uC235-\uC24F\uC251-\uC26B\uC26D-\uC287\uC289-\uC2A3\uC2A5-\uC2BF\uC2C1-\uC2DB\uC2DD-\uC2F7\uC2F9-\uC313\uC315-\uC32F\uC331-\uC34B\uC34D-\uC367\uC369-\uC383\uC385-\uC39F\uC3A1-\uC3BB\uC3BD-\uC3D7\uC3D9-\uC3F3\uC3F5-\uC40F\uC411-\uC42B\uC42D-\uC447\uC449-\uC463\uC465-\uC47F\uC481-\uC49B\uC49D-\uC4B7\uC4B9-\uC4D3\uC4D5-\uC4EF\uC4F1-\uC50B\uC50D-\uC527\uC529-\uC543\uC545-\uC55F\uC561-\uC57B\uC57D-\uC597\uC599-\uC5B3\uC5B5-\uC5CF\uC5D1-\uC5EB\uC5ED-\uC607\uC609-\uC623\uC625-\uC63F\uC641-\uC65B\uC65D-\uC677\uC679-\uC693\uC695-\uC6AF\uC6B1-\uC6CB\uC6CD-\uC6E7\uC6E9-\uC703\uC705-\uC71F\uC721-\uC73B\uC73D-\uC757\uC759-\uC773\uC775-\uC78F\uC791-\uC7AB\uC7AD-\uC7C7\uC7C9-\uC7E3\uC7E5-\uC7FF\uC801-\uC81B\uC81D-\uC837\uC839-\uC853\uC855-\uC86F\uC871-\uC88B\uC88D-\uC8A7\uC8A9-\uC8C3\uC8C5-\uC8DF\uC8E1-\uC8FB\uC8FD-\uC917\uC919-\uC933\uC935-\uC94F\uC951-\uC96B\uC96D-\uC987\uC989-\uC9A3\uC9A5-\uC9BF\uC9C1-\uC9DB\uC9DD-\uC9F7\uC9F9-\uCA13\uCA15-\uCA2F\uCA31-\uCA4B\uCA4D-\uCA67\uCA69-\uCA83\uCA85-\uCA9F\uCAA1-\uCABB\uCABD-\uCAD7\uCAD9-\uCAF3\uCAF5-\uCB0F\uCB11-\uCB2B\uCB2D-\uCB47\uCB49-\uCB63\uCB65-\uCB7F\uCB81-\uCB9B\uCB9D-\uCBB7\uCBB9-\uCBD3\uCBD5-\uCBEF\uCBF1-\uCC0B\uCC0D-\uCC27\uCC29-\uCC43\uCC45-\uCC5F\uCC61-\uCC7B\uCC7D-\uCC97\uCC99-\uCCB3\uCCB5-\uCCCF\uCCD1-\uCCEB\uCCED-\uCD07\uCD09-\uCD23\uCD25-\uCD3F\uCD41-\uCD5B\uCD5D-\uCD77\uCD79-\uCD93\uCD95-\uCDAF\uCDB1-\uCDCB\uCDCD-\uCDE7\uCDE9-\uCE03\uCE05-\uCE1F\uCE21-\uCE3B\uCE3D-\uCE57\uCE59-\uCE73\uCE75-\uCE8F\uCE91-\uCEAB\uCEAD-\uCEC7\uCEC9-\uCEE3\uCEE5-\uCEFF\uCF01-\uCF1B\uCF1D-\uCF37\uCF39-\uCF53\uCF55-\uCF6F\uCF71-\uCF8B\uCF8D-\uCFA7\uCFA9-\uCFC3\uCFC5-\uCFDF\uCFE1-\uCFFB\uCFFD-\uD017\uD019-\uD033\uD035-\uD04F\uD051-\uD06B\uD06D-\uD087\uD089-\uD0A3\uD0A5-\uD0BF\uD0C1-\uD0DB\uD0DD-\uD0F7\uD0F9-\uD113\uD115-\uD12F\uD131-\uD14B\uD14D-\uD167\uD169-\uD183\uD185-\uD19F\uD1A1-\uD1BB\uD1BD-\uD1D7\uD1D9-\uD1F3\uD1F5-\uD20F\uD211-\uD22B\uD22D-\uD247\uD249-\uD263\uD265-\uD27F\uD281-\uD29B\uD29D-\uD2B7\uD2B9-\uD2D3\uD2D5-\uD2EF\uD2F1-\uD30B\uD30D-\uD327\uD329-\uD343\uD345-\uD35F\uD361-\uD37B\uD37D-\uD397\uD399-\uD3B3\uD3B5-\uD3CF\uD3D1-\uD3EB\uD3ED-\uD407\uD409-\uD423\uD425-\uD43F\uD441-\uD45B\uD45D-\uD477\uD479-\uD493\uD495-\uD4AF\uD4B1-\uD4CB\uD4CD-\uD4E7\uD4E9-\uD503\uD505-\uD51F\uD521-\uD53B\uD53D-\uD557\uD559-\uD573\uD575-\uD58F\uD591-\uD5AB\uD5AD-\uD5C7\uD5C9-\uD5E3\uD5E5-\uD5FF\uD601-\uD61B\uD61D-\uD637\uD639-\uD653\uD655-\uD66F\uD671-\uD68B\uD68D-\uD6A7\uD6A9-\uD6C3\uD6C5-\uD6DF\uD6E1-\uD6FB\uD6FD-\uD717\uD719-\uD733\uD735-\uD74F\uD751-\uD76B\uD76D-\uD787\uD789-\uD7A3]$/,Nt=/^(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])$/,kt=(e,t)=>{var r=pt.Any;return-1!==e.search(Ct)&&(r|=pt.Extend),8205===t&&(r|=pt.ZWJ),t>=127462&&t<=127487&&(r|=pt.RI),-1!==e.search(Et)&&(r|=pt.Prepend),-1!==e.search(Bt)&&(r|=pt.SpacingMark),-1!==e.search(_t)&&(r|=pt.L),-1!==e.search(wt)&&(r|=pt.V),-1!==e.search(Ft)&&(r|=pt.T),-1!==e.search(Ot)&&(r|=pt.LV),-1!==e.search(St)&&(r|=pt.LVT),-1!==e.search(Nt)&&(r|=pt.ExtPict),r};function Rt(e,t){return 0!=(e&t)}var jt=[[pt.L,pt.L|pt.V|pt.LV|pt.LVT],[pt.LV|pt.V,pt.V|pt.T],[pt.LVT|pt.T,pt.T],[pt.Any,pt.Extend|pt.ZWJ],[pt.Any,pt.SpacingMark],[pt.Prepend,pt.Any],[pt.ZWJ,pt.ExtPict],[pt.RI,pt.RI]];function Tt(e,t){return-1===jt.findIndex((r=>Rt(e,r[0])&&Rt(t,r[1])))}var It=/(?:[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u2388\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2605\u2607-\u2612\u2614-\u2685\u2690-\u2705\u2708-\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763-\u2767\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC00-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDAD-\uDDE5\uDE01-\uDE0F\uDE1A\uDE2F\uDE32-\uDE3A\uDE3C-\uDE3F\uDE49-\uDFFA]|\uD83D[\uDC00-\uDD3D\uDD46-\uDE4F\uDE80-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDEFF]|\uD83F[\uDC00-\uDFFD])(?:[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09BE\u09C1-\u09C4\u09CD\u09D7\u09E2\u09E3\u09FE\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3E\u0B3F\u0B41-\u0B44\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B82\u0BBE\u0BC0\u0BCD\u0BD7\u0C00\u0C04\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC2\u0CC6\u0CCC\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D3E\u0D41-\u0D44\u0D4D\u0D57\u0D62\u0D63\u0D81\u0DCA\u0DCF\u0DD2-\u0DD4\u0DD6\u0DDF\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1AC0\u1B00-\u1B03\u1B34-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA82C\uA8C4\uA8C5\uA8E0-\uA8F1\uA8FF\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9BD\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFF9E\uFF9F]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD803[\uDD24-\uDD27\uDEAB\uDEAC\uDF46-\uDF50]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDC9-\uDDCC\uDDCF\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3B\uDF3C\uDF3E\uDF40\uDF57\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDC5E\uDCB0\uDCB3-\uDCB8\uDCBA\uDCBD\uDCBF\uDCC0\uDCC2\uDCC3\uDDAF\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDC2F-\uDC37\uDC39\uDC3A\uDD30\uDD3B\uDD3C\uDD3E\uDD43\uDDD4-\uDDD7\uDDDA\uDDDB\uDDE0\uDE01-\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47\uDD90\uDD91\uDD95\uDD97\uDEF3\uDEF4]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF4F\uDF8F-\uDF92\uDFE4]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65\uDD67-\uDD69\uDD6E-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A\uDD30-\uDD36\uDEEC-\uDEEF]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uD83C[\uDFFB-\uDFFF]|\uDB40[\uDC20-\uDC7F\uDD00-\uDDEF])*\u200D$/,Mt=e=>-1!==e.search(It),Pt=/(?:\uD83C[\uDDE6-\uDDFF])+$/g,Lt=e=>{var t=e.match(Pt);return null!==t&&t[0].length/2%2==1},Zt=e=>ne(e)&&Qt.isNodeList(e.children)&&!Yt.isEditor(e),Ut={isAncestor:e=>ne(e)&&Qt.isNodeList(e.children),isElement:Zt,isElementList:e=>Array.isArray(e)&&e.every((e=>Ut.isElement(e))),isElementProps:e=>void 0!==e.children,isElementType:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"type";return Zt(e)&&e[r]===t},matches(e,t){for(var r in t)if("children"!==r&&e[r]!==t[r])return!1;return!0}},Wt=["text"],Vt=["text"];function qt(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Ht(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?qt(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):qt(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var zt=new WeakMap,Yt={above(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{voids:r=!1,mode:n="lowest",at:a=e.selection,match:o}=t;if(a){var i=Yt.path(e,a),s="lowest"===n;for(var[u,l]of Yt.levels(e,{at:i,voids:r,match:o,reverse:s}))if(!yr.isText(u)&&!rr.equals(i,l))return[u,l]}},addMark(e,t,r){e.addMark(t,r)},after(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a={anchor:Yt.point(e,t,{edge:"end"}),focus:Yt.end(e,[])},{distance:o=1}=n,i=0;for(var s of Yt.positions(e,Ht(Ht({},n),{},{at:a}))){if(i>o)break;0!==i&&(r=s),i++}return r},before(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a={anchor:Yt.start(e,[]),focus:Yt.point(e,t,{edge:"start"})},{distance:o=1}=n,i=0;for(var s of Yt.positions(e,Ht(Ht({},n),{},{at:a,reverse:!0}))){if(i>o)break;0!==i&&(r=s),i++}return r},deleteBackward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:r="character"}=t;e.deleteBackward(r)},deleteForward(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{unit:r="character"}=t;e.deleteForward(r)},deleteFragment(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{direction:r="forward"}=t;e.deleteFragment(r)},edges:(e,t)=>[Yt.start(e,t),Yt.end(e,t)],end:(e,t)=>Yt.point(e,t,{edge:"end"}),first(e,t){var r=Yt.path(e,t,{edge:"start"});return Yt.node(e,r)},fragment(e,t){var r=Yt.range(e,t);return Qt.fragment(e,r)},hasBlocks:(e,t)=>t.children.some((t=>Yt.isBlock(e,t))),hasInlines:(e,t)=>t.children.some((t=>yr.isText(t)||Yt.isInline(e,t))),hasTexts:(e,t)=>t.children.every((e=>yr.isText(e))),insertBreak(e){e.insertBreak()},insertFragment(e,t){e.insertFragment(t)},insertNode(e,t){e.insertNode(t)},insertText(e,t){e.insertText(t)},isBlock:(e,t)=>Ut.isElement(t)&&!e.isInline(t),isEditor(e){if(!ne(e))return!1;var t=zt.get(e);if(void 0!==t)return t;var r="function"==typeof e.addMark&&"function"==typeof e.apply&&"function"==typeof e.deleteBackward&&"function"==typeof e.deleteForward&&"function"==typeof e.deleteFragment&&"function"==typeof e.insertBreak&&"function"==typeof e.insertFragment&&"function"==typeof e.insertNode&&"function"==typeof e.insertText&&"function"==typeof e.isInline&&"function"==typeof e.isVoid&&"function"==typeof e.normalizeNode&&"function"==typeof e.onChange&&"function"==typeof e.removeMark&&(null===e.marks||ne(e.marks))&&(null===e.selection||cr.isRange(e.selection))&&Qt.isNodeList(e.children)&&tr.isOperationList(e.operations);return zt.set(e,r),r},isEnd(e,t,r){var n=Yt.end(e,r);return ir.equals(t,n)},isEdge:(e,t,r)=>Yt.isStart(e,t,r)||Yt.isEnd(e,t,r),isEmpty(e,t){var{children:r}=t,[n]=r;return 0===r.length||1===r.length&&yr.isText(n)&&""===n.text&&!e.isVoid(t)},isInline:(e,t)=>Ut.isElement(t)&&e.isInline(t),isNormalizing(e){var t=it.get(e);return void 0===t||t},isStart(e,t,r){if(0!==t.offset)return!1;var n=Yt.start(e,r);return ir.equals(t,n)},isVoid:(e,t)=>Ut.isElement(t)&&e.isVoid(t),last(e,t){var r=Yt.path(e,t,{edge:"end"});return Yt.node(e,r)},leaf(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Yt.path(e,t,r);return[Qt.leaf(e,n),n]},*levels(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,reverse:n=!1,voids:a=!1}=t,{match:o}=t;if(null==o&&(o=()=>!0),r){var i=[],s=Yt.path(e,r);for(var[u,l]of Qt.levels(e,s))if(o(u,l)&&(i.push([u,l]),!a&&Yt.isVoid(e,u)))break;n&&i.reverse(),yield*i}},marks(e){var{marks:t,selection:r}=e;if(!r)return null;if(t)return t;if(cr.isExpanded(r)){var[n]=Yt.nodes(e,{match:yr.isText});if(n){var[a]=n;return mt(a,Wt)}return{}}var{anchor:o}=r,{path:i}=o,[s]=Yt.leaf(e,i);if(0===o.offset){var u=Yt.previous(e,{at:i,match:yr.isText}),l=Yt.above(e,{match:t=>Yt.isBlock(e,t)});if(u&&l){var[c,d]=u,[,m]=l;rr.isAncestor(m,d)&&(s=c)}}return mt(s,Vt)},next(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:r="lowest",voids:n=!1}=t,{match:a,at:o=e.selection}=t;if(o){var i=Yt.after(e,o,{voids:n});if(i){var[,s]=Yt.last(e,[]),u=[i.path,s];if(rr.isPath(o)&&0===o.length)throw new Error("Cannot get the next node from the root node!");if(null==a)if(rr.isPath(o)){var[l]=Yt.parent(e,o);a=e=>l.children.includes(e)}else a=()=>!0;var[c]=Yt.nodes(e,{at:u,match:a,mode:r,voids:n});return c}}},node(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Yt.path(e,t,r);return[Qt.get(e,n),n]},*nodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,mode:n="all",universal:a=!1,reverse:o=!1,voids:i=!1}=t,{match:s}=t;if(s||(s=()=>!0),r){var u,l;if(Gt.isSpan(r))u=r[0],l=r[1];else{var c=Yt.path(e,r,{edge:"start"}),d=Yt.path(e,r,{edge:"end"});u=o?d:c,l=o?c:d}var m,p=Qt.nodes(e,{reverse:o,from:u,to:l,pass:t=>{var[r]=t;return!i&&Yt.isVoid(e,r)}}),b=[];for(var[f,g]of p){var y=m&&0===rr.compare(g,m[1]);if("highest"!==n||!y)if(s(f,g))if("lowest"===n&&y)m=[f,g];else{var h="lowest"===n?m:[f,g];h&&(a?b.push(h):yield h),m=[f,g]}else if(a&&!y&&yr.isText(f))return}"lowest"===n&&m&&(a?b.push(m):yield m),a&&(yield*b)}},normalize(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{force:r=!1}=t,n=e=>nt.get(e)||[],a=e=>{var t=n(e).pop(),r=t.join(",");return(e=>at.get(e)||new Set)(e).delete(r),t};if(Yt.isNormalizing(e)){if(r){var o=Array.from(Qt.nodes(e),(e=>{var[,t]=e;return t})),i=new Set(o.map((e=>e.join(","))));nt.set(e,o),at.set(e,i)}0!==n(e).length&&Yt.withoutNormalizing(e,(()=>{for(var t of n(e))if(Qt.has(e,t)){var r=Yt.node(e,t),[o,i]=r;Ut.isElement(o)&&0===o.children.length&&e.normalizeNode(r)}for(var s=42*n(e).length,u=0;0!==n(e).length;){if(u>s)throw new Error("\n            Could not completely normalize the editor after ".concat(s," iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.\n          "));var l=a(e);if(Qt.has(e,l)){var c=Yt.node(e,l);e.normalizeNode(c)}u++}}))}},parent(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n=Yt.path(e,t,r),a=rr.parent(n);return Yt.node(e,a)},path(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{depth:n,edge:a}=r;if(rr.isPath(t))if("start"===a){var[,o]=Qt.first(e,t);t=o}else if("end"===a){var[,i]=Qt.last(e,t);t=i}return cr.isRange(t)&&(t="start"===a?cr.start(t):"end"===a?cr.end(t):rr.common(t.anchor.path,t.focus.path)),ir.isPoint(t)&&(t=t.path),null!=n&&(t=t.slice(0,n)),t},hasPath:(e,t)=>Qt.has(e,t),pathRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n="forward"}=r,a={current:t,affinity:n,unref(){var{current:t}=a;return Yt.pathRefs(e).delete(a),a.current=null,t}};return Yt.pathRefs(e).add(a),a},pathRefs(e){var t=st.get(e);return t||(t=new Set,st.set(e,t)),t},point(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{edge:n="start"}=r;if(rr.isPath(t)){var a;if("end"===n){var[,o]=Qt.last(e,t);a=o}else{var[,i]=Qt.first(e,t);a=i}var s=Qt.get(e,a);if(!yr.isText(s))throw new Error("Cannot get the ".concat(n," point in the node at path [").concat(t,"] because it has no ").concat(n," text node."));return{path:a,offset:"end"===n?s.text.length:0}}if(cr.isRange(t)){var[u,l]=cr.edges(t);return"start"===n?u:l}return t},pointRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n="forward"}=r,a={current:t,affinity:n,unref(){var{current:t}=a;return Yt.pointRefs(e).delete(a),a.current=null,t}};return Yt.pointRefs(e).add(a),a},pointRefs(e){var t=ut.get(e);return t||(t=new Set,ut.set(e,t)),t},*positions(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{at:r=e.selection,unit:n="offset",reverse:a=!1,voids:o=!1}=t;if(r){var i=Yt.range(e,r),[s,u]=cr.edges(i),l=a?u:s,c=!1,d="",m=0,p=0,b=0;for(var[f,g]of Yt.nodes(e,{at:r,reverse:a,voids:o})){if(Ut.isElement(f)){if(!o&&e.isVoid(f)){yield Yt.start(e,g);continue}if(e.isInline(f))continue;if(Yt.hasInlines(e,f)){var y=rr.isAncestor(g,u.path)?u:Yt.end(e,g),h=rr.isAncestor(g,s.path)?s:Yt.start(e,g);d=Yt.string(e,{anchor:h,focus:y},{voids:o}),c=!0}}if(yr.isText(f)){var v=rr.equals(g,l.path);for(v?(p=a?l.offset:f.text.length-l.offset,b=l.offset):(p=f.text.length,b=a?p:0),(v||c||"offset"===n)&&(yield{path:g,offset:b},c=!1);;){if(0===m){if(""===d)break;m=A(d,n,a),d=ht(d,m,a)[1]}if(b=a?b-m:b+m,(p-=m)<0){m=-p;break}m=0,yield{path:g,offset:b}}}}}function A(e,t,r){return"character"===t?bt(e,r):"word"===t?function(e){for(var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],r=0,n=!1;e.length>0;){var a=bt(e,t),[o,i]=ht(e,a,t);if(vt(o,i,t))n=!0,r+=a;else{if(n)break;r+=a}e=i}return r}(e,r):"line"===t||"block"===t?e.length:1}},previous(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{mode:r="lowest",voids:n=!1}=t,{match:a,at:o=e.selection}=t;if(o){var i=Yt.before(e,o,{voids:n});if(i){var[,s]=Yt.first(e,[]),u=[i.path,s];if(rr.isPath(o)&&0===o.length)throw new Error("Cannot get the previous node from the root node!");if(null==a)if(rr.isPath(o)){var[l]=Yt.parent(e,o);a=e=>l.children.includes(e)}else a=()=>!0;var[c]=Yt.nodes(e,{reverse:!0,at:u,match:a,mode:r,voids:n});return c}}},range:(e,t,r)=>cr.isRange(t)&&!r?t:{anchor:Yt.start(e,t),focus:Yt.end(e,r||t)},rangeRef(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{affinity:n="forward"}=r,a={current:t,affinity:n,unref(){var{current:t}=a;return Yt.rangeRefs(e).delete(a),a.current=null,t}};return Yt.rangeRefs(e).add(a),a},rangeRefs(e){var t=lt.get(e);return t||(t=new Set,lt.set(e,t)),t},removeMark(e,t){e.removeMark(t)},setNormalizing(e,t){it.set(e,t)},start:(e,t)=>Yt.point(e,t,{edge:"start"}),string(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:n=!1}=r,a=Yt.range(e,t),[o,i]=cr.edges(a),s="";for(var[u,l]of Yt.nodes(e,{at:a,match:yr.isText,voids:n})){var c=u.text;rr.equals(l,i.path)&&(c=c.slice(0,i.offset)),rr.equals(l,o.path)&&(c=c.slice(o.offset)),s+=c}return s},unhangRange(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{voids:n=!1}=r,[a,o]=cr.edges(t);if(0!==a.offset||0!==o.offset||cr.isCollapsed(t))return t;var i=Yt.above(e,{at:o,match:t=>Yt.isBlock(e,t)}),s=i?i[1]:[],u={anchor:Yt.start(e,a),focus:o},l=!0;for(var[c,d]of Yt.nodes(e,{at:u,match:yr.isText,reverse:!0,voids:n}))if(l)l=!1;else if(""!==c.text||rr.isBefore(d,s)){o={path:d,offset:c.text.length};break}return{anchor:a,focus:o}},void(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return Yt.above(e,Ht(Ht({},t),{},{match:t=>Yt.isVoid(e,t)}))},withoutNormalizing(e,t){var r=Yt.isNormalizing(e);Yt.setNormalizing(e,!1);try{t()}finally{Yt.setNormalizing(e,r)}Yt.normalize(e)}},Gt={isSpan:e=>Array.isArray(e)&&2===e.length&&e.every(rr.isPath)},Jt=["children"],Kt=["text"],Xt=new WeakMap,Qt={ancestor(e,t){var r=Qt.get(e,t);if(yr.isText(r))throw new Error("Cannot get the ancestor node at path [".concat(t,"] because it refers to a text node instead: ").concat(r));return r},*ancestors(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var n of rr.ancestors(t,r)){var a=[Qt.ancestor(e,n),n];yield a}},child(e,t){if(yr.isText(e))throw new Error("Cannot get the child of a text node: ".concat(JSON.stringify(e)));var r=e.children[t];if(null==r)throw new Error("Cannot get child at index `".concat(t,"` in node: ").concat(JSON.stringify(e)));return r},*children(e,t){for(var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{reverse:n=!1}=r,a=Qt.ancestor(e,t),{children:o}=a,i=n?o.length-1:0;n?i>=0:i<o.length;){var s=Qt.child(a,i),u=t.concat(i);yield[s,u],i=n?i-1:i+1}},common(e,t,r){var n=rr.common(t,r);return[Qt.get(e,n),n]},descendant(e,t){var r=Qt.get(e,t);if(Yt.isEditor(r))throw new Error("Cannot get the descendant node at path [".concat(t,"] because it refers to the root editor node instead: ").concat(r));return r},*descendants(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Qt.nodes(e,t))0!==n.length&&(yield[r,n])},*elements(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Qt.nodes(e,t))Ut.isElement(r)&&(yield[r,n])},extractProps:e=>Ut.isAncestor(e)?mt(e,Jt):mt(e,Kt),first(e,t){for(var r=t.slice(),n=Qt.get(e,r);n&&!yr.isText(n)&&0!==n.children.length;)n=n.children[0],r.push(0);return[n,r]},fragment(e,t){if(yr.isText(e))throw new Error("Cannot get a fragment starting from a root text node: ".concat(JSON.stringify(e)));var r=$e({children:e.children},(e=>{var[r,n]=cr.edges(t),a=Qt.nodes(e,{reverse:!0,pass:e=>{var[,r]=e;return!cr.includes(t,r)}});for(var[,o]of a){if(!cr.includes(t,o)){var i=Qt.parent(e,o),s=o[o.length-1];i.children.splice(s,1)}if(rr.equals(o,n.path)){var u=Qt.leaf(e,o);u.text=u.text.slice(0,n.offset)}if(rr.equals(o,r.path)){var l=Qt.leaf(e,o);l.text=l.text.slice(r.offset)}}Yt.isEditor(e)&&(e.selection=null)}));return r.children},get(e,t){for(var r=e,n=0;n<t.length;n++){var a=t[n];if(yr.isText(r)||!r.children[a])throw new Error("Cannot find a descendant at path [".concat(t,"] in node: ").concat(JSON.stringify(e)));r=r.children[a]}return r},has(e,t){for(var r=e,n=0;n<t.length;n++){var a=t[n];if(yr.isText(r)||!r.children[a])return!1;r=r.children[a]}return!0},isNode:e=>yr.isText(e)||Ut.isElement(e)||Yt.isEditor(e),isNodeList(e){if(!Array.isArray(e))return!1;var t=Xt.get(e);if(void 0!==t)return t;var r=e.every((e=>Qt.isNode(e)));return Xt.set(e,r),r},last(e,t){for(var r=t.slice(),n=Qt.get(e,r);n&&!yr.isText(n)&&0!==n.children.length;){var a=n.children.length-1;n=n.children[a],r.push(a)}return[n,r]},leaf(e,t){var r=Qt.get(e,t);if(!yr.isText(r))throw new Error("Cannot get the leaf node at path [".concat(t,"] because it refers to a non-leaf node: ").concat(r));return r},*levels(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};for(var n of rr.levels(t,r)){var a=Qt.get(e,n);yield[a,n]}},matches:(e,t)=>Ut.isElement(e)&&Ut.isElementProps(t)&&Ut.matches(e,t)||yr.isText(e)&&yr.isTextProps(t)&&yr.matches(e,t),*nodes(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{pass:r,reverse:n=!1}=t,{from:a=[],to:o}=t,i=new Set,s=[],u=e;!o||!(n?rr.isBefore(s,o):rr.isAfter(s,o));)if(i.has(u)||(yield[u,s]),i.has(u)||yr.isText(u)||0===u.children.length||null!=r&&!1!==r([u,s])){if(0===s.length)break;if(!n){var l=rr.next(s);if(Qt.has(e,l)){s=l,u=Qt.get(e,s);continue}}n&&0!==s[s.length-1]?(s=rr.previous(s),u=Qt.get(e,s)):(s=rr.parent(s),u=Qt.get(e,s),i.add(u))}else{i.add(u);var c=n?u.children.length-1:0;rr.isAncestor(s,a)&&(c=a[s.length]),s=s.concat(c),u=Qt.get(e,s)}},parent(e,t){var r=rr.parent(t),n=Qt.get(e,r);if(yr.isText(n))throw new Error("Cannot get the parent of path [".concat(t,"] because it does not exist in the root."));return n},string:e=>yr.isText(e)?e.text:e.children.map(Qt.string).join(""),*texts(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};for(var[r,n]of Qt.nodes(e,t))yr.isText(r)&&(yield[r,n])}};function $t(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function er(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?$t(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):$t(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var tr={isNodeOperation:e=>tr.isOperation(e)&&e.type.endsWith("_node"),isOperation(e){if(!ne(e))return!1;switch(e.type){case"insert_node":case"remove_node":return rr.isPath(e.path)&&Qt.isNode(e.node);case"insert_text":case"remove_text":return"number"==typeof e.offset&&"string"==typeof e.text&&rr.isPath(e.path);case"merge_node":return"number"==typeof e.position&&rr.isPath(e.path)&&ne(e.properties);case"move_node":return rr.isPath(e.path)&&rr.isPath(e.newPath);case"set_node":return rr.isPath(e.path)&&ne(e.properties)&&ne(e.newProperties);case"set_selection":return null===e.properties&&cr.isRange(e.newProperties)||null===e.newProperties&&cr.isRange(e.properties)||ne(e.properties)&&ne(e.newProperties);case"split_node":return rr.isPath(e.path)&&"number"==typeof e.position&&ne(e.properties);default:return!1}},isOperationList:e=>Array.isArray(e)&&e.every((e=>tr.isOperation(e))),isSelectionOperation:e=>tr.isOperation(e)&&e.type.endsWith("_selection"),isTextOperation:e=>tr.isOperation(e)&&e.type.endsWith("_text"),inverse(e){switch(e.type){case"insert_node":return er(er({},e),{},{type:"remove_node"});case"insert_text":return er(er({},e),{},{type:"remove_text"});case"merge_node":return er(er({},e),{},{type:"split_node",path:rr.previous(e.path)});case"move_node":var{newPath:t,path:r}=e;if(rr.equals(t,r))return e;if(rr.isSibling(r,t))return er(er({},e),{},{path:t,newPath:r});var n=rr.transform(r,e),a=rr.transform(rr.next(r),e);return er(er({},e),{},{path:n,newPath:a});case"remove_node":return er(er({},e),{},{type:"insert_node"});case"remove_text":return er(er({},e),{},{type:"insert_text"});case"set_node":var{properties:o,newProperties:i}=e;return er(er({},e),{},{properties:i,newProperties:o});case"set_selection":var{properties:s,newProperties:u}=e;return er(er({},e),{},null==s?{properties:u,newProperties:null}:null==u?{properties:null,newProperties:s}:{properties:u,newProperties:s});case"split_node":return er(er({},e),{},{type:"merge_node",path:rr.next(e.path)})}}},rr={ancestors(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,n=rr.levels(e,t);return r?n.slice(1):n.slice(0,-1)},common(e,t){for(var r=[],n=0;n<e.length&&n<t.length;n++){var a=e[n];if(a!==t[n])break;r.push(a)}return r},compare(e,t){for(var r=Math.min(e.length,t.length),n=0;n<r;n++){if(e[n]<t[n])return-1;if(e[n]>t[n])return 1}return 0},endsAfter(e,t){var r=e.length-1,n=e.slice(0,r),a=t.slice(0,r),o=e[r],i=t[r];return rr.equals(n,a)&&o>i},endsAt(e,t){var r=e.length,n=e.slice(0,r),a=t.slice(0,r);return rr.equals(n,a)},endsBefore(e,t){var r=e.length-1,n=e.slice(0,r),a=t.slice(0,r),o=e[r],i=t[r];return rr.equals(n,a)&&o<i},equals:(e,t)=>e.length===t.length&&e.every(((e,r)=>e===t[r])),hasPrevious:e=>e[e.length-1]>0,isAfter:(e,t)=>1===rr.compare(e,t),isAncestor:(e,t)=>e.length<t.length&&0===rr.compare(e,t),isBefore:(e,t)=>-1===rr.compare(e,t),isChild:(e,t)=>e.length===t.length+1&&0===rr.compare(e,t),isCommon:(e,t)=>e.length<=t.length&&0===rr.compare(e,t),isDescendant:(e,t)=>e.length>t.length&&0===rr.compare(e,t),isParent:(e,t)=>e.length+1===t.length&&0===rr.compare(e,t),isPath:e=>Array.isArray(e)&&(0===e.length||"number"==typeof e[0]),isSibling(e,t){if(e.length!==t.length)return!1;var r=e.slice(0,-1),n=t.slice(0,-1);return e[e.length-1]!==t[t.length-1]&&rr.equals(r,n)},levels(e){for(var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,n=[],a=0;a<=e.length;a++)n.push(e.slice(0,a));return r&&n.reverse(),n},next(e){if(0===e.length)throw new Error("Cannot get the next path of a root path [".concat(e,"], because it has no next index."));var t=e[e.length-1];return e.slice(0,-1).concat(t+1)},operationCanTransformPath(e){switch(e.type){case"insert_node":case"remove_node":case"merge_node":case"split_node":case"move_node":return!0;default:return!1}},parent(e){if(0===e.length)throw new Error("Cannot get the parent path of the root path [".concat(e,"]."));return e.slice(0,-1)},previous(e){if(0===e.length)throw new Error("Cannot get the previous path of a root path [".concat(e,"], because it has no previous index."));var t=e[e.length-1];if(t<=0)throw new Error("Cannot get the previous path of a first child path [".concat(e,"] because it would result in a negative index."));return e.slice(0,-1).concat(t-1)},relative(e,t){if(!rr.isAncestor(t,e)&&!rr.equals(e,t))throw new Error("Cannot get the relative path of [".concat(e,"] inside ancestor [").concat(t,"], because it is not above or equal to the path."));return e.slice(t.length)},transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $e(e,(n=>{var{affinity:a="forward"}=r;if(e&&0!==(null==e?void 0:e.length)){if(null===n)return null;switch(t.type){case"insert_node":var{path:o}=t;(rr.equals(o,n)||rr.endsBefore(o,n)||rr.isAncestor(o,n))&&(n[o.length-1]+=1);break;case"remove_node":var{path:i}=t;if(rr.equals(i,n)||rr.isAncestor(i,n))return null;rr.endsBefore(i,n)&&(n[i.length-1]-=1);break;case"merge_node":var{path:s,position:u}=t;rr.equals(s,n)||rr.endsBefore(s,n)?n[s.length-1]-=1:rr.isAncestor(s,n)&&(n[s.length-1]-=1,n[s.length]+=u);break;case"split_node":var{path:l,position:c}=t;if(rr.equals(l,n)){if("forward"===a)n[n.length-1]+=1;else if("backward"!==a)return null}else rr.endsBefore(l,n)?n[l.length-1]+=1:rr.isAncestor(l,n)&&e[l.length]>=c&&(n[l.length-1]+=1,n[l.length]-=c);break;case"move_node":var{path:d,newPath:m}=t;if(rr.equals(d,m))return;if(rr.isAncestor(d,n)||rr.equals(d,n)){var p=m.slice();return rr.endsBefore(d,m)&&d.length<m.length&&(p[d.length-1]-=1),p.concat(n.slice(d.length))}rr.isSibling(d,m)&&(rr.isAncestor(m,n)||rr.equals(m,n))?rr.endsBefore(d,n)?n[d.length-1]-=1:n[d.length-1]+=1:rr.endsBefore(m,n)||rr.equals(m,n)||rr.isAncestor(m,n)?(rr.endsBefore(d,n)&&(n[d.length-1]-=1),n[m.length-1]+=1):rr.endsBefore(d,n)&&(rr.equals(m,n)&&(n[m.length-1]+=1),n[d.length-1]-=1)}}}))}},nr={transform(e,t){var{current:r,affinity:n}=e;if(null!=r){var a=rr.transform(r,t,{affinity:n});e.current=a,null==a&&e.unref()}}};function ar(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function or(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?ar(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ar(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var ir={compare(e,t){var r=rr.compare(e.path,t.path);return 0===r?e.offset<t.offset?-1:e.offset>t.offset?1:0:r},isAfter:(e,t)=>1===ir.compare(e,t),isBefore:(e,t)=>-1===ir.compare(e,t),equals:(e,t)=>e.offset===t.offset&&rr.equals(e.path,t.path),isPoint:e=>ne(e)&&"number"==typeof e.offset&&rr.isPath(e.path),transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $e(e,(e=>{if(null===e)return null;var{affinity:n="forward"}=r,{path:a,offset:o}=e;switch(t.type){case"insert_node":case"move_node":e.path=rr.transform(a,t,r);break;case"insert_text":rr.equals(t.path,a)&&t.offset<=o&&(e.offset+=t.text.length);break;case"merge_node":rr.equals(t.path,a)&&(e.offset+=t.position),e.path=rr.transform(a,t,r);break;case"remove_text":rr.equals(t.path,a)&&t.offset<=o&&(e.offset-=Math.min(o-t.offset,t.text.length));break;case"remove_node":if(rr.equals(t.path,a)||rr.isAncestor(t.path,a))return null;e.path=rr.transform(a,t,r);break;case"split_node":if(rr.equals(t.path,a)){if(t.position===o&&null==n)return null;(t.position<o||t.position===o&&"forward"===n)&&(e.offset-=t.position,e.path=rr.transform(a,t,or(or({},r),{},{affinity:"forward"})))}else e.path=rr.transform(a,t,r)}}))}},sr={transform(e,t){var{current:r,affinity:n}=e;if(null!=r){var a=ir.transform(r,t,{affinity:n});e.current=a,null==a&&e.unref()}}},ur=["anchor","focus"];function lr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}var cr={edges(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{reverse:r=!1}=t,{anchor:n,focus:a}=e;return cr.isBackward(e)===r?[n,a]:[a,n]},end(e){var[,t]=cr.edges(e);return t},equals:(e,t)=>ir.equals(e.anchor,t.anchor)&&ir.equals(e.focus,t.focus),includes(e,t){if(cr.isRange(t)){if(cr.includes(e,t.anchor)||cr.includes(e,t.focus))return!0;var[r,n]=cr.edges(e),[a,o]=cr.edges(t);return ir.isBefore(r,a)&&ir.isAfter(n,o)}var[i,s]=cr.edges(e),u=!1,l=!1;return ir.isPoint(t)?(u=ir.compare(t,i)>=0,l=ir.compare(t,s)<=0):(u=rr.compare(t,i.path)>=0,l=rr.compare(t,s.path)<=0),u&&l},intersection(e,t){var r=mt(e,ur),[n,a]=cr.edges(e),[o,i]=cr.edges(t),s=ir.isBefore(n,o)?o:n,u=ir.isBefore(a,i)?a:i;return ir.isBefore(u,s)?null:function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?lr(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):lr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({anchor:s,focus:u},r)},isBackward(e){var{anchor:t,focus:r}=e;return ir.isAfter(t,r)},isCollapsed(e){var{anchor:t,focus:r}=e;return ir.equals(t,r)},isExpanded:e=>!cr.isCollapsed(e),isForward:e=>!cr.isBackward(e),isRange:e=>ne(e)&&ir.isPoint(e.anchor)&&ir.isPoint(e.focus),*points(e){yield[e.anchor,"anchor"],yield[e.focus,"focus"]},start(e){var[t]=cr.edges(e);return t},transform(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $e(e,(e=>{if(null===e)return null;var n,a,{affinity:o="inward"}=r;if("inward"===o){var i=cr.isCollapsed(e);cr.isForward(e)?(n="forward",a=i?n:"backward"):(n="backward",a=i?n:"forward")}else"outward"===o?cr.isForward(e)?(n="backward",a="forward"):(n="forward",a="backward"):(n=o,a=o);var s=ir.transform(e.anchor,t,{affinity:n}),u=ir.transform(e.focus,t,{affinity:a});if(!s||!u)return null;e.anchor=s,e.focus=u}))}},dr={transform(e,t){var{current:r,affinity:n}=e;if(null!=r){var a=cr.transform(r,t,{affinity:n});e.current=a,null==a&&e.unref()}}},mr=(e,t)=>{for(var r in e){var n=e[r],a=t[r];if(ne(n)&&ne(a)){if(!mr(n,a))return!1}else if(Array.isArray(n)&&Array.isArray(a)){if(n.length!==a.length)return!1;for(var o=0;o<n.length;o++)if(n[o]!==a[o])return!1}else if(n!==a)return!1}for(var i in t)if(void 0===e[i]&&void 0!==t[i])return!1;return!0},pr=["text"],br=["anchor","focus"];function fr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function gr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?fr(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):fr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var yr={equals(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{loose:n=!1}=r;function a(e){return mt(e,pr)}return mr(n?a(e):e,n?a(t):t)},isText:e=>ne(e)&&"string"==typeof e.text,isTextList:e=>Array.isArray(e)&&e.every((e=>yr.isText(e))),isTextProps:e=>void 0!==e.text,matches(e,t){for(var r in t)if("text"!==r&&(!e.hasOwnProperty(r)||e[r]!==t[r]))return!1;return!0},decorations(e,t){var r=[gr({},e)];for(var n of t){var a=mt(n,br),[o,i]=cr.edges(n),s=[],u=0;for(var l of r){var{length:c}=l.text,d=u;if(u+=c,o.offset<=d&&i.offset>=u)Object.assign(l,a),s.push(l);else if(o.offset!==i.offset&&(o.offset===u||i.offset===d)||o.offset>u||i.offset<d||i.offset===d&&0!==d)s.push(l);else{var m=l,p=void 0,b=void 0;if(i.offset<u){var f=i.offset-d;b=gr(gr({},m),{},{text:m.text.slice(f)}),m=gr(gr({},m),{},{text:m.text.slice(0,f)})}if(o.offset>d){var g=o.offset-d;p=gr(gr({},m),{},{text:m.text.slice(0,g)}),m=gr(gr({},m),{},{text:m.text.slice(g)})}Object.assign(m,a),p&&s.push(p),s.push(m),b&&s.push(b)}}r=s}return r}};function hr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function vr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?hr(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):hr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var Ar={transform(e,t){e.children=et(e.children);var r=e.selection&&et(e.selection);try{r=((e,t,r)=>{switch(r.type){case"insert_node":var{path:n,node:a}=r,o=Qt.parent(e,n),i=n[n.length-1];if(i>o.children.length)throw new Error('Cannot apply an "insert_node" operation at path ['.concat(n,"] because the destination is past the end of the node."));if(o.children.splice(i,0,a),t)for(var[s,u]of cr.points(t))t[u]=ir.transform(s,r);break;case"insert_text":var{path:l,offset:c,text:d}=r;if(0===d.length)break;var m=Qt.leaf(e,l),p=m.text.slice(0,c),b=m.text.slice(c);if(m.text=p+d+b,t)for(var[f,g]of cr.points(t))t[g]=ir.transform(f,r);break;case"merge_node":var{path:y}=r,h=Qt.get(e,y),v=rr.previous(y),A=Qt.get(e,v),D=Qt.parent(e,y),x=y[y.length-1];if(yr.isText(h)&&yr.isText(A))A.text+=h.text;else{if(yr.isText(h)||yr.isText(A))throw new Error('Cannot apply a "merge_node" operation at path ['.concat(y,"] to nodes of different interfaces: ").concat(h," ").concat(A));A.children.push(...h.children)}if(D.children.splice(x,1),t)for(var[C,E]of cr.points(t))t[E]=ir.transform(C,r);break;case"move_node":var{path:B,newPath:_}=r;if(rr.isAncestor(B,_))throw new Error("Cannot move a path [".concat(B,"] to new path [").concat(_,"] because the destination is inside itself."));var w=Qt.get(e,B),F=Qt.parent(e,B),O=B[B.length-1];F.children.splice(O,1);var S=rr.transform(B,r),N=Qt.get(e,rr.parent(S)),k=S[S.length-1];if(N.children.splice(k,0,w),t)for(var[R,j]of cr.points(t))t[j]=ir.transform(R,r);break;case"remove_node":var{path:T}=r,I=T[T.length-1];if(Qt.parent(e,T).children.splice(I,1),t)for(var[M,P]of cr.points(t)){var L=ir.transform(M,r);if(null!=t&&null!=L)t[P]=L;else{var Z=void 0,U=void 0;for(var[W,V]of Qt.texts(e)){if(-1!==rr.compare(V,T)){U=[W,V];break}Z=[W,V]}var q=!1;Z&&U&&(q=rr.equals(U[1],T)?!rr.hasPrevious(U[1]):rr.common(Z[1],T).length<rr.common(U[1],T).length),Z&&!q?(M.path=Z[1],M.offset=Z[0].text.length):U?(M.path=U[1],M.offset=0):t=null}}break;case"remove_text":var{path:H,offset:z,text:Y}=r;if(0===Y.length)break;var G=Qt.leaf(e,H),J=G.text.slice(0,z),K=G.text.slice(z+Y.length);if(G.text=J+K,t)for(var[X,Q]of cr.points(t))t[Q]=ir.transform(X,r);break;case"set_node":var{path:$,properties:ee,newProperties:te}=r;if(0===$.length)throw new Error("Cannot set properties on the root node!");var re=Qt.get(e,$);for(var ne in te){if("children"===ne||"text"===ne)throw new Error('Cannot set the "'.concat(ne,'" property of nodes!'));var ae=te[ne];null==ae?delete re[ne]:re[ne]=ae}for(var oe in ee)te.hasOwnProperty(oe)||delete re[oe];break;case"set_selection":var{newProperties:ie}=r;if(null==ie)t=ie;else{if(null==t){if(!cr.isRange(ie))throw new Error('Cannot apply an incomplete "set_selection" operation properties '.concat(JSON.stringify(ie)," when there is no current selection."));t=vr({},ie)}for(var se in ie){var ue=ie[se];if(null==ue){if("anchor"===se||"focus"===se)throw new Error('Cannot remove the "'.concat(se,'" selection property'));delete t[se]}else t[se]=ue}}break;case"split_node":var{path:le,position:ce,properties:de}=r;if(0===le.length)throw new Error('Cannot apply a "split_node" operation at path ['.concat(le,"] because the root node cannot be split."));var me,pe=Qt.get(e,le),be=Qt.parent(e,le),fe=le[le.length-1];if(yr.isText(pe)){var ge=pe.text.slice(0,ce),ye=pe.text.slice(ce);pe.text=ge,me=vr(vr({},de),{},{text:ye})}else{var he=pe.children.slice(0,ce),ve=pe.children.slice(ce);pe.children=he,me=vr(vr({},de),{},{children:ve})}if(be.children.splice(fe+1,0,me),t)for(var[Ae,De]of cr.points(t))t[De]=ir.transform(Ae,r)}return t})(e,r,t)}finally{e.children=tt(e.children),e.selection=r?oe(r)?tt(r):r:null}}},Dr=["text"],xr=["children"];function Cr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Er(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Cr(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Cr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var Br={insertNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Yt.withoutNormalizing(e,(()=>{var{hanging:n=!1,voids:a=!1,mode:o="lowest"}=r,{at:i,match:s,select:u}=r;if(Qt.isNode(t)&&(t=[t]),0!==t.length){var[l]=t;if(i||(i=e.selection?e.selection:e.children.length>0?Yt.end(e,[]):[0],u=!0),null==u&&(u=!1),cr.isRange(i))if(n||(i=Yt.unhangRange(e,i)),cr.isCollapsed(i))i=i.anchor;else{var[,c]=cr.edges(i),d=Yt.pointRef(e,c);Ir.delete(e,{at:i}),i=d.unref()}if(ir.isPoint(i)){null==s&&(s=yr.isText(l)?e=>yr.isText(e):e.isInline(l)?t=>yr.isText(t)||Yt.isInline(e,t):t=>Yt.isBlock(e,t));var[m]=Yt.nodes(e,{at:i.path,match:s,mode:o,voids:a});if(!m)return;var[,p]=m,b=Yt.pathRef(e,p),f=Yt.isEnd(e,i,p);Ir.splitNodes(e,{at:i,match:s,mode:o,voids:a});var g=b.unref();i=f?rr.next(g):g}var y=rr.parent(i),h=i[i.length-1];if(a||!Yt.void(e,{at:y})){for(var v of t){var A=y.concat(h);h++,e.apply({type:"insert_node",path:A,node:v}),i=rr.next(i)}if(i=rr.previous(i),u){var D=Yt.end(e,i);D&&Ir.select(e,D)}}}}))},liftNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Yt.withoutNormalizing(e,(()=>{var{at:r=e.selection,mode:n="lowest",voids:a=!1}=t,{match:o}=t;if(null==o&&(o=rr.isPath(r)?Or(e,r):t=>Yt.isBlock(e,t)),r){var i=Yt.nodes(e,{at:r,match:o,mode:n,voids:a}),s=Array.from(i,(t=>{var[,r]=t;return Yt.pathRef(e,r)}));for(var u of s){var l=u.unref();if(l.length<2)throw new Error("Cannot lift node at a path [".concat(l,"] because it has a depth of less than `2`."));var c=Yt.node(e,rr.parent(l)),[d,m]=c,p=l[l.length-1],{length:b}=d.children;if(1===b){var f=rr.next(m);Ir.moveNodes(e,{at:l,to:f,voids:a}),Ir.removeNodes(e,{at:m,voids:a})}else if(0===p)Ir.moveNodes(e,{at:l,to:m,voids:a});else if(p===b-1){var g=rr.next(m);Ir.moveNodes(e,{at:l,to:g,voids:a})}else{var y=rr.next(l),h=rr.next(m);Ir.splitNodes(e,{at:y,voids:a}),Ir.moveNodes(e,{at:l,to:h,voids:a})}}}}))},mergeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Yt.withoutNormalizing(e,(()=>{var{match:r,at:n=e.selection}=t,{hanging:a=!1,voids:o=!1,mode:i="lowest"}=t;if(n){if(null==r)if(rr.isPath(n)){var[s]=Yt.parent(e,n);r=e=>s.children.includes(e)}else r=t=>Yt.isBlock(e,t);if(!a&&cr.isRange(n)&&(n=Yt.unhangRange(e,n)),cr.isRange(n))if(cr.isCollapsed(n))n=n.anchor;else{var[,u]=cr.edges(n),l=Yt.pointRef(e,u);Ir.delete(e,{at:n}),n=l.unref(),null==t.at&&Ir.select(e,n)}var[c]=Yt.nodes(e,{at:n,match:r,voids:o,mode:i}),d=Yt.previous(e,{at:n,match:r,voids:o,mode:i});if(c&&d){var[m,p]=c,[b,f]=d;if(0!==p.length&&0!==f.length){var g,y,h=rr.next(f),v=rr.common(p,f),A=rr.isSibling(p,f),D=Array.from(Yt.levels(e,{at:p}),(e=>{var[t]=e;return t})).slice(v.length).slice(0,-1),x=Yt.above(e,{at:p,mode:"highest",match:t=>D.includes(t)&&wr(e,t)}),C=x&&Yt.pathRef(e,x[1]);if(yr.isText(m)&&yr.isText(b)){var E=mt(m,Dr);y=b.text.length,g=E}else{if(!Ut.isElement(m)||!Ut.isElement(b))throw new Error("Cannot merge the node at path [".concat(p,"] with the previous sibling because it is not the same kind: ").concat(JSON.stringify(m)," ").concat(JSON.stringify(b)));E=mt(m,xr),y=b.children.length,g=E}A||Ir.moveNodes(e,{at:p,to:h,voids:o}),C&&Ir.removeNodes(e,{at:C.current,voids:o}),Ut.isElement(b)&&Yt.isEmpty(e,b)||yr.isText(b)&&""===b.text&&0!==f[f.length-1]?Ir.removeNodes(e,{at:f,voids:o}):e.apply({type:"merge_node",path:h,position:y,properties:g}),C&&C.unref()}}}}))},moveNodes(e,t){Yt.withoutNormalizing(e,(()=>{var{to:r,at:n=e.selection,mode:a="lowest",voids:o=!1}=t,{match:i}=t;if(n){null==i&&(i=rr.isPath(n)?Or(e,n):t=>Yt.isBlock(e,t));var s=Yt.pathRef(e,r),u=Yt.nodes(e,{at:n,match:i,mode:a,voids:o}),l=Array.from(u,(t=>{var[,r]=t;return Yt.pathRef(e,r)}));for(var c of l){var d=c.unref(),m=s.current;0!==d.length&&e.apply({type:"move_node",path:d,newPath:m}),s.current&&rr.isSibling(m,d)&&rr.isAfter(m,d)&&(s.current=rr.next(s.current))}s.unref()}}))},removeNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Yt.withoutNormalizing(e,(()=>{var{hanging:r=!1,voids:n=!1,mode:a="lowest"}=t,{at:o=e.selection,match:i}=t;if(o){null==i&&(i=rr.isPath(o)?Or(e,o):t=>Yt.isBlock(e,t)),!r&&cr.isRange(o)&&(o=Yt.unhangRange(e,o));var s=Yt.nodes(e,{at:o,match:i,mode:a,voids:n}),u=Array.from(s,(t=>{var[,r]=t;return Yt.pathRef(e,r)}));for(var l of u){var c=l.unref();if(c){var[d]=Yt.node(e,c);e.apply({type:"remove_node",path:c,node:d})}}}}))},setNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Yt.withoutNormalizing(e,(()=>{var{match:n,at:a=e.selection}=r,{hanging:o=!1,mode:i="lowest",split:s=!1,voids:u=!1}=r;if(a){if(null==n&&(n=rr.isPath(a)?Or(e,a):t=>Yt.isBlock(e,t)),!o&&cr.isRange(a)&&(a=Yt.unhangRange(e,a)),s&&cr.isRange(a)){if(cr.isCollapsed(a)&&Yt.leaf(e,a.anchor)[0].text.length>0)return;var l=Yt.rangeRef(e,a,{affinity:"inward"}),[c,d]=cr.edges(a),m="lowest"===i?"lowest":"highest",p=Yt.isEnd(e,d,d.path);Ir.splitNodes(e,{at:d,match:n,mode:m,voids:u,always:!p});var b=Yt.isStart(e,c,c.path);Ir.splitNodes(e,{at:c,match:n,mode:m,voids:u,always:!b}),a=l.unref(),null==r.at&&Ir.select(e,a)}for(var[f,g]of Yt.nodes(e,{at:a,match:n,mode:i,voids:u})){var y={},h={};if(0!==g.length){var v=!1;for(var A in t)"children"!==A&&"text"!==A&&t[A]!==f[A]&&(v=!0,f.hasOwnProperty(A)&&(y[A]=f[A]),null!=t[A]&&(h[A]=t[A]));v&&e.apply({type:"set_node",path:g,properties:y,newProperties:h})}}}}))},splitNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Yt.withoutNormalizing(e,(()=>{var{mode:r="lowest",voids:n=!1}=t,{match:a,at:o=e.selection,height:i=0,always:s=!1}=t;if(null==a&&(a=t=>Yt.isBlock(e,t)),cr.isRange(o)&&(o=Fr(e,o)),rr.isPath(o)){var u=o,l=Yt.point(e,u),[c]=Yt.parent(e,u);a=e=>e===c,i=l.path.length-u.length+1,o=l,s=!0}if(o){var d=Yt.pointRef(e,o,{affinity:"backward"}),[m]=Yt.nodes(e,{at:o,match:a,mode:r,voids:n});if(m){var p=Yt.void(e,{at:o,mode:"highest"});if(!n&&p){var[b,f]=p;if(Ut.isElement(b)&&e.isInline(b)){var g=Yt.after(e,f);if(!g){var y=rr.next(f);Ir.insertNodes(e,{text:""},{at:y,voids:n}),g=Yt.point(e,y)}o=g,s=!0}i=o.path.length-f.length+1,s=!0}var h=Yt.pointRef(e,o),v=o.path.length-i,[,A]=m,D=o.path.slice(0,v),x=0===i?o.offset:o.path[v]+0;for(var[C,E]of Yt.levels(e,{at:D,reverse:!0,voids:n})){var B=!1;if(E.length<A.length||0===E.length||!n&&Yt.isVoid(e,C))break;var _=d.current,w=Yt.isEnd(e,_,E);if(s||!d||!Yt.isEdge(e,_,E)){B=!0;var F=Qt.extractProps(C);e.apply({type:"split_node",path:E,position:x,properties:F})}x=E[E.length-1]+(B||w?1:0)}if(null==t.at){var O=h.current||Yt.end(e,[]);Ir.select(e,O)}d.unref(),h.unref()}}}))},unsetNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Array.isArray(t)||(t=[t]);var n={};for(var a of t)n[a]=null;Ir.setNodes(e,n,r)},unwrapNodes(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Yt.withoutNormalizing(e,(()=>{var{mode:r="lowest",split:n=!1,voids:a=!1}=t,{at:o=e.selection,match:i}=t;if(o){null==i&&(i=rr.isPath(o)?Or(e,o):t=>Yt.isBlock(e,t)),rr.isPath(o)&&(o=Yt.range(e,o));var s=cr.isRange(o)?Yt.rangeRef(e,o):null,u=Yt.nodes(e,{at:o,match:i,mode:r,voids:a}),l=Array.from(u,(t=>{var[,r]=t;return Yt.pathRef(e,r)})).reverse(),c=function(t){var r=t.unref(),[o]=Yt.node(e,r),i=Yt.range(e,r);n&&s&&(i=cr.intersection(s.current,i)),Ir.liftNodes(e,{at:i,match:e=>Ut.isAncestor(o)&&o.children.includes(e),voids:a})};for(var d of l)c(d);s&&s.unref()}}))},wrapNodes(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Yt.withoutNormalizing(e,(()=>{var{mode:n="lowest",split:a=!1,voids:o=!1}=r,{match:i,at:s=e.selection}=r;if(s){if(null==i&&(i=rr.isPath(s)?Or(e,s):e.isInline(t)?t=>Yt.isInline(e,t)||yr.isText(t):t=>Yt.isBlock(e,t)),a&&cr.isRange(s)){var[u,l]=cr.edges(s),c=Yt.rangeRef(e,s,{affinity:"inward"});Ir.splitNodes(e,{at:l,match:i,voids:o}),Ir.splitNodes(e,{at:u,match:i,voids:o}),s=c.unref(),null==r.at&&Ir.select(e,s)}var d=Array.from(Yt.nodes(e,{at:s,match:e.isInline(t)?t=>Yt.isBlock(e,t):e=>Yt.isEditor(e),mode:"lowest",voids:o}));for(var[,m]of d){var p=cr.isRange(s)?cr.intersection(s,Yt.range(e,m)):s;if(p){var b=Array.from(Yt.nodes(e,{at:p,match:i,mode:n,voids:o}));if(b.length>0){var f=function(){var[r]=b,n=b[b.length-1],[,a]=r,[,i]=n;if(0===a.length&&0===i.length)return"continue";var s=rr.equals(a,i)?rr.parent(a):rr.common(a,i),u=Yt.range(e,a,i),l=Yt.node(e,s),[c]=l,d=s.length+1,m=rr.next(i.slice(0,d)),p=Er(Er({},t),{},{children:[]});Ir.insertNodes(e,p,{at:m,voids:o}),Ir.moveNodes(e,{at:u,match:e=>Ut.isAncestor(c)&&c.children.includes(e),to:m.concat(0),voids:o})}();if("continue"===f)continue}}}}}))}},wr=(e,t)=>{if(Ut.isElement(t)){var r=t;return!!Yt.isVoid(e,t)||1===r.children.length&&wr(e,r.children[0])}return!Yt.isEditor(t)},Fr=(e,t)=>{if(cr.isCollapsed(t))return t.anchor;var[,r]=cr.edges(t),n=Yt.pointRef(e,r);return Ir.delete(e,{at:t}),n.unref()},Or=(e,t)=>{var[r]=Yt.node(e,t);return e=>e===r};function Sr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Nr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Sr(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Sr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var kr={collapse(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{edge:r="anchor"}=t,{selection:n}=e;if(n)if("anchor"===r)Ir.select(e,n.anchor);else if("focus"===r)Ir.select(e,n.focus);else if("start"===r){var[a]=cr.edges(n);Ir.select(e,a)}else if("end"===r){var[,o]=cr.edges(n);Ir.select(e,o)}},deselect(e){var{selection:t}=e;t&&e.apply({type:"set_selection",properties:t,newProperties:null})},move(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},{selection:r}=e,{distance:n=1,unit:a="character",reverse:o=!1}=t,{edge:i=null}=t;if(r){"start"===i&&(i=cr.isBackward(r)?"focus":"anchor"),"end"===i&&(i=cr.isBackward(r)?"anchor":"focus");var{anchor:s,focus:u}=r,l={distance:n,unit:a},c={};if(null==i||"anchor"===i){var d=o?Yt.before(e,s,l):Yt.after(e,s,l);d&&(c.anchor=d)}if(null==i||"focus"===i){var m=o?Yt.before(e,u,l):Yt.after(e,u,l);m&&(c.focus=m)}Ir.setSelection(e,c)}},select(e,t){var{selection:r}=e;if(t=Yt.range(e,t),r)Ir.setSelection(e,t);else{if(!cr.isRange(t))throw new Error("When setting the selection and the current selection is `null` you must provide at least an `anchor` and `focus`, but you passed: ".concat(JSON.stringify(t)));e.apply({type:"set_selection",properties:r,newProperties:t})}},setPoint(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{selection:n}=e,{edge:a="both"}=r;if(n){"start"===a&&(a=cr.isBackward(n)?"focus":"anchor"),"end"===a&&(a=cr.isBackward(n)?"anchor":"focus");var{anchor:o,focus:i}=n,s="anchor"===a?o:i;Ir.setSelection(e,{["anchor"===a?"anchor":"focus"]:Nr(Nr({},s),t)})}},setSelection(e,t){var{selection:r}=e,n={},a={};if(r){for(var o in t)("anchor"===o&&null!=t.anchor&&!ir.equals(t.anchor,r.anchor)||"focus"===o&&null!=t.focus&&!ir.equals(t.focus,r.focus)||"anchor"!==o&&"focus"!==o&&t[o]!==r[o])&&(n[o]=r[o],a[o]=t[o]);Object.keys(n).length>0&&e.apply({type:"set_selection",properties:n,newProperties:a})}}},Rr={delete(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};Yt.withoutNormalizing(e,(()=>{var{reverse:r=!1,unit:n="character",distance:a=1,voids:o=!1}=t,{at:i=e.selection,hanging:s=!1}=t;if(i){if(cr.isRange(i)&&cr.isCollapsed(i)&&(i=i.anchor),ir.isPoint(i)){var u=Yt.void(e,{at:i,mode:"highest"});if(!o&&u){var[,l]=u;i=l}else{var c={unit:n,distance:a};i={anchor:i,focus:r?Yt.before(e,i,c)||Yt.start(e,[]):Yt.after(e,i,c)||Yt.end(e,[])},s=!0}}if(rr.isPath(i))Ir.removeNodes(e,{at:i,voids:o});else if(!cr.isCollapsed(i)){if(!s){var[,d]=cr.edges(i),m=Yt.end(e,[]);ir.equals(d,m)||(i=Yt.unhangRange(e,i,{voids:o}))}var[p,b]=cr.edges(i),f=Yt.above(e,{match:t=>Yt.isBlock(e,t),at:p,voids:o}),g=Yt.above(e,{match:t=>Yt.isBlock(e,t),at:b,voids:o}),y=f&&g&&!rr.equals(f[1],g[1]),h=rr.equals(p.path,b.path),v=o?null:Yt.void(e,{at:p,mode:"highest"}),A=o?null:Yt.void(e,{at:b,mode:"highest"});if(v){var D=Yt.before(e,p);D&&f&&rr.isAncestor(f[1],D.path)&&(p=D)}if(A){var x=Yt.after(e,b);x&&g&&rr.isAncestor(g[1],x.path)&&(b=x)}var C,E=[];for(var B of Yt.nodes(e,{at:i,voids:o})){var[_,w]=B;C&&0===rr.compare(w,C)||(!o&&Yt.isVoid(e,_)||!rr.isCommon(w,p.path)&&!rr.isCommon(w,b.path))&&(E.push(B),C=w)}var F=Array.from(E,(t=>{var[,r]=t;return Yt.pathRef(e,r)})),O=Yt.pointRef(e,p),S=Yt.pointRef(e,b);if(!h&&!v){var N=O.current,[k]=Yt.leaf(e,N),{path:R}=N,{offset:j}=p,T=k.text.slice(j);T.length>0&&e.apply({type:"remove_text",path:R,offset:j,text:T})}for(var I of F){var M=I.unref();Ir.removeNodes(e,{at:M,voids:o})}if(!A){var P=S.current,[L]=Yt.leaf(e,P),{path:Z}=P,U=h?p.offset:0,W=L.text.slice(U,b.offset);W.length>0&&e.apply({type:"remove_text",path:Z,offset:U,text:W})}!h&&y&&S.current&&O.current&&Ir.mergeNodes(e,{at:S.current,hanging:!0,voids:o});var V=r?O.unref()||S.unref():S.unref()||O.unref();null==t.at&&V&&Ir.select(e,V)}}}))},insertFragment(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Yt.withoutNormalizing(e,(()=>{var{hanging:n=!1,voids:a=!1}=r,{at:o=e.selection}=r;if(t.length&&o){if(cr.isRange(o))if(n||(o=Yt.unhangRange(e,o)),cr.isCollapsed(o))o=o.anchor;else{var[,i]=cr.edges(o);if(!a&&Yt.void(e,{at:i}))return;var s=Yt.pointRef(e,i);Ir.delete(e,{at:o}),o=s.unref()}else rr.isPath(o)&&(o=Yt.start(e,o));if(a||!Yt.void(e,{at:o})){var u=Yt.above(e,{at:o,match:t=>Yt.isInline(e,t),mode:"highest",voids:a});if(u){var[,l]=u;Yt.isEnd(e,o,l)?o=Yt.after(e,l):Yt.isStart(e,o,l)&&(o=Yt.before(e,l))}var c=Yt.above(e,{match:t=>Yt.isBlock(e,t),at:o,voids:a}),[,d]=c,m=Yt.isStart(e,o,d),p=Yt.isEnd(e,o,d),b=m&&p,f=!m||m&&p,g=!p,[,y]=Qt.first({children:t},[]),[,h]=Qt.last({children:t},[]),v=[],A=t=>{var[r,n]=t;return!(0===n.length||!b&&(f&&rr.isAncestor(n,y)&&Ut.isElement(r)&&!e.isVoid(r)&&!e.isInline(r)||g&&rr.isAncestor(n,h)&&Ut.isElement(r)&&!e.isVoid(r)&&!e.isInline(r)))};for(var D of Qt.nodes({children:t},{pass:A}))A(D)&&v.push(D);var x=[],C=[],E=[],B=!0,_=!1;for(var[w]of v)Ut.isElement(w)&&!e.isInline(w)?(B=!1,_=!0,C.push(w)):B?x.push(w):E.push(w);var[F]=Yt.nodes(e,{at:o,match:t=>yr.isText(t)||Yt.isInline(e,t),mode:"highest",voids:a}),[,O]=F,S=Yt.isStart(e,o,O),N=Yt.isEnd(e,o,O),k=Yt.pathRef(e,p?rr.next(d):d),R=Yt.pathRef(e,N?rr.next(O):O),j=Yt.pathRef(e,d);Ir.splitNodes(e,{at:o,match:t=>_?Yt.isBlock(e,t):yr.isText(t)||Yt.isInline(e,t),mode:_?"lowest":"highest",voids:a});var T=Yt.pathRef(e,!S||S&&N?rr.next(O):O);if(Ir.insertNodes(e,x,{at:T.current,match:t=>yr.isText(t)||Yt.isInline(e,t),mode:"highest",voids:a}),b&&C.length&&Ir.delete(e,{at:j.unref(),voids:a}),Ir.insertNodes(e,C,{at:k.current,match:t=>Yt.isBlock(e,t),mode:"lowest",voids:a}),Ir.insertNodes(e,E,{at:R.current,match:t=>yr.isText(t)||Yt.isInline(e,t),mode:"highest",voids:a}),!r.at){var I;I=E.length>0?rr.previous(R.current):C.length>0?rr.previous(k.current):rr.previous(T.current);var M=Yt.end(e,I);Ir.select(e,M)}T.unref(),k.unref(),R.unref()}}}))},insertText(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Yt.withoutNormalizing(e,(()=>{var{voids:n=!1}=r,{at:a=e.selection}=r;if(a){if(rr.isPath(a)&&(a=Yt.range(e,a)),cr.isRange(a))if(cr.isCollapsed(a))a=a.anchor;else{var o=cr.end(a);if(!n&&Yt.void(e,{at:o}))return;var i=cr.start(a),s=Yt.pointRef(e,i);Ir.delete(e,{at:a,voids:n}),a=s.unref(),Ir.setSelection(e,{anchor:a,focus:a})}if(n||!Yt.void(e,{at:a})){var{path:u,offset:l}=a;t.length>0&&e.apply({type:"insert_text",path:u,offset:l,text:t})}}}))}};function jr(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Tr(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?jr(Object(r),!0).forEach((function(t){rt(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):jr(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var Ir=Tr(Tr(Tr(Tr({},Ar),Br),kr),Rr),Mr=r(6907),Pr=r.n(Mr),Lr=r(3279),Zr=r.n(Lr),Ur=r(3493),Wr=r.n(Ur);function Vr(e){return"object"==typeof e&&null!=e&&1===e.nodeType}function qr(e,t){return(!t||"hidden"!==e)&&"visible"!==e&&"clip"!==e}function Hr(e,t){if(e.clientHeight<e.scrollHeight||e.clientWidth<e.scrollWidth){var r=getComputedStyle(e,null);return qr(r.overflowY,t)||qr(r.overflowX,t)||function(e){var t=function(e){if(!e.ownerDocument||!e.ownerDocument.defaultView)return null;try{return e.ownerDocument.defaultView.frameElement}catch(e){return null}}(e);return!!t&&(t.clientHeight<e.scrollHeight||t.clientWidth<e.scrollWidth)}(e)}return!1}function zr(e,t,r,n,a,o,i,s){return o<e&&i>t||o>e&&i<t?0:o<=e&&s<=r||i>=t&&s>=r?o-e-n:i>t&&s<r||o<e&&s>r?i-t+a:0}var Yr=function(e,t){var r=window,n=t.scrollMode,a=t.block,o=t.inline,i=t.boundary,s=t.skipOverflowHiddenElements,u="function"==typeof i?i:function(e){return e!==i};if(!Vr(e))throw new TypeError("Invalid target");for(var l,c,d=document.scrollingElement||document.documentElement,m=[],p=e;Vr(p)&&u(p);){if((p=null==(c=(l=p).parentElement)?l.getRootNode().host||null:c)===d){m.push(p);break}null!=p&&p===document.body&&Hr(p)&&!Hr(document.documentElement)||null!=p&&Hr(p,s)&&m.push(p)}for(var b=r.visualViewport?r.visualViewport.width:innerWidth,f=r.visualViewport?r.visualViewport.height:innerHeight,g=window.scrollX||pageXOffset,y=window.scrollY||pageYOffset,h=e.getBoundingClientRect(),v=h.height,A=h.width,D=h.top,x=h.right,C=h.bottom,E=h.left,B="start"===a||"nearest"===a?D:"end"===a?C:D+v/2,_="center"===o?E+A/2:"end"===o?x:E,w=[],F=0;F<m.length;F++){var O=m[F],S=O.getBoundingClientRect(),N=S.height,k=S.width,R=S.top,j=S.right,T=S.bottom,I=S.left;if("if-needed"===n&&D>=0&&E>=0&&C<=f&&x<=b&&D>=R&&C<=T&&E>=I&&x<=j)return w;var M=getComputedStyle(O),P=parseInt(M.borderLeftWidth,10),L=parseInt(M.borderTopWidth,10),Z=parseInt(M.borderRightWidth,10),U=parseInt(M.borderBottomWidth,10),W=0,V=0,q="offsetWidth"in O?O.offsetWidth-O.clientWidth-P-Z:0,H="offsetHeight"in O?O.offsetHeight-O.clientHeight-L-U:0,z="offsetWidth"in O?0===O.offsetWidth?0:k/O.offsetWidth:0,Y="offsetHeight"in O?0===O.offsetHeight?0:N/O.offsetHeight:0;if(d===O)W="start"===a?B:"end"===a?B-f:"nearest"===a?zr(y,y+f,f,L,U,y+B,y+B+v,v):B-f/2,V="start"===o?_:"center"===o?_-b/2:"end"===o?_-b:zr(g,g+b,b,P,Z,g+_,g+_+A,A),W=Math.max(0,W+y),V=Math.max(0,V+g);else{W="start"===a?B-R-L:"end"===a?B-T+U+H:"nearest"===a?zr(R,T,N,L,U+H,B,B+v,v):B-(R+N/2)+H/2,V="start"===o?_-I-P:"center"===o?_-(I+k/2)+q/2:"end"===o?_-j+Z+q:zr(I,j,k,P,Z+q,_,_+A,A);var G=O.scrollLeft,J=O.scrollTop;B+=J-(W=Math.max(0,Math.min(J+W/Y,O.scrollHeight-N/Y+H))),_+=G-(V=Math.max(0,Math.min(G+V/z,O.scrollWidth-k/z+q)))}w.push({el:O,top:W,left:V})}return w};function Gr(e){return e===Object(e)&&0!==Object.keys(e).length}const Jr=function(e,t){var r=e.isConnected||e.ownerDocument.documentElement.contains(e);if(Gr(t)&&"function"==typeof t.behavior)return t.behavior(r?Yr(e,t):[]);if(r){var n=function(e){return!1===e?{block:"end",inline:"nearest"}:Gr(e)?e:{block:"start",inline:"nearest"}}(t);return function(e,t){void 0===t&&(t="auto");var r="scrollBehavior"in document.body.style;e.forEach((function(e){var n=e.el,a=e.top,o=e.left;n.scroll&&r?n.scroll({top:a,left:o,behavior:t}):(n.scrollTop=a,n.scrollLeft=o)}))}(Yr(e,n),n.behavior)}};var Kr=r(8156),Xr=r(1533),Qr=r.n(Xr);function $r(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function en(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var tn="undefined"!=typeof navigator&&"undefined"!=typeof window&&/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream,rn="undefined"!=typeof navigator&&/Mac OS X/.test(navigator.userAgent),nn="undefined"!=typeof navigator&&/Android/.test(navigator.userAgent),an="undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent),on="undefined"!=typeof navigator&&/Version\/[\d\.]+.*Safari/.test(navigator.userAgent),sn="undefined"!=typeof navigator&&/Edge?\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent),un="undefined"!=typeof navigator&&/Chrome/i.test(navigator.userAgent),ln="undefined"!=typeof navigator&&/Chrome?\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent),cn="undefined"!=typeof navigator&&/^(?!.*Seamonkey)(?=.*Firefox\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(navigator.userAgent),dn="undefined"!=typeof navigator&&/.*QQBrowser/.test(navigator.userAgent),mn="undefined"!=typeof navigator&&/.*UCBrowser/.test(navigator.userAgent),pn="undefined"!=typeof navigator&&/.*Wechat/.test(navigator.userAgent),bn=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),fn=!ln&&!sn&&"undefined"!=typeof globalThis&&globalThis.InputEvent&&"function"==typeof globalThis.InputEvent.prototype.getTargetRanges,gn=bn?a.useLayoutEffect:a.useEffect,yn=e=>{var{isLast:t,leaf:r,parent:n,text:a}=e,i=Kn(),s=Ma.findPath(i,a),u=rr.parent(s);return i.isVoid(n)?o().createElement(vn,{length:Qt.string(n).length}):""!==r.text||n.children[n.children.length-1]!==a||i.isInline(n)||""!==Yt.string(i,u)?""===r.text?o().createElement(vn,null):t&&"\n"===r.text.slice(-1)?o().createElement(hn,{isTrailing:!0,text:r.text}):o().createElement(hn,{text:r.text}):o().createElement(vn,{isLineBreak:!0})},hn=e=>{var{text:t,isTrailing:r=!1}=e,n=(0,a.useRef)(null),i=()=>"".concat(null!=t?t:"").concat(r?"\n":"");return gn((()=>{var e=i();n.current&&n.current.textContent!==e&&(n.current.textContent=e)})),n.current?o().createElement("span",{"data-slate-string":!0,ref:n}):o().createElement("span",{"data-slate-string":!0,ref:n},i())},vn=e=>{var{length:t=0,isLineBreak:r=!1}=e;return o().createElement("span",{"data-slate-zero-width":r?"n":"z","data-slate-length":t},"\ufeff",r?o().createElement("br",null):null)},An=new WeakMap,Dn=new WeakMap,xn=new WeakMap,Cn=new WeakMap,En=new WeakMap,Bn=new WeakMap,_n=new WeakMap,wn=new WeakMap,Fn=new WeakMap,On=new WeakMap,Sn=new WeakMap,Nn=new WeakMap,kn=new WeakMap,Rn=new WeakMap,jn=new WeakMap,Tn=Symbol("placeholder"),In=e=>{var{leaf:t,isLast:r,text:n,parent:i,renderPlaceholder:s,renderLeaf:u=(e=>o().createElement(Pn,Object.assign({},e)))}=e,l=(0,a.useRef)(null);(0,a.useEffect)((()=>{var e=null==l?void 0:l.current,t=document.querySelector('[data-slate-editor="true"]');if(e&&t)return t.style.minHeight="".concat(e.clientHeight,"px"),()=>{t.style.minHeight="auto"}}),[l,t]);var c=o().createElement(yn,{isLast:r,leaf:t,parent:i,text:n});if(t[Tn]){var d={children:t.placeholder,attributes:{"data-slate-placeholder":!0,style:{position:"absolute",pointerEvents:"none",width:"100%",maxWidth:"100%",display:"block",opacity:"0.333",userSelect:"none",textDecoration:"none"},contentEditable:!1,ref:l}};c=o().createElement(o().Fragment,null,s(d),c)}return u({attributes:{"data-slate-leaf":!0},children:c,leaf:t,text:n})},Mn=o().memo(In,((e,t)=>t.parent===e.parent&&t.isLast===e.isLast&&t.renderLeaf===e.renderLeaf&&t.renderPlaceholder===e.renderPlaceholder&&t.text===e.text&&yr.equals(t.leaf,e.leaf)&&t.leaf[Tn]===e.leaf[Tn])),Pn=e=>{var{attributes:t,children:r}=e;return o().createElement("span",Object.assign({},t),r)},Ln=["anchor","focus"],Zn=["anchor","focus"],Un=(e,t)=>Object.keys(e).length===Object.keys(t).length&&Object.keys(e).every((r=>t.hasOwnProperty(r)&&e[r]===t[r])),Wn=(e,t)=>{if(e.length!==t.length)return!1;for(var r=0;r<e.length;r++){var n=e[r],a=t[r],o=en(n,Ln),i=en(a,Zn);if(!cr.equals(n,a)||n[Tn]!==a[Tn]||!Un(o,i))return!1}return!0};function Vn(e){var t=(0,a.useRef)(0),r=(0,a.useRef)(null),[,n]=(0,a.useState)(0);return(0,a.useEffect)((()=>(jn.set(e,(()=>{r.current||(r.current=requestAnimationFrame((()=>{n((e=>e+1)),r.current=null})),t.current++)})),()=>{jn.delete(e)})),[e]),r.current&&(cancelAnimationFrame(r.current),r.current=null),t.current}var qn=e=>{for(var{decorations:t,isLast:r,parent:n,renderPlaceholder:i,renderLeaf:s,text:u}=e,l=Kn(),c=(0,a.useRef)(null),d=yr.decorations(u,t),m=Ma.findKey(l,u),p=[],b=0;b<d.length;b++){var f=d[b];p.push(o().createElement(Mn,{isLast:r&&b===d.length-1,key:"".concat(m.id,"-").concat(b),renderPlaceholder:i,leaf:f,text:u,parent:n,renderLeaf:s}))}gn((()=>{var e=wn.get(l);c.current?(null==e||e.set(m,c.current),Bn.set(u,c.current),En.set(c.current,u)):(null==e||e.delete(m),Bn.delete(u))}));var g=nn?Vn(u):void 0;return o().createElement("span",{"data-slate-node":"text",ref:c,key:g},p)},Hn=o().memo(qn,((e,t)=>t.parent===e.parent&&t.isLast===e.isLast&&t.renderLeaf===e.renderLeaf&&t.text===e.text&&Wn(t.decorations,e.decorations))),zn=e=>{var{decorations:t,element:r,renderElement:n=(e=>o().createElement(Gn,Object.assign({},e))),renderPlaceholder:i,renderLeaf:s,selection:u}=e,l=(0,a.useRef)(null),c=Kn(),d=sa(),m=c.isInline(r),p=Ma.findKey(c,r),b=ea({decorations:t,node:r,renderElement:n,renderPlaceholder:i,renderLeaf:s,selection:u}),f={"data-slate-node":"element",ref:l};if(m&&(f["data-slate-inline"]=!0),!m&&Yt.hasInlines(c,r)){var g=Qt.string(r),y=Pr()(g);"rtl"===y&&(f.dir=y)}if(Yt.isVoid(c,r)){f["data-slate-void"]=!0,!d&&m&&(f.contentEditable=!1);var h=m?"span":"div",[[v]]=Qt.texts(r);b=d?null:o().createElement(h,{"data-slate-spacer":!0,style:{height:"0",color:"transparent",outline:"none",position:"absolute"}},o().createElement(Hn,{renderPlaceholder:i,decorations:[],isLast:!1,parent:r,text:v})),An.set(v,0),Dn.set(v,r)}gn((()=>{var e=wn.get(c);l.current?(null==e||e.set(p,l.current),Bn.set(r,l.current),En.set(l.current,r)):(null==e||e.delete(p),Bn.delete(r))}));var A=n({attributes:f,children:b,element:r});if(nn){var D=Vn(r);return o().createElement(a.Fragment,{key:D},A)}return A},Yn=o().memo(zn,((e,t)=>e.element===t.element&&e.renderElement===t.renderElement&&e.renderLeaf===t.renderLeaf&&Wn(e.decorations,t.decorations)&&(e.selection===t.selection||!!e.selection&&!!t.selection&&cr.equals(e.selection,t.selection)))),Gn=e=>{var{attributes:t,children:r,element:n}=e,a=Kn().isInline(n)?"span":"div";return o().createElement(a,Object.assign({},t,{style:{position:"relative"}}),r)},Jn=(0,a.createContext)(null),Kn=()=>{var e=(0,a.useContext)(Jn);if(!e)throw new Error("The `useSlateStatic` hook must be used inside the <Slate> component's context.");return e},Xn=(0,a.createContext)((()=>[])),Qn=(0,a.createContext)(!1),$n=()=>(0,a.useContext)(Qn),ea=e=>{for(var{decorations:t,node:r,renderElement:n,renderPlaceholder:i,renderLeaf:s,selection:u}=e,l=(0,a.useContext)(Xn),c=Kn(),d=Ma.findPath(c,r),m=[],p=Ut.isElement(r)&&!c.isInline(r)&&Yt.hasInlines(c,r),b=0;b<r.children.length;b++){var f=d.concat(b),g=r.children[b],y=Ma.findKey(c,g),h=Yt.range(c,f),v=u&&cr.intersection(h,u),A=l([g,f]);for(var D of t){var x=cr.intersection(D,h);x&&A.push(x)}Ut.isElement(g)?m.push(o().createElement(Qn.Provider,{key:"provider-".concat(y.id),value:!!v},o().createElement(Yn,{decorations:A,element:g,key:y.id,renderElement:n,renderPlaceholder:i,renderLeaf:s,selection:v}))):m.push(o().createElement(Hn,{decorations:A,key:y.id,isLast:p&&b===r.children.length-1,parent:r,renderPlaceholder:i,renderLeaf:s,text:g})),An.set(g,b),Dn.set(g,r)}return m},ta={bold:"mod+b",compose:["down","left","right","up","backspace","enter"],moveBackward:"left",moveForward:"right",moveWordBackward:"ctrl+left",moveWordForward:"ctrl+right",deleteBackward:"shift?+backspace",deleteForward:"shift?+delete",extendBackward:"shift+left",extendForward:"shift+right",italic:"mod+i",splitBlock:"shift?+enter",undo:"mod+z"},ra={moveLineBackward:"opt+up",moveLineForward:"opt+down",moveWordBackward:"opt+left",moveWordForward:"opt+right",deleteBackward:["ctrl+backspace","ctrl+h"],deleteForward:["ctrl+delete","ctrl+d"],deleteLineBackward:"cmd+shift?+backspace",deleteLineForward:["cmd+shift?+delete","ctrl+k"],deleteWordBackward:"opt+shift?+backspace",deleteWordForward:"opt+shift?+delete",extendLineBackward:"opt+shift+up",extendLineForward:"opt+shift+down",redo:"cmd+shift+z",transposeCharacter:"ctrl+t"},na={deleteWordBackward:"ctrl+shift?+backspace",deleteWordForward:"ctrl+shift?+delete",redo:["ctrl+y","ctrl+shift+z"]},aa=e=>{var t=ta[e],r=ra[e],n=na[e],a=t&&(0,Kr.TB)(t),o=r&&(0,Kr.TB)(r),i=n&&(0,Kr.TB)(n);return e=>!(!a||!a(e))||!!(rn&&o&&o(e))||!(rn||!i||!i(e))},oa={isBold:aa("bold"),isCompose:aa("compose"),isMoveBackward:aa("moveBackward"),isMoveForward:aa("moveForward"),isDeleteBackward:aa("deleteBackward"),isDeleteForward:aa("deleteForward"),isDeleteLineBackward:aa("deleteLineBackward"),isDeleteLineForward:aa("deleteLineForward"),isDeleteWordBackward:aa("deleteWordBackward"),isDeleteWordForward:aa("deleteWordForward"),isExtendBackward:aa("extendBackward"),isExtendForward:aa("extendForward"),isExtendLineBackward:aa("extendLineBackward"),isExtendLineForward:aa("extendLineForward"),isItalic:aa("italic"),isMoveLineBackward:aa("moveLineBackward"),isMoveLineForward:aa("moveLineForward"),isMoveWordBackward:aa("moveWordBackward"),isMoveWordForward:aa("moveWordForward"),isRedo:aa("redo"),isSplitBlock:aa("splitBlock"),isTransposeCharacter:aa("transposeCharacter"),isUndo:aa("undo")},ia=(0,a.createContext)(!1),sa=()=>(0,a.useContext)(ia),ua=(0,a.createContext)(null),la=()=>{var e=(0,a.useContext)(ua);if(!e)throw new Error("The `useSlate` hook must be used inside the <Slate> component's context.");var[t]=e;return t},ca=e=>e&&e.ownerDocument&&e.ownerDocument.defaultView||null,da=e=>ma(e)&&1===e.nodeType,ma=e=>{var t=ca(e);return!!t&&e instanceof t.Node},pa=e=>{var t=e&&e.anchorNode&&ca(e.anchorNode);return!!t&&e instanceof t.Selection},ba=e=>ma(e)&&3===e.nodeType,fa=(e,t,r)=>{for(var n,{childNodes:a}=e,o=a[t],i=t,s=!1,u=!1;(ma(n=o)&&8===n.nodeType||da(o)&&0===o.childNodes.length||da(o)&&"false"===o.getAttribute("contenteditable"))&&(!s||!u);)i>=a.length?(s=!0,i=t-1,r="backward"):i<0?(u=!0,i=t+1,r="forward"):(o=a[i],t=i,i+="forward"===r?1:-1);return[o,t]},ga=(e,t,r)=>{var[n]=fa(e,t,r);return n},ya=e=>{var t="";if(ba(e)&&e.nodeValue)return e.nodeValue;if(da(e)){for(var r of Array.from(e.childNodes))t+=ya(r);var n=getComputedStyle(e).getPropertyValue("display");"block"!==n&&"list"!==n&&"BR"!==e.tagName||(t+="\n")}return t},ha=/data-slate-fragment="(.+?)"/m,va=e=>{var t=e.getData("text/html"),[,r]=t.match(ha)||[];return r},Aa=["autoFocus","decorate","onDOMBeforeInput","placeholder","readOnly","renderElement","renderLeaf","renderPlaceholder","scrollSelectionIntoView","style","as"];function Da(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function xa(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Da(Object(r),!0).forEach((function(t){$r(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Da(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var Ca=e=>o().createElement(o().Fragment,null,ea(e)),Ea=e=>{var{attributes:t,children:r}=e;return o().createElement("span",Object.assign({},t),r)},Ba=()=>[],_a=(e,t)=>{if(!e.selection||e.selection&&cr.isCollapsed(e.selection)){var r=t.startContainer.parentElement;r.getBoundingClientRect=t.getBoundingClientRect.bind(t),Jr(r,{scrollMode:"if-needed"}),delete r.getBoundingClientRect}},wa=(e,t)=>ma(t)&&Ma.hasDOMNode(e,t),Fa=(e,t)=>ma(t)&&Ma.hasDOMNode(e,t,{editable:!0}),Oa=(e,t)=>{if(Fn.get(e))return!1;var r=wa(e,t)&&Ma.toSlateNode(e,t);return Yt.isVoid(e,r)},Sa=(e,t)=>{if(!t)return!1;var r=t(e);return null!=r?r:e.isDefaultPrevented()||e.isPropagationStopped()},Na=(e,t)=>{if(!t)return!1;var r=t(e);return null!=r?r:e.defaultPrevented};function ka(e,t){return e.slice(t.start,e.length-t.end)}function Ra(e,t){var r=Ma.toSlateNode(e,t);if(yr.isText(r)){var n=r.text,a=t.textContent;if(a.endsWith("\n")&&(a=a.slice(0,a.length-1)),a!==n){var o=function(e,t){if(void 0===e||void 0===t)return null;var r=function(e,t){if(e===t)return null;var r=function(e,t){for(var r=Math.min(e.length,t.length),n=0;n<r;n++)if(e.charAt(n)!==t.charAt(n))return n;return e.length!==t.length?r:null}(e,t);if(null===r)return null;var n=function(e,t,r){for(var n=e.length,a=t.length,o=Math.min(n,a,r),i=0;i<o;i++)if(e.charAt(n-i-1)!==t.charAt(a-i-1))return i;return e.length!==t.length?o:null}(e,t,Math.min(e.length-r,t.length-r));return null===n?null:{start:r,end:n}}(e,t);if(null==r)return null;var n=ka(t,r),a=ka(e,r);return{start:r.start,end:e.length-r.end,insertText:n,removeText:a}}(n,a);if(null!==o)return{text:o,path:Ma.findPath(e,r)}}}}function ja(e,t,r){var{path:n,text:a}=r,o={anchor:{path:n,offset:a.start},focus:{path:n,offset:a.end}};if(!t||!cr.isCollapsed(t))return o;var{insertText:i,removeText:s}=a;if((1===i.length||1===s.length)&&rr.equals(t.anchor.path,n)){var[u]=Array.from(Yt.nodes(e,{at:t,match:yr.isText}));if(u){var[l]=u,{anchor:c}=t,d=l.text[c.offset-1],m=l.text[c.offset];if(1===i.length&&i===m)return t;if(1===s.length&&s===d)return{anchor:{path:n,offset:c.offset-1},focus:{path:n,offset:c.offset}}}}return o}var Ta=0;class Ia{constructor(){this.id="".concat(Ta++)}}var Ma={getWindow(e){var t=xn.get(e);if(!t)throw new Error("Unable to find a host window element for this editor");return t},findKey(e,t){var r=_n.get(t);return r||(r=new Ia,_n.set(t,r)),r},findPath(e,t){for(var r=[],n=t;;){var a=Dn.get(n);if(null==a){if(Yt.isEditor(n))return r;break}var o=An.get(n);if(null==o)break;r.unshift(o),n=a}throw new Error("Unable to find the path for Slate node: ".concat(JSON.stringify(t)))},findDocumentOrShadowRoot(e){var t=Ma.toDOMNode(e,e),r=t.getRootNode();return(r instanceof Document||r instanceof ShadowRoot)&&null!=r.getSelection?r:t.ownerDocument},isFocused:e=>!!On.get(e),isReadOnly:e=>!!Fn.get(e),blur(e){var t=Ma.toDOMNode(e,e),r=Ma.findDocumentOrShadowRoot(e);On.set(e,!1),r.activeElement===t&&t.blur()},focus(e){var t=Ma.toDOMNode(e,e),r=Ma.findDocumentOrShadowRoot(e);On.set(e,!0),r.activeElement!==t&&t.focus({preventScroll:!0})},deselect(e){Ma.toDOMNode(e,e);var{selection:t}=e,r=Ma.findDocumentOrShadowRoot(e).getSelection();r&&r.rangeCount>0&&r.removeAllRanges(),t&&Ir.deselect(e)},hasDOMNode(e,t){var r,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},{editable:a=!1}=n,o=Ma.toDOMNode(e,e);try{r=da(t)?t:t.parentElement}catch(e){if(!e.message.includes('Permission denied to access property "nodeType"'))throw e}return!!r&&!(r.closest("[data-slate-editor]")!==o||a&&!r.isContentEditable&&("boolean"!=typeof r.isContentEditable||r.closest('[contenteditable="false"]')!==o)&&!r.getAttribute("data-slate-zero-width"))},insertData(e,t){e.insertData(t)},insertFragmentData:(e,t)=>e.insertFragmentData(t),insertTextData:(e,t)=>e.insertTextData(t),setFragmentData(e,t,r){e.setFragmentData(t,r)},toDOMNode(e,t){var r=wn.get(e),n=Yt.isEditor(t)?Cn.get(e):null==r?void 0:r.get(Ma.findKey(e,t));if(!n)throw new Error("Cannot resolve a DOM node from Slate node: ".concat(JSON.stringify(t)));return n},toDOMPoint(e,t){var r,[n]=Yt.node(e,t.path),a=Ma.toDOMNode(e,n);Yt.void(e,{at:t})&&(t={path:t.path,offset:0});var o=Array.from(a.querySelectorAll("[data-slate-string], [data-slate-zero-width]")),i=0;for(var s of o){var u=s.childNodes[0];if(null!=u&&null!=u.textContent){var{length:l}=u.textContent,c=s.getAttribute("data-slate-length"),d=i+(null==c?l:parseInt(c,10));if(t.offset<=d){r=[u,Math.min(l,Math.max(0,t.offset-i))];break}i=d}}if(!r)throw new Error("Cannot resolve a DOM point from Slate point: ".concat(JSON.stringify(t)));return r},toDOMRange(e,t){var{anchor:r,focus:n}=t,a=cr.isBackward(t),o=Ma.toDOMPoint(e,r),i=cr.isCollapsed(t)?o:Ma.toDOMPoint(e,n),s=Ma.getWindow(e).document.createRange(),[u,l]=a?i:o,[c,d]=a?o:i,m=!!(da(u)?u:u.parentElement).getAttribute("data-slate-zero-width"),p=!!(da(c)?c:c.parentElement).getAttribute("data-slate-zero-width");return s.setStart(u,m?1:l),s.setEnd(c,p?1:d),s},toSlateNode(e,t){var r=da(t)?t:t.parentElement;r&&!r.hasAttribute("data-slate-node")&&(r=r.closest("[data-slate-node]"));var n=r?En.get(r):null;if(!n)throw new Error("Cannot resolve a Slate node from DOM node: ".concat(r));return n},findEventRange(e,t){"nativeEvent"in t&&(t=t.nativeEvent);var{clientX:r,clientY:n,target:a}=t;if(null==r||null==n)throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(t));var o,i=Ma.toSlateNode(e,t.target),s=Ma.findPath(e,i);if(Yt.isVoid(e,i)){var u=a.getBoundingClientRect(),l=e.isInline(i)?r-u.left<u.left+u.width-r:n-u.top<u.top+u.height-n,c=Yt.point(e,s,{edge:l?"start":"end"}),d=l?Yt.before(e,c):Yt.after(e,c);if(d)return Yt.range(e,d)}var{document:m}=Ma.getWindow(e);if(m.caretRangeFromPoint)o=m.caretRangeFromPoint(r,n);else{var p=m.caretPositionFromPoint(r,n);p&&((o=m.createRange()).setStart(p.offsetNode,p.offset),o.setEnd(p.offsetNode,p.offset))}if(!o)throw new Error("Cannot resolve a Slate range from a DOM event: ".concat(t));return Ma.toSlateRange(e,o,{exactMatch:!1,suppressThrow:!1})},toSlatePoint(e,t,r){var{exactMatch:n,suppressThrow:a}=r,[o,i]=n?t:(e=>{var[t,r]=e;if(da(t)&&t.childNodes.length){var n=r===t.childNodes.length,a=n?r-1:r;for([t,a]=fa(t,a,n?"backward":"forward"),n=a<r;da(t)&&t.childNodes.length;){var o=n?t.childNodes.length-1:0;t=ga(t,o,n?"backward":"forward")}r=n&&null!=t.textContent?t.textContent.length:0}return[t,r]})(t),s=o.parentNode,u=null,l=0;if(s){var c,d=s.closest('[data-slate-void="true"]'),m=s.closest("[data-slate-leaf]"),p=null;if(m){if(u=m.closest('[data-slate-node="text"]')){var b=Ma.getWindow(e).document.createRange();b.setStart(u,0),b.setEnd(o,i);var f=b.cloneContents();[...Array.prototype.slice.call(f.querySelectorAll("[data-slate-zero-width]")),...Array.prototype.slice.call(f.querySelectorAll("[contenteditable=false]"))].forEach((e=>{e.parentNode.removeChild(e)})),l=f.textContent.length,p=u}}else d&&((m=d.querySelector("[data-slate-leaf]"))?(u=m.closest('[data-slate-node="text"]'),l=(p=m).textContent.length,p.querySelectorAll("[data-slate-zero-width]").forEach((e=>{l-=e.textContent.length}))):l=1);p&&l===p.textContent.length&&(s.hasAttribute("data-slate-zero-width")||an&&null!==(c=p.textContent)&&void 0!==c&&c.endsWith("\n\n"))&&l--}if(!u){if(a)return null;throw new Error("Cannot resolve a Slate point from DOM point: ".concat(t))}var g=Ma.toSlateNode(e,u);return{path:Ma.findPath(e,g),offset:l}},toSlateRange(e,t,r){var n,a,o,i,s,{exactMatch:u,suppressThrow:l}=r;if((pa(t)?t.anchorNode:t.startContainer)&&(pa(t)?(n=t.anchorNode,a=t.anchorOffset,o=t.focusNode,i=t.focusOffset,s=un&&window.document.activeElement&&window.document.activeElement.shadowRoot?t.anchorNode===t.focusNode&&t.anchorOffset===t.focusOffset:t.isCollapsed):(n=t.startContainer,a=t.startOffset,o=t.endContainer,i=t.endOffset,s=t.collapsed)),null==n||null==o||null==a||null==i)throw new Error("Cannot resolve a Slate range from DOM range: ".concat(t));var c=Ma.toSlatePoint(e,[n,a],{exactMatch:u,suppressThrow:l});if(!c)return null;var d=s?c:Ma.toSlatePoint(e,[o,i],{exactMatch:u,suppressThrow:l});if(!d)return null;var m={anchor:c,focus:d};return cr.isExpanded(m)&&cr.isForward(m)&&da(o)&&Yt.void(e,{at:m.focus,mode:"highest"})&&(m=Yt.unhangRange(e,m,{voids:!0})),m},hasRange(e,t){var{anchor:r,focus:n}=t;return Yt.hasPath(e,r.path)&&Yt.hasPath(e,n.path)}};class Pa{constructor(e,t){this.editor=e,this.restoreDOM=t,this.flush=e=>{try{this.reconcileMutations(e)}catch(e){console.error(e),this.restoreDOM()}},this.reconcileMutations=e=>{var t=function(e,t){var r=[],n=[],a=[],o=[];return t.forEach((t=>{switch(t.type){case"childList":t.addedNodes.length&&t.addedNodes.forEach((e=>{r.push(e)})),t.removedNodes.forEach((e=>{n.push(e)}));break;case"characterData":o.push(t);var{parentNode:i}=t.target;if(!i)return;var s=Ra(e,i);if(!s)return;if(a.some((e=>{var{path:t}=e;return rr.equals(t,s.path)})))return;a.push(s)}})),{addedNodes:r,removedNodes:n,insertedText:a,characterDataMutations:o}}(this.editor,e),{insertedText:r,removedNodes:n}=t;if(((e,t)=>{var{selection:r}=e,{removedNodes:n}=t;return!!r&&cr.isExpanded(r)&&n.length>0})(this.editor,t)){var a=function(e){return e.reduce(((e,t)=>{var{text:r}=t;return"".concat(e).concat(r.insertText)}),"")}(r);this.replaceExpandedSelection(a)}else((e,t)=>{var{addedNodes:r}=t,{selection:n}=e,a=n?Qt.parent(e,n.anchor.path):null,o=a?Ma.toDOMNode(e,a):null;return!!o&&r.some((e=>e instanceof HTMLElement&&e.tagName===(null==o?void 0:o.tagName)))})(this.editor,t)?this.insertBreak():((e,t)=>{var{addedNodes:r,characterDataMutations:n,removedNodes:a}=t;return a.length>0&&0===r.length&&n.length>0})(this.editor,t)?this.removeLeafNodes(n):((e,t)=>{var{removedNodes:r}=t;return r.length>0})(this.editor,t)?this.deleteBackward():((e,t)=>{var{insertedText:r}=t;return r.length>0})(this.editor,t)&&this.insertText(r)},this.insertText=e=>{var{selection:t}=this.editor;if(Sn.get(this.editor)||Nn.get(this.editor))return kn.set(this.editor,e),void Nn.set(this.editor,!1);e.forEach((e=>{var r=e.text.insertText,n=ja(this.editor,t,e);Ir.setSelection(this.editor,n),Yt.insertText(this.editor,r)}))},this.insertBreak=()=>{var{selection:e}=this.editor;Yt.insertBreak(this.editor),this.restoreDOM(),e&&setTimeout((()=>{this.editor.selection&&cr.equals(e,this.editor.selection)&&Ir.move(this.editor)}),100)},this.replaceExpandedSelection=e=>{Yt.deleteFragment(this.editor),e.length&&Yt.insertText(this.editor,e),this.restoreDOM()},this.deleteBackward=()=>{Yt.deleteBackward(this.editor),Ma.focus(this.editor),this.restoreDOM()},this.removeLeafNodes=e=>{for(var t of e){var r=Ma.toSlateNode(this.editor,t);if(r){var n=Ma.findPath(this.editor,r);Ir.delete(this.editor,{at:n}),this.restoreDOM()}}},this.editor=e,this.restoreDOM=t}}function La(e,t,r){var[n]=(0,a.useState)((()=>new MutationObserver(t)));gn((()=>{n.disconnect()})),(0,a.useEffect)((()=>{if(!e.current)throw new Error("Failed to attach MutationObserver, `node` is undefined");return n.observe(e.current,r),n.disconnect.bind(n)}))}var Za={childList:!0,characterData:!0,subtree:!0};function Ua(e){var t,r=da(e)?e:e.parentElement;return r&&!r.hasAttribute("data-slate-node")&&(r=r.closest("[data-slate-node]")),r&&En.get(r)||(null!==(t=r)&&void 0!==t&&t.parentElement?Ua(r.parentElement):null)}function Wa(e,t){var r=Kn(),n=(0,a.useRef)(new Set);La(e,(0,a.useCallback)((e=>{t.current&&e.forEach((e=>{var{target:t}=e,r=Ua(t);if(r)return n.current.add(r)}))}),[]),Za),n.current.clear();var o=(0,a.useCallback)((()=>{var e=Array.from(n.current.values()),t=e.filter((t=>!e.some((e=>rr.isParent(Ma.findPath(r,e),Ma.findPath(r,t))))));t.forEach((e=>{var t;null===(t=jn.get(e))||void 0===t||t()})),n.current.clear()}),[]);return o}var Va={childList:!0,characterData:!0,characterDataOldValue:!0,subtree:!0};var qa=["autoFocus","decorate","onDOMBeforeInput","placeholder","readOnly","renderElement","renderLeaf","renderPlaceholder","style","as"];function Ha(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function za(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ha(Object(r),!0).forEach((function(t){$r(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ha(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var Ya=(0,a.createContext)(!1),Ga=["editor","children","onChange","value"],Ja=e=>{var{editor:t,children:r,onChange:n,value:i}=e,s=en(e,Ga),u=(0,a.useRef)(!1),[l,c]=o().useState((()=>{if(!Qt.isNodeList(i))throw new Error("[Slate] value is invalid! Expected a list of elements"+"but got: ".concat(JSON.stringify(i)));if(!Yt.isEditor(t))throw new Error("[Slate] editor is invalid! you passed:"+"".concat(JSON.stringify(t)));return t.children=i,Object.assign(t,s),[t]})),d=(0,a.useCallback)((()=>{n(t.children),c([t])}),[n]);Rn.set(t,d),(0,a.useEffect)((()=>()=>{Rn.set(t,(()=>{})),u.current=!0}),[]);var[m,p]=(0,a.useState)(Ma.isFocused(t));return(0,a.useEffect)((()=>{p(Ma.isFocused(t))})),gn((()=>{var e=()=>{setTimeout((()=>{u.current||p(Ma.isFocused(t))}),0)};return document.addEventListener("focus",e,!0),document.addEventListener("blur",e,!0),()=>{document.removeEventListener("focus",e,!0),document.removeEventListener("blur",e,!0)}}),[]),o().createElement(ua.Provider,{value:l},o().createElement(Jn.Provider,{value:t},o().createElement(Ya.Provider,{value:m},r)))},Ka=(e,t)=>{var r=(t.top+t.bottom)/2;return e.top<=r&&e.bottom>=r},Xa=(e,t,r)=>{var n=Ma.toDOMRange(e,t).getBoundingClientRect(),a=Ma.toDOMRange(e,r).getBoundingClientRect();return Ka(n,a)&&Ka(a,n)},Qa=nn?e=>{var{autoFocus:t,decorate:r=Ba,onDOMBeforeInput:n,placeholder:i,readOnly:s=!1,renderElement:u,renderLeaf:l,renderPlaceholder:c=(e=>o().createElement(Ea,Object.assign({},e))),style:d={},as:m="div"}=e,p=en(e,qa),b=la(),[f,g]=(0,a.useState)(!1),y=(0,a.useRef)(null),h=function(e){var t=Kn(),{receivedUserInput:r,onUserInput:n}=function(){var e=Kn(),t=(0,a.useRef)(!1),r=(0,a.useRef)(null),n=(0,a.useCallback)((()=>{if(!1===t.current){var n=Ma.getWindow(e);t.current=!0,r.current&&n.cancelAnimationFrame(r.current),r.current=n.requestAnimationFrame((()=>{t.current=!1,r.current=null}))}}),[]);return(0,a.useEffect)((()=>{t.current&&(t.current=!1)})),{receivedUserInput:t,onUserInput:n}}(),o=Wa(e,r),i=(0,a.useMemo)((()=>new Pa(t,o)),[o,t]),s=(0,a.useRef)(null),u=(0,a.useRef)(!1);return La(e,(0,a.useCallback)((e=>{r.current&&(u.current=!0,i.flush(e),s.current&&clearTimeout(s.current),s.current=setTimeout((()=>{u.current=!1,s.current=null}),250))}),[]),Va),{isReconciling:u,onUserInput:n}}(y);Fn.set(b,s);var v=(0,a.useMemo)((()=>({isComposing:!1,isUpdatingSelection:!1,latestElement:null})),[]),A=Vn(b);gn((()=>{var e;y.current&&(e=ca(y.current))?(xn.set(b,e),Cn.set(b,y.current),Bn.set(b,y.current),En.set(y.current,b)):Bn.delete(b);try{var{selection:t}=b,r=Ma.findDocumentOrShadowRoot(b).getSelection();if(v.isComposing||!r||!Ma.isFocused(b))return;var n="None"!==r.type;if(!t&&!n)return;var a=Cn.get(b),o=!1;if(a.contains(r.anchorNode)&&a.contains(r.focusNode)&&(o=!0),n&&o&&t){var i=Ma.toSlateRange(b,r,{exactMatch:!0,suppressThrow:!0});if(i&&cr.equals(i,t))return}if(t&&!Ma.hasRange(b,t))return void(b.selection=Ma.toSlateRange(b,r,{exactMatch:!1,suppressThrow:!1}));var s=Ma.toDOMNode(b,b);v.isUpdatingSelection=!0;var u=t&&Ma.toDOMRange(b,t);if(u){cr.isBackward(t)?r.setBaseAndExtent(u.endContainer,u.endOffset,u.startContainer,u.startOffset):r.setBaseAndExtent(u.startContainer,u.startOffset,u.endContainer,u.endOffset);var l=u.startContainer.parentElement;l.getBoundingClientRect=u.getBoundingClientRect.bind(u),Jr(l,{scrollMode:"if-needed",boundary:s}),delete l.getBoundingClientRect}else r.removeAllRanges();setTimeout((()=>{v.isUpdatingSelection=!1}))}catch(e){v.isUpdatingSelection=!1}})),(0,a.useEffect)((()=>{y.current&&t&&y.current.focus()}),[t]);var D=(0,a.useCallback)(Wr()((()=>{try{if(!v.isComposing&&!v.isUpdatingSelection&&!h.isReconciling.current){var e=Ma.findDocumentOrShadowRoot(b),{activeElement:t}=e,r=Ma.toDOMNode(b,b),n=e.getSelection();if(t===r?(v.latestElement=t,On.set(b,!0)):On.delete(b),!n)return Ir.deselect(b);var{anchorNode:a,focusNode:o}=n,i=Fa(b,a)||Oa(b,a),s=Fa(b,o)||Oa(b,o);if(i&&s){var u=Ma.toSlateRange(b,n,{exactMatch:!1,suppressThrow:!1});Ir.select(b,u)}else Ir.deselect(b)}}catch(e){}}),100),[s]),x=(0,a.useMemo)((()=>Zr()(D,0)),[D]),C=(0,a.useCallback)((e=>{s||!Fa(b,e.target)||Na(e,n)||(x.flush(),h.onUserInput())}),[s,n]);gn((()=>{var e=y.current;return null==e||e.addEventListener("beforeinput",C),()=>null==e?void 0:e.removeEventListener("beforeinput",C)}),[A,n]),gn((()=>{var e=Ma.getWindow(b);return e.document.addEventListener("selectionchange",x),()=>{e.document.removeEventListener("selectionchange",x)}}),[x]);var E=r([b,[]]);if(i&&1===b.children.length&&1===Array.from(Qt.texts(b)).length&&""===Qt.string(b)&&!f){var B=Yt.start(b,[]);E.push({[Tn]:!0,placeholder:i,anchor:B,focus:B})}return o().createElement(ia.Provider,{value:s},o().createElement(Xn.Provider,{value:r},o().createElement(m,Object.assign({key:A,role:s?void 0:"textbox"},p,{spellCheck:p.spellCheck,autoCorrect:p.autoCorrect,autoCapitalize:p.autoCapitalize,"data-slate-editor":!0,"data-slate-node":"value",contentEditable:!s||void 0,suppressContentEditableWarning:!0,ref:y,style:za({position:"relative",outline:"none",whiteSpace:"pre-wrap",wordWrap:"break-word"},d),onCopy:(0,a.useCallback)((e=>{Fa(b,e.target)&&!Sa(e,p.onCopy)&&(e.preventDefault(),Ma.setFragmentData(b,e.clipboardData,"copy"))}),[p.onCopy]),onCut:(0,a.useCallback)((e=>{if(!s&&Fa(b,e.target)&&!Sa(e,p.onCut)){e.preventDefault(),Ma.setFragmentData(b,e.clipboardData,"cut");var{selection:t}=b;if(t)if(cr.isExpanded(t))Yt.deleteFragment(b);else{var r=Qt.parent(b,t.anchor.path);Yt.isVoid(b,r)&&Ir.delete(b)}}}),[s,p.onCut]),onFocus:(0,a.useCallback)((e=>{if(!s&&!v.isUpdatingSelection&&Fa(b,e.target)&&!Sa(e,p.onFocus)){var t=Ma.findDocumentOrShadowRoot(b);v.latestElement=t.activeElement,On.set(b,!0)}}),[s,p.onFocus]),onBlur:(0,a.useCallback)((e=>{if(!s&&!v.isUpdatingSelection&&Fa(b,e.target)&&!Sa(e,p.onBlur)){var t=Ma.findDocumentOrShadowRoot(b);if(v.latestElement!==t.activeElement){var{relatedTarget:r}=e;if(!(r===Ma.toDOMNode(b,b)||da(r)&&r.hasAttribute("data-slate-spacer"))){if(null!=r&&ma(r)&&Ma.hasDOMNode(b,r)){var n=Ma.toSlateNode(b,r);if(Ut.isElement(n)&&!b.isVoid(n))return}On.delete(b)}}}}),[s,p.onBlur]),onClick:(0,a.useCallback)((e=>{if(!s&&wa(b,e.target)&&!Sa(e,p.onClick)&&ma(e.target)){var t=Ma.toSlateNode(b,e.target),r=Ma.findPath(b,t);if(Yt.hasPath(b,r)&&Qt.get(b,r)===t){var n=Yt.start(b,r),a=Yt.end(b,r),o=Yt.void(b,{at:n}),i=Yt.void(b,{at:a});if(o&&i&&rr.equals(o[1],i[1])){var u=Yt.range(b,n);Ir.select(b,u)}}}}),[s,p.onClick]),onCompositionEnd:(0,a.useCallback)((e=>{Fa(b,e.target)&&!Sa(e,p.onCompositionEnd)&&(x.flush(),setTimeout((()=>{v.isComposing&&g(!1),v.isComposing=!1,Sn.set(b,!1),Nn.set(b,!0);var e=kn.get(b)||[];if(e.length){kn.set(b,[]);var{selection:t}=b;e.forEach((e=>{var r=e.text.insertText,n=ja(b,t,e);Ir.setSelection(b,n),Yt.insertText(b,r)}))}}),20))}),[p.onCompositionEnd]),onCompositionUpdate:(0,a.useCallback)((e=>{Fa(b,e.target)&&!Sa(e,p.onCompositionUpdate)&&(!v.isComposing&&g(!0),v.isComposing=!0,Sn.set(b,!0))}),[p.onCompositionUpdate]),onCompositionStart:(0,a.useCallback)((e=>{Fa(b,e.target)&&!Sa(e,p.onCompositionStart)&&(!v.isComposing&&g(!0),v.isComposing=!0,Sn.set(b,!0))}),[p.onCompositionStart]),onPaste:(0,a.useCallback)((e=>{e.clipboardData=(e=>{if(!e.getData("application/x-slate-fragment")){var t=va(e);if(t){var r=new DataTransfer;return e.types.forEach((t=>{r.setData(t,e.getData(t))})),r.setData("application/x-slate-fragment",t),r}}return e})(e.clipboardData),!Fa(b,e.target)||Sa(e,p.onPaste)||s||(e.preventDefault(),Ma.insertData(b,e.clipboardData))}),[s,p.onPaste])}),ea({decorations:E,node:b,renderElement:u,renderPlaceholder:c,renderLeaf:l,selection:b.selection}))))}:e=>{var{autoFocus:t,decorate:r=Ba,onDOMBeforeInput:n,placeholder:i,readOnly:s=!1,renderElement:u,renderLeaf:l,renderPlaceholder:c=(e=>o().createElement(Ea,Object.assign({},e))),scrollSelectionIntoView:d=_a,style:m={},as:p="div"}=e,b=en(e,Aa),f=la(),[g,y]=(0,a.useState)(!1),h=(0,a.useRef)(null),v=(0,a.useRef)([]);Fn.set(f,s);var A=(0,a.useMemo)((()=>({isComposing:!1,hasInsertPrefixInCompositon:!1,isDraggingInternally:!1,isUpdatingSelection:!1,latestElement:null})),[]);gn((()=>{var e;h.current&&(e=ca(h.current))?(xn.set(f,e),Cn.set(f,h.current),Bn.set(f,h.current),En.set(h.current,f)):Bn.delete(f);var{selection:t}=f,r=Ma.findDocumentOrShadowRoot(f).getSelection();if(!A.isComposing&&r&&Ma.isFocused(f)){var n="None"!==r.type;if(t||n){var a=Cn.get(f),o=!1;if(a.contains(r.anchorNode)&&a.contains(r.focusNode)&&(o=!0),n&&o&&t){var i=Ma.toSlateRange(f,r,{exactMatch:!0,suppressThrow:!0});if(i&&cr.equals(i,t))return}if(!t||Ma.hasRange(f,t)){A.isUpdatingSelection=!0;var s=t&&Ma.toDOMRange(f,t);s?(cr.isBackward(t)?r.setBaseAndExtent(s.endContainer,s.endOffset,s.startContainer,s.startOffset):r.setBaseAndExtent(s.startContainer,s.startOffset,s.endContainer,s.endOffset),d(f,s)):r.removeAllRanges(),setTimeout((()=>{s&&an&&Ma.toDOMNode(f,f).focus(),A.isUpdatingSelection=!1}))}else f.selection=Ma.toSlateRange(f,r,{exactMatch:!1,suppressThrow:!1})}}})),(0,a.useEffect)((()=>{h.current&&t&&h.current.focus()}),[t]);var D=(0,a.useCallback)(Wr()((()=>{if(!A.isComposing&&!A.isUpdatingSelection&&!A.isDraggingInternally){var e=Ma.findDocumentOrShadowRoot(f),{activeElement:t}=e,r=Ma.toDOMNode(f,f),n=e.getSelection();if(t===r?(A.latestElement=t,On.set(f,!0)):On.delete(f),!n)return Ir.deselect(f);var{anchorNode:a,focusNode:o}=n,i=Fa(f,a)||Oa(f,a),s=Fa(f,o)||Oa(f,o);if(i&&s){var u=Ma.toSlateRange(f,n,{exactMatch:!1,suppressThrow:!1});Ir.select(f,u)}}}),100),[s]),x=(0,a.useMemo)((()=>Zr()(D,0)),[D]),C=(0,a.useCallback)((e=>{if(!s&&Fa(f,e.target)&&!Na(e,n)){x.flush(),D.flush();var{selection:t}=f,{inputType:r}=e,a=e.dataTransfer||e.data||void 0;if("insertCompositionText"===r||"deleteCompositionText"===r)return;var o=!1;if("insertText"===r&&t&&cr.isCollapsed(t)&&e.data&&1===e.data.length&&/[a-z ]/i.test(e.data)&&0!==t.anchor.offset){o=!0,f.marks&&(o=!1);var{anchor:i}=t,u=Yt.above(f,{at:i,match:e=>Yt.isInline(f,e),mode:"highest"});if(u){var[,l]=u;Yt.isEnd(f,t.anchor,l)&&(o=!1)}}if(o||e.preventDefault(),!r.startsWith("delete")||r.startsWith("deleteBy")){var[c]=e.getTargetRanges();if(c){var d=Ma.toSlateRange(f,c,{exactMatch:!1,suppressThrow:!1});t&&cr.equals(t,d)||Ir.select(f,d)}}if(t&&cr.isExpanded(t)&&r.startsWith("delete")){var m=r.endsWith("Backward")?"backward":"forward";return void Yt.deleteFragment(f,{direction:m})}switch(r){case"deleteByComposition":case"deleteByCut":case"deleteByDrag":Yt.deleteFragment(f);break;case"deleteContent":case"deleteContentForward":Yt.deleteForward(f);break;case"deleteContentBackward":Yt.deleteBackward(f);break;case"deleteEntireSoftLine":Yt.deleteBackward(f,{unit:"line"}),Yt.deleteForward(f,{unit:"line"});break;case"deleteHardLineBackward":Yt.deleteBackward(f,{unit:"block"});break;case"deleteSoftLineBackward":Yt.deleteBackward(f,{unit:"line"});break;case"deleteHardLineForward":Yt.deleteForward(f,{unit:"block"});break;case"deleteSoftLineForward":Yt.deleteForward(f,{unit:"line"});break;case"deleteWordBackward":Yt.deleteBackward(f,{unit:"word"});break;case"deleteWordForward":Yt.deleteForward(f,{unit:"word"});break;case"insertLineBreak":case"insertParagraph":Yt.insertBreak(f);break;case"insertFromComposition":case"insertFromDrop":case"insertFromPaste":case"insertFromYank":case"insertReplacementText":case"insertText":"insertFromComposition"===r&&(A.isComposing&&y(!1),A.isComposing=!1),"DataTransfer"===(null==a?void 0:a.constructor.name)?Ma.insertData(f,a):"string"==typeof a&&(o?v.current.push((()=>Yt.insertText(f,a))):Yt.insertText(f,a))}}}),[s,n]);gn((()=>(h.current&&fn&&h.current.addEventListener("beforeinput",C),()=>{h.current&&fn&&h.current.removeEventListener("beforeinput",C)})),[C]),gn((()=>{var e=Ma.getWindow(f);return e.document.addEventListener("selectionchange",x),()=>{e.document.removeEventListener("selectionchange",x)}}),[x]);var E=r([f,[]]);if(i&&1===f.children.length&&1===Array.from(Qt.texts(f)).length&&""===Qt.string(f)&&!g){var B=Yt.start(f,[]);E.push({[Tn]:!0,placeholder:i,anchor:B,focus:B})}return o().createElement(ia.Provider,{value:s},o().createElement(Xn.Provider,{value:r},o().createElement(p,Object.assign({role:s?void 0:"textbox"},b,{spellCheck:!(!fn&&bn)&&b.spellCheck,autoCorrect:fn||!bn?b.autoCorrect:"false",autoCapitalize:fn||!bn?b.autoCapitalize:"false","data-slate-editor":!0,"data-slate-node":"value",contentEditable:!s,zindex:-1,suppressContentEditableWarning:!0,ref:h,style:xa({position:"relative",outline:"none",whiteSpace:"pre-wrap",wordWrap:"break-word"},m),onBeforeInput:(0,a.useCallback)((e=>{if(!fn&&!s&&!Sa(e,b.onBeforeInput)&&Fa(f,e.target)&&(e.preventDefault(),!A.isComposing)){var t=e.data;Yt.insertText(f,t)}}),[s]),onInput:(0,a.useCallback)((e=>{for(var t of v.current)t();v.current=[]}),[]),onBlur:(0,a.useCallback)((e=>{if(!s&&!A.isUpdatingSelection&&Fa(f,e.target)&&!Sa(e,b.onBlur)){var t=Ma.findDocumentOrShadowRoot(f);if(A.latestElement!==t.activeElement){var{relatedTarget:r}=e;if(!(r===Ma.toDOMNode(f,f)||da(r)&&r.hasAttribute("data-slate-spacer"))){if(null!=r&&ma(r)&&Ma.hasDOMNode(f,r)){var n=Ma.toSlateNode(f,r);if(Ut.isElement(n)&&!f.isVoid(n))return}if(on){var a=t.getSelection();null==a||a.removeAllRanges()}On.delete(f)}}}}),[s,b.onBlur]),onClick:(0,a.useCallback)((e=>{if(!s&&wa(f,e.target)&&!Sa(e,b.onClick)&&ma(e.target)){var t=Ma.toSlateNode(f,e.target),r=Ma.findPath(f,t);if(Yt.hasPath(f,r)&&Qt.get(f,r)===t){var n=Yt.start(f,r),a=Yt.end(f,r),o=Yt.void(f,{at:n}),i=Yt.void(f,{at:a});if(o&&i&&rr.equals(o[1],i[1])){var u=Yt.range(f,n);Ir.select(f,u)}}}}),[s,b.onClick]),onCompositionEnd:(0,a.useCallback)((e=>{if(Fa(f,e.target)&&!Sa(e,b.onCompositionEnd)&&(A.isComposing&&y(!1),A.isComposing=!1,on||cn||tn||dn||pn||mn||!e.data||Yt.insertText(f,e.data),f.selection&&cr.isCollapsed(f.selection))){var t=f.selection.anchor.path,r=Qt.leaf(f,t);A.hasInsertPrefixInCompositon&&(A.hasInsertPrefixInCompositon=!1,Yt.withoutNormalizing(f,(()=>{var e=r.text.replace(/^\uFEFF/,"");Ir.delete(f,{distance:r.text.length,reverse:!0}),Yt.insertText(f,e)})))}}),[b.onCompositionEnd]),onCompositionUpdate:(0,a.useCallback)((e=>{Fa(f,e.target)&&!Sa(e,b.onCompositionUpdate)&&(!A.isComposing&&y(!0),A.isComposing=!0)}),[b.onCompositionUpdate]),onCompositionStart:(0,a.useCallback)((e=>{if(Fa(f,e.target)&&!Sa(e,b.onCompositionStart)){var{selection:t,marks:r}=f;if(t){if(cr.isExpanded(t))return void Yt.deleteFragment(f);var n=Yt.above(f,{match:e=>Yt.isInline(f,e),mode:"highest"});if(n){var[,a]=n;if(Yt.isEnd(f,t.anchor,a)){var o=Yt.after(f,a);Ir.setSelection(f,{anchor:o,focus:o})}}r&&(A.hasInsertPrefixInCompositon=!0,Ir.insertNodes(f,xa({text:"\ufeff"},r),{select:!0}))}}}),[b.onCompositionStart]),onCopy:(0,a.useCallback)((e=>{Fa(f,e.target)&&!Sa(e,b.onCopy)&&(e.preventDefault(),Ma.setFragmentData(f,e.clipboardData,"copy"))}),[b.onCopy]),onCut:(0,a.useCallback)((e=>{if(!s&&Fa(f,e.target)&&!Sa(e,b.onCut)){e.preventDefault(),Ma.setFragmentData(f,e.clipboardData,"cut");var{selection:t}=f;if(t)if(cr.isExpanded(t))Yt.deleteFragment(f);else{var r=Qt.parent(f,t.anchor.path);Yt.isVoid(f,r)&&Ir.delete(f)}}}),[s,b.onCut]),onDragOver:(0,a.useCallback)((e=>{if(wa(f,e.target)&&!Sa(e,b.onDragOver)){var t=Ma.toSlateNode(f,e.target);Yt.isVoid(f,t)&&e.preventDefault()}}),[b.onDragOver]),onDragStart:(0,a.useCallback)((e=>{if(!s&&wa(f,e.target)&&!Sa(e,b.onDragStart)){var t=Ma.toSlateNode(f,e.target),r=Ma.findPath(f,t);if(Yt.isVoid(f,t)||Yt.void(f,{at:r,voids:!0})){var n=Yt.range(f,r);Ir.select(f,n)}A.isDraggingInternally=!0,Ma.setFragmentData(f,e.dataTransfer,"drag")}}),[s,b.onDragStart]),onDrop:(0,a.useCallback)((e=>{if(!s&&wa(f,e.target)&&!Sa(e,b.onDrop)){e.preventDefault();var t=f.selection,r=Ma.findEventRange(f,e),n=e.dataTransfer;Ir.select(f,r),A.isDraggingInternally&&(!t||cr.equals(t,r)||Yt.void(f,{at:r,voids:!0})||Ir.delete(f,{at:t})),Ma.insertData(f,n),Ma.isFocused(f)||Ma.focus(f)}A.isDraggingInternally=!1}),[s,b.onDrop]),onDragEnd:(0,a.useCallback)((e=>{!s&&A.isDraggingInternally&&b.onDragEnd&&wa(f,e.target)&&b.onDragEnd(e),A.isDraggingInternally=!1}),[s,b.onDragEnd]),onFocus:(0,a.useCallback)((e=>{if(!s&&!A.isUpdatingSelection&&Fa(f,e.target)&&!Sa(e,b.onFocus)){var t=Ma.toDOMNode(f,f),r=Ma.findDocumentOrShadowRoot(f);if(A.latestElement=r.activeElement,an&&e.target!==t)return void t.focus();On.set(f,!0)}}),[s,b.onFocus]),onKeyDown:(0,a.useCallback)((e=>{if(!s&&!A.isComposing&&Fa(f,e.target)&&!Sa(e,b.onKeyDown)){var{nativeEvent:t}=e,{selection:r}=f,n=f.children[null!==r?r.focus.path[0]:0],a="rtl"===Pr()(Qt.string(n));if(oa.isRedo(t)){e.preventDefault();var o=f;return void("function"==typeof o.redo&&o.redo())}if(oa.isUndo(t)){e.preventDefault();var i=f;return void("function"==typeof i.undo&&i.undo())}if(oa.isMoveLineBackward(t))return e.preventDefault(),void Ir.move(f,{unit:"line",reverse:!0});if(oa.isMoveLineForward(t))return e.preventDefault(),void Ir.move(f,{unit:"line"});if(oa.isExtendLineBackward(t))return e.preventDefault(),void Ir.move(f,{unit:"line",edge:"focus",reverse:!0});if(oa.isExtendLineForward(t))return e.preventDefault(),void Ir.move(f,{unit:"line",edge:"focus"});if(oa.isMoveBackward(t))return e.preventDefault(),void(r&&cr.isCollapsed(r)?Ir.move(f,{reverse:!a}):Ir.collapse(f,{edge:"start"}));if(oa.isMoveForward(t))return e.preventDefault(),void(r&&cr.isCollapsed(r)?Ir.move(f,{reverse:a}):Ir.collapse(f,{edge:"end"}));if(oa.isMoveWordBackward(t))return e.preventDefault(),r&&cr.isExpanded(r)&&Ir.collapse(f,{edge:"focus"}),void Ir.move(f,{unit:"word",reverse:!a});if(oa.isMoveWordForward(t))return e.preventDefault(),r&&cr.isExpanded(r)&&Ir.collapse(f,{edge:"focus"}),void Ir.move(f,{unit:"word",reverse:a});if(fn){if((un||on)&&r&&(oa.isDeleteBackward(t)||oa.isDeleteForward(t))&&cr.isCollapsed(r)){var u=Qt.parent(f,r.anchor.path);if(Ut.isElement(u)&&Yt.isVoid(f,u)&&Yt.isInline(f,u))return e.preventDefault(),void Yt.deleteBackward(f,{unit:"block"})}}else{if(oa.isBold(t)||oa.isItalic(t)||oa.isTransposeCharacter(t))return void e.preventDefault();if(oa.isSplitBlock(t))return e.preventDefault(),void Yt.insertBreak(f);if(oa.isDeleteBackward(t))return e.preventDefault(),void(r&&cr.isExpanded(r)?Yt.deleteFragment(f,{direction:"backward"}):Yt.deleteBackward(f));if(oa.isDeleteForward(t))return e.preventDefault(),void(r&&cr.isExpanded(r)?Yt.deleteFragment(f,{direction:"forward"}):Yt.deleteForward(f));if(oa.isDeleteLineBackward(t))return e.preventDefault(),void(r&&cr.isExpanded(r)?Yt.deleteFragment(f,{direction:"backward"}):Yt.deleteBackward(f,{unit:"line"}));if(oa.isDeleteLineForward(t))return e.preventDefault(),void(r&&cr.isExpanded(r)?Yt.deleteFragment(f,{direction:"forward"}):Yt.deleteForward(f,{unit:"line"}));if(oa.isDeleteWordBackward(t))return e.preventDefault(),void(r&&cr.isExpanded(r)?Yt.deleteFragment(f,{direction:"backward"}):Yt.deleteBackward(f,{unit:"word"}));if(oa.isDeleteWordForward(t))return e.preventDefault(),void(r&&cr.isExpanded(r)?Yt.deleteFragment(f,{direction:"forward"}):Yt.deleteForward(f,{unit:"word"}))}}}),[s,b.onKeyDown]),onPaste:(0,a.useCallback)((e=>{s||!Fa(f,e.target)||Sa(e,b.onPaste)||fn&&!(e=>e.clipboardData&&""!==e.clipboardData.getData("text/plain")&&1===e.clipboardData.types.length)(e.nativeEvent)||(e.preventDefault(),Ma.insertData(f,e.clipboardData))}),[s,b.onPaste])}),o().createElement(Ca,{decorations:E,node:f,renderElement:u,renderPlaceholder:c,renderLeaf:l,selection:f.selection}))))};function $a(e){return"[object Object]"===Object.prototype.toString.call(e)}var eo=e=>function(e){var t,r;return!1!==$a(e)&&(void 0===(t=e.constructor)||!1!==$a(r=t.prototype)&&!1!==r.hasOwnProperty("isPrototypeOf"))}(e)&&Array.isArray(e.redos)&&Array.isArray(e.undos)&&(0===e.redos.length||tr.isOperationList(e.redos[0]))&&(0===e.undos.length||tr.isOperationList(e.undos[0])),to=(new WeakMap,new WeakMap),ro=new WeakMap,no={isHistoryEditor:e=>eo(e.history)&&Yt.isEditor(e),isMerging:e=>ro.get(e),isSaving:e=>to.get(e),redo(e){e.redo()},undo(e){e.undo()},withoutMerging(e,t){var r=no.isMerging(e);ro.set(e,!1),t(),ro.set(e,r)},withoutSaving(e,t){var r=no.isSaving(e);to.set(e,!1),t(),to.set(e,r)}},ao=function(e,t){var r=/\{\{(.+?)\}\}/g,n=/^\{\{(.+?)\}\}$/g,a=[];return e.replace(/\{#|#\}/g,"").split("+").forEach((function(e){if(e.match(r))if(e.match(n)){var o=e.replace(/\{\{|\}\}/g,""),i=(0,R.ab)(t,o),s=o.split("."),u=s[s.length-1];a.push({type:"variable",children:[{text:""}],variable:{defineSchema:i||{title:u,type:"string"},key:u,path:o,title:(null==i?void 0:i.title)||u,type:(null==i?void 0:i.type)||"string"}}),a.push({text:""})}else e.split(r).forEach((function(e,r){var n=e,o=(0,R.ab)(t,n),i=n.split("."),s=i[i.length-1];r%2?(a.push({type:"variable",children:[{text:""}],variable:{defineSchema:o||{title:s,type:"string"},key:s,path:n,title:(null==o?void 0:o.title)||s,type:(null==o?void 0:o.type)||"string"}}),a.push({text:""})):a.push({text:e.replace(/\'/g,"")})}));else a.push({text:e.replace(/\'/g,"")})})),a},oo=function(e,t,r){return[{type:"paragraph",children:t?ao(e,r):(null==e?void 0:e.origin)||[{text:""}]}]};const io=function(e){var t=e.children,r=e.value,n=e.onChange,a=e.onForceChange,s=e.customStringify,u=o().useMemo((function(){return function(e,t){var r=e.isInline,n=e.isVoid;return e.isInline=function(e){return"variable"===e.type||"formula"===e.type||r(e)},e.isVoid=function(e){return"variable"===e.type||n(e)},e.options=void 0,e}((e=>{var t=e,{apply:r,onChange:n,deleteBackward:a}=t;return wn.set(t,new WeakMap),t.deleteBackward=r=>{if("line"!==r)return a(r);if(e.selection&&cr.isCollapsed(e.selection)){var n=Yt.above(e,{match:t=>Yt.isBlock(e,t),at:e.selection});if(n){var[,o]=n,i=Yt.range(e,o,e.selection.anchor),s=((e,t)=>{var r=Yt.range(e,cr.end(t)),n=Array.from(Yt.positions(e,{at:t})),a=0,o=n.length,i=Math.floor(o/2);if(Xa(e,Yt.range(e,n[a]),r))return Yt.range(e,n[a],r);if(n.length<2)return Yt.range(e,n[n.length-1],r);for(;i!==n.length&&i!==a;)Xa(e,Yt.range(e,n[i]),r)?o=i:a=i,i=Math.floor((a+o)/2);return Yt.range(e,n[o],r)})(t,i);cr.isCollapsed(s)||Ir.delete(e,{at:s})}}},t.apply=e=>{var n=[];switch(e.type){case"insert_text":case"remove_text":case"set_node":for(var[a,o]of Yt.levels(t,{at:e.path})){var i=Ma.findKey(t,a);n.push([o,i])}break;case"insert_node":case"remove_node":case"merge_node":case"split_node":for(var[s,u]of Yt.levels(t,{at:rr.parent(e.path)})){var l=Ma.findKey(t,s);n.push([u,l])}break;case"move_node":for(var[c,d]of Yt.levels(t,{at:rr.common(rr.parent(e.path),rr.parent(e.newPath))})){var m=Ma.findKey(t,c);n.push([d,m])}}for(var[p,b]of(r(e),n)){var[f]=Yt.node(t,p);_n.set(f,b)}},t.setFragmentData=e=>{var{selection:r}=t;if(r){var[n,a]=cr.edges(r),o=Yt.void(t,{at:n.path}),i=Yt.void(t,{at:a.path});if(!cr.isCollapsed(r)||o){var s=Ma.toDOMRange(t,r),u=s.cloneContents(),l=u.childNodes[0];if(u.childNodes.forEach((e=>{e.textContent&&""!==e.textContent.trim()&&(l=e)})),i){var[c]=i,d=s.cloneRange(),m=Ma.toDOMNode(t,c);d.setEndAfter(m),u=d.cloneContents()}if(o&&(l=u.querySelector("[data-slate-spacer]")),Array.from(u.querySelectorAll("[data-slate-zero-width]")).forEach((e=>{var t="n"===e.getAttribute("data-slate-zero-width");e.textContent=t?"\n":""})),ba(l)){var p=l.ownerDocument.createElement("span");p.style.whiteSpace="pre",p.appendChild(l),u.appendChild(p),l=p}var b=t.getFragment(),f=JSON.stringify(b),g=window.btoa(encodeURIComponent(f));l.setAttribute("data-slate-fragment",g),e.setData("application/x-slate-fragment",g);var y=u.ownerDocument.createElement("div");return y.appendChild(u),y.setAttribute("hidden","true"),u.ownerDocument.body.appendChild(y),e.setData("text/html",y.innerHTML),e.setData("text/plain",ya(y)),u.ownerDocument.body.removeChild(y),e}}},t.insertData=e=>{t.insertFragmentData(e)||t.insertTextData(e)},t.insertFragmentData=e=>{var r=e.getData("application/x-slate-fragment")||va(e);if(r){var n=decodeURIComponent(window.atob(r)),a=JSON.parse(n);return t.insertFragment(a),!0}return!1},t.insertTextData=e=>{var r=e.getData("text/plain");if(r){var n=r.split(/\r\n|\r|\n/),a=!1;for(var o of n)a&&Ir.splitNodes(t,{always:!0}),t.insertText(o),a=!0;return!0}return!1},t.onChange=()=>{Qr().unstable_batchedUpdates((()=>{var e=Rn.get(t);e&&e(),n()}))},t})((e=>{var t=e,{apply:r}=t;return t.history={undos:[],redos:[]},t.redo=()=>{var{history:e}=t,{redos:r}=e;if(r.length>0){var n=r[r.length-1];no.withoutSaving(t,(()=>{Yt.withoutNormalizing(t,(()=>{for(var e of n)t.apply(e)}))})),e.redos.pop(),e.undos.push(n)}},t.undo=()=>{var{history:e}=t,{undos:r}=e;if(r.length>0){var n=r[r.length-1];no.withoutSaving(t,(()=>{Yt.withoutNormalizing(t,(()=>{var e=n.map(tr.inverse).reverse();for(var r of e)t.apply(r)}))})),e.redos.push(n),e.undos.pop()}},t.apply=e=>{var{operations:n,history:a}=t,{undos:o}=a,i=o[o.length-1],s=i&&i[i.length-1],u=((e,t)=>!(!t||"set_selection"!==e.type||"set_selection"!==t.type))(e,s),l=no.isSaving(t),c=no.isMerging(t);if(null==l&&(l=((e,t)=>"set_selection"!==e.type||null!=e.properties&&null!=e.newProperties)(e)),l){if(null==c&&(c=null!=i&&(0!==n.length||((e,t)=>"set_selection"===e.type||!(!t||"insert_text"!==e.type||"insert_text"!==t.type||e.offset!==t.offset+t.text.length||!rr.equals(e.path,t.path))||!(!t||"remove_text"!==e.type||"remove_text"!==t.type||e.offset+e.text.length!==t.offset||!rr.equals(e.path,t.path)))(e,s)||u)),i&&c)u&&i.pop(),i.push(e);else{var d=[e];o.push(d)}for(;o.length>100;)o.shift();(e=>"set_selection"!==e.type)(e)&&(a.redos=[])}r(e)},t})((()=>{var e={children:[],operations:[],selection:null,marks:null,isInline:()=>!1,isVoid:()=>!1,onChange:()=>{},apply:t=>{for(var r of Yt.pathRefs(e))nr.transform(r,t);for(var n of Yt.pointRefs(e))sr.transform(n,t);for(var a of Yt.rangeRefs(e))dr.transform(a,t);var o,i,s=nt.get(e)||[],u=at.get(e)||new Set,l=e=>{if(e){var t=e.join(",");i.has(t)||(i.add(t),o.push(e))}};if(rr.operationCanTransformPath(t))for(var c of(o=[],i=new Set,s))l(rr.transform(c,t));else o=s,i=u;var d=(e=>{switch(e.type){case"insert_text":case"remove_text":case"set_node":var{path:t}=e;return rr.levels(t);case"insert_node":var{node:r,path:n}=e,a=rr.levels(n),o=yr.isText(r)?[]:Array.from(Qt.nodes(r),(e=>{var[,t]=e;return n.concat(t)}));return[...a,...o];case"merge_node":var{path:i}=e;return[...rr.ancestors(i),rr.previous(i)];case"move_node":var{path:s,newPath:u}=e;if(rr.equals(s,u))return[];var l=[],c=[];for(var d of rr.ancestors(s)){var m=rr.transform(d,e);l.push(m)}for(var p of rr.ancestors(u)){var b=rr.transform(p,e);c.push(b)}var f=c[c.length-1],g=u[u.length-1],y=f.concat(g);return[...l,...c,y];case"remove_node":var{path:h}=e;return[...rr.ancestors(h)];case"split_node":var{path:v}=e;return[...rr.levels(v),rr.next(v)];default:return[]}})(t);for(var m of d)l(m);nt.set(e,o),at.set(e,i),Ir.transform(e,t),e.operations.push(t),Yt.normalize(e),"set_selection"===t.type&&(e.marks=null),ot.get(e)||(ot.set(e,!0),Promise.resolve().then((()=>{ot.set(e,!1),e.onChange(),e.operations=[]})))},addMark:(t,r)=>{var{selection:n}=e;if(n)if(cr.isExpanded(n))Ir.setNodes(e,{[t]:r},{match:yr.isText,split:!0});else{var a=dt(dt({},Yt.marks(e)||{}),{},{[t]:r});e.marks=a,ot.get(e)||e.onChange()}},deleteBackward:t=>{var{selection:r}=e;r&&cr.isCollapsed(r)&&Ir.delete(e,{unit:t,reverse:!0})},deleteForward:t=>{var{selection:r}=e;r&&cr.isCollapsed(r)&&Ir.delete(e,{unit:t})},deleteFragment:t=>{var{selection:r}=e;r&&cr.isExpanded(r)&&Ir.delete(e,{reverse:"backward"===t})},getFragment:()=>{var{selection:t}=e;return t?Qt.fragment(e,t):[]},insertBreak:()=>{Ir.splitNodes(e,{always:!0})},insertFragment:t=>{Ir.insertFragment(e,t)},insertNode:t=>{Ir.insertNodes(e,t)},insertText:t=>{var{selection:r,marks:n}=e;if(r){if(n){var a=dt({text:t},n);Ir.insertNodes(e,a)}else Ir.insertText(e,t);e.marks=null}},normalizeNode:t=>{var[r,n]=t;if(!yr.isText(r))if(Ut.isElement(r)&&0===r.children.length)Ir.insertNodes(e,{text:""},{at:n.concat(0),voids:!0});else for(var a=!Yt.isEditor(r)&&Ut.isElement(r)&&(e.isInline(r)||0===r.children.length||yr.isText(r.children[0])||e.isInline(r.children[0])),o=0,i=0;i<r.children.length;i++,o++){var s=Qt.get(e,n);if(!yr.isText(s)){var u=r.children[i],l=s.children[o-1],c=i===r.children.length-1;(yr.isText(u)||Ut.isElement(u)&&e.isInline(u))!==a?(Ir.removeNodes(e,{at:n.concat(o),voids:!0}),o--):Ut.isElement(u)?e.isInline(u)&&(null!=l&&yr.isText(l)?c&&(Ir.insertNodes(e,{text:""},{at:n.concat(o+1),voids:!0}),o++):(Ir.insertNodes(e,{text:""},{at:n.concat(o),voids:!0}),o++)):null!=l&&yr.isText(l)&&(yr.equals(u,l,{loose:!0})?(Ir.mergeNodes(e,{at:n.concat(o),voids:!0}),o--):""===l.text?(Ir.removeNodes(e,{at:n.concat(o-1),voids:!0}),o--):""===u.text&&(Ir.removeNodes(e,{at:n.concat(o),voids:!0}),o--))}}},removeMark:t=>{var{selection:r}=e;if(r)if(cr.isExpanded(r))Ir.unsetNodes(e,t,{match:yr.isText,split:!0});else{var n=dt({},Yt.marks(e)||{});delete n[t],e.marks=n,ot.get(e)||e.onChange()}}};return e})())))}),[]),l=(0,i.useRecoilValue)(T),c=(0,i.useRecoilValue)(V),d=(0,i.useRecoilValue)(z),m=o().useRef(!1),p=o().useRef(!1),b=o().useState(oo(r,c,l)),f=(0,te.Z)(b,2),g=f[0],y=f[1],h=o().useState((0,R.O1)(12)),v=(0,te.Z)(h,2),A=v[0],D=v[1];return o().useEffect((function(){p.current?!0===m.current?m.current=!1:a(r):p.current=!0}),[JSON.stringify(r)]),o().useEffect((function(){y(oo(r,c,l)),D((0,R.O1)(12))}),[c]),o().createElement(Ja,{key:A,editor:u,value:g,onChange:function(e){var t;m.current=!0,y(e),n&&n((0,x.Ws)(null===(t=e[0])||void 0===t?void 0:t.children,c,s,d))}},t)};var so=r(6640);function uo(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}function lo(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function co(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?lo(Object(r),!0).forEach((function(t){(0,b.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):lo(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var mo=function(e){return o().createElement("span",e.attributes,e.children)},po=function(e){var t=e.attributes,r=e.element.variable,a="array"===r.type?"array":r.defineSchema.nodeType||r.defineSchema.type,i=$n(),s=R.Yk[a]||R.Yk.object;return o().createElement("span",(0,n.Z)({},t,{className:"tag-element",style:{backgroundColor:"".concat(null==s?void 0:s.color,i?"50":"10"),border:"1px solid ".concat(null==s?void 0:s.color),color:s.color}}),o().createElement("div",{className:"tag-element-flex"},o().createElement("span",{style:{paddingRight:"6px"}},r.title.split(".").map((function(e){return _t1(e)})).join(".")),o().createElement("span",{style:{display:"inline-block"}},o().createElement(R.Pt,{type:a}))),e.children)},bo=function(e){var t=e.attributes,r=(e.element,$n()),a=(0,i.useSetRecoilState)(Y);return o().useEffect((function(){a(r)}),[r]),o().createElement("span",(0,n.Z)({},t,{className:"formula-element"}),e.children)},fo=o().forwardRef((function(e,t){var r=useI18n().t,n=e.onForceChange,a=(0,i.useRecoilValue)(I),s=(0,i.useSetRecoilState)(P),u=(0,i.useRecoilValue)(L),l=((0,i.useRecoilValue)(V),(0,i.useRecoilValue)(z)),c=(0,i.useRecoilValue)(Y),d=(0,i.useSetRecoilState)(Y),m="single"===u,b=la(),f=go(b),g=(0,te.Z)(f,2),y=g[0],h=g[1],v=function(e){var t=e.variable,r=(null==y?void 0:y.variableLocation)||b.selection,n=null;yo.getVariableNode(b,r)?(Ir.setNodes(b,{variable:t},{match:function(e){return"variable"===e.type},at:r||b.selection,select:!0}),n=r):Ir.insertNodes(b,{type:"variable",children:[{text:""}],variable:t},{at:r,select:!0}),m||(h(co(co({},p().cloneDeep(y)),{},{variable:t,variableLocation:n})),Ma.focus(b))},A=function(e){var t=e.text,r=y.functionLocation||b.selection;Ir.insertText(b,"".concat(t,"()"),{at:r}),Ma.focus(b),Ir.move(b,{distance:1,reverse:!0})},D=function(e){var t=e.text,r=y.wordLocation||b.selection;Ir.insertText(b,"".concat(t,"()"),{at:r}),Ma.focus(b),Ir.move(b,{distance:1,reverse:!0})},x=function(e){var t=e.text,r=y.functionLocation||b.selection;Ir.insertText(b,"".concat(t," "),{at:r}),Ma.focus(b)},C=function(){var e=(null==y?void 0:y.variableLocation)||b.selection;Ir.insertNodes(b,[{type:"formula",children:[{text:""}]},{text:""}],{at:e})},E=function(){n&&n(null),setTimeout((function(){s({variable:null}),d(!1)}),300)},B=function(e){e&&e.length&&(b.children=e)},_=function(){Ma.focus(b)};return o().useImperativeHandle(t,(function(){return{insertVariable:v,insertFunction:A,insertWordFunction:D,insertText:x,insertFormula:C,clear:E,setValue:B,focus:_}})),o().useEffect((function(){s(y)}),[JSON.stringify(y)]),o().createElement("div",{className:"iot-editor-slate",style:{width:"100%",height:"100%",padding:"0 10px"}},o().createElement(Qa,{placeholder:r(l?"请输入公式，语法为JavaScript":"请选择变量"),renderElement:function(e){switch(e.element.type){case"variable":return o().createElement(po,e);case"formula":return o().createElement(bo,e);default:return o().createElement(mo,e)}},onKeyDown:function(e){u&&!c&&-1===["Backspace","ArrowRight","ArrowLeft"].indexOf(e.key)&&e.preventDefault(),"Enter"===e.key&&e.preventDefault()}}),m&&yo.isVariableEmpty(null==a?void 0:a.origin)?o().createElement("div",{className:"iot-editor-slate-close",onClick:E,style:{cursor:"pointer"}},o().createElement(so.CloseOutlined,null)):null)})),go=function(e){var t=(0,i.useRecoilValue)(z),r=o().useState({variable:null,variableLocation:null,functionText:null,functionLocation:null}),n=(0,te.Z)(r,2),a=n[0],s=n[1];return o().useEffect((function(){var r={variable:null,variableLocation:null,functionText:null,functionLocation:null};if(e.selection){var n=yo.getVariableNode(e);if(n)r.variable=n,r.variableLocation=e.selection;else{var a,o,i,u=p().cloneDeep(e.selection.focus);u.offset=0;var l=yo.getString(e,{anchor:e.selection.anchor,focus:u});if(t||3===(null===(a=e.selection)||void 0===a||null===(o=a.focus)||void 0===o||null===(i=o.path)||void 0===i?void 0:i.length)){var c=null==l?void 0:l.lastIndexOf(".");if((c||0===c)&&-1!==c){var d=p().cloneDeep(e.selection.focus),m=p().cloneDeep(e.selection.focus);d.offset=c,m.offset=c+1;var b={anchor:m,focus:e.selection.focus};r.functionText=yo.getString(e,b),r.functionLocation=b;var f=Yt.before(e,{anchor:d,focus:d}),g=yo.getVariableNode(e,{anchor:f,focus:f});g&&(r.variable=g,r.variableLocation=r.functionText?e.selection:{anchor:f,focus:f})}for(var y=-1,h=0,v=["+","-","*","/","%","&&","||","!","==","!=","===","!==",">",">=","<","<="];h<v.length;h++){var A=v[h],D=null==l?void 0:l.lastIndexOf(A);D>y&&(y=D)}var x=p().cloneDeep(e.selection.focus);x.offset=y+1;var C={anchor:x,focus:e.selection.focus};r.wordText=yo.getString(e,C),r.wordLocation=C}}}s(r)}),[e.selection]),[a,s]},yo={getString:function(e,t){return e.selection&&Yt.string(e,t)},getVariableNode:function(e){var t,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.selection,n=Yt.nodes(e,{match:function(e){return"variable"===e.type},at:r}),a=(0,te.Z)(n,1)[0];return a?null===(t=a[0])||void 0===t?void 0:t.variable:null},isVariableEmpty:function(e){if(e&&e.length){var t,r=function(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return uo(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?uo(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw o}}}}(e);try{for(r.s();!(t=r.n()).done;){var n=t.value;if(null!=n&&n.type)return!0}}catch(e){r.e(e)}finally{r.f()}}return!1}};const ho=fo;var vo=r(1821);function Ao(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Do(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Ao(Object(r),!0).forEach((function(t){(0,b.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Ao(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}var xo=function(){var e=(0,u.Z)(c().mark((function e(t,r,n,a){var o,i,s,u,l,d,m,b,f,g,y;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(i=t,s=r.variable,l=(u=s||{}).path,d=u.type,m=u.title,b=u.lastType,!r.functionText){e.next=13;break}if(null===(f=Co(d,r.functionText))||void 0===f||!f.length){e.next=8;break}return e.abrupt("return",[]);case 8:l=null,d=null,m=null;case 11:e.next=21;break;case 13:if(!l){e.next=21;break}if(i=(0,R.ab)(t,l),!a||!i.loading){e.next=21;break}return e.next=18,a(i,s);case 18:g=e.sent,i.properties=Do(Do({},i.properties),g),i.loading=!1;case 21:return y=p().keys(null===(o=i)||void 0===o?void 0:o.properties)||[],e.abrupt("return",y.map((function(e){var t=p().cloneDeep(i.properties[e]);return"string"===t.type&&t.format&&(t.type="time"),delete t.properties,{path:l?"".concat(l,".").concat("array"===b?"#.":"").concat(e):e,type:d?"".concat(d,".").concat(t.type):t.type,title:m?"".concat(m,".").concat(t.title||e):t.title||e,defineSchema:t,key:e}})).filter((function(e){return!n||"object"===e.defineSchema.type||(p().isArray(n)&&n.length?-1!==n.indexOf(e.defineSchema.type)||-1!==n.indexOf(e.defineSchema.nodeType):!p().isFunction(n)||n({defineSchema:e.defineSchema}))})));case 23:case"end":return e.stop()}}),e)})));return function(t,r,n,a){return e.apply(this,arguments)}}(),Co=function(e,t){return e?Object.getOwnPropertyNames(R.Yk[e].Creator.prototype).filter((function(e){return-1!==e.indexOf(t)&&"constructor"!==e&&!/^__/.test(e)})):[]},Eo=function(e){var t=e.parentVariable,r=e.onClick,n=t||{},a=n.title,i=void 0===a?"":a,s=n.path,u=n.type,l=o().useState(null),c=(0,te.Z)(l,2),d=c[0],m=c[1],p=function(e){if("变量列表"===e)m("变量列表"),r&&r({variable:null});else{var t=s.split("."),n=u.split("."),a=i.split("."),o=t.splice(0,e+1).join("."),l=n.splice(0,e+1).join("."),c=a.splice(0,e+1).join(".");m(c),r&&r({variable:{path:o,type:l,title:c}})}};return o().useEffect((function(){m("")}),[i]),o().createElement("div",{className:"select-panel-breadcrumb"},o().createElement(vo.Breadcrumb,null,o().createElement(vo.Breadcrumb.Item,{onClick:function(){p("变量列表")}},o().createElement("a",null,_t1("变量列表"))),"变量列表"===d?null:(d||i).split(".").map((function(e,t){return o().createElement(vo.Breadcrumb.Item,{onClick:function(){p(t)}},o().createElement("a",{style:{display:"inline-block",maxWidth:"100px",overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"}},_t1(e)))}))))};const Bo=function(e){var t,r,n=e.editorRef,a=e.onFull,s=e.onForceChange,l=e.querySchema,d=e.customStringify,m=(0,i.useRecoilValue)(X),b=(0,i.useRecoilValue)(ee),f=(0,i.useRecoilValue)(P),g=(0,i.useRecoilValue)(Z),y=(0,i.useRecoilValue)(U),h=(0,i.useRecoilValue)(W),v=(0,i.useRecoilValue)(L),A=(0,i.useSetRecoilState)(P),D=(0,i.useRecoilValue)(z),C=(0,i.useRecoilValue)(V),_=(0,i.useRecoilValue)(Y),w=(0,i.useRecoilValue)(Q),F=(0,i.useRecoilValue)($),O=(0,i.useRecoilValue)(G),S=(null==f?void 0:f.variable)||{},N=S.type,k=(S.title,o().useState(null)),j=(0,te.Z)(k,2),T=j[0],I=j[1],M=o().useState(null),q=(0,te.Z)(M,2),H=q[0],J=q[1],K=o().useState([]),re=(0,te.Z)(K,2),ne=re[0],ae=re[1],oe=function(e){e.insert?v&&!_?(s((0,x.Ws)([{type:"variable",children:[{text:""}],variable:e.variable}],C,d)),setTimeout((function(){A({variable:e.variable})}),300)):"variable"===e.type?n.current.insertVariable({variable:e.variable}):"function"===e.type?n.current.insertFunction({text:e.name}):"wordFunction"===e.type?n.current.insertWordFunction({text:e.name}):"attr"===e.type&&n.current.insertText({text:e.name}):A({variable:e.variable}),e.close},ie=function(e,t){if("variable"===t){var r=(0,R.TS)(e),n=r.type,a=r.lastType;e.type=n,e.lastType=a,p().isArray(y)&&y.length&&y.indexOf(e.defineSchema.type),p().isFunction(y)&&y({defineSchema:e.defineSchema});var o={type:t,variable:e,insert:!g||e.defineSchema.nodeType===g,close:"object"!==e.defineSchema.type&&"array"!==e.defineSchema.type};p().isUndefined(e.defineSchema.insert)||(o.insert=e.defineSchema.insert),oe(o)}else oe({name:e,type:t,insert:!0})},se=function(e,t,r){I({title:r.title,type:r.nodeType,description:E(B,e||t,t)})};o().useEffect((function(){J(null)}),[JSON.stringify(f)]);var ue=function(){var e=(0,u.Z)(c().mark((function e(t){var r,n,a,o,i,s;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r=t.schema,n=t.breadvariable,a=t.varAndFun,o=t.limit,i=t.querySchema,e.next=3,xo(r,n||a,o,i);case 3:s=e.sent,ae(s);case 5:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}();o().useEffect((function(){ue({schema:m,breadvariable:H,varAndFun:f,limit:y,querySchema:l})}),[m,H,f,y,l]);var le=Co(N,f.functionText),ce=function(e,t){return t&&-1!==t.indexOf("Properties")?e:t||e};return o().createElement("div",{className:"iot-editor-variable-select"},h?o().createElement("div",{className:"iot-editor-variable-select-loading"},o().createElement(vo.Spin,null)):o().createElement(o().Fragment,null,o().createElement("div",{className:"expected-line",style:{height:"34px",lineHeight:"34px"}},o().createElement("span",{className:"error"},O),o().createElement("span",{className:"expected-type"},o().createElement(vo.Tooltip,{placement:"top",title:_t1(null===(t=R.Yk[b.type])||void 0===t?void 0:t.title)},o().createElement(R.Pt,{type:b.type}))),D||_?null:o().createElement("span",{title:_t1("插入公式"),className:"full-dialog-icon",onClick:function(){"single"===v?s((0,x.Ws)([{type:"formula",children:[{text:" "}]},{text:" "}],C,d)):n.current.insertFormula({text:""})}},o().createElement("i",{className:"editor-iconfont",dangerouslySetInnerHTML:{__html:"&#xea66;"}})),a?o().createElement("span",{title:_t1("全屏"),className:"full-dialog-icon",onClick:a},o().createElement("i",{className:"editor-iconfont",dangerouslySetInnerHTML:{__html:"&#xea11;"}})):null),o().createElement("div",{style:{width:"100%",borderBottom:"1px #E1E1E1 solid"}}),o().createElement("div",{className:"iot-editor-select-panel"},o().createElement(Eo,{parentVariable:null==f?void 0:f.variable,onClick:function(e){J(e)}}),ne.length||le.length?o().createElement("div",{className:"select-panel-content"},o().createElement("div",{className:"select-panel-list"},ne.length?o().createElement(o().Fragment,null,o().createElement("div",{className:"select-panel-title"},"变量"),ne.map((function(e){return o().createElement("div",{className:"select-panel-item",onClick:function(){!function(e){"function"===e.defineSchema.nodeType?ie(e.defineSchema.title,e.defineSchema.nodeType):ie(e,"variable")}(e)},onMouseOver:function(){!function(e){var t=(0,R.ab)(m,e.path);I(t),t.nodeType}(e)}},o().createElement(R.Pt,{type:ce(e.defineSchema.type,e.defineSchema.nodeType)||"object"}),o().createElement("div",{className:"select-panel-item-title",title:_t1(e.defineSchema.title||e.key)},_t1(e.defineSchema.title||e.key)))}))):null,le.length?o().createElement(o().Fragment,null,o().createElement("div",{className:"select-panel-title"},R.Yk[N].title,"类型函数"),le.map((function(e){var t="function"==typeof R.Yk[N].Creator.prototype[e]?{title:_r("函数"),type:"function"}:{title:_r("属性"),type:"attr"};return o().createElement("div",{className:"select-panel-item",onClick:function(){ie(e,t.type)},onMouseOver:function(){!function(e,t,r){I({title:t,type:r,description:E(B,{string:"String",number:"Number",time:"String",array:"Array",object:"Object",boolean:"Boolean"}[e],t)})}(N,e,t.type)}},o().createElement(R.Pt,{type:t.type}),e)}))):null,(D||_)&&null!=w&&w.length?w.map((function(e){var t=p().keys(e.properties).filter((function(e){return!f.wordText||-1!==e.indexOf(p().trim(f.wordText))}));return null!=t&&t.length?o().createElement(o().Fragment,null,o().createElement("div",{className:"select-panel-title"},e.title),t.map((function(t){return o().createElement("div",{className:"select-panel-item",onClick:function(){ie(t,"wordFunction")},onMouseOver:function(){se(e.id,t.split(".").reverse()[0],e.properties[t])}},o().createElement(R.Pt,{type:"function"}),t)}))):null})):null,null!=F&&F.length?F.map((function(e){var t=p().keys(e.properties).filter((function(e){return!f.wordText||-1!==e.indexOf(p().trim(f.wordText))}));return null!=t&&t.length?o().createElement(o().Fragment,null,o().createElement("div",{className:"select-panel-title"},e.title),t.map((function(t){return o().createElement("div",{className:"select-panel-item",onClick:function(){ie(t,"attr")},onMouseOver:function(){se(e.id,t.split(".").reverse()[0],e.properties[t])}},t)}))):null})):null),o().createElement("div",{className:"select-panel-detail"},T?o().createElement(o().Fragment,null,o().createElement("div",{className:"detail-title"},o().createElement("div",null,_t1(T.title)),o().createElement("div",{className:"detail-type"},o().createElement(R.Pt,{type:T.nodeType||T.type}),_t1(null===(r=R.Yk[T.nodeType||T.type])||void 0===r?void 0:r.title))),o().createElement("div",{className:"detail-description",style:{fontSize:14}},T.description)):null)):null)))},_o=function(e){var t=e.variableRef,r=e.onFull,i=e.show,s=e.setShow,u=e.notfocusedShow,l=(0,a.useContext)(Ya),c=o().useState(!1),d=(0,te.Z)(c,2),m=d[0],p=d[1],b=o().useState(null),f=(0,te.Z)(b,2),g=f[0],y=f[1];return o().useEffect((function(){var e=document.querySelector(".iot-editor-slate-panel");e||((e=document.createElement("div")).className="iot-editor-slate-panel",document.body.appendChild(e)),y(e)}),[]),o().useEffect((function(){var e,r=null===(e=t.current)||void 0===e?void 0:e.getBoundingClientRect();l&&!u||i?document.body.clientHeight-r.top>268?p({display:"block",position:"absolute",width:r.width,top:r.top+r.height,left:r.left,zIndex:9999}):p({display:"block",position:"absolute",width:r.width,top:r.top-268,left:r.left,zIndex:9999}):p({display:"none"})}),[l,i]),g?ReactDOM.createPortal(o().createElement("div",{className:"iot-editor-variable-panel",style:m,onMouseEnter:function(){s(!0)},onMouseLeave:function(){s(!1)}},o().createElement(Bo,(0,n.Z)({},e,{onFull:function(){p({display:"none"}),r()},style:m,setShow:s}))),g):null},wo=function(e){var t=e.visible,r=e.value,n=(e.onChange,e.onCancel),a=e.onForceChange,s=e.customStringify,u=e.querySchema,l=o().useRef(null),c=o().useState(null),d=(0,te.Z)(c,2),m=d[0],p=d[1],b=(0,i.useRecoilValue)(j),f=(0,i.useRecoilValue)(z),g=(0,i.useSetRecoilState)(G),y=(0,i.useRecoilValue)(V),h=(0,i.useRecoilValue)(K);return o().useEffect((function(){p(r)}),[r]),o().createElement(vo.Modal,{title:"公式编辑",visible:t,width:1e3,style:{height:"90%"},onCancel:function(){a&&a((0,x.Ws)(null==m?void 0:m.origin,y,s,f)),n()},onOk:function(){var e=D((null==m?void 0:m.origin)||[],f,h);e?g(e):(g(null),a&&a((0,x.Ws)(null==m?void 0:m.origin,y,s,f)),n())},bodyStyle:{padding:0},destroyOnClose:!0,maskTransitionName:"",transitionName:"",wrapClassName:"iot-editor-variable"},o().createElement("div",{key:b,style:{height:"100%"}},o().createElement(io,{value:r,onChange:function(e){p(e)},onForceChange:a,customStringify:s},o().createElement("div",{className:"iot-editor-variable-dlg-formula"},o().createElement(ho,{ref:l,onForceChange:a,value:r})),o().createElement(Bo,{editorRef:l,onForceChange:a,querySchema:u,customStringify:s}))))};function Fo(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function Oo(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?Fo(Object(r),!0).forEach((function(t){(0,b.Z)(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):Fo(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}const So=function(e){var t=e.rootRef,r=e.style,n=e.value,a=e.hasPanel,s=void 0===a||a,u=e.onChange,l=e.onForceChange,c=e.panelWidth,d=(e.select,e.panelVisible),m=e.panelTargetRef,p=e.customStringify,b=e.querySchema,f=e.notfocusedShow,g=o().useRef(null),y=o().useRef(null),h=o().useState(!1),v=(0,te.Z)(h,2),A=v[0],D=v[1],x=o().useState(!1),C=(0,te.Z)(x,2),E=C[0],B=C[1],_=(0,i.useRecoilValue)(j),w=o().useRef(!1),F=function(){D(!0),B(!1)};return o().useImperativeHandle(t,(function(){return{insertVariable:y.current.insertVariable,insertFunction:y.current.insertFunction,insertText:y.current.insertText,clear:y.current.clear,show:function(){B(!E)},full:function(){F()}}})),o().useEffect((function(){w.current?B(!E):w.current=!0}),[d]),o().createElement("div",{ref:g,key:_,className:"iot-editor-slate-wrap",style:Oo({position:"relative"},r)},o().createElement(io,{value:n,onChange:u,customStringify:p,onForceChange:l},o().createElement(ho,{ref:y,style:r,onForceChange:l}),s?o().createElement(_o,{editorRef:y,width:c,variableRef:m||g,onFull:F,show:E,setShow:B,onForceChange:l,querySchema:b,customStringify:p,notfocusedShow:f}):null),o().createElement(wo,{visible:A,value:n,onChange:u,onForceChange:l,querySchema:b,onCancel:function(){D(!1)},customStringify:p}))};var No=function(e){var t=e.rootRef,n=e.style,a=e.schema,s=e.data,l=e.value,d=e.hasPanel,m=void 0===d||d,b=e.onChange,f=e.onSelectVarAndFun,g=e.onExpected,y=e.panelWidth,h=e.select,v=e.panelVisible,A=e.panelTargetRef,D=e.hasLoading,x=e.limit,C=e.nodeType,E=e.stringify,B=e.funcExt,_=void 0===B?["formulajs","lodash","Math","moment"]:B,w=e.attrExt,F=void 0===w?[]:w,O=e.isModal,S=e.modalVisible,N=e.onModalCancel,k=e.isFormula,G=e.customStringify,X=e.querySchema,Q=e.notfocusedShow,$=(0,i.useSetRecoilState)(j);!function(e){var t=e.schema,n=e.funcExt,a=e.attrExt,s=e.value,l=e.data,d=e.select,m=e.hasLoading,b=e.nodeType,f=e.limit,g=e.onExpected,y=e.onSelectVarAndFun,h=e.stringify,v=e.isFormula,A=(0,i.useRecoilValue)(Y),D=(0,i.useSetRecoilState)(T),x=(0,i.useSetRecoilState)(I),C=(0,i.useSetRecoilState)(M),E=(0,i.useRecoilValue)(ee),B=(0,i.useRecoilValue)(P),_=(0,i.useSetRecoilState)(L),w=(0,i.useSetRecoilState)(W),F=(0,i.useSetRecoilState)(Z),O=(0,i.useSetRecoilState)(U),S=(0,i.useSetRecoilState)(V),N=(0,i.useSetRecoilState)(q),k=(0,i.useSetRecoilState)(H),R=(0,i.useSetRecoilState)(z),j=(0,i.useSetRecoilState)(J),G=(0,i.useSetRecoilState)(K);o().useEffect((function(){if(t){var e=p().cloneDeep(t);D(e)}}),[JSON.stringify(t)]),o().useEffect((function(){N(n)}),[JSON.stringify(n)]),o().useEffect((function(){k(a)}),[JSON.stringify(a)]),o().useEffect((function(){x(p().cloneDeep(s))}),[JSON.stringify(s)]),o().useEffect((function(){C(l)}),[JSON.stringify(l)]),o().useEffect((function(){g&&g(E)}),[JSON.stringify(E)]),o().useEffect((function(){y&&y(B)}),[JSON.stringify(B)]),o().useEffect((function(){_(d)}),[d]),o().useEffect((function(){w(m||null)}),[m]),o().useEffect((function(){F(b||null)}),[b]),o().useEffect((function(){O(A?null:f||null)}),[f,A]),o().useEffect((function(){S(h||!1)}),[h]),o().useEffect((function(){R(v||!1)}),[v]),o().useEffect((function(){(0,u.Z)(c().mark((function e(){var t;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.e(1590).then(r.bind(r,1590));case 2:t=e.sent,j(t);case 4:case"end":return e.stop()}}),e)})))()}),[]),o().useEffect((function(){(0,u.Z)(c().mark((function e(){var t;return c().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,r.e(1072).then(r.t.bind(r,1072,23));case 2:t=e.sent,G(t);case 4:case"end":return e.stop()}}),e)})))()}),[])}({schema:a,funcExt:_,attrExt:F,value:l,data:s,select:h,hasLoading:D,nodeType:C,limit:x,onExpected:g,onSelectVarAndFun:f,isFormula:k,stringify:E});var te=function(e,t){b(e),$((0,R.O1)(12))};return O?o().createElement(wo,{visible:S,value:l,onChange:b,onCancel:N,onForceChange:te,customStringify:G,querySchema:X}):o().createElement(So,{rootRef:t,style:n,value:l,hasPanel:m,onChange:b,onForceChange:te,panelWidth:y,select:h,panelVisible:v,panelTargetRef:A,stringify:E,customStringify:G,querySchema:X,notfocusedShow:Q})};const ko=o().forwardRef((function(e,t){return o().createElement(i.RecoilRoot,null,o().createElement(No,(0,n.Z)({},e,{rootRef:e.rootRef||t})))}))},6362:(e,t,r)=>{"use strict";r.d(t,{Pt:()=>p,Cy:()=>f,ab:()=>s,TS:()=>m,O1:()=>b,c8:()=>g,Yk:()=>u});var n=r(1002),a=r(2611),o=r.n(a),i=r(5907),s=function(e,t){var r=o().cloneDeep(e);return t.split(".").filter((function(e){return"#"!=e})).forEach((function(e){var t,n,a,o;if(!(r=(null===(t=r)||void 0===t?void 0:t.properties)&&(null===(n=r)||void 0===n?void 0:n.properties[e])))return null;"array"===r.type&&(r={type:"array",title:r.title,properties:null===(a=r)||void 0===a||null===(o=a.items)||void 0===o?void 0:o.properties})})),r},u={string:{title:_r("文本"),data:"文本",color:"#FFAE70",Creator:String},number:{title:_r("数字"),data:123,color:"#478FF2",Creator:Number},boolean:{title:_r("布尔"),data:123,color:"#B0E967",Creator:Boolean},time:{title:_r("日期"),data:"2021-12-20",color:"#79E2C2",Creator:String},object:{title:_r("对象"),data:{a:"1"},color:"#7A90FF",Creator:Object},array:{title:_r("数组"),data:["aa","bb"],color:"#FFA19B",Creator:Array},function:{title:_r("函数"),icon:"&#xeacb;"},attr:{title:_r("属性"),icon:"&#xeaad;"},table:{title:_r("工作表"),color:"#F89F7F"},model:{title:_r("模型"),color:"#AD88F6"},node:{title:_r("资产"),color:"#73D8E6"},user:{title:_r("用户"),color:"#666FA6"},nodeDataPoint:{title:_r("数据点"),color:"#EDABFF"},tableRecord:{title:_r("工作表记录"),color:"#4D2EDC"},bytesArray:{title:_r("字节数组"),color:"#59AC45"}};function l(e,t){var r="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!r){if(Array.isArray(e)||(r=function(e,t){if(e){if("string"==typeof e)return c(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?c(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){r&&(e=r);var n=0,a=function(){};return{s:a,n:function(){return n>=e.length?{done:!0}:{done:!1,value:e[n++]}},e:function(e){throw e},f:a}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var o,i=!0,s=!1;return{s:function(){r=r.call(e)},n:function(){var e=r.next();return i=e.done,e},e:function(e){s=!0,o=e},f:function(){try{i||null==r.return||r.return()}finally{if(s)throw o}}}}function c(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}var d=function(e){if(!e||!e.split)return null;var t=e.split(".");return t[t.length-1]},m=function(e){var t=e.type,r={type:d(t),lastType:d(t)};return-1!==t.indexOf("array")&&(r.type="array"),r},p=function(e){var t=e.type;if(!t)return null;var n=u[t]||u.object,a=n.title,o=(n.color,n.icon);return a?React.createElement("div",{class:"editor-svg-icon"},o?React.createElement("i",{className:"editor-iconfont",dangerouslySetInnerHTML:{__html:o}}):React.createElement(i.Icon,{svg:r(8074)("./".concat(a,".svg"))})):null};function b(e){e=e||32;for(var t="",r=0;r<e;r++)t+="ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678".charAt(Math.floor(48*Math.random()));return t}var f=function e(t,r){var a={type:"object",properties:{}};if(r&&(a.title=r),o().isPlainObject(t)){var i,s=l(o().keys(t));try{for(s.s();!(i=s.n()).done;){var u=i.value,c=t[u];o().isPlainObject(c)?a.properties[u]=e(c,u):o().isArray(c)?a.properties[u]={title:u,type:"array",items:{}}:a.properties[u]={title:u,type:(0,n.Z)(c)}}}catch(e){s.e(e)}finally{s.f()}}return a},g=function e(t,r){var n,a=r||{},i=l(o().keys(null==t?void 0:t.properties));try{for(i.s();!(n=i.n()).done;){var s=n.value,c=t.properties[s];if("object"===c.type)a[s]={},e(c,a[s]);else if("array"===c.type){var d;a[s]=[{}],null!=c&&null!==(d=c.items)&&void 0!==d&&d.properties&&e({properties:c.items.properties},a[s][0])}else{var m;a[s]=null===(m=u[c.type])||void 0===m?void 0:m.data}}}catch(e){i.e(e)}finally{i.f()}return a}},7956:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.d(__webpack_exports__,{Qx:()=>editorValueEval,Ws:()=>getEditorValue});var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(1002),lodash__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(2611),lodash__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(lodash__WEBPACK_IMPORTED_MODULE_0__),compiledTemplate=function(e,t){try{if(e&&t){var r=e.replace("#$systemVariable","systemVariable"),n=JSON.parse(JSON.stringify(t).replace("#$systemVariable","systemVariable"));return lodash__WEBPACK_IMPORTED_MODULE_0___default().template(r,{interpolate:/{{([\s\S]+?)}}/g})(n)}return""}catch(e){return""}},expressionEval=function expressionEval(expressionStr,data){try{var expression=compiledTemplate(expressionStr,data),result=eval(expression),type=(0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_1__.Z)(result);return"object"===type&&result instanceof Array&&(type="array"),{error:!1,result,type,reality:!!data}}catch(e){return{error:!0,result:_r("公式错误"),type:"string",reality:!!data}}},elementStringify=function(e,t){if("variable"===e.type&&e.variable)return"{{".concat(e.variable.path,"}}");if("formula"===e.type){if(t){var r=editorValueStringify(e.children),n=expressionEval(r,t).result;return lodash__WEBPACK_IMPORTED_MODULE_0___default().isString(n)?n:"".concat(JSON.stringify(n))}return"{#".concat(editorValueStringify(e.children),"#}")}return e.text},editorValueStringify=function(e,t){return lodash__WEBPACK_IMPORTED_MODULE_0___default().isArray(e)?e.map((function(e){return t?t(e,elementStringify):elementStringify(e)})).join(""):""},editorValueEval=function(e,t){if(lodash__WEBPACK_IMPORTED_MODULE_0___default().isArray(e)&&e.length){var r=e.filter((function(e){return e.type||""!==e.text}));if(1===r.length){var n=r[0];return"variable"===n.type?lodash__WEBPACK_IMPORTED_MODULE_0___default().get(t,n.variable.path):"formula"===n.type?expressionEval(editorValueStringify(n.children)).result:n.text}var a=editorValueStringify(e,(function(e,r){return"formula"===e.type?r(e,t):r(e)}));return compiledTemplate(a,t)}return""},editorValueParse=function(e){return[]},getEditorValue=function(e,t,r,n){return t?editorValueStringify(e):{origin:lodash__WEBPACK_IMPORTED_MODULE_0___default().cloneDeep(e),stringify:n?"{#".concat(editorValueStringify(e,r),"#}"):editorValueStringify(e,r)}}},204:(e,t,r)=>{"use strict";r.d(t,{Z:()=>h});var n=r(5861),a=r(4687),o=r.n(a),i=r(3078),s=function(){var e=(0,n.Z)(o().mark((function e(t){var r,n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return r={limit:(t=t||{}).limit||30,skip:t.skip||0,order:t.order,fields:t.fields,withCount:!0},e.next=4,(0,i.api)({name:"core/t/schema"}).query(r,t.where?{where:t.where}:{}).then((function(e){return e})).catch((function(e){return e}));case 4:return n=e.sent,e.abrupt("return",n);case 6:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),u=function(){var e=(0,n.Z)(o().mark((function e(t){var r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t/schema"}).get(t).then((function(e){return e})).catch((function(e){return e}));case 2:return r=e.sent,e.abrupt("return",r);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),l=function(){var e=(0,n.Z)(o().mark((function e(t){var r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t/schema"}).fetch("",{method:"POST",body:JSON.stringify(t)}).then((function(e){return null==e?void 0:e.json})).catch((function(e){return e}));case 2:return r=e.sent,e.abrupt("return",r);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),c=function(){var e=(0,n.Z)(o().mark((function e(t,r){var n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t/schema"}).fetch("/".concat(t),{method:"PATCH",body:JSON.stringify(r)}).then((function(e){return null==e?void 0:e.json})).catch((function(e){return e}));case 2:return n=e.sent,e.abrupt("return",n);case 4:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),d=function(){var e=(0,n.Z)(o().mark((function e(t){var r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t/schema"}).fetch("/".concat(t),{method:"DELETE"}).then((function(e){return e.json})).catch((function(e){return e}));case 2:return r=e.sent,e.abrupt("return",r);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),m=function(){var e=(0,n.Z)(o().mark((function e(t,r){var n,a,s;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n={limit:(r=r||{}).limit||30,skip:r.skip||0,sort:r.sort,project:r.project,filter:r.where},a=encodeURIComponent(JSON.stringify(n)),e.next=5,(0,i.api)({name:"core/t"}).fetch("/".concat(t,"/d?query=").concat(a),{method:"GET"}).then((function(e){return e.json})).catch((function(e){return e}));case 5:return s=e.sent,e.abrupt("return",s);case 7:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),p=function(){var e=(0,n.Z)(o().mark((function e(t,r){var n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t/".concat(t,"/d")}).get(r).then((function(e){return e})).catch((function(e){return e}));case 2:return n=e.sent,e.abrupt("return",n);case 4:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),b=function(){var e=(0,n.Z)(o().mark((function e(t){var r;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t"}).get(t+"/d/checkAdd").then((function(e){return{add:!0}})).catch((function(e){return{add:!1}}));case 2:return r=e.sent,e.abrupt("return",r);case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),f=function(){var e=(0,n.Z)(o().mark((function e(t,r){var n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t"}).fetch("/".concat(t,"/d"),{method:"POST",body:JSON.stringify(r)}).then((function(e){return null==e?void 0:e.json})).catch((function(e){return e}));case 2:return n=e.sent,e.abrupt("return",n);case 4:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}(),g=function(){var e=(0,n.Z)(o().mark((function e(t,r,n){var a;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t"}).fetch("/".concat(t,"/d/").concat(r),{method:"PATCH",body:JSON.stringify(n)}).then((function(e){return null==e?void 0:e.json})).catch((function(e){return e}));case 2:return a=e.sent,e.abrupt("return",a);case 4:case"end":return e.stop()}}),e)})));return function(t,r,n){return e.apply(this,arguments)}}(),y=function(){var e=(0,n.Z)(o().mark((function e(t,r){var n;return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,(0,i.api)({name:"core/t"}).fetch("/".concat(t,"/d/").concat(r),{method:"DELETE"}).then((function(e){return e.json})).catch((function(e){return e}));case 2:return n=e.sent,e.abrupt("return",n);case 4:case"end":return e.stop()}}),e)})));return function(t,r){return e.apply(this,arguments)}}();const h={getTableList:s,getTableById:u,addTable:l,editTableById:c,delTableById:d,getTableDataList:m,getTableDataById:p,checkTableAdd:b,addTableData:f,editTableDataById:g,delTableDataById:y,getModelList:s,getModelById:u,addModel:l,editModelById:c,delModelById:d,getNodeList:m,getNodeById:p,addNode:f,editNodeById:g,delNodeById:y}},2060:(e,t,r)=>{"use strict";r.d(t,{Z:()=>p});var n=r(4015),a=r.n(n),o=r(3645),i=r.n(o),s=r(1667),u=r.n(s),l=r(1574),c=r.n(l),d=i()(a()),m=u()(c());d.push([e.id,"@font-face {\n  font-family: 'codaicons';\n  src: url("+m+");\n}\n.iot-editor-variable .ant-modal-content {\n  height: 100%;\n}\n.iot-editor-variable .ant-modal-content .ant-modal-body {\n  height: calc(100% - 108px);\n}\n.iot-editor-variable-panel {\n  border: 1px solid #e0e0e0;\n  background-color: #FFFFFF;\n  border-radius: 6px;\n  box-shadow: 0 0 10px rgba(0, 0, 0, var(--opacity-shadow-normal, 0.15));\n  z-index: 1;\n  height: 200px;\n}\n.iot-editor-variable-panel .iot-editor-variable-select {\n  height: 100%;\n}\n.iot-editor-variable-dlg-formula {\n  padding: 10px 15px;\n  border-bottom: 1px solid #f0f0f0;\n  height: 200px;\n  overflow: auto;\n}\n.editor-svg-icon {\n  font-size: 16px;\n  padding-right: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 22px;\n}\n.editor-svg-icon svg path {\n  stroke-width: 2;\n}\n.editor-svg-icon svg rect {\n  stroke-width: 2;\n}\n.iot-editor-variable-select {\n  position: relative;\n  width: 100%;\n  height: calc(100% - 200px);\n}\n.iot-editor-variable-select .editor-iconfont {\n  -webkit-font-smoothing: antialiased;\n  font-family: 'codaicons';\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  vertical-align: middle;\n  font-size: 18px;\n  padding-right: 4px;\n}\n.iot-editor-variable-select .expected-line {\n  display: flex;\n}\n.iot-editor-variable-select .expected-line .equal-icon {\n  display: inline-block;\n  font-size: 18px;\n  color: #aeaeae;\n  height: 100%;\n  width: 10%;\n  text-align: center;\n}\n.iot-editor-variable-select .expected-line .expected {\n  display: inline-block;\n  width: 60%;\n  height: 100%;\n  overflow: hidden;\n}\n.iot-editor-variable-select .expected-line .expected-type {\n  display: inline-block;\n  width: 20%;\n  height: 100%;\n  overflow: hidden;\n}\n.iot-editor-variable-select .expected-line .full-dialog-icon {\n  width: 10%;\n  height: 100%;\n  cursor: pointer;\n}\n.iot-editor-variable-select .expected-line .error {\n  color: red;\n  margin-left: 30px;\n  width: 60%;\n}\n.iot-editor-variable-select .iot-editor-variable-select-loading {\n  height: 230px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.iot-editor-select-panel {\n  width: 100%;\n  height: calc(100% - 34px);\n  background: #f5f6f7;\n}\n.iot-editor-select-panel .select-panel-item {\n  display: flex;\n  align-items: center;\n  padding-left: 10px;\n  height: 30px;\n  line-height: 30px;\n  cursor: pointer;\n}\n.iot-editor-select-panel .select-panel-item-title {\n  width: 80%;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.iot-editor-select-panel .select-panel-item:hover {\n  background-color: #CCCCCC;\n}\n.iot-editor-select-panel .select-panel-breadcrumb {\n  padding: 4px 10px;\n  border-bottom: 1px #E1E1E1 solid;\n}\n.iot-editor-select-panel .select-panel-content {\n  width: 100%;\n  display: flex;\n  height: calc(100% - 31px);\n}\n.iot-editor-select-panel .select-panel-list {\n  height: 100%;\n  overflow: auto;\n  width: 40%;\n  border-right: 1px #E1E1E1 solid;\n}\n.iot-editor-select-panel .select-panel-title {\n  color: #8f959e;\n  font-size: 14px;\n  margin-top: 8px;\n  overflow: hidden;\n  padding: 0 12px;\n}\n.iot-editor-select-panel .select-panel-detail {\n  height: 100%;\n  overflow: auto;\n  width: 60%;\n  padding: 10px 20px;\n}\n.iot-editor-select-panel .select-panel-detail .detail-title {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-weight: bold;\n  padding-bottom: 10px;\n}\n.iot-editor-select-panel .select-panel-detail .detail-info {\n  margin-top: 10px;\n  background-color: #fff;\n  border-radius: 8px;\n  border: 1px #E1E1E1 solid;\n  padding: 10px 20px;\n}\n.iot-editor-select-panel .select-panel-detail .detail-info-item {\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between;\n}\n.iot-editor-select-panel .select-panel-detail .detail-info-item .info-item-title {\n  width: 200px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.iot-editor-select-panel .select-panel-detail .detail-type {\n  display: flex;\n  align-items: center;\n  font-size: 12px;\n  font-weight: normal;\n  background-color: #fff;\n  padding: 2px 10px;\n  border-radius: 6px;\n  border: 1px #E1E1E1 solid;\n}\n.iot-editor-slate {\n  position: relative;\n}\n.iot-editor-slate .tag-element {\n  display: inline-block;\n  height: 22px;\n  line-height: 20px;\n  padding: 0 6px;\n  border-radius: 10px;\n  margin: 0 2px;\n}\n.iot-editor-slate .tag-element .tag-element-flex {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  max-width: 260px;\n}\n.iot-editor-slate .tag-element .tag-element-flex span {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}\n.iot-editor-slate .formula-element {\n  display: inline-block;\n  min-height: 22px;\n  line-height: 20px;\n  min-width: 50px;\n  border-right: 4px solid #CCCCCC;\n  border-left: 4px solid #CCCCCC;\n  border-radius: 8px;\n  padding: 0 8px;\n  margin: 0 8px;\n}\n.iot-editor-slate .iot-editor-slate-close {\n  position: absolute;\n  top: 0;\n  right: 10px;\n}\n.editor-iconfont {\n  -webkit-font-smoothing: antialiased;\n  font-family: 'codaicons';\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  vertical-align: middle;\n  font-size: 16px;\n}\n.iot-editor-slate-wrap {\n  min-height: 32px;\n  max-height: 200px;\n  overflow: auto;\n  padding: 5px 0;\n  background-color: #f0f2f5;\n}\n.detail-description .detail-item-title {\n  padding-top: 10px;\n  padding-bottom: 4px;\n  font-weight: bold;\n}\n.detail-description .detail-item {\n  padding: 12px;\n  margin: 6px 0;\n  border-radius: 4px;\n  background: rgba(255, 255, 255, 0.5);\n}\n","",{version:3,sources:["webpack://./src/style.less"],names:[],mappings:"AAAA;EACE,wBAAA;EACA,4CAAA;AACF;AAEA;EAEI,YAAA;AADJ;AADA;EAIM,0BAAA;AAAN;AAKA;EACE,yBAAA;EACA,yBAAA;EACA,kBAAA;EACA,sEAAA;EACA,UAAA;EACA,aAAA;AAHF;AAHA;EAQI,YAAA;AAFJ;AAMA;EACE,kBAAA;EACA,gCAAA;EACA,aAAA;EACA,cAAA;AAJF;AAOA;EACE,eAAA;EACA,kBAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,YAAA;EACA,WAAA;AALF;AAFA;EAUM,eAAA;AALN;AALA;EAaM,eAAA;AALN;AAUA;EACE,kBAAA;EACA,WAAA;EACA,0BAAA;AARF;AAKA;EAKI,mCAAA;EACA,wBAAA;EACA,kBAAA;EACA,gBAAA;EACA,cAAA;EACA,sBAAA;EACA,eAAA;EACA,kBAAA;AAPJ;AALA;EAeI,aAAA;AAPJ;AARA;EAiBM,qBAAA;EACA,eAAA;EACA,cAAA;EACA,YAAA;EACA,UAAA;EACA,kBAAA;AANN;AAhBA;EAyBM,qBAAA;EACA,UAAA;EACA,YAAA;EACA,gBAAA;AANN;AAtBA;EA+BM,qBAAA;EACA,UAAA;EACA,YAAA;EACA,gBAAA;AANN;AA5BA;EAqCM,UAAA;EACA,YAAA;EACA,eAAA;AANN;AAjCA;EA0CM,UAAA;EACA,iBAAA;EACA,UAAA;AANN;AAtCA;EAgDI,aAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;AAPJ;AAWA;EACE,WAAA;EACA,yBAAA;EACA,mBAAA;AATF;AAMA;EAKI,aAAA;EACA,mBAAA;EACA,kBAAA;EACA,YAAA;EACA,iBAAA;EACA,eAAA;AARJ;AASI;EACE,UAAA;EACA,gBAAA;EACA,uBAAA;EACA,mBAAA;AAPN;AASI;EACE,yBAAA;AAPN;AAXA;EAsBI,iBAAA;EACA,gCAAA;AARJ;AAfA;EA0BI,WAAA;EACA,aAAA;EACA,yBAAA;AARJ;AApBA;EA+BI,YAAA;EACA,cAAA;EACA,UAAA;EACA,+BAAA;AARJ;AA1BA;EAqCI,cAAA;EACA,eAAA;EACA,eAAA;EACA,gBAAA;EACA,eAAA;AARJ;AAjCA;EA4CI,YAAA;EACA,cAAA;EACA,UAAA;EACA,kBAAA;AARJ;AAvCA;EAiDM,aAAA;EACA,mBAAA;EACA,8BAAA;EACA,iBAAA;EACA,oBAAA;AAPN;AA9CA;EAwDM,gBAAA;EACA,sBAAA;EACA,kBAAA;EACA,yBAAA;EACA,kBAAA;AAPN;AArDA;EA+DM,aAAA;EACA,WAAA;EACA,mBAAA;EACA,8BAAA;AAPN;AA3DA;EAoEQ,YAAA;EACA,gBAAA;EACA,uBAAA;EACA,mBAAA;AANR;AAjEA;EA2EM,aAAA;EACA,mBAAA;EACA,eAAA;EACA,mBAAA;EACA,sBAAA;EACA,iBAAA;EACA,kBAAA;EACA,yBAAA;AAPN;AAWA;EACE,kBAAA;AATF;AAQA;EAGI,qBAAA;EACA,YAAA;EACA,iBAAA;EACA,cAAA;EACA,mBAAA;EACA,aAAA;AARJ;AAAA;EAUM,aAAA;EACA,uBAAA;EACA,mBAAA;EAEA,gBAAA;AARN;AANA;EAgBQ,gBAAA;EACA,uBAAA;EACA,mBAAA;AAPR;AAXA;EAuBI,qBAAA;EACA,gBAAA;EACA,iBAAA;EACA,eAAA;EACA,+BAAA;EACA,8BAAA;EACA,kBAAA;EACA,cAAA;EACA,aAAA;AATJ;AAtBA;EAkCI,kBAAA;EACA,MAAA;EACA,WAAA;AATJ;AAYA;EACE,mCAAA;EACA,wBAAA;EACA,kBAAA;EACA,gBAAA;EACA,cAAA;EACA,sBAAA;EACA,eAAA;AAVF;AAaA;EACE,gBAAA;EACA,iBAAA;EACA,cAAA;EACA,cAAA;EACA,yBAAA;AAXF;AAcA;EAEI,iBAAA;EACA,mBAAA;EACA,iBAAA;AAbJ;AASA;EAOI,aAAA;EACA,aAAA;EACA,kBAAA;EACA,oCAAA;AAbJ",sourcesContent:["@font-face{\n  font-family: 'codaicons';\n  src : url('./codaicons.ttf');\n}\n\n.iot-editor-variable {\n  .ant-modal-content {\n    height: 100%;\n    .ant-modal-body {\n      height: calc(100% - 108px);\n    }\n  }\n}\n\n.iot-editor-variable-panel {\n  border: 1px solid rgb(224,224,224);\n  background-color: #FFFFFF;\n  border-radius: 6px;\n  box-shadow: 0 0 10px rgba(0,0,0,var(--opacity-shadow-normal,.15));\n  z-index: 1;\n  height: 200px;\n  .iot-editor-variable-select {\n    height: 100%;\n  }\n}\n\n.iot-editor-variable-dlg-formula {\n  padding: 10px 15px;\n  border-bottom: 1px solid rgb(240, 240, 240);\n  height: 200px;\n  overflow: auto;\n}\n\n.editor-svg-icon {\n  font-size: 16px;\n  padding-right: 6px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n  width: 22px;\n  svg {\n    path {\n      stroke-width: 2;\n    }\n    rect {\n      stroke-width: 2;\n    }\n  }\n}\n\n.iot-editor-variable-select {\n  position: relative;\n  width: 100%;\n  height: calc(100% - 200px);\n  .editor-iconfont {\n    -webkit-font-smoothing: antialiased;\n    font-family: 'codaicons';\n    font-style: normal;\n    font-weight: 400;\n    line-height: 1;\n    vertical-align: middle;\n    font-size: 18px;\n    padding-right: 4px;\n  }\n  .expected-line {\n    display: flex;\n    .equal-icon {\n      display: inline-block;\n      font-size: 18px;\n      color: rgb(174, 174, 174);\n      height: 100%;\n      width: 10%;\n      text-align: center;\n    }\n    .expected {\n      display: inline-block; \n      width: 60%; \n      height: 100%; \n      overflow: hidden;\n    }\n    .expected-type {\n      display: inline-block; \n      width: 20%; \n      height: 100%; \n      overflow: hidden;\n    }\n    .full-dialog-icon {\n      width: 10%;\n      height: 100%;\n      cursor: pointer;\n    }\n    .error {\n      color: red;\n      margin-left: 30px;\n      width: 60%; \n    }\n  }\n  .iot-editor-variable-select-loading {\n    height: 230px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n}\n\n.iot-editor-select-panel {\n  width: 100%;\n  height: calc(100% - 34px);\n  background: rgb(245, 246, 247);\n  .select-panel-item {\n    display: flex;\n    align-items: center;\n    padding-left: 10px;\n    height: 30px;\n    line-height: 30px;\n    cursor: pointer;\n    &-title {\n      width: 80%;\n      overflow:hidden; //超出的文本隐藏\n      text-overflow:ellipsis; //溢出用省略号显示\n      white-space:nowrap; //溢出不换\n    }\n    &:hover {\n      background-color: #CCCCCC;\n    }\n  }\n  .select-panel-breadcrumb {\n    padding: 4px 10px;\n    border-bottom: 1px #E1E1E1 solid;\n  }\n  .select-panel-content {\n    width: 100%;\n    display: flex;\n    height: calc(100% - 31px);\n  }\n  .select-panel-list {\n    height: 100%;\n    overflow: auto;\n    width: 40%;\n    border-right: 1px #E1E1E1 solid;\n  }\n  .select-panel-title {\n    color: rgb(143, 149, 158);\n    font-size: 14px;\n    margin-top: 8px;\n    overflow: hidden;\n    padding: 0 12px;\n  }\n  .select-panel-detail {\n    height: 100%;\n    overflow: auto;\n    width: 60%;\n    padding: 10px 20px;\n    .detail-title {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      font-weight: bold;\n      padding-bottom: 10px;\n    }\n    .detail-info {\n      margin-top: 10px;\n      background-color: #fff;\n      border-radius: 8px;\n      border: 1px #E1E1E1 solid;\n      padding: 10px 20px;\n    }\n    .detail-info-item {\n      display: flex;\n      width: 100%;\n      align-items: center;\n      justify-content: space-between;\n      .info-item-title {\n        width: 200px;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n    }\n    .detail-type {\n      display: flex;\n      align-items: center;\n      font-size: 12px;\n      font-weight: normal;\n      background-color: #fff;\n      padding: 2px 10px;\n      border-radius: 6px;\n      border: 1px #E1E1E1 solid;\n    }\n  }\n}\n.iot-editor-slate {\n  position: relative;\n  .tag-element {\n    display: inline-block;\n    height: 22px;\n    line-height: 20px;\n    padding: 0 6px;\n    border-radius: 10px;\n    margin: 0 2px;\n    .tag-element-flex {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      // overflow: hidden;\n      max-width: 260px;\n      span {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n    }\n  }\n  .formula-element {\n    display: inline-block;\n    min-height: 22px;\n    line-height: 20px;\n    min-width: 50px;\n    border-right: 4px solid #CCCCCC;\n    border-left: 4px solid #CCCCCC;\n    border-radius: 8px;\n    padding: 0 8px;\n    margin: 0 8px;\n  }\n  .iot-editor-slate-close {\n    position: absolute;\n    top: 0;\n    right: 10px;\n  }\n}\n.editor-iconfont {\n  -webkit-font-smoothing: antialiased;\n  font-family: 'codaicons';\n  font-style: normal;\n  font-weight: 400;\n  line-height: 1;\n  vertical-align: middle;\n  font-size: 16px;\n}\n\n.iot-editor-slate-wrap {\n  min-height: 32px;\n  max-height: 200px;\n  overflow: auto;\n  padding: 5px 0;\n  background-color: #f0f2f5;\n}\n\n.detail-description {\n  .detail-item-title {\n    padding-top: 10px;\n    padding-bottom: 4px;\n    font-weight: bold;\n  }\n  .detail-item {\n    padding: 12px;\n    margin: 6px 0;\n    border-radius: 4px;\n    background: rgba(255, 255, 255, 0.5);\n  }\n}\n"],sourceRoot:""}]);const p=d},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=e(t);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var a={};if(n)for(var o=0;o<this.length;o++){var i=this[o][0];null!=i&&(a[i]=!0)}for(var s=0;s<e.length;s++){var u=[].concat(e[s]);n&&a[u[0]]||(r&&(u[2]?u[2]="".concat(r," and ").concat(u[2]):u[2]=r),t.push(u))}},t}},4015:e=>{"use strict";function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}e.exports=function(e){var r,n,a=(n=4,function(e){if(Array.isArray(e))return e}(r=e)||function(e,t){var r=e&&("undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"]);if(null!=r){var n,a,o=[],i=!0,s=!1;try{for(r=r.call(e);!(i=(n=r.next()).done)&&(o.push(n.value),!t||o.length!==t);i=!0);}catch(e){s=!0,a=e}finally{try{i||null==r.return||r.return()}finally{if(s)throw a}}return o}}(r,n)||function(e,r){if(e){if("string"==typeof e)return t(e,r);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?t(e,r):void 0}}(r,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=a[1],i=a[3];if(!i)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(i)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(u," */"),c=i.sources.map((function(e){return"/*# sourceURL=".concat(i.sourceRoot||"").concat(e," */")}));return[o].concat(c).concat([l]).join("\n")}return[o].join("\n")}},1667:e=>{"use strict";e.exports=function(e,t){return t||(t={}),"string"!=typeof(e=e&&e.__esModule?e.default:e)?e:(/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),t.hash&&(e+=t.hash),/["'() \t\n]/.test(e)||t.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e)}},6907:e=>{"use strict";e.exports=function(e){return e=String(e||""),n.test(e)?"rtl":a.test(e)?"ltr":"neutral"};var t="֑-߿יִ-﷽ﹰ-ﻼ",r="A-Za-zÀ-ÖØ-öø-ʸ̀-֐ࠀ-῿‎Ⰰ-﬜︀-﹯﻽-￿",n=new RegExp("^[^"+r+"]*["+t+"]"),a=new RegExp("^[^"+t+"]*["+r+"]")},1574:(e,t,r)=>{e.exports=r.p+"288c0f19bc6a8f842758e9993e8c01d4.ttf"},8156:(e,t)=>{"use strict";for(var r="undefined"!=typeof window&&/Mac|iPod|iPhone|iPad/.test(window.navigator.platform),n={alt:"altKey",control:"ctrlKey",meta:"metaKey",shift:"shiftKey"},a={add:"+",break:"pause",cmd:"meta",command:"meta",ctl:"control",ctrl:"control",del:"delete",down:"arrowdown",esc:"escape",ins:"insert",left:"arrowleft",mod:r?"meta":"control",opt:"alt",option:"alt",return:"enter",right:"arrowright",space:" ",spacebar:" ",up:"arrowup",win:"meta",windows:"meta"},o={backspace:8,tab:9,enter:13,shift:16,control:17,alt:18,pause:19,capslock:20,escape:27," ":32,pageup:33,pagedown:34,end:35,home:36,arrowleft:37,arrowup:38,arrowright:39,arrowdown:40,insert:45,delete:46,meta:91,numlock:144,scrolllock:145,";":186,"=":187,",":188,"-":189,".":190,"/":191,"`":192,"[":219,"\\":220,"]":221,"'":222},i=1;i<20;i++)o["f"+i]=111+i;function s(e,t,r){t&&!("byKey"in t)&&(r=t,t=null),Array.isArray(e)||(e=[e]);var a=e.map((function(e){return function(e,t){var r=t&&t.byKey,a={},o=(e=e.replace("++","+add")).split("+"),i=o.length;for(var s in n)a[n[s]]=!1;var c=!0,d=!1,m=void 0;try{for(var p,b=o[Symbol.iterator]();!(c=(p=b.next()).done);c=!0){var f=p.value,g=f.endsWith("?")&&f.length>1;g&&(f=f.slice(0,-1));var y=l(f),h=n[y];1!==i&&h||(r?a.key=y:a.which=u(f)),h&&(a[h]=!g||null)}}catch(e){d=!0,m=e}finally{try{!c&&b.return&&b.return()}finally{if(d)throw m}}return a}(e,t)})),o=function(e){return a.some((function(t){return function(e,t){for(var r in e){var n=e[r],a=void 0;if(null!=n&&(null!=(a="key"===r&&null!=t.key?t.key.toLowerCase():"which"===r?91===n&&93===t.which?91:t.which:t[r])||!1!==n)&&a!==n)return!1}return!0}(t,e)}))};return null==r?o:o(r)}function u(e){return e=l(e),o[e]||e.toUpperCase().charCodeAt(0)}function l(e){return e=e.toLowerCase(),a[e]||e}t.TB=function(e,t){return s(e,{byKey:!0},t)}},2705:(e,t,r)=>{var n=r(5639).Symbol;e.exports=n},4239:(e,t,r)=>{var n=r(2705),a=r(9607),o=r(2333),i=n?n.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":i&&i in Object(e)?a(e):o(e)}},7561:(e,t,r)=>{var n=r(7990),a=/^\s+/;e.exports=function(e){return e?e.slice(0,n(e)+1).replace(a,""):e}},1957:(e,t,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;e.exports=n},9607:(e,t,r)=>{var n=r(2705),a=Object.prototype,o=a.hasOwnProperty,i=a.toString,s=n?n.toStringTag:void 0;e.exports=function(e){var t=o.call(e,s),r=e[s];try{e[s]=void 0;var n=!0}catch(e){}var a=i.call(e);return n&&(t?e[s]=r:delete e[s]),a}},2333:e=>{var t=Object.prototype.toString;e.exports=function(e){return t.call(e)}},5639:(e,t,r)=>{var n=r(1957),a="object"==typeof self&&self&&self.Object===Object&&self,o=n||a||Function("return this")();e.exports=o},7990:e=>{var t=/\s/;e.exports=function(e){for(var r=e.length;r--&&t.test(e.charAt(r)););return r}},3279:(e,t,r)=>{var n=r(3218),a=r(7771),o=r(4841),i=Math.max,s=Math.min;e.exports=function(e,t,r){var u,l,c,d,m,p,b=0,f=!1,g=!1,y=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function h(t){var r=u,n=l;return u=l=void 0,b=t,d=e.apply(n,r)}function v(e){var r=e-p;return void 0===p||r>=t||r<0||g&&e-b>=c}function A(){var e=a();if(v(e))return D(e);m=setTimeout(A,function(e){var r=t-(e-p);return g?s(r,c-(e-b)):r}(e))}function D(e){return m=void 0,y&&u?h(e):(u=l=void 0,d)}function x(){var e=a(),r=v(e);if(u=arguments,l=this,p=e,r){if(void 0===m)return function(e){return b=e,m=setTimeout(A,t),f?h(e):d}(p);if(g)return clearTimeout(m),m=setTimeout(A,t),h(p)}return void 0===m&&(m=setTimeout(A,t)),d}return t=o(t)||0,n(r)&&(f=!!r.leading,c=(g="maxWait"in r)?i(o(r.maxWait)||0,t):c,y="trailing"in r?!!r.trailing:y),x.cancel=function(){void 0!==m&&clearTimeout(m),b=0,u=p=l=m=void 0},x.flush=function(){return void 0===m?d:D(a())},x}},3218:e=>{e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},7005:e=>{e.exports=function(e){return null!=e&&"object"==typeof e}},3448:(e,t,r)=>{var n=r(4239),a=r(7005);e.exports=function(e){return"symbol"==typeof e||a(e)&&"[object Symbol]"==n(e)}},7771:(e,t,r)=>{var n=r(5639);e.exports=function(){return n.Date.now()}},3493:(e,t,r)=>{var n=r(3279),a=r(3218);e.exports=function(e,t,r){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return a(r)&&(o="leading"in r?!!r.leading:o,i="trailing"in r?!!r.trailing:i),n(e,t,{leading:o,maxWait:t,trailing:i})}},4841:(e,t,r)=>{var n=r(7561),a=r(3218),o=r(3448),i=/^[-+]0x[0-9a-f]+$/i,s=/^0b[01]+$/i,u=/^0o[0-7]+$/i,l=parseInt;e.exports=function(e){if("number"==typeof e)return e;if(o(e))return NaN;if(a(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=a(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=n(e);var r=s.test(e);return r||u.test(e)?l(e.slice(2),r?2:8):i.test(e)?NaN:+e}},3379:(e,t,r)=>{"use strict";var n,a=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),o=[];function i(e){for(var t=-1,r=0;r<o.length;r++)if(o[r].identifier===e){t=r;break}return t}function s(e,t){for(var r={},n=[],a=0;a<e.length;a++){var s=e[a],u=t.base?s[0]+t.base:s[0],l=r[u]||0,c="".concat(u," ").concat(l);r[u]=l+1;var d=i(c),m={css:s[1],media:s[2],sourceMap:s[3]};-1!==d?(o[d].references++,o[d].updater(m)):o.push({identifier:c,updater:f(m,t),references:1}),n.push(c)}return n}function u(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var i=a(e.insert||"head");if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}return t}var l,c=(l=[],function(e,t){return l[e]=t,l.filter(Boolean).join("\n")});function d(e,t,r,n){var a=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=c(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function m(e,t,r){var n=r.css,a=r.media,o=r.sourceMap;if(a?e.setAttribute("media",a):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var p=null,b=0;function f(e,t){var r,n,a;if(t.singleton){var o=b++;r=p||(p=u(t)),n=d.bind(null,r,o,!1),a=d.bind(null,r,o,!0)}else r=u(t),n=m.bind(null,r,t),a=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else a()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=(void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n));var r=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var a=i(r[n]);o[a].references--}for(var u=s(e,t),l=0;l<r.length;l++){var c=i(r[l]);0===o[c].references&&(o[c].updater(),o.splice(c,1))}r=u}}}},6054:e=>{e.exports='<svg viewBox="0 0 18 15" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>编组 26</title><g id="页面-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-988.000000, -264.000000)" fill="#59AC45"><g id="编组-26" transform="translate(988.000000, 264.000000)"><g id="dianshiji" fill-rule="nonzero"><path d="M16.6776316,0 C17.125,0 17.4572368,0.146471372 17.6743421,0.439414115 C17.8914474,0.732356858 17.9934211,1.03861518 17.9802632,1.35818908 L17.9802632,2.21704394 L17.9802632,4.01464714 C17.9802632,4.73368842 17.9835526,5.50266312 17.9901316,6.32157124 C17.9967105,7.14047936 18,7.90945406 18,8.62849534 L18,10.4860186 L18,11.4047936 C18,11.8308921 17.8519737,12.1471372 17.5559211,12.3535286 C17.2598684,12.5599201 16.9342105,12.6697736 16.5789474,12.6830892 L16.1052632,12.6830892 L15.2763158,12.6830892 L14.2105263,12.6830892 L13.0263158,12.6830892 L9.90789474,12.6830892 L9.90789474,14.1211718 L11.3881579,14.1211718 C11.5460526,14.1211718 11.6710526,14.1677763 11.7631579,14.2609854 C11.8552632,14.3541944 11.8947368,14.4540613 11.8815789,14.5605859 C11.8815789,14.6937417 11.8355263,14.8002663 11.7434211,14.8801598 C11.6513158,14.9600533 11.5328947,15 11.3881579,15 L6.63157895,15 C6.48684211,15 6.375,14.9533955 6.29605263,14.8601864 C6.21710526,14.7669774 6.17763158,14.6671105 6.17763158,14.5605859 C6.17763158,14.4540613 6.21052632,14.3575233 6.27631579,14.270972 C6.34210526,14.1844208 6.46052632,14.1411451 6.63157895,14.1411451 L8.13157895,14.1411451 L8.13157895,12.7030626 L5.03289474,12.7030626 L3.84868421,12.7030626 L2.76315789,12.7030626 L1.91447368,12.7030626 L1.44078947,12.7030626 C1.01973684,12.7030626 0.674342105,12.5532623 0.404605263,12.2536618 C0.134868421,11.9540613 0,11.5645806 0,11.0852197 L0,1.57789614 C0,1.09853529 0.144736842,0.715712383 0.434210526,0.42942743 C0.723684211,0.143142477 1.09210526,0 1.53947368,0 L16.6776316,0 L16.6776316,0 Z M16.7826812,1.31478038 L1.30292363,1.31478038 L1.30292363,11.3784594 L16.7826812,11.3784594 L16.7826812,1.31478038 Z" id="形状"></path></g><text id="01" font-family="Arial-Black, Arial Black" font-size="7.5" font-weight="700"><tspan x="4" y="9">01</tspan></text></g></g></g></svg>'},3050:e=>{e.exports='<svg viewBox="0 0 22 21" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>对象#7A90FF</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-56.000000, -434.000000)"><g id="对象#7A90FF" transform="translate(57.000000, 435.000000)"><path d="M0,7.60798406 L0,7.60798406 L0,2 C0,0.8954305 0.8954305,0 2,0 L7.54938182,0 L7.54938182,0" id="路径" stroke="#7A90FF" stroke-width="1.5"></path><path d="M12,7.60798406 L12,7.60798406 L12,2 C12,0.8954305 12.8954305,0 14,0 L19.5493818,0 L19.5493818,0" id="路径" stroke="#7A90FF" stroke-width="1.5" transform="translate(15.774691, 3.803992) scale(-1, 1) translate(-15.774691, -3.803992) "></path><path d="M0,18.6079841 L0,18.6079841 L0,13 C0,11.8954305 0.8954305,11 2,11 L7.54938182,11 L7.54938182,11" id="路径" stroke="#7A90FF" stroke-width="1.5" transform="translate(3.774691, 14.803992) scale(1, -1) translate(-3.774691, -14.803992) "></path><path d="M12,18.6079841 L12,18.6079841 L12,13 C12,11.8954305 12.8954305,11 14,11 L19.5493818,11 L19.5493818,11" id="路径" stroke="#7A90FF" stroke-width="1.5" transform="translate(15.774691, 14.803992) scale(-1, -1) translate(-15.774691, -14.803992) "></path><rect id="矩形" fill="#7A90FF" x="7" y="6" width="6" height="6" rx="1"></rect></g></g></g></svg>'},7115:e=>{e.exports='<svg viewBox="0 0 19 21" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>工作表#F89F7F</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-488.000000, -435.000000)" stroke="#F89F7F" stroke-width="1.5"><g id="工作表#F89F7F" transform="translate(489.000000, 436.000000)"><path d="M10.1516777,19 L3.43017143,19 C2.32560193,19 1.43017143,18.1045695 1.43017143,17 L1.43017143,2 C1.43017143,0.8954305 2.32560193,0 3.43017143,0 L14.4301714,0 C15.5347409,0 16.4301714,0.8954305 16.4301714,2 L16.4301714,12.3445309 L10.1516777,19 Z" id="路径"></path><path d="M15.9301714,12.5 L10.8668551,12.6260503 C10.3244336,12.6395538 9.8917422,13.083151 9.8917422,13.6257406 L9.8917422,19 L9.8917422,19" id="路径-63"></path><line x1="0" y1="9.15032555" x2="3" y2="9.15032555" id="路径-64" stroke-linecap="round"></line><line x1="0" y1="4.15032555" x2="3" y2="4.15032555" id="路径-64" stroke-linecap="round"></line><line x1="0" y1="14.1503255" x2="3" y2="14.1503255" id="路径-64" stroke-linecap="round"></line></g></g></g></svg>'},3567:e=>{e.exports='<svg viewBox="0 0 20 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>工作表组#F27E54</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-528.000000, -433.000000)" stroke="#F27E54" stroke-width="1.5"><g id="工作表组#F27E54" transform="translate(529.000000, 434.000000)"><g id="工作表备份" transform="translate(0.000000, 3.000000)"><path d="M8.55863874,17 L2.73333333,17 C1.77603977,17 1,16.1988253 1,15.2105263 L1,1.78947368 C1,0.801174658 1.77603977,0 2.73333333,0 L12.2666667,0 C13.2239602,0 14,0.801174658 14,1.78947368 L14,11.0451066 L8.55863874,17 Z" id="路径"></path><path d="M14,11 L9.97225827,11.1117795 C9.43098626,11.1268011 9,11.5699143 9,12.1113947 L9,17 L9,17" id="路径-63"></path><line x1="0" y1="8" x2="3" y2="8" id="路径-64" stroke-linecap="round"></line><line x1="0" y1="3.5" x2="3" y2="3.5" id="路径-64" stroke-linecap="round"></line><line x1="0" y1="12.5" x2="3" y2="12.5" id="路径-64" stroke-linecap="round"></line></g><path d="M9,3 L9,1 C9,0.44771525 9.44771525,1.01453063e-16 10,0 L16.8325077,0 C17.3847924,-5.91980459e-16 17.8325077,0.44771525 17.8325077,1 L17.8325077,13.0528721 C17.8325077,13.2978863 17.7425558,13.5343743 17.579724,13.7174529 L13.7145786,18.0631992 C13.5248165,18.2765568 13.2528988,18.3986183 12.9673623,18.3986183 L10.3941372,18.3986183 L10.3941372,18.3986183" id="路径-227"></path></g></g></g></svg>'},3376:e=>{e.exports='<svg viewBox="0 0 18 21" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>工作表记录#4D2EDC</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-740.000000, -435.000000)" stroke="#4D2EDC"><g id="工作表记录#4D2EDC" transform="translate(741.000000, 436.000000)"><path d="M8.3754444,19 L2,19 C0.8954305,19 0,18.1045695 0,17 L0,6.2005561 C0,5.80125749 0.119522025,5.41109935 0.343177212,5.08031583 L3.18333134,0.879759736 C3.55529729,0.329626266 4.17607167,0 4.84015412,0 L14,0 C15.1045695,0 16,0.8954305 16,2 L16,11.6299399 L16,11.6299399" id="路径" stroke-width="1.5" stroke-linecap="round"></path><line x1="4.71218719" y1="5.02114034" x2="11.6784612" y2="5.02114034" id="路径-232" stroke-width="1.5" stroke-linecap="round"></line><line x1="4.71218719" y1="9.02114034" x2="11.6784612" y2="9.02114034" id="路径-232" stroke-width="1.5" stroke-linecap="round"></line><line x1="4.71218719" y1="13.0211403" x2="8.42657066" y2="13.0211403" id="路径-232" stroke-width="1.5" stroke-linecap="round"></line><circle id="椭圆形" stroke-width="1.5" cx="13" cy="16" r="3"></circle><polyline id="路径-233" points="13 14.3701603 13 16.1196142 14.4677047 16.1196142"></polyline></g></g></g></svg>'},6952:e=>{e.exports='<svg viewBox="0 0 21 14" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>布尔#B0E967</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-234.000000, -438.000000)" stroke="#B0E967" stroke-width="1.5"><g id="布尔#B0E967" transform="translate(235.000000, 439.000000)"><path d="M10,1.1339668 C8.96213512,0.420491453 7.68694607,0 6.30849637,0 C2.82441003,0 0,2.6862915 0,6 C0,9.3137085 2.82441003,12 6.30849637,12 L6.30849637,12 C7.64462183,12 8.88373036,11.6049339 9.90373213,10.930921" id="路径"></path><circle id="椭圆形" cx="13" cy="6" r="6"></circle></g></g></g></svg>'},7910:e=>{e.exports='<svg viewBox="0 0 22 15" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>字符串#FFC364</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-188.000000, -436.000000)"><g id="字符串#FFC364" transform="translate(189.000000, 437.000000)"><rect id="矩形" stroke="#478FF2" stroke-width="1.5" x="0" y="0" width="20" height="13" rx="1"></rect><text id="123" font-family="PingFangSC-Semibold, PingFang SC" font-size="8" font-weight="900" fill="#478FF2"><tspan x="3" y="9">123</tspan></text></g></g></g></svg>'},8243:e=>{e.exports='<svg viewBox="0 0 22 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>数据点#EDABFF</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-655.000000, -434.000000)" stroke="#EDABFF" stroke-width="1.5"><g id="数据点#EDABFF" transform="translate(656.000000, 435.000000)"><line x1="14.8630372" y1="5" x2="16.7700112" y2="9.14726601" id="路径-228"></line><line x1="12.5188198" y1="5" x2="8.44454015" y2="13.2701009" id="路径-229"></line><line x1="3.63670178" y1="9" x2="6.87973749" y2="13.5116355" id="路径-230"></line><circle id="椭圆形" cx="13.5" cy="2.5" r="2.5"></circle><circle id="椭圆形" cx="17.5" cy="11.5" r="2.5"></circle><circle id="椭圆形" cx="7.5" cy="15.5" r="2.5"></circle><circle id="椭圆形" cx="2.5" cy="6.5" r="2.5"></circle></g></g></g></svg>'},2259:e=>{e.exports='<svg viewBox="0 0 22 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>数组#FFA19B</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-104.000000, -434.000000)" stroke="#FFA19B" stroke-width="1.5"><g id="数组#FFA19B" transform="translate(104.500000, 435.000000)"><path d="M20.5,4 C20.5,1.790861 16.0228475,0 10.5,0 C4.9771525,0 0.5,1.790861 0.5,4" id="路径"></path><path d="M20.5,8 C20.5,5.790861 16.0228475,4 10.5,4 C4.9771525,4 0.5,5.790861 0.5,8" id="路径" transform="translate(10.500000, 6.000000) rotate(-180.000000) translate(-10.500000, -6.000000) "></path><path d="M20.5,12 C20.5,9.790861 16.0228475,8 10.5,8 C4.9771525,8 0.5,9.790861 0.5,12" id="路径" transform="translate(10.500000, 10.000000) rotate(-180.000000) translate(-10.500000, -10.000000) "></path><path d="M20.5,16 C20.5,13.790861 16.0228475,12 10.5,12 C4.9771525,12 0.5,13.790861 0.5,16" id="路径" transform="translate(10.500000, 14.000000) rotate(-180.000000) translate(-10.500000, -14.000000) "></path><path d="M20.5,20 C20.5,17.790861 16.0228475,16 10.5,16 C4.9771525,16 0.5,17.790861 0.5,20" id="路径" transform="translate(10.500000, 18.000000) rotate(-180.000000) translate(-10.500000, -18.000000) "></path><line x1="0.5" y1="3.80399203" x2="0.5" y2="16" id="路径-226"></line><line x1="20.5" y1="3.80399203" x2="20.5" y2="16" id="路径-226"></line></g></g></g></svg>'},5016:e=>{e.exports='<svg viewBox="0 0 23 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>字符串#FFAE70</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-147.000000, -434.000000)"><g id="字符串#FFAE70" transform="translate(148.000000, 434.591316)"><path d="M20,9.96596611 L20,9.96596611 L20,18.4086838 C20,19.5132533 19.1045695,20.4086838 18,20.4086838 L2,20.4086838 C0.8954305,20.4086838 0,19.5132533 0,18.4086838 L0,2.40868383 C0,1.30411433 0.8954305,0.408683829 2,0.408683829 L11.6832059,0.408683829 L11.6832059,0.408683829" id="路径" stroke="#FFAE70" stroke-width="1.5"></path><text id="Str" font-family="PingFangSC-Semibold, PingFang SC" font-size="7" font-weight="500" fill="#FFAE70"><tspan x="3" y="8.40868383">Str</tspan></text><path d="M20.6630178,0 L18.1764904,3.05422245 M16.532883,5.07307911 L11.5,11.2550113" id="形状" stroke="#FFAE70" stroke-width="1.5"></path></g></g></g></svg>'},5723:e=>{e.exports='<svg viewBox="0 0 20 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>时间#79E2C2</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-277.000000, -435.000000)" stroke="#79E2C2" stroke-width="1.5"><g id="时间#79E2C2" transform="translate(278.000000, 436.000000)"><circle id="椭圆形" cx="9" cy="9" r="9"></circle><polyline id="路径-191" points="3 9 9.97844322 9 10 3"></polyline></g></g></g></svg>'},13:e=>{e.exports='<svg viewBox="0 0 20 19" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>模型#AD88F6</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-403.000000, -437.000000)" stroke="#AD88F6"><g id="模型#AD88F6" transform="translate(403.000000, 437.000000)"><path d="M18,0.75 C18.345178,0.75 18.657678,0.889911016 18.8838835,1.11611652 C19.110089,1.34232203 19.25,1.65482203 19.25,2 L19.25,2 L19.25,11 C19.25,11.345178 19.110089,11.657678 18.8838835,11.8838835 C18.657678,12.110089 18.345178,12.25 18,12.25 L18,12.25 L2,12.25 C1.65482203,12.25 1.34232203,12.110089 1.11611652,11.8838835 C0.889911016,11.657678 0.75,11.345178 0.75,11 L0.75,11 L0.75,2 C0.75,1.65482203 0.889911016,1.34232203 1.11611652,1.11611652 C1.34232203,0.889911016 1.65482203,0.75 2,0.75 L2,0.75 Z" id="Rectangle-17" stroke-width="1.5"></path><polyline id="Path-10" stroke-width="1.5" points="8 13 8 16.5349839 8 18"></polyline><polyline id="Path-10" stroke-width="1.5" points="12 13 12 16.5349839 12 18"></polyline><line x1="5" y1="18" x2="15" y2="18" id="Path-19" stroke-width="1.5" stroke-linecap="round"></line><line x1="7" y1="9" x2="13" y2="9" id="Path-26"></line><rect id="Rectangle-18" x="3.5" y="7.5" width="3" height="3" rx="1"></rect><line x1="10" y1="9" x2="10" y2="6" id="Path-26"></line><rect id="Rectangle-18" x="8.5" y="2.5" width="3" height="3" rx="1"></rect><rect id="Rectangle-18" x="13.5" y="7.5" width="3" height="3" rx="1"></rect></g></g></g></svg>'},347:e=>{e.exports='<svg viewBox="0 0 20 19" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>模型组#8960DC</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-445.000000, -437.000000)" stroke="#8960DC"><g id="模型组#8960DC" transform="translate(445.000000, 437.000000)"><path d="M18,0.75 C18.345178,0.75 18.657678,0.889911016 18.8838835,1.11611652 C19.110089,1.34232203 19.25,1.65482203 19.25,2 L19.25,2 L19.25,11 C19.25,11.345178 19.110089,11.657678 18.8838835,11.8838835 C18.657678,12.110089 18.345178,12.25 18,12.25 L18,12.25 L2,12.25 C1.65482203,12.25 1.34232203,12.110089 1.11611652,11.8838835 C0.889911016,11.657678 0.75,11.345178 0.75,11 L0.75,11 L0.75,2 C0.75,1.65482203 0.889911016,1.34232203 1.11611652,1.11611652 C1.34232203,0.889911016 1.65482203,0.75 2,0.75 L2,0.75 Z" id="Rectangle-17" stroke-width="1.5"></path><polyline id="Path-10" stroke-width="1.5" points="8 13 8 16.5349839 8 18"></polyline><polyline id="Path-10" stroke-width="1.5" points="12 13 12 16.5349839 12 18"></polyline><line x1="5" y1="18" x2="15" y2="18" id="Path-19" stroke-width="1.5" stroke-linecap="round"></line><path d="M7,9 L8.54756795,9 M11.6687906,9 L13,9" id="形状"></path><rect id="Rectangle-18" x="3.5" y="7.5" width="3" height="3" rx="1"></rect><line x1="10" y1="7.62025436" x2="10" y2="6" id="Path-26"></line><rect id="Rectangle-18" x="8.5" y="2.5" width="3" height="3" rx="1"></rect><rect id="Rectangle-18备份" x="8.5" y="7.5" width="3" height="3" rx="1"></rect><rect id="Rectangle-18" x="13.5" y="7.5" width="3" height="3" rx="1"></rect></g></g></g></svg>'},4257:e=>{e.exports='<svg viewBox="0 0 22 20" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>用户类型#666FA6</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-695.000000, -435.000000)" stroke="#666FA6" stroke-width="1.5"><g id="用户类型#666FA6" transform="translate(696.000000, 436.250000)"><circle id="椭圆形" cx="10" cy="3.64912281" r="3.64912281"></circle><path d="M15.7946839,9.72627402 C14.159901,8.56197303 12.15992,7.87719298 10,7.87719298 C4.4771525,7.87719298 0,12.3543455 0,17.877193" id="路径" stroke-linecap="round"></path><line x1="12.3008142" y1="12.3303032" x2="20" y2="12.3303032" id="路径-231" stroke-linecap="round"></line><line x1="10.4300194" y1="14.7617972" x2="20" y2="14.7617972" id="路径-231" stroke-linecap="round"></line><line x1="8.34196321" y1="17.3303032" x2="20" y2="17.3303032" id="路径-231" stroke-linecap="round"></line></g></g></g></svg>'},1594:e=>{e.exports='<svg viewBox="0 0 19 19" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>资产#73D8E6</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-319.000000, -436.000000)" stroke="#73D8E6" stroke-width="1.5"><g id="资产#73D8E6" transform="translate(319.000000, 436.000000)"><rect id="Rectangle-2" x="0.75" y="0.75" width="7.5" height="7.5" rx="2"></rect><rect id="Rectangle-2" x="10.75" y="0.75" width="7.5" height="7.5" rx="2"></rect><rect id="Rectangle-2" x="10.75" y="10.75" width="7.5" height="7.5" rx="2"></rect><rect id="Rectangle-2" x="0.75" y="10.75" width="7.5" height="7.5" rx="2"></rect></g></g></g></svg>'},8627:e=>{e.exports='<svg viewBox="0 0 19 19" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><title>资产组#3CB9D7</title><g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd"><g id="图标" transform="translate(-361.000000, -436.000000)" stroke="#3CB9D7" stroke-width="1.5"><g id="资产组#3CB9D7" transform="translate(361.000000, 436.000000)"><rect id="Rectangle-2" x="0.75" y="0.75" width="7.5" height="7.5" rx="2"></rect><rect id="Rectangle-2" x="10.75" y="0.75" width="7.5" height="7.5" rx="2"></rect><rect id="Rectangle-2" x="12.75" y="2.75" width="3.5" height="3.5" rx="1"></rect><rect id="Rectangle-2备份" x="2.75" y="12.75" width="3.5" height="3.5" rx="1"></rect><rect id="Rectangle-2" x="10.75" y="10.75" width="7.5" height="7.5" rx="2"></rect><rect id="Rectangle-2" x="0.75" y="10.75" width="7.5" height="7.5" rx="2"></rect></g></g></g></svg>'},8074:(e,t,r)=>{var n={"./字节数组.svg":6054,"./对象.svg":3050,"./工作表.svg":7115,"./工作表组#F27E54.svg":3567,"./工作表记录.svg":3376,"./布尔.svg":6952,"./数字.svg":7910,"./数据点.svg":8243,"./数组.svg":2259,"./文本.svg":5016,"./日期.svg":5723,"./模型.svg":13,"./模型组#8960DC.svg":347,"./用户.svg":4257,"./资产.svg":1594,"./资产组#3CB9D7.svg":8627};function a(e){var t=o(e);return r(t)}function o(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=o,e.exports=a,a.id=8074},7363:e=>{"use strict";e.exports=React},1533:e=>{"use strict";e.exports=ReactDOM},979:e=>{"use strict";e.exports=ReactDnD},6029:e=>{"use strict";e.exports=ReactDnDHTML5Backend},2611:e=>{"use strict";e.exports=_},1821:e=>{"use strict";e.exports=antd},6640:e=>{"use strict";e.exports=icons},3078:e=>{"use strict";e.exports=xadmin},3204:e=>{"use strict";e.exports=xadminForm},5907:e=>{"use strict";e.exports=xadminUi},7061:(e,t,r)=>{var n=r(8698).default;function a(){"use strict";e.exports=a=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},r=Object.prototype,o=r.hasOwnProperty,i=Object.defineProperty||function(e,t,r){e[t]=r.value},s="function"==typeof Symbol?Symbol:{},u=s.iterator||"@@iterator",l=s.asyncIterator||"@@asyncIterator",c=s.toStringTag||"@@toStringTag";function d(e,t,r){return Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{d({},"")}catch(e){d=function(e,t,r){return e[t]=r}}function m(e,t,r,n){var a=t&&t.prototype instanceof f?t:f,o=Object.create(a.prototype),s=new F(n||[]);return i(o,"_invoke",{value:E(e,r,s)}),o}function p(e,t,r){try{return{type:"normal",arg:e.call(t,r)}}catch(e){return{type:"throw",arg:e}}}t.wrap=m;var b={};function f(){}function g(){}function y(){}var h={};d(h,u,(function(){return this}));var v=Object.getPrototypeOf,A=v&&v(v(O([])));A&&A!==r&&o.call(A,u)&&(h=A);var D=y.prototype=f.prototype=Object.create(h);function x(e){["next","throw","return"].forEach((function(t){d(e,t,(function(e){return this._invoke(t,e)}))}))}function C(e,t){function r(a,i,s,u){var l=p(e[a],e,i);if("throw"!==l.type){var c=l.arg,d=c.value;return d&&"object"==n(d)&&o.call(d,"__await")?t.resolve(d.__await).then((function(e){r("next",e,s,u)}),(function(e){r("throw",e,s,u)})):t.resolve(d).then((function(e){c.value=e,s(c)}),(function(e){return r("throw",e,s,u)}))}u(l.arg)}var a;i(this,"_invoke",{value:function(e,n){function o(){return new t((function(t,a){r(e,n,t,a)}))}return a=a?a.then(o,o):o()}})}function E(e,t,r){var n="suspendedStart";return function(a,o){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===a)throw o;return{value:void 0,done:!0}}for(r.method=a,r.arg=o;;){var i=r.delegate;if(i){var s=B(i,r);if(s){if(s===b)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var u=p(e,t,r);if("normal"===u.type){if(n=r.done?"completed":"suspendedYield",u.arg===b)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n="completed",r.method="throw",r.arg=u.arg)}}}function B(e,t){var r=t.method,n=e.iterator[r];if(void 0===n)return t.delegate=null,"throw"===r&&e.iterator.return&&(t.method="return",t.arg=void 0,B(e,t),"throw"===t.method)||"return"!==r&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+r+"' method")),b;var a=p(n,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,b;var o=a.arg;return o?o.done?(t[e.resultName]=o.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,b):o:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,b)}function _(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function w(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function F(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(_,this),this.reset(!0)}function O(e){if(e){var t=e[u];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,n=function t(){for(;++r<e.length;)if(o.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return n.next=n}}return{next:S}}function S(){return{value:void 0,done:!0}}return g.prototype=y,i(D,"constructor",{value:y,configurable:!0}),i(y,"constructor",{value:g,configurable:!0}),g.displayName=d(y,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===g||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,d(e,c,"GeneratorFunction")),e.prototype=Object.create(D),e},t.awrap=function(e){return{__await:e}},x(C.prototype),d(C.prototype,l,(function(){return this})),t.AsyncIterator=C,t.async=function(e,r,n,a,o){void 0===o&&(o=Promise);var i=new C(m(e,r,n,a),o);return t.isGeneratorFunction(r)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(D),d(D,c,"Generator"),d(D,u,(function(){return this})),d(D,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=Object(e),r=[];for(var n in t)r.push(n);return r.reverse(),function e(){for(;r.length;){var n=r.pop();if(n in t)return e.value=n,e.done=!1,e}return e.done=!0,e}},t.values=O,F.prototype={constructor:F,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(r,n){return i.type="throw",i.arg=e,t.next=r,n&&(t.method="next",t.arg=void 0),!!n}for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var s=o.call(a,"catchLoc"),u=o.call(a,"finallyLoc");if(s&&u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&o.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var a=n;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,b):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),b},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.finallyLoc===e)return this.complete(r.completion,r.afterLoc),w(r),b}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var r=this.tryEntries[t];if(r.tryLoc===e){var n=r.completion;if("throw"===n.type){var a=n.arg;w(r)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,r){return this.delegate={iterator:O(e),resultName:t,nextLoc:r},"next"===this.method&&(this.arg=void 0),b}},t}e.exports=a,e.exports.__esModule=!0,e.exports.default=e.exports},8698:e=>{function t(r){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(r)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},4687:(e,t,r)=>{var n=r(7061)();e.exports=n;try{regeneratorRuntime=n}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},907:(e,t,r)=>{"use strict";function n(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.d(t,{Z:()=>n})},5861:(e,t,r)=>{"use strict";function n(e,t,r,n,a,o,i){try{var s=e[o](i),u=s.value}catch(e){return void r(e)}s.done?t(u):Promise.resolve(u).then(n,a)}function a(e){return function(){var t=this,r=arguments;return new Promise((function(a,o){var i=e.apply(t,r);function s(e){n(i,a,o,s,u,"next",e)}function u(e){n(i,a,o,s,u,"throw",e)}s(void 0)}))}}r.d(t,{Z:()=>a})},4942:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(9142);function a(e,t,r){return(t=(0,n.Z)(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}},7462:(e,t,r)=>{"use strict";function n(){return n=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},n.apply(this,arguments)}r.d(t,{Z:()=>n})},885:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(181);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var n,a,o,i,s=[],u=!0,l=!1;try{if(o=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=o.call(r)).done)&&(s.push(n.value),s.length!==t);u=!0);}catch(e){l=!0,a=e}finally{try{if(!u&&null!=r.return&&(i=r.return(),Object(i)!==i))return}finally{if(l)throw a}}return s}}(e,t)||(0,n.Z)(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},9142:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(1002);function a(e){var t=function(e,t){if("object"!==(0,n.Z)(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var a=r.call(e,"string");if("object"!==(0,n.Z)(a))return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===(0,n.Z)(t)?t:String(t)}},1002:(e,t,r)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}r.d(t,{Z:()=>n})},181:(e,t,r)=>{"use strict";r.d(t,{Z:()=>a});var n=r(907);function a(e,t){if(e){if("string"==typeof e)return(0,n.Z)(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?(0,n.Z)(e,t):void 0}}}},__webpack_module_cache__={},leafPrototypes,getProto,inProgress,dataWebpackPrefix;function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var r=__webpack_module_cache__[e]={id:e,loaded:!1,exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.loaded=!0,r.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return __webpack_require__.d(t,{a:t}),t},getProto=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,__webpack_require__.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var r=Object.create(null);__webpack_require__.r(r);var n={};leafPrototypes=leafPrototypes||[null,getProto({}),getProto([]),getProto(getProto)];for(var a=2&t&&e;"object"==typeof a&&!~leafPrototypes.indexOf(a);a=getProto(a))Object.getOwnPropertyNames(a).forEach((t=>n[t]=()=>e[t]));return n.default=()=>e,__webpack_require__.d(r,n),r},__webpack_require__.d=(e,t)=>{for(var r in t)__webpack_require__.o(t,r)&&!__webpack_require__.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},__webpack_require__.f={},__webpack_require__.e=e=>Promise.all(Object.keys(__webpack_require__.f).reduce(((t,r)=>(__webpack_require__.f[r](e,t),t)),[])),__webpack_require__.u=e=>"chunks/"+e+"."+{249:"fd2693cc4b8f0b99c180",525:"05396e4481634c3f56bf",848:"b63f06c9c4755aaff763",854:"814282aa9000d64f4bef",911:"9bb0e062d9e134eae6a2",942:"69d887d971221cd5cecf",996:"94fab15fcc7debda7751",1065:"9ef2909c11e432b29d5f",1072:"c4350041efa34b245765",1134:"59cf241b96ba49e3fad8",1147:"0099f3101224db0d6197",1156:"d2388d72444aef1a1e07",1259:"b09753e612a3c81538e2",1448:"e3bc5efda99e0641bfff",1471:"39c6ee6f340e64f8b7b6",1590:"992957e04a175306dc4d",1960:"91500f8f7349954a4699",1961:"2bbd7fc2ab607c34efb5",2060:"f75cc52c79afee6147c5",2075:"64ecb4a40fed810d24fa",2140:"020a4e931f8b6753f04a",2571:"5265186fc8be108b937c",2621:"8217ed5b839bea2a7481",2625:"ef7bbecbb0f800dc5bee",2716:"51fb861646473b8d4b1e",2798:"b0267c40b4c433c6e20d",2892:"3e41260929ee4be0235a",2911:"1b2f326c8292658c99a1",2954:"db69802f973dd1f36fdf",3036:"e44f79a1019df147ef32",3585:"275d107d2318e07776d6",3919:"7c1bae778849fdbcd9de",4129:"d2d43d2f35d78e817fa6",4368:"6b651d0770d08420e834",4386:"a9e69af5b658880bfbc3",4407:"47f193f4f01aae43346c",4756:"81e7e2e12602c393363e",4902:"ca9ef6d609d3fbfe9436",5062:"0fd07f0260a8ab2c86bc",5466:"2a349b25fb8bc8a052b4",5593:"7c477a85aec5e46c7030",5703:"bca380115eaeb9eb3e43",5849:"e07a0e1fe78a75a32bf5",6082:"f934727572e80c22db8d",6241:"3b0e98cc622788b995ad",6331:"364bdde172a4452a459a",6390:"ce533ce2962c524dae78",6424:"96f584f3aa7c18c19623",6449:"1fc0cf54985a7075500c",6489:"8f3b6cce4ebe831a1b78",6586:"1b9fea351272ad4356a0",6587:"ff68e6dc4cc6e541b894",6717:"f235e73dd4f3f6781204",6984:"fd4fe4ff0d2ebaa4d83b",7043:"4b358a61f2e31d990966",7287:"8f747e3a766fe6c68236",7562:"7aa7839586a301a9705b",7637:"63e07fe7487d9e475652",7778:"abb54fbb70fa91786659",7835:"8dac724900d8461a0cc2",8070:"bb80d1d2f181d80cce56",8084:"cf6b58d615c0c4423c2c",8180:"9cbba32d85395e700a72",8253:"e77dca7562d45e2cde8f",8339:"dd4ae2afd53a416bc8a3",8424:"473f6793a5bcb1bdf92e",8670:"5da6b8332c4b5e27f8f7",8715:"b7eacb0fdbfc2ffc3ecc",8719:"1df3ca3454dccbfa026f",8825:"6b3bf25ce3b397f34c41",8946:"ba5b3e8cea649e9a24fc",9398:"4bbff942ae73fd7b9899",9537:"a5dd39daccc8f87f21c9",9684:"142480118393fad93680",9907:"aaa63e3de3e9d3272e77"}[e]+".js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),inProgress={},dataWebpackPrefix="@airiot/editor:",__webpack_require__.l=(e,t,r,n)=>{if(inProgress[e])inProgress[e].push(t);else{var a,o;if(void 0!==r)for(var i=document.getElementsByTagName("script"),s=0;s<i.length;s++){var u=i[s];if(u.getAttribute("src")==e||u.getAttribute("data-webpack")==dataWebpackPrefix+r){a=u;break}}a||(o=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,__webpack_require__.nc&&a.setAttribute("nonce",__webpack_require__.nc),a.setAttribute("data-webpack",dataWebpackPrefix+r),a.src=e),inProgress[e]=[t];var l=(t,r)=>{a.onerror=a.onload=null,clearTimeout(c);var n=inProgress[e];if(delete inProgress[e],a.parentNode&&a.parentNode.removeChild(a),n&&n.forEach((e=>e(r))),t)return t(r)},c=setTimeout(l.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=l.bind(null,a.onerror),a.onload=l.bind(null,a.onload),o&&document.head.appendChild(a)}},__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},__webpack_require__.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;__webpack_require__.g.importScripts&&(e=__webpack_require__.g.location+"");var t=__webpack_require__.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");if(r.length)for(var n=r.length-1;n>-1&&!e;)e=r[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=e})(),(()=>{var e={538:0};__webpack_require__.f.j=(t,r)=>{var n=__webpack_require__.o(e,t)?e[t]:void 0;if(0!==n)if(n)r.push(n[2]);else{var a=new Promise(((r,a)=>n=e[t]=[r,a]));r.push(n[2]=a);var o=__webpack_require__.p+__webpack_require__.u(t),i=new Error;__webpack_require__.l(o,(r=>{if(__webpack_require__.o(e,t)&&(0!==(n=e[t])&&(e[t]=void 0),n)){var a=r&&("load"===r.type?"missing":r.type),o=r&&r.target&&r.target.src;i.message="Loading chunk "+t+" failed.\n("+a+": "+o+")",i.name="ChunkLoadError",i.type=a,i.request=o,n[1](i)}}),"chunk-"+t,t)}};var t=(t,r)=>{var n,a,[o,i,s]=r,u=0;if(o.some((t=>0!==e[t]))){for(n in i)__webpack_require__.o(i,n)&&(__webpack_require__.m[n]=i[n]);s&&s(__webpack_require__)}for(t&&t(r);u<o.length;u++)a=o[u],__webpack_require__.o(e,a)&&e[a]&&e[a][0](),e[a]=0},r=this.webpackChunk_airiot_editor=this.webpackChunk_airiot_editor||[];r.forEach(t.bind(null,0)),r.push=t.bind(null,r.push.bind(r))})(),__webpack_require__.nc=void 0;var __webpack_exports__={};(()=>{"use strict";var e=__webpack_require__(4942),t=__webpack_require__(3078),r=__webpack_require__.n(t),n=__webpack_require__(5907),a=__webpack_require__(885),o=__webpack_require__(7363),i=__webpack_require__.n(o),s=(__webpack_require__(2611),__webpack_require__(5546)),u=function(){return{x:{title:_r("X轴"),type:"number"},y:{title:_r("Y轴"),type:"number"},z:{title:_r("Z轴"),type:"number"}}};const l={type:"object",properties:{sceneConfig:{title:_r("场景"),type:"object",fieldType:"fieldset_card",properties:{background:{title:_r("背景颜色"),type:"string",fieldType:"color"},backgroundImage:{title:_r("背景贴图"),type:"object",properties:{imageType:{title:_r("贴图方式"),type:"string",enum:["panorama","cube"],enum_title:["全景贴图","立方体贴图"],field:{effect:function(e,t){var r=e.value;setTimeout((function(){t.setFieldData("sceneConfig.backgroundImage.panorama",{display:"panorama"===r}),t.setFieldData("sceneConfig.backgroundImage.posX",{display:"cube"===r}),t.setFieldData("sceneConfig.backgroundImage.negX",{display:"cube"===r}),t.setFieldData("sceneConfig.backgroundImage.posY",{display:"cube"===r}),t.setFieldData("sceneConfig.backgroundImage.negY",{display:"cube"===r}),t.setFieldData("sceneConfig.backgroundImage.posZ",{display:"cube"===r}),t.setFieldData("sceneConfig.backgroundImage.negZ",{display:"cube"===r})}))}}},panorama:{title:_r("全景图"),type:"string",fieldType:"image"},posX:{title:"X轴正向(posx)",type:"string",fieldType:"image"},negX:{title:"X轴负向(negx)",type:"string",fieldType:"image"},posY:{title:"Y轴正向(posy)",type:"string",fieldType:"image"},negY:{title:"Y轴负向(negy)",type:"string",fieldType:"image"},posZ:{title:"Z轴正向(posz)",type:"string",fieldType:"image"},negZ:{title:"Z轴负向(negz)",type:"string",fieldType:"image"}}},fog:{title:"雾",type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},color:{title:_r("颜色"),type:"string",fieldType:"color"},near:{title:_r("最小距离"),type:"number"},far:{title:_r("最大距离"),type:"number"}}},ground:{title:_r("地平面"),type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},materialType:{title:_r("材质"),type:"string",enum:["MeshBasicMaterial","MeshLambertMaterial","MeshNormalMaterial","MeshPhongMaterial","MeshPhysicalMaterial","MeshToonMaterial"],enum_title:["基础","非光泽","变化","高光","物理","卡通"]},width:{title:_r("宽度"),type:"number"},height:{title:_r("高度"),type:"number"},color:{title:_r("颜色"),type:"string",fieldType:"color"}}}}},cameraConfig:{title:_r("相机"),type:"object",fieldType:"fieldset_card",properties:{fov:{title:_r("视野角度"),type:"number"},near:{title:_r("近端面距离"),type:"number"},far:{title:_r("远端面距离"),type:"number"},cameraPositon:{title:_r("初始位置"),type:"object",properties:u()},cameraLookAt:{title:_r("初始方向"),type:"object",properties:u()},controlType:{title:_r("控制器类别"),type:"string",enum:["orbit","pointerLock","fly"],enum_title:["轨道","行走","飞行"]},orbitConfig:{title:_r("轨道控制器"),type:"object",properties:{enabled:{title:_r("启用"),type:"boolean",description:"控制相机移动轨道"},enableRotate:{title:_r("旋转"),type:"boolean",description:"按住鼠标左键进行旋转"},rotateSpeed:{title:_r("旋转速度"),type:"number",minimum:0},maxAzimuthAngle:{title:_r("水平角度上限"),type:"number",description:"取值范围-π到π，默认为无限制",minimum:-Math.PI,maximum:Math.PI},minAzimuthAngle:{title:_r("水平角度下限"),type:"number",description:"取值范围-π到π，默认为无限制",minimum:-Math.PI,maximum:Math.PI},maxPolarAngle:{title:_r("垂直角度上限"),type:"number",description:"取值范围0到π，默认值为π",minimum:0,maximum:Math.PI},minPolarAngle:{title:_r("垂直角度下限"),type:"number",description:"取值范围0到π，默认值为0",minimum:0,maximum:Math.PI},enablePan:{title:_r("平移"),type:"boolean",description:"按住鼠标右键进行平移"},panSpeed:{title:_r("平移速度"),type:"number",minimum:0},enableZoom:{title:_r("缩放"),type:"boolean",description:"利用鼠标滚轮进行缩放"},zoomSpeed:{title:_r("缩放速度"),type:"number",minimum:0},maxDistance:{title:_r("缩放距离上限"),type:"number",minimum:0},minDistance:{title:_r("缩放距离下限"),type:"number",minimum:0},enableDamping:{title:_r("阻尼"),type:"boolean",description:"给控制器带来重量感"},dampingFactor:{title:_r("阻尼因子"),type:"number",description:"数值越大，阻力越大，取值范围0~1",field:{validate:function(e){return e<0||e>1?"超出取值范围":""}}},autoRotate:{title:_r("自动旋转"),type:"boolean"},autoRotateSpeed:{title:_r("自动旋转速度"),type:"number",minimum:0}}},pointerLockConfig:{title:_r("行走控制器"),type:"object",properties:{enabled:{title:_r("启用"),type:"boolean"},eyeHeight:{title:_r("视线高度"),type:"number"},moveSpeed:{title:_r("移动速度"),type:"number"},fallSpeed:{title:_r("下落速度"),type:"number"},jumpHeight:{title:_r("跳跃高度"),type:"number"}}},flyConfig:{title:_r("飞行控制器"),type:"object",properties:{enabled:{title:_r("启用"),type:"boolean"},autoForward:{title:_r("自动前进"),type:"boolean"},movementSpeed:{title:_r("移动速度"),type:"number"},rollSpeed:{title:_r("旋转速度"),type:"number"}}}}},snapshotConfig:{title:_r("快照"),type:"object",fieldType:"fieldset_card",properties:{snapshotVar:{title:_r("快照变量"),type:"object",fieldType:"dataPoint"},snapshotList:{title:_r("快照列表"),type:"array",field:{ButtonBody:function(e){var t,r=e.input,n=e.index,a=e.inputName;return(null==r||null===(t=r.value[n])||void 0===t?void 0:t.name)||a}},items:{type:"object",properties:{name:{title:_r("名称"),type:"string"},position:{title:_r("位置"),type:"object",properties:u()},target:{title:_r("方向"),type:"object",properties:u()}}}}}},renderConfig:{title:_r("渲染"),type:"object",fieldType:"fieldset_card",properties:{outputEncoding:{title:_r("色彩空间"),type:"string",enum:["LinearEncoding","sRGBEncoding","GammaEncoding"],enum_title:["Linear","sRGB","Gamma"],field:{effect:function(e,t){var r=e.value;setTimeout((function(){t.setFieldData("renderConfig.gammaFactor",{display:"GammaEncoding"===r})}))}}},gammaFactor:{title:"gamma因子",type:"number"}}},lightConfig:{title:_r("灯光"),type:"object",fieldType:"fieldset_card",properties:{ambientLight:{title:_r("环境光"),type:"array",items:{type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},color:{title:_r("颜色"),type:"string",fieldType:"color"},intensity:{title:_r("强度"),type:"number"}}}},directionalLight:{title:_r("平行光"),type:"array",items:{type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},color:{title:_r("颜色"),type:"string",fieldType:"color"},intensity:{title:_r("强度"),type:"number"},castShadow:{title:_r("阴影"),type:"boolean"},position:{title:_r("位置"),type:"object",properties:u()}}}},hemisphereLight:{title:_r("半球光"),type:"array",items:{type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},skyColor:{title:_r("天空颜色"),type:"string",fieldType:"color"},groundColor:{title:_r("地面颜色"),type:"string",fieldType:"color"},intensity:{title:_r("强度"),type:"number"},position:{title:_r("位置"),type:"object",properties:u()}}}},pointLight:{title:_r("点光"),type:"array",items:{type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},color:{title:_r("颜色"),type:"string",fieldType:"color"},intensity:{title:_r("强度"),type:"number"},distance:{title:_r("距离"),type:"number"},decay:{title:_r("衰退量"),type:"number"},castShadow:{title:_r("阴影"),type:"boolean"},position:{title:_r("位置"),type:"object",properties:u()}}}},spotLight:{title:_r("聚光灯"),type:"array",items:{type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},color:{title:_r("颜色"),type:"string",fieldType:"color"},intensity:{title:_r("强度"),type:"number"},distance:{title:_r("距离"),type:"number"},angle:{title:_r("散射角度"),type:"number",description:"取值在0到π/2之间, 默认值为π/3"},penumbra:{title:_r("衰减百分比"),type:"number",description:"取值在0到1之间，默认值为0"},decay:{title:_r("衰减量"),type:"number"},castShadow:{title:_r("阴影"),type:"boolean"},position:{title:_r("位置"),type:"object",properties:u()}}}}}},helperConfig:{title:_r("辅助"),type:"object",fieldType:"fieldset_card",properties:{gridConfig:{title:_r("坐标格"),type:"object",properties:{enable:{title:_r("启用"),type:"boolean"},size:{title:_r("尺寸"),type:"number"},divisions:{title:_r("细分次数"),type:"number"},colorCenterLine:{title:_r("中线颜色"),type:"string",fieldType:"color"},colorGrid:{title:_r("网格线颜色"),type:"string",fieldType:"color"}}},axesConfig:{title:_r("坐标轴"),type:"object",properties:{enable:{title:_r("启用"),type:"boolean",description:"X轴为红色线，Y轴为绿色线，Z轴为蓝色线"},size:{title:_r("轴线长度"),type:"number"}}}}}}};var c=__webpack_require__(204),d=__webpack_require__(5861),m=__webpack_require__(4687),p=__webpack_require__.n(m);function b(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function f(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?b(Object(n),!0).forEach((function(r){(0,e.Z)(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):b(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}const g={getDVariable:function(){var e=(0,d.Z)(p().mark((function e(){var t,r=arguments;return p().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=r[0].customVar,e.abrupt("return",t);case 2:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),addEditDVariable:function(t,r){var n=arguments[2],a=n.customVar;(0,n.setCustomVar)(f(f({},a),{},(0,e.Z)({},t,r)))},delDVariable:function(e){var t=arguments[1],r=t.customVar,n=t.setCustomVar,a=r;delete a[e],n(a)},dashboardUpdateCell:function(e,t){(0,arguments[2].setCellParams)(e,"base",t)}};var y=__webpack_require__(3379),h=__webpack_require__.n(y),v=__webpack_require__(2060);h()(v.Z,{insert:"head",singleton:!1}),v.Z.locals;const A=JSON.parse('{"en":{"translation":{"函数名称":"Function Name","函数内容":"Function Content","备注说明":"Notes","保存成功":"Successfully saved","创建函数":"Create Function","测试表":"Test Table","属性":"Attribute","方法":"Method","画布":"Canvas","请输入组件名":"Please enter the component name","函数":"Function","函数文档":"Function documentation","插入函数":"Insert Function","名称":"Name","类型":"Type","描述":"Describe","定义":"Definition","语法":"Grammar","参数":"Parameter","返回值":"Return value","内容":"Content","说明":"Explain","复杂示例":"Complex examples","简单示例":"Simple example","【简单示例】":"[Simple Example]","【复杂示例】":"Complex examples","示例":"Example","使用示例":"Usage examples","画面":"Frame","模型":"Model","系统函数":"System functions","画面函数":"Screen function","自定义函数":"Custom Functions","二次开发函数":"Secondary development function","删除成功":"Successfully deleted","修改后，相关引用该脚本方法处均会被修改，请谨慎操作！":"After modification, all references to the script method will be modified. Please operate with caution!","确定":"Determine","取消":"Cancel","删除后，相关引用该脚本方法处均会被删除，请谨慎操作！":"After deletion, all references to the script method will be deleted. Please operate with caution!","编辑函数":"Edit Function","变量":"Variable","字段":"Field","数据点":"Data point","公式输入":"Formula input","变量与函数":"Variables and Functions","在线状态":"Online status","数据字典":"Data dictionary","请输入公式，语法为JavaScript":"Please enter a formula with JavaScript syntax","请选择变量":"Please select a variable","公式编辑":"Formula editing","文本":"Text","数字":"Number","布尔":"Boolean","日期":"Date","对象":"Object","数组":"Array","工作表":"Worksheet","资产":"Assets","用户":"User","工作表记录":"Worksheet Record","公式错误":"Formula error","X轴":"X-axis","Y轴":"Y-axis","Z轴":"Z-axis","场景":"Scene","背景颜色":"Background color ","背景贴图":"Background map","贴图方式":"Mapping method","全景图":"Panorama","启用":"Enable","颜色":"Colour","最小距离":"Minimum distance","最大距离":"Maximum distance","地平面":"Ground level","材质":"Texture of material","宽度":"Width","高度":"Height","相机":"Camera","视野角度":"Field of view angle","近端面距离":"Near end distance","远端面距离":"Distal face distance","初始位置":"Initial position ","初始方向":"Initial direction","控制器类别":"Controller Category","轨道控制器":"Track controller","旋转":"Rotate","旋转速度":"Rotation speed","水平角度上限":"Upper limit of horizontal angle","水平角度下限":"Lower limit of horizontal angle","垂直角度上限":"Vertical angle upper limit","垂直角度下限":"Lower limit of vertical angle","平移":"Translation","平移速度":"Translation speed","缩放":"Zoom","缩放速度":"Zoom speed","缩放距离上限":"Zoom distance upper limit","缩放距离下限":"Zoom Distance Lower Limit","阻尼":"Damping","阻尼因子":"Damping factor","自动旋转":"Automatic rotation","自动旋转速度":"Automatic rotation speed","行走控制器":"Walking controller","视线高度":"Sight height","移动速度":"Movement speed","下落速度":"Falling speed","跳跃高度":"Jumping height","飞行控制器":"Flight controller","自动前进":"Automatic forward","快照":"Snapshot","快照变量":"Snapshot variables","快照列表":"Snapshot List","位置":"Position","方向":"Direction","渲染":"Rendering","色彩空间":"Color Space","灯光":"Lighting","环境光":"Ambient light","强度":"Strength","平行光":"Directional light","阴影":"Shadow","半球光":"Hemispherical light","天空颜色":"Sky Color","地面颜色":"Ground color","点光":"Spot light","距离":"Distance","衰退量":"Decline amount","聚光灯":"Spotlight","散射角度":"Scattering angle","衰减百分比":"Attenuation percentage","衰减量":"Attenuation amount","辅助":"Auxiliary","坐标格":"Grid ","尺寸":"Size","细分次数":"Number of subdivisions","中线颜色":"Centerline color","网格线颜色":"Gridline Color","坐标轴":"Coordinate axis","轴线长度":"Axis length","选择器":"Selector","脚本编辑器":"Script editor ","请选择逻辑...":"Please select logic","数值":"Numerical value","或者":"Perhaps","并且":"Also","恒等于":"Identical to","等于":"Be equal to","不等于":"Not equal to","恒不等于":"Constant not equal to","取反":"Negate","小于等于":"Less than or equal to","大于等于":"Greater than or equal to","小于":"Less than","大于":"Greater than","逻辑与":"Logic and","逻辑或":"Logical OR","工作表数据":"Worksheet Data","变量列表":"Variable List","插入公式":"Insert Formula","全屏":"Full screen","ECMAScript中函数":"Functions in ECMAScript","html对dom操作的函数":"Functions of HTML for dom operations","Web存储":"Web Storage","查询工作表列表":"Query Worksheet List","{ total: 总条数, items: 工作表列表 }":"{total: total number of items, items: worksheet list}","<p>查询工作表列表</p>":"<p>Query Worksheet List</p>","<p>{ total: 总条数, items: 工作表列表 }</p>":"<p>{total: total number of items, items: worksheet list}</p>","<p>":"<p>","<p>查询条件（可选）</p>":"<p>Query criteria (optional)</p>","<p></p>":"<p></p>","<p>查询条数（默认30）</p>":"<p>Number of queries (default 30)</p>","<p>跳过条数（默认0）</p>":"<p>Skip Number (default 0)</p>","<p>排序</p>":"<p>Sort</p>","<p>查询字段（默认name）</p>":"<p>Query field (default name)</p>","<p>查询条件</p>":"<p>Query criteria</p>","<p>工作表名称</p>":"<p>Worksheet Name</p>","<p>工作表标题</p>":"<p>Worksheet Title</p>","<p>属性配置</p>":"<p>Attribute Configuration</p>","<p>关联画面</p>":"<p>Associated screen</p>","<p>工作表权限</p>":"<p>Worksheet permissions</p>","<p>字段规则</p>":"<p>Field Rules</p>","<p>错误提示</p>":"<p>Error prompt</p>","<p>同步数据</p>":"<p>Synchronize data</p>","<p>创建人</p>":"<p>Creator</p>","<p>创建时间</p>":"<p>Creation time</p>","<p>根据id查询工作表详情</p>":"<p>Query worksheet details based on ID</p>","<p>工作表数据</p>":"<p>Worksheet Data</p>","<p>新增工作表</p>":"<p>Add a worksheet</p>","<p>新建的工作表数据</p>":"<p>New worksheet data</p>","<p>工作表名称（必填）</p>":"<p>Worksheet Name (required)</p>","<p>工作表标题（必填）</p>":"<p>Worksheet Title (Required)</p>","<p>{ InsertedID: 插入工作表的ID }</p>":"<p>{InsertedID: Insert the ID of the worksheet}</p>","<p>修改工作表</p>":"<p>Modify Worksheet</p>","<p>修改的工作表名称</p>":"<p>Modified worksheet name</p>","<p>修改的工作表数据</p>":"<p>Modified worksheet data</p>","<p>{ status: \\"OK\\" } 修改成功</p>":"<p>{status: \\"OK\\"} Modified successfully</p>","<p>删除工作表</p>":"<p>Delete Worksheet</p>","<p>{ status: \\"OK\\" } 删除成功</p>":"<p>{status: \\"OK\\"} Successfully deleted</p>","<p>查询某个工作表数据</p>":"<p>Query a worksheet data</p>","<p>工作表数据列表</p>":"<p>Worksheet Data List</p>","<p>根据id查询工作表数据详情</p>":"<p>Query worksheet data details based on ID</p>","<p>工作表数据ID</p>":"<p>Worksheet Data ID</p>","<p>工作表数据详情</p>":"<p>Worksheet Data Details</p>","<p>查询是否有工作表的添加权限</p>":"<p>Query if there is permission to add a worksheet</p>","<p>{ add: true } 有添加权限</p>":"<p>{add: true} has permission to add</p>","<p>新增一条工作表数据</p>":"<p>Add a new worksheet data</p>","<p>新增的工作表数据</p>":"<p>New worksheet data</p>","<p>修改工作表数据</p>":"<p>Modify worksheet data</p>","<p>修改的工作表数据ID</p>":"<p>Modified worksheet data ID</p>","<p>修改的工作表数据内容</p>":"<p>Modified worksheet data content</p>","<p>删除工作表数据</p>":"<p>Delete worksheet data</p>","<p>查询画面变量</p>":"<p>Query screen variables</p>","<p>画面变量数据</p>":"<p>Screen variable data</p>","<p>添加/修改画面变量</p>":"<p>Add/Modify Screen Variables</p>","<p>画面变量key</p>":"<p>Screen variable key</p>","<p>画面变量值</p>":"<p>Screen variable value</p>","<p>删除画面变量</p>":"<p>Delete screen variables</p>","<p>修改画面组件属性</p>":"<p>Modifying Screen Component Properties</p>","<p>画面组件key</p>":"<p>Screen component key</p>","<p>属性</p>":"<p>Properties</p>","<p>{ status: &quot;OK&quot; } 修改成功</p>":"<p>{status:&quot; OK&quot;} Successfully modified</p>","<p>{ status: &quot;OK&quot; } 删除成功</p>":"<p>{status:&quot; OK&quot;} Successfully deleted</p>"}},"zh_Hans":{"translation":{"函数名称":"函数名称","函数内容":"函数内容","备注说明":"备注说明","保存成功":"保存成功","创建函数":"创建函数","测试表":"测试表","属性":"属性","方法":"方法","画布":"画布","请输入组件名":"请输入组件名","函数":"函数","函数文档":"函数文档","插入函数":"插入函数","名称":"名称","类型":"类型","描述":"描述","定义":"定义","语法":"语法","参数":"参数","返回值":"返回值","内容":"内容","说明":"说明","复杂示例":"复杂示例","简单示例":"简单示例","【简单示例】":"【简单示例】","【复杂示例】":"【复杂示例】","示例":"示例","使用示例":"使用示例","画面":"画面","模型":"模型","系统函数":"系统函数","画面函数":"画面函数","自定义函数":"自定义函数","二次开发函数":"二次开发函数","删除成功":"删除成功","修改后，相关引用该脚本方法处均会被修改，请谨慎操作！":"修改后，相关引用该脚本方法处均会被修改，请谨慎操作！","确定":"确定","取消":"取消","删除后，相关引用该脚本方法处均会被删除，请谨慎操作！":"删除后，相关引用该脚本方法处均会被删除，请谨慎操作！","编辑函数":"编辑函数","变量":"变量","字段":"字段","数据点":"数据点","公式输入":"公式输入","变量与函数":"变量与函数","在线状态":"在线状态","数据字典":"数据字典","请输入公式，语法为JavaScript":"请输入公式，语法为JavaScript","请选择变量":"请选择变量","公式编辑":"公式编辑","文本":"文本","数字":"数字","布尔":"布尔","日期":"日期","对象":"对象","数组":"数组","工作表":"工作表","资产":"资产","用户":"用户","工作表记录":"工作表记录","公式错误":"公式错误","X轴":"X轴","Y轴":"Y轴","Z轴":"Z轴","场景":"场景","背景颜色":"背景颜色","背景贴图":"背景贴图","贴图方式":"贴图方式","全景图":"全景图","启用":"启用","颜色":"颜色","最小距离":"最小距离","最大距离":"最大距离","地平面":"地平面","材质":"材质","宽度":"宽度","高度":"高度","相机":"相机","视野角度":"视野角度","近端面距离":"近端面距离","远端面距离":"远端面距离","初始位置":"初始位置","初始方向":"初始方向","控制器类别":"控制器类别","轨道控制器":"轨道控制器","旋转":"旋转","旋转速度":"旋转速度","水平角度上限":"水平角度上限","水平角度下限":"水平角度下限","垂直角度上限":"垂直角度上限","垂直角度下限":"垂直角度下限","平移":"平移","平移速度":"平移速度","缩放":"缩放","缩放速度":"缩放速度","缩放距离上限":"缩放距离上限","缩放距离下限":"缩放距离下限","阻尼":"阻尼","阻尼因子":"阻尼因子","自动旋转":"自动旋转","自动旋转速度":"自动旋转速度","行走控制器":"行走控制器","视线高度":"视线高度","移动速度":"移动速度","下落速度":"下落速度","跳跃高度":"跳跃高度","飞行控制器":"飞行控制器","自动前进":"自动前进","快照":"快照","快照变量":"快照变量","快照列表":"快照列表","位置":"位置","方向":"方向","渲染":"渲染","色彩空间":"色彩空间","灯光":"灯光","环境光":"环境光","强度":"强度","平行光":"平行光","阴影":"阴影","半球光":"半球光","天空颜色":"天空颜色","地面颜色":"地面颜色","点光":"点光","距离":"距离","衰退量":"衰退量","聚光灯":"聚光灯","散射角度":"散射角度","衰减百分比":"衰减百分比","衰减量":"衰减量","辅助":"辅助","坐标格":"坐标格","尺寸":"尺寸","细分次数":"细分次数","中线颜色":"中线颜色","网格线颜色":"网格线颜色","坐标轴":"坐标轴","轴线长度":"轴线长度","选择器":"选择器","脚本编辑器":"脚本编辑器","请选择逻辑...":"请选择逻辑...","数值":"数值","或者":"或者","并且":"并且","恒等于":"恒等于","等于":"等于","不等于":"不等于","恒不等于":"恒不等于","取反":"取反","小于等于":"小于等于","大于等于":"大于等于","小于":"小于","大于":"大于","逻辑与":"逻辑与","逻辑或":"逻辑或","工作表数据":"工作表数据","变量列表":"变量列表","插入公式":"插入公式","全屏":"全屏","ECMAScript中函数":"ECMAScript中函数","html对dom操作的函数":"html对dom操作的函数","Web存储":"Web存储","查询工作表列表":"查询工作表列表","{ total: 总条数, items: 工作表列表 }":"{ total: 总条数, items: 工作表列表 }","<p>查询工作表列表</p>":"<p>查询工作表列表</p>","<p>{ total: 总条数, items: 工作表列表 }</p>":"<p>{ total: 总条数, items: 工作表列表 }</p>","<p>":"<p>","<p>查询条件（可选）</p>":"<p>查询条件（可选）</p>","<p></p>":"<p></p>","<p>查询条数（默认30）</p>":"<p>查询条数（默认30）</p>","<p>跳过条数（默认0）</p>":"<p>跳过条数（默认0）</p>","<p>排序</p>":"<p>排序</p>","<p>查询字段（默认name）</p>":"<p>查询字段（默认name）</p>","<p>查询条件</p>":"<p>查询条件</p>","<p>工作表名称</p>":"<p>工作表名称</p>","<p>工作表标题</p>":"<p>工作表标题</p>","<p>属性配置</p>":"<p>属性配置</p>","<p>关联画面</p>":"<p>关联画面</p>","<p>工作表权限</p>":"<p>工作表权限</p>","<p>字段规则</p>":"<p>字段规则</p>","<p>错误提示</p>":"<p>错误提示</p>","<p>同步数据</p>":"<p>同步数据</p>","<p>创建人</p>":"<p>创建人</p>","<p>创建时间</p>":"<p>创建时间</p>","<p>根据id查询工作表详情</p>":"<p>根据id查询工作表详情</p>","<p>工作表数据</p>":"<p>工作表数据</p>","<p>新增工作表</p>":"<p>新增工作表</p>","<p>新建的工作表数据</p>":"<p>新建的工作表数据</p>","<p>工作表名称（必填）</p>":"<p>工作表名称（必填）</p>","<p>工作表标题（必填）</p>":"<p>工作表标题（必填）</p>","<p>{ InsertedID: 插入工作表的ID }</p>":"<p>{ InsertedID: 插入工作表的ID }</p>","<p>修改工作表</p>":"<p>修改工作表</p>","<p>修改的工作表名称</p>":"<p>修改的工作表名称</p>","<p>修改的工作表数据</p>":"<p>修改的工作表数据</p>","<p>{ status: \\"OK\\" } 修改成功</p>":"<p>{ status: \\"OK\\" } 修改成功</p>","<p>删除工作表</p>":"<p>删除工作表</p>","<p>{ status: \\"OK\\" } 删除成功</p>":"<p>{ status: \\"OK\\" } 删除成功</p>","<p>查询某个工作表数据</p>":"<p>查询某个工作表数据</p>","<p>工作表数据列表</p>":"<p>工作表数据列表</p>","<p>根据id查询工作表数据详情</p>":"<p>根据id查询工作表数据详情</p>","<p>工作表数据ID</p>":"<p>工作表数据ID</p>","<p>工作表数据详情</p>":"<p>工作表数据详情</p>","<p>查询是否有工作表的添加权限</p>":"<p>查询是否有工作表的添加权限</p>","<p>{ add: true } 有添加权限</p>":"<p>{ add: true } 有添加权限</p>","<p>新增一条工作表数据</p>":"<p>新增一条工作表数据</p>","<p>新增的工作表数据</p>":"<p>新增的工作表数据</p>","<p>修改工作表数据</p>":"<p>修改工作表数据</p>","<p>修改的工作表数据ID</p>":"<p>修改的工作表数据ID</p>","<p>修改的工作表数据内容</p>":"<p>修改的工作表数据内容</p>","<p>删除工作表数据</p>":"<p>删除工作表数据</p>","<p>查询画面变量</p>":"<p>查询画面变量</p>","<p>画面变量数据</p>":"<p>画面变量数据</p>","<p>添加/修改画面变量</p>":"<p>添加/修改画面变量</p>","<p>画面变量key</p>":"<p>画面变量key</p>","<p>画面变量值</p>":"<p>画面变量值</p>","<p>删除画面变量</p>":"<p>删除画面变量</p>","<p>修改画面组件属性</p>":"<p>修改画面组件属性</p>","<p>画面组件key</p>":"<p>画面组件key</p>","<p>属性</p>":"<p>属性</p>","<p>{ status: &quot;OK&quot; } 修改成功</p>":"<p>{ status: &quot;OK&quot; } 修改成功</p>","<p>{ status: &quot;OK&quot; } 删除成功</p>":"<p>{ status: &quot;OK&quot; } 删除成功</p>"}}}');function D(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function x(t){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?D(Object(n),!0).forEach((function(r){(0,e.Z)(t,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):D(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}var C=(0,n.lazy)((function(){return Promise.all([__webpack_require__.e(5466),__webpack_require__.e(8339),__webpack_require__.e(2621)]).then(__webpack_require__.bind(__webpack_require__,2621))})),E=(0,n.lazy)((function(){return Promise.all([__webpack_require__.e(5466),__webpack_require__.e(1072),__webpack_require__.e(6586),__webpack_require__.e(942)]).then(__webpack_require__.bind(__webpack_require__,942))})),B=(0,n.lazy)((function(){return Promise.all([__webpack_require__.e(2716),__webpack_require__.e(2625),__webpack_require__.e(6331)]).then(__webpack_require__.bind(__webpack_require__,4657))})),_=(0,n.lazy)((function(){return Promise.resolve().then(__webpack_require__.bind(__webpack_require__,5546))})),w=(0,n.lazy)((function(){return __webpack_require__.e(6984).then(__webpack_require__.bind(__webpack_require__,6984))}));r().use({name:"iot.editor",locales:A,components:{CodeEditor:C,"CodeEditor.ModelLogicEditor":w,"CodeEditor.DataFieldEditor":E,"CodeEditor.ApiDocEditor":B,"CodeEditor.VariableEditor":_},functionList:x(x({},c.Z),g),routers:{"/app/":{path:"editor",breadcrumbName:"编辑器调试",component:function(){var e=i().useRef(null),t=i().useState([{text:""},{type:"variable",children:[{text:""}],variable:{path:"sceneConfig",type:"object",title:"场景"}},{text:""}]),r=(0,a.Z)(t,2),n=r[0],o=r[1],u=i().useState(null),c=(0,a.Z)(u,2),d=c[0],m=(c[1],i().useState(null)),p=(0,a.Z)(m,2),b=p[0],f=(p[1],i().useState(!1)),g=(0,a.Z)(f,2),y=g[0],h=g[1];return i().createElement(i().Fragment,null,i().createElement(s.default,{ref:e,style:{marginLeft:"20px",marginTop:"20px",backgroundColor:"#E8E8E8",width:"400px",height:"30px",lineHeight:"30px"},schema:l,value:n,panelVisible:y,onChange:function(e){o(e),console.log(e,"formula")},notfocusedShow:!0,attrExt:["SQL"]}),i().createElement("button",{onClick:function(){h(!y)}},"开启关闭"),i().createElement("div",{style:{marginTop:"300px"}},"输出值：",JSON.stringify(n)),i().createElement("div",null,"变量：",JSON.stringify(null==d?void 0:d.variable),"， 变量位置：",JSON.stringify(null==d?void 0:d.variableLocation),"， 函数：",JSON.stringify(null==d?void 0:d.functionText),"， 函数位置：",JSON.stringify(null==d?void 0:d.functionLocation)),i().createElement("div",null,"输出公式：",JSON.stringify(null==b?void 0:b.expression)),i().createElement("div",null,"预期值：",JSON.stringify(null==b?void 0:b.result)),i().createElement("div",null,"预期类型：",JSON.stringify(null==b?void 0:b.type)))}}}})})()})();
//# sourceMappingURL=front.js.map