/**
 * 编辑器下方的辅助函数选择区域
 */
import React, { Component } from "react";
import PropTypes from "prop-types";
import Selector from "../selector";
import "./style.less";

export default class Completion extends Component {
  static propTypes = {
    width: PropTypes.number,
    height: PropTypes.number,
    onSelect: PropTypes.func.isRequired,
    schema: PropTypes.object.isRequired,
    formula: PropTypes.array.isRequired,
    needFuncs: PropTypes.array,
  };

  /**
   * 向上一层组件传递选中的数据
   * @param {object} data
   */
  handleSelector(data) {
    this.props.onSelect && this.props.onSelect(data);
  }

  /**
   * 导入数据库table
   * @param {object} schema
   */
  schemaToTable(schema, parent) {
    let properties = (schema && schema.definitions) || (schema && schema.properties) || [];
    let dbTable = [];
    for (let key in properties) {
      let rows = [];
      let children = undefined;
      if (properties[key].properties) {
        children = this.schemaToTable(properties[key], parent ? parent + '.' + key : key);
      }
      // for (let p in definitions[key].properties) {
      //   let children = undefined;
      //   if (p.properties) {
      //     children = this.schemaToTable(p);
      //   }
      //   rows.push({
      //     key: p,
      //     name: p,
      //     desc: '',
      //     type: 'variable',
      //     parent: key,
      //     children
      //   });
      // }
      const p = properties[key]
      dbTable.push({
        key: key,
        name: p.title,
        desc: key,
        type: 'variable',
        parent,
        children,
      });
    }
    return dbTable;
  }

  /**
   * 过滤掉不需要的函数
   * @param {array} formula
   */
  filterNeedFunc(formula) {
    const { needFuncs=[] } = this.props;
    let inputArr = Object.assign([], formula);
    if (!needFuncs || needFuncs.length === 0) {
        return inputArr;
    }
    let res = [];
    inputArr.map(item => {
      let funcArr = [];
      item.children.map((childItem, idx) => {
        if(needFuncs.indexOf(childItem.key) >= 0) {
          funcArr.push(childItem);
        }
      })
      if(funcArr.length > 0) {
        item.children = funcArr;
        res.push(item);
      }
    })
    return res;
  }


  render() {
    const data = [
      { oprateName: _r("变量"), value: this.schemaToTable(this.props.schema)},
      { oprateName: _r("函数"), value: this.filterNeedFunc(this.props.formula) }
    ];
    return (
      <Selector
        width={this.props.width || '100%'}
        height={this.props.height || 300}
        data={data}
        onChange={this.handleSelector.bind(this)}
      />
    );
  }
}
