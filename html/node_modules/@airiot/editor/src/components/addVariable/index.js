/**
 * 添加临时变量和函数的组件，可按需引入
*/
import React, { Component } from "react";
import PropTypes from "prop-types";
import { Icon, Input } from "antd";
import Selector from "../selector";
import "./index.less";

export default class AddVariableBlock extends Component {
  static propTypes = {
    data: PropTypes.array
  };

  constructor(props) {
    super(props);
    this.state = {
      variableList: [],
      variableLen: 0,
      visible: false,
      left: undefined,
      top: undefined
    };
  }

  componentDidMount() {
    this.bindEvents();
  }

  bindEvents() {
    window.addEventListener("click", (e) => {
      switch (true) {
        case e.target &&
          typeof e.target.className === "string" &&
          e.target.className.includes("func-input"):
          this.handleSelectorVisible("show");
          this.setState({
            left: e.pageX,
            top: e.pageY + 20
          });
          break;
        case e.target &&
          typeof e.target.className === "string" &&
          e.target.className.includes("ant-list-item"):
          break;
        case e.target &&
          typeof e.target.className === "string" &&
          e.target.className.includes("desc"):
          break;
        case e.target && typeof e.target.className === "object":
          break;
        default:
          this.handleSelectorVisible("hide");
          break;
      }
    });
  }

  handleClick() {
    this.setState((state) => {
      return { variableLen: state.variableLen + 1 };
    });
  }

  handleDeleteVar(idx) {
    this.setState((state) => {
      return {
        variableLen: state.variableLen - 1
      };
    });
  }

  handleSelectorVisible(status) {
    if (status === "show") {
      this.setState({
        visible: true
      });
    } else {
      this.setState({
        visible: false
      });
    }
  }

  renderVariable() {
    let items = [];
    for (let i = 0; i < this.state.variableLen; i++) {
      items.push(
        <div key={i}>
          <Input className="var-input" placeholder="变量名" />
          <Input
            className="func-input"
            onClick={this.handleSelectorVisible.bind(this)}
          />
          <Icon type="delete" onClick={this.handleDeleteVar.bind(this, i)} />
        </div>
      );
    }
    return items;
  }

  render() {
    return (
      <div className="add-block">
        <div
          className="add-title"
        >
          临时变量
          <span
            className="add-tip"
          >
            只作用于上面的条件表达式中，变量名要求在当前向导内统一，且不能有空格
            </span>
        </div>
        {this.state.variableList.map((item) => {
          return (
            <div>
              <Icon type="plus" />
              <Input />
              <Input />
            </div>
          );
        })}
        <div className="add-icon" onClick={this.handleClick.bind(this)}>
          <Icon type="plus" />
          添加
        </div>
        <div className="variable-wrapper">{this.renderVariable()}</div>
        {this.state.visible && (
          <Selector
            needHide
            data={this.props.data}
            position="absolute"
            width="493px"
            // left={this.state.left + "px"}
            left="95px"
          />
        )}
      </div>
    );
  }
}
