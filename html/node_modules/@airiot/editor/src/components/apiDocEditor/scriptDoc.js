var scriptDoc = {
  scriptFun: {
    ECMAScript中函数: {
      字符串: [
        'anchor',
        'big',
        'blink',
        'bold',
        'charAt',
        'charCodeAt',
        'concat',
        'fixed',
        'fontcolor',
        'fontsize',
        'fromCharCode',
        'indexOf',
        'italics',
        'lastIndexOf',
        'localeCompare',
        'match',
        'replace',
        'search',
        'slice',
        'small',
        'split',
        'strike',
        'sub',
        'substr',
        'substring',
        'sup',
        'toLocaleLowerCase',
        'toLocaleUpperCase',
        'toLowerCase',
        'toUpperCase'
      ],
      数学: [
        'abs',
        'acos',
        'asin',
        'atan',
        'atan2',
        'ceil',
        'cos',
        'exp',
        'floor',
        'log',
        'max',
        'min',
        'pow',
        'random',
        'round',
        'sin',
        'sqrt',
        'tan'
      ],
      日期时间: [
        'Date',
        'getDate',
        'getDay',
        'getMonth',
        'getFullYear',
        'getHours',
        'getMinutes',
        'getSeconds',
        'getMilliseconds',
        'getTime',
        'getTimezoneOffset',
        'getUTCDate',
        'getUTCDay',
        'getUTCMonth',
        'getUTCFullYear',
        'getUTCHours',
        'getUTCMinutes',
        'getUTCSeconds',
        'getUTCMilliseconds',
        'parse',
        'setDate',
        'setMonth',
        'setFullYear',
        'setHours',
        'setMinutes',
        'setSeconds',
        'setMilliseconds',
        'setTime',
        'setUTCDate',
        'setUTCMonth',
        'setUTCFullYear',
        'setUTCHours',
        'setUTCMinutes',
        'setUTCSeconds',
        'setUTCMilliseconds',
        'toTimeString',
        'toDateString',
        'toUTCString',
        'toLocaleString',
        'toLocaleTimeString',
        'toLocaleDateString',
        'UTC'
      ],
      数组: [
        'concat',
        'join',
        'pop',
        'push',
        'reverse',
        'shift',
        'slice',
        'sort',
        'splice',
        'toString',
        'toLocaleString',
        'unshift'
      ],
      数字: ['toExponential', 'toFixed', 'toPrecision', 'toString'],
      正则表达式: ['compile', 'exec', 'test'],
      全局: ['escape', 'eval', 'isNaN', 'parseFloat', 'parseInt', 'unescape'],
      JSON: ['parse', 'stringify']
    },
    html对dom操作的函数: {
      Document: [
        'close',
        'getElementById',
        'getElementsByName',
        'getElementsByTagName',
        'open',
        'write',
        'writeln'
      ],
      Element: [
        'appendChild',
        'cloneNode',
        'compareDocumentPosition',
        'getAttribute',
        'getAttributeNode',
        'hasAttribute',
        'hasAttributes',
        'hasChildNodes',
        'insertBefore',
        'isDefaultNamespace',
        'isEqualNode',
        'isSameNode',
        'isSupported',
        'normalize',
        'removeAttribute',
        'removeAttributeNode',
        'removeChild',
        'replaceChild',
        'setAttribute',
        'setAttributeNode',
        'item'
      ],
      Attribute: ['getNamedItem', 'item', 'removeNamedItem', 'setNamedItem']
    },
    Web存储: {
      localStorage: ['setItem', 'getItem', 'removeItem', 'clear', 'key'],
      sessionStorage: ['setItem', 'getItem', 'removeItem', 'clear', 'key']
    },
    'Web Sql': { openDatabase: [], transaction: [], executeSql: [] },
    'Web Worker': { postMessage: [], onMessage: [] }
  },
  scriptFunDetail: {
    字符串: {
      anchor: {
        defination: '创建 HTML 锚',
        syntax: 'stringObject.anchor(anchorname);',
        parameters: '{String} anchorname 为锚定义名称',
        return: 'String',
        demo:
          "var txt='Hello world!'<br/>document.write(txt.anchor('myanchor'));"
      },
      big: {
        defination: '用大号字体显示字符串',
        syntax: 'stringObject.big();',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!'<br/>document.write(str.big());"
      },
      blink: {
        defination: '显示闪动字符串',
        syntax: 'stringObject.blink();',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!'<br/>document.write(str.blink());"
      },
      bold: {
        defination: '使用粗体显示字符串',
        syntax: 'stringObject.bold();',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!'<br/>document.write(str.bold());"
      },
      charAt: {
        defination: '返回在指定位置的字符',
        syntax: 'stringObject.charAt(index);',
        parameters: '{Number} index 字符在字符串中的位置',
        return: 'String',
        demo:
          "var str = 'Hello world!';<br/>document.write(str.charAt(1));"
      },
      charCodeAt: {
        defination: '返回在指定的位置的字符的 Unicode 编码',
        syntax: 'stringObject.charCodeAt(index);',
        parameters: '{Number} index 字符在字符串中的位置',
        return: 'Number',
        demo:
          "var str = 'Hello world!';<br/>document.write(str.charCodeAt(1));"
      },
      concat: {
        defination: '连接字符串',
        syntax: 'stringObject.concat(stringX,stringX,...,stringX);',
        parameters:
          '{String} stringX 将被连接为一个字符串的一个或多个字符串对象',
        return: 'String',
        demo:
          "var str1='Hello';<br/>var str2='world!';<br/>document.write(str1.concat(str2));"
      },
      fixed: {
        defination: '以打字机文本显示字符串',
        syntax: 'stringObject.fixed();',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.fixed());"
      },
      fontcolor: {
        defination: '使用指定的颜色来显示字符串',
        syntax: 'stringObject.fontcolor(color);',
        parameters: '{String}  color 为字符串规定 font-color',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.fontcolor('Red'));"
      },
      fontsize: {
        defination: '使用指定的尺寸来显示字符串',
        syntax: 'stringObject.fontsize(size);',
        parameters: '{Number}  size 必须是从 1 至 7 的数字',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.fontsize(7));"
      },
      fromCharCode: {
        defination: '从字符编码创建一个字符串',
        syntax: 'String.fromCharCode(numX,numX,...,numX);',
        parameters:
          '{Number}  numX 一个或多个 Unicode 值，即要创建的字符串中的字符的 Unicode 编码',
        return: 'String',
        demo:
          'document.write(String.fromCharCode(72,69,76,76,79));<br/>document.write(String.fromCharCode(65,66,67));'
      },
      indexOf: {
        defination: '检索字符串',
        syntax: 'stringObject.indexOf(searchvalue,fromindex);',
        parameters:
          '{String}  searchvalue 必需 规定需检索的字符串值<br/>          {String}  fromindex 可选 规定在字符串中开始检索的位置',
        return: 'Number',
        demo:
          "var str='Hello world!';<br/>document.write(str.indexOf('Hello'));<br/>document.write(str.indexOf('World');<br/>document.write(str.indexOf('world'));"
      },
      italics: {
        defination: '使用斜体显示字符串',
        syntax: 'stringObject.italics();',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.italics());"
      },
      lastIndexOf: {
        defination: '从后向前搜索字符串',
        syntax: 'stringObject.lastIndexOf(searchvalue,fromindex);',
        parameters:
          '{String} searchvalue 必需 规定需检索的字符串值<br/>          {String} fromindex 可选 规定在字符串中开始检索的位置',
        return: 'Number',
        demo:
          "var str='Hello world!';<br/>document.write(str.lastIndexOf('Hello'));<br/>document.write(str.lastIndexOf('World');<br/>document.write(str.lastIndexOf('world'));"
      },
      link: {
        defination: '将字符串显示为链接',
        syntax: 'stringObject.link(url);',
        parameters: '{String} url 规定要链接的 URL',
        return: 'String',
        demo:
          "var str='Free Web Tutorials!';<br/>document.write(str.link('http://www.w3school.com.cn'));"
      },
      localeCompare: {
        defination: '用本地特定的顺序来比较两个字符串',
        syntax: 'stringObject.localeCompare(target);',
        parameters:
          '{String} target 要以本地特定的顺序与 stringObject 进行比较的字符串',
        return: 'Number',
        demo:
          'var str;<br/>str.sort (function(a,b){return a.localeCompare(b)});'
      },
      match: {
        defination: '找到一个或多个正则表达式的匹配',
        syntax:
          'stringObject.match(searchvalue);<br/>       stringObject.match(regexp)',
        parameters:
          '{String} searchvalue 规定要检索的字符串值<br/>          {RegExp} regexp 规定要匹配的模式的 RegExp 对象',
        return: 'Array',
        demo:
          "var str1='Hello world!';<br/>var str='1 plus 2 equal 3';<br/>document.write(str1.match('world'));<br/>document.write(str.match(/d+/g));"
      },
      replace: {
        defination: '替换与正则表达式匹配的子串',
        syntax: 'stringObject.replace(regexp/substr,replacement)',
        parameters:
          '{RegExp} regexp 规定子字符串或要替换的模式的 RegExp 对象<br/>          {String} replacement 规定了替换文本或生成替换文本的函数',
        return: 'String',
        demo:
          "var str='Visit Microsoft!';<br/>document.write(str.replace(/Microsoft/, 'W3School'));"
      },
      search: {
        defination: '检索与正则表达式相匹配的值',
        syntax: 'stringObject.search(regexp)',
        parameters: '{RegExp} regexp 检索的子串或是 RegExp 对象',
        return: 'Number',
        demo:
          "var str='Visit W3School!';<br/>document.write(str.search(/W3School/));"
      },
      slice: {
        defination: '提取字符串的片断，并在新的字符串中返回被提取的部分',
        syntax: 'stringObject.slice(start,end)',
        parameters:
          '{Number} start 要抽取的片断的起始下标<br/>          {Number} end 可选 紧接着要抽取的片段的结尾的下标',
        return: 'String',
        demo:
          "var str='Hello happy world!';<br/>document.write(str.slice(6,11));"
      },
      small: {
        defination: '使用小字号来显示字符串',
        syntax: 'stringObject.small()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.small());"
      },
      split: {
        defination: '把字符串分割为字符串数组',
        syntax: 'stringObject.split(separator,howmany)',
        parameters:
          '{String} separator 字符串或正则表达式<br/>          {howmany} howmany 可选 该参数可指定返回的数组的最大长度',
        return: 'Array',
        demo:
          "var str='How are you doing today?';<br/>document.write(str.split(' ',3));"
      },
      strike: {
        defination: '使用删除线来显示字符串',
        syntax: 'stringObject.strike()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.strike());"
      },
      sub: {
        defination: '把字符串显示为下标',
        syntax: 'stringObject.sub()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.sub());"
      },
      substr: {
        defination: '从起始索引号提取字符串中指定数目的字符',
        syntax: 'stringObject.substr(start,length)',
        parameters:
          '{Number} start 要抽取的子串的起始下标<br/>          {Number} length 可选 子串中的字符数',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.substr(3,7));"
      },
      substring: {
        defination: '提取字符串中两个指定的索引号之间的字符',
        syntax: 'stringObject.substring(start,stop)',
        parameters:
          '{Number} start 要提取的子串的开始位置<br/>          {Number} stop 要提取的子串的结束位置',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.substring(3,7));"
      },
      sup: {
        defination: '把字符串显示为上标',
        syntax: 'stringObject.sup()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.sup());"
      },
      toLocaleLowerCase: {
        defination: '把字符串转换为小写',
        syntax: 'stringObject.toLocaleLowerCase()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.toLocaleLowerCase());"
      },
      toLocaleUpperCase: {
        defination: '把字符串转换为大写',
        syntax: 'stringObject.toLocaleUpperCase()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.toLocaleUpperCase());"
      },
      toLowerCase: {
        defination: '把字符串转换为小写',
        syntax: 'stringObject.toLowerCase()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.toLowerCase());"
      },
      toUpperCase: {
        defination: '把字符串转换为大写',
        syntax: 'stringObject.toUpperCase()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var str='Hello world!';<br/>document.write(str.toUpperCase());"
      }
    },
    数学: {
      abs: {
        defination: '返回数的绝对值',
        syntax: 'Math.abs(x);',
        parameters: '{Number} x 数值',
        return: 'Number',
        demo: 'document.write(Math.abs(-7.25));'
      },
      acos: {
        defination: '返回数的反余弦值',
        syntax: 'Math.acos(x)',
        parameters: '{Number} x 必须是 -1.0 ~ 1.0 之间的数',
        return: 'Number',
        demo: 'document.write(Math.acos(0.64);'
      },
      asin: {
        defination: '返回数的反正弦值',
        syntax: 'Math.asin(x)',
        parameters: '{Number} x 必须是 -1.0 ~ 1.0 之间的数',
        return: 'Number',
        demo: 'document.write(Math.asin(0.64);'
      },
      atan: {
        defination: '返回数的反正切值',
        syntax: 'Math.atan(x)',
        parameters: '{Number} x 数值',
        return: 'Number',
        demo: 'document.write(Math.atan(0.50);'
      },
      atan2: {
        defination: '返回从x轴到点(x,y)的角度（介于-PI/2与PI/2弧度之间',
        syntax: 'Math.atan2(y,x)',
        parameters: '{Number} y 指定点的 Y 坐标, {Number} x 指定点的 X 坐标',
        return: 'Number',
        demo: 'document.write(Math.atan2(0.50,0.50);'
      },
      ceil: {
        defination: '对数进行上舍入',
        syntax: 'Math.ceil(x)',
        parameters: '{Number} x 数值',
        return: 'Number',
        demo: 'document.write(Math.ceil(0.60);'
      },
      cos: {
        defination: '返回数的余弦值',
        syntax: 'Math.cos(x)',
        parameters: '{Number} x 数值',
        return: 'Number',
        demo: 'document.write(Math.cos(2*Math.PI));'
      },
      exp: {
        defination: '返回 e 的指数',
        syntax: 'Math.exp(x)',
        parameters: '{Number} x 任意数值或表达式',
        return: 'Number',
        demo: 'document.write(Math.exp(5);'
      },
      floor: {
        defination: '对数进行下舍入',
        syntax: 'Math.floor(x)',
        parameters: '{Number} x 任意数值或表达式',
        return: 'Number',
        demo: 'document.write(Math.floor(5.1);'
      },
      log: {
        defination: '返回数的自然对数',
        syntax: 'Math.log(x)',
        parameters: '{Number} x 任意数值或表达式',
        return: 'Number',
        demo: 'document.write(Math.log(2.7183);'
      },
      max: {
        defination: '返回最大值',
        syntax: 'Math.max(x...)',
        parameters: '{Number} x 0 或多个值',
        return: 'Number',
        demo: 'document.write(Math.max(7.25,7.30));'
      },
      min: {
        defination: '返回最小值',
        syntax: 'Math.min(x...)',
        parameters: '{Number} x 0 或多个值',
        return: 'Number',
        demo: 'document.write(Math.min(7.25,7.30));'
      },
      pow: {
        defination: '返回指数幂',
        syntax: 'Math.pow(x, y)',
        parameters: '{Number} x 底数, {Number} y 幂数',
        return: 'Number',
        demo: 'document.write(Math.pow(-2,4);'
      },
      random: {
        defination: '返回0 ~ 1之间的随机数',
        syntax: 'Math.random()',
        parameters: '{Null}',
        return: 'Number',
        demo: 'document.write(Math.random());'
      },
      round: {
        defination: '把数四舍五入为最接近的整数',
        syntax: 'Math.round(x)',
        parameters: '{Number} x 数值',
        return: 'Number',
        demo: 'document.write(Math.round(-4.60));'
      },
      sin: {
        defination: '返回正弦值',
        syntax: 'Math.sin(x)',
        parameters: '{Number} x 一个以弧度表示的角',
        return: 'Number',
        demo: 'document.write(Math.sin(Math.PI/2);'
      },
      sqrt: {
        defination: '返回平方根',
        syntax: 'Math.sqrt(x)',
        parameters: '{Number} x 必须是大于等于 0 的数',
        return: 'Number',
        demo: 'var a=Math.sqrt(0.64);'
      },
      tan: {
        defination: '返回正切值',
        syntax: 'Math.tan(x)',
        parameters: '{Number} x 一个以弧度表示的角',
        return: 'Number',
        demo: 'document.write(Math.tan(0.50);'
      }
    },
    日期时间: {
      Date: {
        defination: '返回当日的日期和时间',
        syntax: 'Date()',
        parameters: '{Null}',
        return: 'String',
        demo: 'document.write(Date());'
      },
      getDate: {
        defination: '从 Date 对象返回一个月中的某一天 (1 ~ 31)',
        syntax: 'dateObject.getDate()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getDate());'
      },
      getDay: {
        defination: '从 Date 对象返回一周中的某一天 (0 ~ 6)',
        syntax: 'dateObject.getDay()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getDay());'
      },
      getMonth: {
        defination: '从 Date 对象返回月份 (0 ~ 11)',
        syntax: 'dateObject.getMonth()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getMonth());'
      },
      getFullYear: {
        defination: '从 Date 对象以四位数字返回年份',
        syntax: 'dateObject.getFullYear()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getFullYear());'
      },
      getHours: {
        defination: '返回 Date 对象的小时 (0 ~ 23)',
        syntax: 'dateObject.getHours()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getHours());'
      },
      getMinutes: {
        defination: '返回 Date 对象的分钟 (0 ~ 59)',
        syntax: 'dateObject.getMinutes()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getMinutes());'
      },
      getSeconds: {
        defination: '返回 Date 对象的秒数 (0 ~ 59)',
        syntax: 'dateObject.getSeconds()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getSeconds());'
      },
      getMilliseconds: {
        defination: '返回 Date 对象的毫秒(0 ~ 999)',
        syntax: 'dateObject.getMilliseconds()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getMilliseconds());'
      },
      getTime: {
        defination: '返回 1970 年 1 月 1 日至今的毫秒数',
        syntax: 'dateObject.getTime()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          "var d = new Date()<br/>document.write(d.getTime() + 'milliseconds since 1970/01/01');"
      },
      getTimezoneOffset: {
        defination: '返回本地时间与格林威治标准时间 (GMT) 的分钟差',
        syntax: 'dateObject.getTimezoneOffset()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getTimezoneOffset());'
      },
      getUTCDate: {
        defination: '根据世界时从 Date 对象返回月中的一天 (1 ~ 31)',
        syntax: 'dateObject.getUTCDate()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCDate());'
      },
      getUTCDay: {
        defination: '根据世界时从 Date 对象返回周中的一天 (0 ~ 6)',
        syntax: 'dateObject.getUTCDay()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCDay());'
      },
      getUTCMonth: {
        defination: '根根据世界时从 Date 对象返回月份 (0 ~ 11)',
        syntax: 'dateObject.getUTCMonth()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCMonth());'
      },
      getUTCFullYear: {
        defination: '根据世界时从 Date 对象返回四位数的年份',
        syntax: 'dateObject.getUTCFullYear()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCFullYear());'
      },
      getUTCHours: {
        defination: '根据世界时返回 Date 对象的小时 (0 ~ 23)',
        syntax: 'dateObject.getUTCHours()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCHours());'
      },
      getUTCMinutes: {
        defination: '根据世界时返回 Date 对象的分钟 (0 ~ 59)',
        syntax: 'dateObject.getUTCMinutes()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCMinutes());'
      },
      getUTCSeconds: {
        defination: '根据世界时返回 Date 对象的秒钟 (0 ~ 59)',
        syntax: 'dateObject.getUTCSeconds()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCSeconds());'
      },
      getUTCMilliseconds: {
        defination: '根据世界时返回 Date 对象的毫秒(0 ~ 999)',
        syntax: 'dateObject.getUTCMilliseconds()',
        parameters: '{Null}',
        return: 'Number',
        demo:
          'var d = new Date()<br/>document.write(d.getUTCMilliseconds());'
      },
      parse: {
        defination: '返回1970年1月1日午夜到指定日期（字符串）的毫秒数',
        syntax: 'Date.parse(datestring)',
        parameters: '{String} datestring 表示日期和时间的字符串',
        return: 'Number',
        demo: "var d = Date.parse('Jul 8, 2005');"
      },
      setDate: {
        defination: '设置 Date 对象中月的某一天 (1 ~ 31)',
        syntax: 'dateObject.setDate(day)',
        parameters: '{Number} day 表示一个月中的一天的一个数值（1 ~ 31）',
        return: 'Number',
        demo: 'var d = new Date();</br>d.setDate(15);'
      },
      setMonth: {
        defination: '设置 Date 对象中月份 (0 ~ 11)',
        syntax: 'dateObject.setMonth(month,day)',
        parameters:
          '{Number} month 一个表示月份的数值</br>          {Number} day 可选 一个表示月的某一天的数值',
        return: 'Number',
        demo: 'var d = new Date();</br>d.setMonth(0);'
      },
      setFullYear: {
        defination: '设置 Date 对象中的年份（四位数字）',
        syntax: 'dateObject.setFullYear(year,month,day)',
        parameters:
          '{Number} year 表示年份的四位整数</br>          {Number} month 可选 表示月份的数值<br/>          {Number} day 可选 表示月中某一天的数值',
        return: 'Number',
        demo: 'var d = new Date();</br>d.setFullYear(1992);'
      },
      setHours: {
        defination: '设置 Date 对象中的小时 (0 ~ 23)',
        syntax: 'dateObject.setHours(hour,min,sec,millisec)',
        parameters:
          '{Number} hour 表示小时的数值</br>          {Number} min 可选 表示分钟的数值<br/>          {Number} sec 可选 表示秒的数值<br/>          {Number} millisec 可选 表示毫秒的数值',
        return: 'Number',
        demo: 'var d = new Date();</br>d.setHours(15);'
      },
      setMinutes: {
        defination: '设置 Date 对象中的分钟 (0 ~ 59)',
        syntax: 'dateObject.setMinutes(min,sec,millisec)',
        parameters:
          '{Number} min 表示分钟的数值<br/>          {Number} sec 可选 表示秒的数值<br/>          {Number} millisec 可选 表示毫秒的数值',
        return: 'Number',
        demo: 'var d = new Date();</br>d.setMinutes(1);'
      },
      setSeconds: {
        defination: '设置 Date 对象中的秒钟 (0 ~ 59)',
        syntax: 'dateObject.setSeconds(sec,millisec)',
        parameters:
          '{Number} sec 表示秒的数值<br/>          {Number} millisec 可选 表示毫秒的数值',
        return: 'Number',
        demo: 'var d = new Date();</br>d.setSeconds(1);'
      },
      setMilliseconds: {
        defination: '设置 Date 对象中的毫秒 (0 ~ 999)',
        syntax: 'dateObject.setMilliseconds(millisec)',
        parameters: '{Number} millisec 用于设置 dateObject 毫秒字段',
        return: 'Number',
        demo:
          'var d = new Date();</br>d.setMilliseconds(1);'
      },
      setTime: {
        defination: '以毫秒设置 Date 对象',
        syntax: 'dateObject.setTime(millisec)',
        parameters:
          '{Number} millisec 要设置的日期和时间据 GMT 时间 1970 年 1 月 1 日午夜之间的毫秒数',
        return: 'Undefined',
        demo:
          'var d = new Date();<br/>d.setTime(77771564221);<br/>document.write(d);'
      },
      setUTCDate: {
        defination: '根据世界时设置 Date 对象中月份的一天 (1 ~ 31)',
        syntax: 'dateObject.setUTCDate(day)',
        parameters: '{Number} day 要给 dateObject 设置的一个月中的某一天',
        return: 'Number',
        demo:
          'var d = new Date();<br/>d.setUTCDate(15);<br/>document.write(d);'
      },
      setUTCMonth: {
        defination: '根据世界时设置 Date 对象中的月份 (0 ~ 11)',
        syntax: 'dateObject.setUTCMonth(month,day)',
        parameters:
          '{Number} month 要给 dateObject 设置的月份字段的值<br/>  {Number} day 在 1 ~ 31 之间的整数，用作 dateObject 的天字段',
        return: 'Number',
        demo:
          'var d=new Date();<br/>d.setUTCMonth(0);<br/>document.write(d);'
      },
      setUTCFullYear: {
        defination: '根据世界时设置 Date 对象中的年份（四位数字）',
        syntax: 'dateObject.setUTCFullYear(year,month,day)',
        parameters:
          '{Number} year 要给 dateObject 设置的年份字段的值<br/>  {Number} month 要给 dateObject 设置的月份字段的值<br/>  {Number} day 在 1 ~ 31 之间的整数，用作 dateObject 的天字段',
        return: 'Number',
        demo:
          'var d = new Date();<br/>d.setUTCFullYear(1992);<br/>document.write(d);'
      },
      setUTCHours: {
        defination: '根据世界时设置 Date 对象中的小时 (0 ~ 23)',
        syntax: 'dateObject.setUTCHours(hour,min,sec,millisec)',
        parameters:
          '{Number} hour 要给 dateObject 设置的小时字段的值<br/>  {Number} min 要给 dateObject 设置的分钟字段的值<br/>  {Number} sec 要给 dateObject 设置的秒字段的值<br/>  {Number} millisec 要给 dateObject 设置的毫秒字段的值',
        return: 'Number',
        demo:
          'var d = new Date();<br/>d.setUTCHours(23);<br/>document.write(d);'
      },
      setUTCMinutes: {
        defination: '根据世界时设置 Date 对象中的分钟',
        syntax: 'dateObject.setUTCMinutes(min,sec,millisec)',
        parameters:
          '{Number} min 要给 dateObject 设置的分钟字段的值<br/>  {Number} sec 要给 dateObject 设置的秒字段的值<br/>  {Number} millisec 要给 dateObject 设置的毫秒字段的值',
        return: 'Number',
        demo:
          'var d = new Date();<br/>d.setUTCMinutes(1);<br/>document.write(d);'
      },
      setUTCSeconds: {
        defination: '根据世界时设置 Date 对象中的秒钟 (0 ~ 59)',
        syntax: 'dateObject.setUTCSeconds(sec,millisec)',
        parameters:
          '{Number} sec 要给 dateObject 设置的秒字段的值<br/>  {Number} millisec 要给 dateObject 设置的毫秒字段的值',
        return: 'Number',
        demo:
          'var d = new Date();<br/>d.setUTCSeconds(1);<br/>document.write(d);'
      },
      setUTCMilliseconds: {
        defination: '根据世界时设置 Date 对象中的毫秒 (0 ~ 999)',
        syntax: 'dateObject.setUTCMilliseconds(millisec)',
        parameters: '{Number} millisec 要给 dateObject 设置的毫秒字段的值',
        return: 'Number',
        demo:
          'var d = new Date();<br/>d.setUTCMilliseconds(1);<br/>document.write(d);'
      },
      toString: {
        defination: '把 Date 对象转换为字符串',
        syntax: 'dateObject.toString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var d = new Date()'<br/>document.write(d.toString());"
      },
      toTimeString: {
        defination: '把 Date 对象的时间部分转换为字符串',
        syntax: 'dateObject.toTimeString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var d = new Date()'<br/>document.write(d.toTimeString());"
      },
      toDateString: {
        defination: '把 Date 对象的日期部分转换为字符串',
        syntax: 'dateObject.toDateString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var d = new Date();<br/>document.write(d.toDateString());"
      },
      toUTCString: {
        defination: '根据世界时，把 Date 对象转换为字符串',
        syntax: 'dateObject.toUTCString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          'var d = new Date();</br>document.write(d.toUTCString());'
      },
      toLocaleString: {
        defination: '根据本地时间格式，把 Date 对象转换为字符串',
        syntax: 'dateObject.toLocaleString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          'var d = new Date();</br>document.write(d.toLocaleString());'
      },
      toLocaleTimeString: {
        defination: '根据本地时间格式，把 Date 对象的时间部分转换为字符串',
        syntax: 'dateObject.toLocaleTimeString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          'var d = new Date();</br>document.write(d.toLocaleTimeString());'
      },
      toLocaleDateString: {
        defination: '根据本地时间格式，把 Date 对象的日期部分转换为字符串',
        syntax: 'dateObject.toLocaleDateString()',
        parameters: '{Null}',
        return: 'String',
        demo:
          'var d = new Date();</br>document.write(d.toLocaleDateString());'
      },
      UTC: {
        defination: '根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数',
        syntax: 'Date.UTC(year,month,day,hours,minutes,seconds,ms)',
        parameters:
          '{Number} year 表示年份的四位数字<br/>          {Number} month 表示月份的整数<br/>          {Number} day 表示日期的整数<br/>          {Number} hours 可选 表示小时的整数<br/>          {Number} minutes 可选 表示分钟的整数<br/>          {Number} seconds 可选 表示秒的整数<br/>          {Number} ms 可选 表示毫秒的整数',
        return: 'Number',
        demo: 'var d = Date.UTC(2005,7,8)'
      }
    },
    数组: {
      concat: {
        defination: '连接两个或更多的数组，并返回结果',
        syntax: 'arrayObject.concat(arrayX,arrayX,...,arrayX)',
        parameters:
          '{Array} arrayX 该参数可以是具体的值，也可以是数组对象。可以是任意多个',
        return: 'Array',
        demo:
          'var a = [1,2,3];<br/>document.write(a.concat(4,5));'
      },
      join: {
        defination:
          '把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔',
        syntax: 'arrayObject.join(separator)',
        parameters: '{String} separator 指定要使用的分隔符',
        return: 'String',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.join('.'));"
      },
      pop: {
        defination: '删除并返回数组的最后一个元素',
        syntax: 'arrayObject.pop()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.pop());"
      },
      push: {
        defination: '向数组的末尾添加一个或更多元素，并返回新的长度',
        syntax: 'arrayObject.push(newelement1,newelement2,...,newelementX)',
        parameters:
          '{String} newelement1 要添加到数组的第一个元素<br/>          {String} newelement2 可选 要添加到数组的第二个元素<br/>          {String} newelementX 可选 可添加多个元素',
        return: 'Number',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.push('James'));"
      },
      reverse: {
        defination: '颠倒数组中元素的顺序',
        syntax: 'arrayObject.reverse()',
        parameters: '{Null}',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.reverse());"
      },
      shift: {
        defination: '删除并返回数组的第一个元素',
        syntax: 'arrayObject.shift()',
        parameters: '{Null}',
        return: 'String',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.shift());"
      },
      slice: {
        defination: '从某个已有的数组返回选定的元素',
        syntax: 'arrayObject.slice(start,end)',
        parameters:
          '{Number} start 开始位置<br/>          {Number} end 可选 结束位置',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.slice(1));"
      },
      sort: {
        defination: '对数组的元素进行排序',
        syntax: 'arrayObject.sort(sortby)',
        parameters: '{Function} sortby 可选 规定排序顺序。必须是函数。',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.sort());"
      },
      splice: {
        defination: '删除元素，并向数组添加新元素',
        syntax: 'arrayObject.splice(index,howmany,item1,...,itemX)',
        parameters:
          '{Number} index 规定添加/删除项目的位置，使用负数可从数组结尾处规定位置<br/>          {Number} howmany 要删除的项目数量<br/>          {String} item1, ..., itemX 向数组添加的新项目',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>arr.splice(2,1,'William');"
      },
      toString: {
        defination: '把数组转换为字符串，并返回结果',
        syntax: 'arrayObject.toString()',
        parameters: '{Null}',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.toString());"
      },
      toLocaleString: {
        defination: '把数组转换为本地数组，并返回结果',
        syntax: 'arrayObject.toLocaleString()',
        parameters: '{Null}',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.toLocaleString());"
      },
      unshift: {
        defination: '向数组的开头添加一个或更多元素，并返回新的长度',
        syntax: 'arrayObject.unshift(newelement1,newelement2,...,newelementX)',
        parameters:
          '{String} newelement1 向数组添加的第一个元素<br/>          {String} newelement2 向数组添加的第二个元素<br/>          {String} newelementX 可添加若干个元素',
        return: 'Array',
        demo:
          "var arr = new Array(3);<br/>arr[0] = 'George';<br/>arr[1] = 'John';<br/>arr[2] = 'Thomas'<br/>document.write(arr.unshift('William');"
      }
    },
    数字: {
      toString: {
        defination: '把数字转换为字符串，使用指定的基数',
        syntax: 'NumberObject.toString(radix)',
        parameters: '{Number} radix 可选 规定表示数字的基数，2 ~ 36 之间的整数',
        return: 'String',
        demo:
          'var number = new Number(1337);<br/>document.write (number.toString());'
      },
      toLocaleString: {
        defination: '把数字转换为字符串，使用本地数字格式顺序',
        syntax: 'NumberObject.toLocaleString()',
        parameters: '{Null}',
        return: 'String',
        demo: ''
      },
      toFixed: {
        defination: '把数字转换为字符串，结果的小数点后有指定位数的数字',
        syntax: 'NumberObject.toFixed(num)',
        parameters: '{Number} num 规定小数的位数',
        return: 'String',
        demo:
          'var num = new Number(13.37);<br/>document.write (num.toFixed(1));'
      },
      toExponential: {
        defination: '把对象的值转换为指数计数法',
        syntax: 'NumberObject.toExponential(num)',
        parameters: '{Number} num 规定指数计数法中的小数位数',
        return: 'String',
        demo:
          'var num = new Number(10000);<br/>document.write (num.toExponential(1));'
      },
      toPrecision: {
        defination: '把数字格式化为指定的长度',
        syntax: 'NumberObject.toPrecision(num)',
        parameters: '{Number} num 规定必须被转换为指数计数法的最小位数',
        return: 'String',
        demo:
          'var num = new Number(10000);<br/>document.write(num.toPrecision(4));'
      }
    },
    正则表达式: {
      compile: {
        defination: '编译正则表达式',
        syntax: 'RegExpObject.compile(regexp,modifier)',
        parameters:
          '{RegExp} regexp 正则表达式<br/>          {String} modifier 规定匹配的类型',
        return: 'Object',
        demo:
          "var str='Every man in the world! Every woman on earth!';<br/>patt=/(wo)?man/g;;<br/>patt.compile(patt);<br/>str2=str.replace(patt,'person');"
      },
      exec: {
        defination: '检索字符串中指定的值',
        syntax: 'RegExpObject.exec(string)',
        parameters: '{String} 要检索的字符串',
        return: 'Array',
        demo:
          'var str = "Visit W3School";<br/>var patt = new RegExp("W3School","g");<br/>var result;<br/>while ((result = patt.exec(str)) != null) {<br/>&nbsp&nbsp&nbsp&nbspdocument.write(result);<br/>&nbsp&nbsp&nbsp&nbspdocument.write(patt.lastIndex);<br/>}'
      },
      test: {
        defination: '检索字符串中指定的值',
        syntax: 'RegExpObject.test(string)',
        parameters: '{String} string 要检测的字符串',
        return: 'Boolean',
        demo:
          "var str = 'Visit W3School';<br/>var patt1 = new RegExp('W3School');<br/>var result = patt1.test(str);"
      }
    },
    全局: {
      escape: {
        defination: '对字符串进行编码',
        syntax: 'escape(string)',
        parameters: '{String} string 要被转义或编码的字符串',
        return: 'String',
        demo: "document.write(escape('?!=()#%&'));"
      },
      eval: {
        defination: '计算 JavaScript 字符串，并把它作为脚本代码来执行',
        syntax: 'eval(string)',
        parameters: '{String} string 要计算的字符串',
        return: 'Undefined',
        demo: "eval('x=10;y=20;document.write(x*y)');"
      },
      isNaN: {
        defination: '检查某个值是否是数字',
        syntax: 'isNaN(x)',
        parameters: '{Number} x 要检测的值',
        return: 'Boolean',
        demo: 'document.write(isNaN(123));'
      },
      parseFloat: {
        defination: '解析一个字符串并返回一个浮点数',
        syntax: 'parseFloat(string)',
        parameters: '{String} string 要被解析的字符串',
        return: 'Number',
        demo: "document.write(parseFloat('10.00'));"
      },
      parseInt: {
        defination: '解析一个字符串并返回一个整数',
        syntax: 'parseInt(string, radix)',
        parameters:
          '{String} string 要被解析的字符串<br/>          {Number} radix 表示要解析的数字的基数',
        return: 'Number',
        demo: "parseInt('19',10);"
      },
      unescape: {
        defination: '对由 escape() 编码的字符串进行解码',
        syntax: 'unescape(string)',
        parameters: '{String} string 要解码或反转义的字符串',
        return: 'String',
        demo:
          "var test1='Visit W3School!';<br/>test1=escape(test1);"
      }
    },
    JSON: {
      parse: {
        defination: '将一个JSON字符串转换为JavaScript对象',
        syntax: 'parse(text)',
        parameters: '{String} text 一个有效的JSON字符串',
        return: 'Undefined',
        demo:
          "var str = '{'name':'leo', 'age':18}';<br/>document.write(JSON.parse(str));"
      },
      stringify: {
        defination: '将JavaScript值转换为JSON字符串参数',
        syntax: 'stringify(value)',
        parameters: '{Object} value 要转换的JavaScript值',
        return: 'Undefined',
        demo:
          "var str = {'name':'leo', 'age':18};<br/>document.write(JSON.stringify(str));"
      }
    },
    Document: {
      close: {
        defination: '关闭用 document.open() 方法打开的输出流，并显示选定的数据',
        syntax: 'document.close()',
        parameters: '{Null}',
        return: 'Object',
        demo:
          'var newDoc = document.open("text/html","replace");<br/>var txt = "<html><body>Learning about the DOM is FUN!</body></html>";<br/>newDoc.write(txt);<br/>newDoc.close();'
      },
      getElementById: {
        defination: '关闭用 document.open() 方法打开的输出流，并显示选定的数据',
        syntax: 'document.getElementById(id)',
        parameters: '{String} id 元素id属性',
        return: 'Object',
        demo: 'var x = document.getElementById("myHeader");'
      },
      getElementsByName: {
        defination: '返回带有指定名称的对象集合',
        syntax: 'document.getElementsByName(name)',
        parameters: '{String} name 元素name属性',
        return: 'Object',
        demo: 'var x = document.getElementsByName("myInput");'
      },
      getElementsByTagName: {
        defination: '返回拥有指定标签名的所有子元素的集合',
        syntax: 'element.getElementsByTagName(tagname)',
        parameters: '{String} tagname 需要获得的子元素的标签名',
        return: 'Object',
        demo:
          "var list=document.getElementsByTagName('UL')[0];<br/>    list.getElementsByTagName('LI')[0].innerHTML='Milk';"
      },
      open: {
        defination:
          '打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出',
        syntax: 'document.open(mimetype,replace)',
        parameters:
          '{Object} mimetype 可选 规定正在写的文档的类型<br/>          {Object} replace 可选 新文档从父文档继承历史条目',
        return: 'Object',
        demo: 'var newDoc=document.open("text/html","replace");'
      },
      write: {
        defination: '向文档写 HTML 表达式 或 JavaScript 代码',
        syntax: 'document.write(exp1,exp2,exp3,...)',
        parameters: '{String} exp1,exp2,exp3 想要写入的HTML或JavaScript',
        return: 'Undefined',
        demo: 'document.write("Hello World!");'
      },
      writeln: {
        defination: '等同于 write() 方法，不同的是在每个表达式之后写一个换行符',
        syntax: 'document.writeln(exp1,exp2,exp3,...)',
        parameters: '{String} exp1,exp2,exp3 想要写入的HTML或JavaScript',
        return: 'Undefined',
        demo: 'document.writeln("Hello World!");'
      }
    },
    Element: {
      appendChild: {
        defination: '向元素添加新的子节点，作为最后一个子节点',
        syntax: 'node.appendChild(node)',
        parameters: '{Object} node 希望添加的节点对象',
        return: 'Object',
        demo: "document.getElementById('myList').appendChild(newListItem);"
      },
      cloneNode: {
        defination: '克隆元素',
        syntax: 'node.cloneNode(deep)',
        parameters: '{Boolean} deep',
        return: 'Object',
        demo:
          "var node=document.getElementById('myList2').lastChild.cloneNode(true);<br/>    document.getElementById('myList1').appendChild(node);"
      },
      compareDocumentPosition: {
        defination: '比较两个元素的文档位置',
        syntax: 'node.compareDocumentPosition(node)',
        parameters: '{Object} node 规定于当前节点作比较的节点',
        return: 'Number',
        demo:
          "var p1=document.getElementById('p1');<br/>    var p2=document.getElementById('p2');<brt/>    p1.compareDocumentPosition(p2);"
      },
      getAttribute: {
        defination: '返回元素节点的指定属性值',
        syntax: 'element.getAttribute(attributename)',
        parameters: '{String} attributename 需要获得属性值的属性名称',
        return: 'String',
        demo: "document.getElementsByTagName('a')[0].getAttribute('target');"
      },
      getAttributeNode: {
        defination: '返回指定的属性节点',
        syntax: 'element.getAttributeNode(attributename)',
        parameters: '{String} attributename 需要返回的属性的名称',
        return: 'Object',
        demo:
          "document.getElementsByTagName('a')[0].getAttributeNode('target');"
      },
      hasAttribute: {
        defination: '如果元素拥有指定属性，则返回true，否则返回 false',
        syntax: 'element.hasAttribute(attributename)',
        parameters: '{String} attributename 需要检查是否存在的属性名称',
        return: 'Boolean',
        demo:
          "document.getElementsByTagName('BUTTON')[0].hasAttribute('onclick');"
      },
      hasAttributes: {
        defination: '如果元素拥有属性，则返回 true，否则返回 false',
        syntax: 'node.hasAttributes()',
        parameters: '{Null}',
        return: 'Boolean',
        demo: 'document.body.hasAttributes()'
      },
      hasChildNodes: {
        defination: '如果元素拥有子节点，则返回 true，否则 false',
        syntax: 'node.hasChildNodes()',
        parameters: '{Null}',
        return: 'Boolean',
        demo: "document.getElementById('myList').hasChildNodes();"
      },
      insertBefore: {
        defination: '在指定的已有的子节点之前插入新节点',
        syntax: 'node.insertBefore(newnode,existingnode)',
        parameters:
          '{Object} newnode 需要插入的节点对象<br/>          {Object} existingnode 在其之前插入新节点的子节点',
        return: 'Object',
        demo:
          "document.getElementById('myList').insertBefore(newItem,existingItem);"
      },
      isDefaultNamespace: {
        defination:
          '如果指定的 namespaceURI 是默认的，则返回 true，否则返回 false',
        syntax: 'node.isDefaultNamespace(namespaceURI)',
        parameters: '{String} namespace 需要检查的命名空间的 URI',
        return: 'Boolean',
        demo:
          "document.documentElement.isDefaultNamespace('http://www.w3.org/1999/xhtml');"
      },
      isEqualNode: {
        defination: '检查两个元素是否相等',
        syntax: 'node.isEqualNode(node)',
        parameters: '{Object} node 希望与指定节点比较的节点',
        return: 'Boolean',
        demo:
          "var item1=document.getElementById('myList1').firstChild;<br/>    var item2=document.getElementById('myList2').firstChild;<br/>    item1.isEqualNode(item2);"
      },
      isSameNode: {
        defination: '检查两个元素是否是相同的节点',
        syntax: 'node.isSameNode(node)',
        parameters: '{Object} node 希望与指定节点比较的节点',
        return: 'Boolean',
        demo:
          "var item1=document.getElementById('myList1');<br/>    var item2=document.getElementsByTagName('UL')[0];<br/>    item1.isSameNode(item2);"
      },
      isSupported: {
        defination: '如果元素支持指定特性，则返回 true',
        syntax: 'node.isSupported(feature,version)',
        parameters:
          '{String} feature 定义需要检查是否得到支持的特性<br/>          {String} version 可选 定义需要检查是否得到支持的特性版本',
        return: 'Boolean',
        demo:
          "var item=document.getElementsByTagName('BUTTON')[0];<br/>    item.isSupported('Core','2.0');"
      },
      normalize: {
        defination: '合并元素中相邻的文本节点，并移除空的文本节点',
        syntax: 'node.normalize()',
        parameters: '{Null}',
        return: 'Undefined',
        demo: "xmlDoc.getElementById('demo').normalize();"
      },
      removeAttribute: {
        defination: '从元素中移除指定属性',
        syntax: 'element.removeAttribute(attributename)',
        parameters: '{String} attributename 希望移除的属性的名称',
        return: 'Undefined',
        demo: "document.getElementsByTagName('H1')[0].removeAttribute('style');"
      },
      removeAttributeNode: {
        defination: '移除指定的属性节点，并返回被移除的节点',
        syntax: 'element.removeAttributeNode(attributenode)',
        parameters: '{Object} attributenode 希望移除的属性节点',
        return: 'Object',
        demo:
          "var n=document.getElementsByTagName('INPUT')[0];<br/>    var a=n.getAttributeNode('type');<br/>    n.removeAttributeNode(a);"
      },
      removeChild: {
        defination: '从元素中移除子节点',
        syntax: 'node.removeChild(node)',
        parameters: '{Object} node 希望删除的节点对象',
        return: 'Object',
        demo:
          "var list=document.getElementById('myList');<br/>    list.removeChild(list.childNodes[0]);"
      },
      replaceChild: {
        defination: '替换元素中的子节点',
        syntax: 'node.replaceChild(newnode,oldnode)',
        parameters:
          '{Object} newnode 希望插入的节点对象<br/>          {Object} oldnode 希望删除的节点对象',
        return: 'Object',
        demo: "document.getElementById('myList').replaceChild(newnode,oldnode);"
      },
      setAttribute: {
        defination: '把指定属性设置或更改为指定值',
        syntax: 'element.setAttribute(attributename,attributevalue)',
        parameters:
          '{Object} attributename 希望添加的属性的名称<br/>          {Object} attributevalue 希望添加的属性值',
        return: 'Undefined',
        demo:
          "document.getElementsByTagName('INPUT')[0].setAttribute('type','button');"
      },
      setAttributeNode: {
        defination: '设置或更改指定属性节点',
        syntax: 'element.setAttributeNode(attributenode)',
        parameters: '{Object} attributenode 希望添加的属性节点',
        return: 'Undefined',
        demo:
          "var atr=document.createAttribute('class');<br/>    atr.nodeValue='democlass';<br/>    document.getElementsByTagName('H1')[0].setAttributeNode(atr);"
      },
      item: {
        defination: '返回 NodeList 中位于指定下标的节点',
        syntax: 'nodelist.item(index)',
        parameters: '{Number} index 被返回节点在节点列表中的索引',
        return: 'Object',
        demo: 'document.body.childNodes.item(0);'
      }
    },
    Attribute: {
      getNamedItem: {
        defination: '从 NamedNodeMap 返回指定的属性节点',
        syntax: 'namednodemap.getNamedItem(name)',
        parameters: '{String} nodename 希望返回的 namedNodeMap 中节点的名称',
        return: 'Object',
        demo:
          "var btn=document.getElementsByTagName('BUTTON')[0];<br/>    btn.attributes.getNamedItem('onclick').textContent;"
      },
      item: {
        defination: '返回 NamedNodeMap 中位于指定下标的节点',
        syntax: 'namednodemap.item(index)',
        parameters: '{Number} index 希望返回的 namedNodeMap 中节点的索引',
        return: 'Object',
        demo:
          "document.getElementsByTagName('BUTTON')[0].attributes.item(0).nodeName;"
      },
      removeNamedItem: {
        defination: '移除指定的属性节点',
        syntax: 'namednodemap.removeNamedItem(nodename)',
        parameters: '{String} nodename 希望删除的 namedNodeMap 中节点的名称',
        return: 'Object',
        demo:
          "var btn=document.getElementsByTagName('INPUT')[0];<br/>    btn.attributes.removeNamedItem('type');"
      },
      setNamedItem: {
        defination: '设置指定的属性节点（通过名称）',
        syntax: 'namednodemap.setNamedItem(node)',
        parameters: '{Object} node 需要在 namedNodeMap 集合中添加/替换的节点',
        return: 'Object',
        demo:
          "var btn=document.getElementsByTagName('h1')[0];<br/>    var typ=document.createAttribute('class');<br/>    typ.nodeValue='democlass';<br/>    btn.attributes.setNamedItem(typ);"
      }
    },
    localStorage: {
      setItem: {
        defination: '存储数据,键/值对始终存储为字符串',
        syntax: 'localStorage.setItem(("key", "value");',
        parameters:
          '{String} key 键 <br/>          {String} value 值',
        return: 'Undefined',
        demo: "localStorage.setItem('myCat', 'Tom');"
      },
      getItem: {
        defination: '读取数据，key存储为字符串',
        syntax: 'localStorage.getItem(key);',
        parameters: '{String} key 键',
        return: 'String',
        demo: "localStorage.getItem('myCat');"
      },
      removeItem: {
        defination: '删除单个数据，key存储为字符串',
        syntax: 'localStorage.removeItem(key);',
        parameters: '{String} key 键',
        return: 'Undefined',
        demo: "localStorage.removeItem('myCat');"
      },
      clear: {
        defination: '删除所有数据',
        syntax: 'localStorage.clear();',
        parameters: '{Null}',
        return: 'Undefined',
        demo: 'localStorage.clear();'
      },
      key: {
        defination: '得到某个索引的key',
        syntax: 'localStorage.key(index);',
        parameters: '{String} index 索引值',
        return: 'String',
        demo: 'localStorage.key("myCat");'
      },
      综合示例: {
        demo:
          "//获取对象\nvar localstroage = window.localStorage;\n//存储数据(存储名字为name值为value的变量)\nlocalstroage.setItem('name','value');\n//读取数据(读取localstroage对象名里为name的变量值)\nlocalstroage.getItem('name');\n//读取localstroage对象中的全部数据\nlocalstroage.valueOf();\n//删除某个指定数据\nlocalstroage.removeItem('name');\n//删除localstroage对象中所有的数据\nLocalstroage.clear();"
      }
    },
    sessionStorage: {
      setItem: {
        defination: '存储数据,键/值对始终存储为字符串',
        syntax: 'sessionStorage.setItem(("key", "value");',
        parameters:
          '{String} key 键 <br/>          {String} value 值',
        return: 'Undefined',
        demo: "sessionStorage.setItem('myCat', 'Tom');"
      },
      getItem: {
        defination: '读取数据，key存储为字符串',
        syntax: 'sessionStorage.getItem(key);',
        parameters: '{String} key 键',
        return: 'String',
        demo: "sessionStorage.getItem('myCat');"
      },
      removeItem: {
        defination: '删除单个数据，key存储为字符串',
        syntax: 'sessionStorage.removeItem(key);',
        parameters: '{String} key 键',
        return: 'Undefined',
        demo: "sessionStorage.removeItem('myCat');"
      },
      clear: {
        defination: '删除所有数据',
        syntax: 'sessionStorage.clear();',
        parameters: '{Null}',
        return: 'Undefined',
        demo: 'localStorage.clear();'
      },
      key: {
        defination: '得到某个索引的key',
        syntax: 'sessionStorage.key(index);',
        parameters: '{Null}',
        return: 'String',
        demo: "localStorage.key('myCat');"
      },
      综合示例: {
        demo:
          "//获取对象\n                var sessionStorage = window.sessionStorage;\n                //存储数据(存储名字为name值为value的变量)\n                sessionStorage.setItem('name','value');\n                //读取数据(读取sessionStorage对象名里为name的变量值)\n                sessionStorage.getItem('name');\n                //读取sessionStorage对象中的全部数据\n                sessionStorage.valueOf();\n                //删除某个指定数据\n                sessionStorage.removeItem('name');\n                //删除sessionStorage对象中所有的数据\n                sessionStorage.clear();"
      }
    },
    'Web Sql': {
      openDatabase: {
        defination: '使用现有的数据库或者新建的数据库创建一个数据库对象',
        syntax: 'openDatabase(name, version, discriptionText, estimatedSize);',
        parameters:
          '{String} Name 数据库名字<br/>          {String} Version 版本号<br/>          {String} discriptionText 描述文本<br/>          {Number} estimatedSize 数据库的大小',
        return: 'Object',
        demo:
          "var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);"
      },
      transaction: {
        defination: '通过事务对象，执行提交或回滚操作',
        syntax: 'transaction();',
        parameters:
          '{String} Name 数据库名字<br/>          {String} Version 版本号<br/>          {String} discriptionText 描述文本<br/>          {Number} estimatedSize 数据库的大小<br/>          {Function} creationCallback 回调函数',
        return: 'Undefined',
        demo:
          "var db = openDatabase('mydb', '1.0', 'Test DB', 2 * 1024 * 1024);<br/>db.transaction(function (tx) {<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql('CREATE TABLE IF NOT EXISTS LOGS (id unique, log)');<br/>});"
      },
      executeSql: {
        defination: '执行sql语句',
        syntax: 'executeSql(sqlStatement, parameters, callBack, errorCallback);',
        parameters:
          '{String} sqlStatement sql语句<br/>          {String} parameters 可选 实参的数组<br/>          {Function} callback 可选 回调<br/>          {Function} errorCallback 出错时的回调',
        return: 'Undefined',
        demo:
          'var db = openDatabase("mydb", "1.0", "Test DB", 2 * 1024 * 1024);<br/>db.transaction(function (tx) {<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql("CREATE TABLE IF NOT EXISTS LOGS (id unique, log)");<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql("INSERT INTO LOGS (id, log) VALUES (1, "菜鸟教程")");<br/>&nbsp&nbsp&nbsp&nbsptx.executeSql("INSERT INTO LOGS (id, log) VALUES (2, "www.runoob.com")");<br/>});'
      }
    },
    'Web Worker': {
      postMessage: {
        defination: '发送数据',
        syntax: 'postMessage();',
        parameters: '{Null}',
        return: '',
        demo: ''
      },
      onMessage: {
        defination: '接收数据',
        syntax: 'onMessage();',
        parameters: '{Null}',
        return: '',
        demo: ''
      }
    }
  }
}

export default scriptDoc
