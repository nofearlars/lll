import React from 'react'
import { api, app } from 'xadmin'
import apiDoc from './apiDoc.json'
import { Layout, Button, Modal, Menu, Typography, Table, Tag } from 'antd'
import scriptDoc from './scriptDoc'
import EditFunction from './EditFunction'
import _ from 'lodash'
import './apiDoc.css'


const { SubMenu } = Menu
const { Header, Content, Footer, Sider } = Layout
const { Title, Paragraph } = Typography

const DocModal = ({ handleOk }) => {
  const [isFuncDocModalShow, setFuncDocModalShow] = React.useState(false)
  const [choose, setChoose] = React.useState(apiDoc?.functions?.[0]?.name)
  const [customList, setCustomList] = React.useState([])

  const { t:_t1 } = useI18n()
  // 二次开发函数
  let functionList2 = {}
  try {
    functionList2 = app.get('functionList2')
  } catch (e) { console.error(e) }

  React.useEffect(() => {
    getCList()
  }, [isFuncDocModalShow])

  const getCList = () => {
    api({ name: 'core/scriptSetting' }).query({ fields: ['content', 'description'] }, {})
    .then(({ items }) => {
      setCustomList(items)
    })
  }

  const showFuncDocModal = () => {
    setFuncDocModalShow(true)
  }

  const handleCancel = () => {
    setFuncDocModalShow(false)
  }

  // 参数处理成树形结构
  const getDocParams = () => {
    let list = _.cloneDeep(getChooseDoc(choose, customList, functionList2).parameters)
    let result = []
    list &&
      list.forEach(item => {
        item.key = item.name
        let index = item.name.lastIndexOf('.')
        let parentKey = item.name.substring(0, index)
        let parent = list.filter(item1 => item1.name === parentKey)[0]
        if (parent) {
          if (parent.children) {
            parent.children.push(item)
          } else {
            parent.children = [item]
          }
        } else {
          result.push(item)
        }
      })
    return result
  }

  let dd = getChooseDoc(choose, customList, functionList2)
  return (
    <>
      <Button.Group size='small'>
        <Button onClick={showFuncDocModal}>{_t1('函数')}</Button>
      </Button.Group>
      <Modal
        title={_t1('函数文档')}
        visible={isFuncDocModalShow}
        okText={_t1('插入函数')}
        onOk={() => {
          handleOk(getAddContent(dd, choose))
          setFuncDocModalShow(false)
        }}
        onCancel={handleCancel}
        width='70%'
        bodyStyle={{ padding: 10 }}
      >
        <Layout style={{ backgroundColor: '#fff' }}>
          <Sider theme="light" width={250} style={{ height: 500, overflowY: 'scroll' }}>
            <DocMenu apiDoc={apiDoc} choose={choose} setChoose={setChoose} customList={customList} getCList={getCList} />
          </Sider>
          {
            dd.content ?
            <InfoShowCustom dd={dd} getDocParams={getDocParams} />
            : <InfoShow dd={dd} getDocParams={getDocParams} />
          }
          
        </Layout>
      </Modal>
    </>
  )
}

const getAddContent = (dd, choose) => {
  if (dd?.syntax) { // 语法
    return dd.syntax
  } else if (dd?.content) { // 自定义函数，函数名提取
    let name = dd.content.split('function ')?.[1]?.split(' (')?.[0]
    return name ? (name + '()') : ''
  } else {
    return choose
  }
}

const InfoShow = ({ dd, getDocParams }) => {
  const { t:_t1 } = useI18n()
  const columns = [
    {
      title: _t1('名称'),
      dataIndex: 'name',
      key: 'name',
      width: 300
    },
    {
      title: _t1('类型'),
      dataIndex: 'type',
      key: 'type'
    },
    {
      title: _t1('描述'),
      dataIndex: 'description',
      key: 'description',
      render: value => (
        <span
          className='doc-description'
          dangerouslySetInnerHTML={{ __html: _t1(value) }}
        ></span>
      )
    }
  ]
  console.log(999, dd)
  return <Content style={{ padding: '0 24px', height: 500, overflowY: 'scroll' }}>
    <Title level={5}>{_t1('定义')}</Title>
    <Paragraph>
      <span
        dangerouslySetInnerHTML={{ __html: _t1(dd.description) }}
      ></span>
    </Paragraph>
    {
      dd.syntax && (<>
        <Title level={5}>{_t1('语法')}</Title>
        <Paragraph>
          <pre className='prettyprint source'>
            <code dangerouslySetInnerHTML={{ __html: dd.syntax }} />
          </pre>
        </Paragraph>
      </>)
    }
    <Title level={5}>{_t1('参数')}</Title>
    <Paragraph>
      { _.isString(dd.parameters) ? // js 原生函数
        <span dangerouslySetInnerHTML={{ __html: dd.parameters }} /> :
        dd.parameters?.length > 0 && ( // 原生函数
        <Table
          size='small'
          pagination={false}
          dataSource={getDocParams()}
          columns={columns}
        />
        )
      }
    </Paragraph>
    <Title level={5}>{_t1('返回值')}</Title>
    <Paragraph>
      {dd.returns && (
        <>
          {
            dd.returns?.type && <Tag color='magenta' style={{ marginBottom: 5 }}>
              {dd.returns.type}
            </Tag>
          }
          <span
            dangerouslySetInnerHTML={{
              __html: _t1(dd.returns?.description)
            }}
          ></span>
        </>
      )}
    </Paragraph>
    <ExampleComponent chooseDoc={dd} />
  </Content>
}

const InfoShowCustom = ({ dd }) => {
  const { t:_t1 } = useI18n()
  return <Content style={{ padding: '0 24px', height: 500, overflowY: 'scroll' }}>
    <Title level={5}>{_t1('名称')}</Title>
    <Paragraph>
      <span
        dangerouslySetInnerHTML={{ __html: _t1(dd.name) }}
      ></span>
    </Paragraph>
    <Title level={5}>{_t1('内容')}</Title>
    <Paragraph>
      <span
        dangerouslySetInnerHTML={{ __html: dd.content }}
      ></span>
    </Paragraph>
    <Title level={5}>{_t1('说明')}</Title>
    <Paragraph>
      <span
        dangerouslySetInnerHTML={{ __html: dd.description }}
      ></span>
    </Paragraph>
  </Content>
}

const ExampleComponent = ({ chooseDoc }) => {
  const [highExample, setHighExample] = React.useState(false)
  const { t:_t1 } = useI18n()

  return chooseDoc.highExample ? (
    <>
      <Title level={5}>
        {highExample ? _t1('复杂示例') : _t1('简单示例')}
        <span
          className='doc-title-button'
          onClick={() => setHighExample(!highExample)}
        >
          {highExample ? `【${_t1('简单示例')}】` : `【${_t1('复杂示例')}】`}
        </span>
      </Title>
      <Paragraph>
        {highExample ? (
          <pre className='prettyprint source'>
            <code
              dangerouslySetInnerHTML={{ __html: chooseDoc.highExample }}
            ></code>
          </pre>
        ) : (
          <span dangerouslySetInnerHTML={{ __html: chooseDoc.example }}></span>
        )}
      </Paragraph>
    </>
  ) : (
    <>
      <Title level={5}>{_t1('示例')}</Title>
      <Paragraph>
        <span dangerouslySetInnerHTML={{ __html: chooseDoc.example }}></span>
      </Paragraph>
    </>
  )
}

const DocMenu = ({ apiDoc, choose, setChoose, customList, getCList }) => {
  const { t:_t1 } = useI18n()

  // 系统函数、画面函数
  let funObj = {}
  apiDoc?.functions?.forEach(item => {
    let strList = item.description?.split(`\n<h3>${_t1('使用示例')}</h3>\n`)
    let type = strList?.[0]?.match(/\[[\s\S]+\]/g)?.[0]
    if (funObj[type]) {
      funObj[type].push({ name: item.name })
    } else {
      funObj[type] = [{ name: item.name }]
    }
  })
  let menuList = []
  let dashboardList = []
  for (let key in funObj) {
    if (key === `[画面]`) {
      dashboardList = funObj[key]?.map(item => (
        <Menu.Item key={item.name}>{item.name}</Menu.Item>
      ))
    } else {
      menuList.push(
        <SubMenu key={key} title={_t1(key?.substring(1, key.length - 1))}>
          {funObj[key]?.map(item => (
            <Menu.Item key={item.name}>{item.name}</Menu.Item>
          ))}
        </SubMenu>
      )
    }
  }

  // js 原生函数
  let scriptList = []
  let fns = scriptDoc.scriptFun
  for (let key in fns) {
    let scriptList1 = []
    for (let key1 in fns[key]) {
      if (fns[key][key1].length > 1) { // 有下一级
        scriptList1.push(
          <SubMenu key={key1} title={key1}>
            {fns[key][key1]?.map(item => (
              <Menu.Item key={key1 + '-' + item}>{item}</Menu.Item>
            ))}
          </SubMenu>
        )
      } else {
        scriptList1.push(
          <Menu.Item key={key + '-' + key1}>{key1}</Menu.Item>
        )
      }
    }
    scriptList.push(<SubMenu key={key} title={_t1(key)} >{scriptList1}</SubMenu>)
  }

  // 二次开发函数
  let functionList2 = {}
  try {
    functionList2 = app.get('functionList2')
  } catch (e) { console.error(e) }
  const twoList = Object.keys(functionList2).map(key => {
    return <Menu.Item key={key}>{functionList2[key].name}</Menu.Item>
  })

  return (
    <Menu
      onClick={e => setChoose(e.key)}
      mode='inline'
      defaultSelectedKeys={[choose]}
      defaultOpenKeys={['inside-function',`[${_t1('模型')}]`]}
      style={{ height: '100%' }}
    >
      <SubMenu key='inside-function' title={_t1('系统函数')}>
        {menuList}
      </SubMenu>
      <SubMenu key='dashboard-function' title={_t1('画面函数')}>
        {dashboardList}
      </SubMenu>
      <SubMenu key='custom-function' title={_t1('自定义函数')}>
        {
          customList?.map(item => (
            <Menu.Item key={item.id}>{item.name}<EditFunction item={item} getCList={getCList} /></Menu.Item>
          ))
        }
      </SubMenu>
      <SubMenu key='two-function' title={_t1('二次开发函数')}>
        {twoList}
      </SubMenu>
      {scriptList}
    </Menu>
  )
}

// 根据函数名获取函数详情
const getChooseDoc = (choose, customList, functionList2) => {
  let result = {
    name: '',
    description: '',
    parameters: [],
    example: ''
  }
  // 系统函数
  if (apiDoc) {
    for (let key in apiDoc) {
      apiDoc[key]?.forEach(item => {
        let strList = item.description?.split(`\n<h3>${_r('使用示例')}</h3>\n`)
        let regex = /\[[\s\S]+\]/g
        let type = strList?.[0]?.match(regex)?.[0]
        if (item.name === choose) {
          result = {
            name: _t1(item.name),
            type: type ? type.substring(1, type.length - 1) : null,
            description: _t1(strList?.[0]?.replace(regex, '')),
            parameters: item.parameters,
            returns: item.returns,
            example: strList?.[1],
            highExample: item.examples[0]
          }
        }
      })
    }
  }
  // js 原生函数
  if (scriptDoc?.scriptFunDetail) {
    let cl = choose.split('-')
    let item = scriptDoc.scriptFunDetail?.[cl[0]]?.[cl[1]]
    if (item && typeof item === 'object') {
      result = {
        syntax: item.syntax,
        description: item.defination,
        parameters: item.parameters,
        returns: { type: item.return },
        example: `<pre class=\"prettyprint source\"><code>${item.demo}</code></pre>`
      }
    }
  }
  // 自定义函数
  if (customList) {
    let c = customList.find(item => item.id === choose)
    if (c) result = c
  }
  // 二次开发函数
  if (functionList2?.[choose]) {
    result = functionList2?.[choose]
  }
  return result
}

export default DocModal
