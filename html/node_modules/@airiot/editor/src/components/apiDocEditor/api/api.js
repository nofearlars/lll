import { api } from 'xadmin'
//////

/**
 * [工作表]查询工作表列表
 *
 * ### 使用示例
 *
 * ```
 * getTableList().then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {Object} filter - 查询条件（可选）
 * @param {Number} filter.limit - 查询条数（默认30）
 * @param {Number} filter.skip - 跳过条数（默认0）
 * @param {Object} filter.order - 排序
 * @param {Array} filter.fields - 查询字段（默认name）
 * @param {Object} filter.where - 查询条件
 * @param {String} filter.where.name - 工作表名称
 * @param {String} filter.where.title - 工作表标题
 * @param {Object} filter.where.schema - 属性配置
 * @param {Array} filter.where.dashboard - 关联画面
 * @param {Object} filter.where.permission - 工作表权限
 * @param {Array} filter.where.mutualRules - 字段规则
 * @param {Array} filter.where.errorNotice - 错误提示
 * @param {Object} filter.where.syncSettings - 同步数据
 * @param {Object} filter.where.creator - 创建人
 * @param {String} filter.where.createTime - 创建时间
 * @example 
 * getTableList({ limit: 10, skip: 0, order: { name: 'DESC' }, fields: ['title', 'device'], where: { id: '工作表名称' } }).then(data => {
 *    console.log(data)
 * })
 * @returns {Object} { total: 总条数, items: 工作表列表 }
 */
 const getTableList = async (filter) => {
  filter = filter || {}
  let obj = {
    limit: filter.limit || 30,
    skip: filter.skip || 0,
    order: filter.order,
    fields: filter.fields,
    withCount: true
  }
  let result = await api({ name: 'core/t/schema' })
    .query(obj, filter.where ? { where: filter.where } : {})
    .then(data => data)
    .catch(err => err)
  return result
}

/**
 * [工作表]根据id查询工作表详情
 *
 * ### 使用示例
 *
 * ```
 * getTableById("619344aa3752eb45f783a0c4").then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} id - 工作表名称
 * @returns {Object} 工作表数据
 */
 const getTableById = async (id) => {
  let result = await api({ name: 'core/t/schema' })
    .get(id)
    .then(data => data)
    .catch(err => err)
  return result
}

/**
 * [工作表]新增工作表
 *
 * ### 使用示例
 *
 * ```
 * addTable({ id: '测试表', title: _r('测试表') }).then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {Object} table - 新建的工作表数据
 * @param {String} table.id - 工作表名称（必填）
 * @param {String} table.title - 工作表标题（必填）
 * @param {Object} table.schema - 属性配置
 * @param {Array} table.dashboard - 关联画面
 * @param {Object} table.permission - 工作表权限
 * @param {Array} table.mutualRules - 字段规则
 * @param {Array} table.errorNotice - 错误提示
 * @param {Object} table.syncSettings - 同步数据
 * @returns {Object} { InsertedID: 插入工作表的ID }
 */
 const addTable = async (table) => {
  let result = await api({ name: 'core/t/schema' })
    .fetch('', { method: 'POST', body: JSON.stringify(table) })
    .then(data => data?.json)
    .catch(err => err)
  return result
}

/**
 * [工作表]修改工作表
 *
 * ### 使用示例
 *
 * ```
 * editTableById('618c826bf39c079f64d3beae', { title: _r('测试表') }).then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} id - 修改的工作表名称
 * @param {Object} table - 修改的工作表数据
 * @param {String} table.title - 工作表标题
 * @param {Object} table.schema - 属性配置
 * @param {Array} table.dashboard - 关联画面
 * @param {Object} table.permission - 工作表权限
 * @param {Array} table.mutualRules - 字段规则
 * @param {Array} table.errorNotice - 错误提示
 * @param {Object} table.syncSettings - 同步数据
 * @returns {Object} { status: "OK" } 修改成功
 */
 const editTableById = async (id, table) => {
  let result = await api({ name: 'core/t/schema' })
    .fetch(`/${id}`, { method: 'PATCH', body: JSON.stringify(table) })
    .then(data => data?.json)
    .catch(err => err)
  return result
}

/**
 * [工作表]删除工作表
 *
 * ### 使用示例
 *
 * ```
 * delTableById("61a03d56b1bc77a1c795abcd").then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} id - 工作表名称
 * @returns {Object} { status: "OK" } 删除成功
 */
 const delTableById = async (id) => {
  let result = await api({ name: 'core/t/schema' })
    .fetch(`/${id}`, { method: 'DELETE' })
    .then(data => data.json)
    .catch(err => err)
  return result
}

/**
 * [工作表数据]查询某个工作表数据
 *
 * ### 使用示例
 *
 * ```
 * getTableDataList('工作表3').then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} tableName - 工作表名称（必填）
 * @param {Object} filter - 查询条件（可选）
 * @param {Number} filter.limit - 查询条数（默认30）
 * @param {Number} filter.skip - 跳过条数（默认0）
 * @param {Object} filter.sort - 排序
 * @param {Object} filter.project - 查询字段（默认name）
 * @param {Object} filter.where - 查询条件
 * @example 
 * getTableDataList('工作表3', {
 *   limit: 10, skip: 0, sort: { 'createTime': -1 },
 *   project: { 'number-9B75': 1, 'text-C19C': 1 }, where: { 'number-9B75': 2 }
 * }).then(data => {
 *   console.log(data)
 * })
 * @returns {Array} 工作表数据列表
 */
 const getTableDataList = async (tableName, filter) => {
  filter = filter || {}
  let obj = {
    limit: filter.limit || 30,
    skip: filter.skip || 0,
    sort: filter.sort,
    project: filter.project,
    filter: filter.where
  }
  const querystr = encodeURIComponent(JSON.stringify(obj))
  let result = await api({ name: 'core/t' })
    .fetch(`/${tableName}/d?query=${querystr}`, { method: 'GET' })
    .then(data => data.json)
    .catch(err => err)
  return result
}


/**
 * [工作表数据]根据id查询工作表数据详情
 *
 * ### 使用示例
 *
 * ```
 * getTableDataById("测试表2", "61943edd7d293211b1eade6f").then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} tableName - 工作表名称
 * @param {String} id - 工作表数据ID
 * @returns {Object} 工作表数据详情
 */
 const getTableDataById = async (tableName, id) => {
  let result = await api({ name: `core/t/${tableName}/d` })
    .get(id)
    .then(data => data)
    .catch(err => err)
  return result
}

/**
 * [工作表数据]查询是否有工作表的添加权限
 *
 * ### 使用示例
 *
 * ```
 * checkTableAdd("测试表2").then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} tableName - 工作表名称
 * @returns {Object} { add: true } 有添加权限
 */
 const checkTableAdd = async (tableName) => {
  let result = await api({ name: 'core/t' }).get(tableName + '/d/checkAdd')
    .then(data => ({ add: true }))
    .catch(err => ({ add: false }))
  return result
}

/**
 * [工作表数据]新增一条工作表数据
 *
 * ### 使用示例
 *
 * ```
 * addTableData("测试表2", { 'text-C19C': '人人人', 'number-9B75': 12 }).then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {Object} tableName - 工作表名称
 * @param {Object} tableData - 新增的工作表数据
 * @returns {Object} { InsertedID: 插入工作表的ID }
 */
 const addTableData = async (tableName, tableData) => {
  let result = await api({ name: 'core/t' })
    .fetch(`/${tableName}/d`, { method: 'POST', body: JSON.stringify(tableData) })
    .then(data => data?.json)
    .catch(err => err)
  return result
}

/**
 * [工作表数据]修改工作表数据
 *
 * ### 使用示例
 *
 * ```
 * editTableDataById('测试表2', '618c826bf39c079f64d3beae', { 'text-C19C': '文本2', }).then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} tableName - 工作表名称
 * @param {String} id - 修改的工作表数据ID
 * @param {Object} tableData - 修改的工作表数据内容
 * @returns {Object} { status: "OK" } 修改成功
 */
 const editTableDataById = async (tableName, id, tableData) => {
  let result = await api({ name: 'core/t' })
    .fetch(`/${tableName}/d/${id}`, { method: 'PATCH', body: JSON.stringify(tableData) })
    .then(data => data?.json)
    .catch(err => err)
  return result
}

/**
 * [工作表数据]删除工作表数据
 *
 * ### 使用示例
 *
 * ```
 * delTableDataById("测试表2", "61a03d56b1bc77a1c795abcd").then(data => {
 *    console.log(data)
 * })
 * ```
 * @param {String} tableName - 工作表名称
 * @param {String} id - 工作表数据ID
 * @returns {Object} { status: "OK" } 删除成功
 */
 const delTableDataById = async (tableName, id) => {
  let result = await api({ name: 'core/t' })
    .fetch(`/${tableName}/d/${id}`, { method: 'DELETE' })
    .then(data => data.json)
    .catch(err => err)
  return result
}

// 兼容3.0
const getModelList = getTableList
const getModelById = getTableById
const addModel = addTable
const editModelById = editTableById
const delModelById = delTableById

const getNodeList = getTableDataList
const getNodeById = getTableDataById
const addNode = addTableData
const editNodeById = editTableDataById
const delNodeById = delTableDataById

//////
export default { getTableList, getTableById, addTable, editTableById, delTableById,
  getTableDataList, getTableDataById, checkTableAdd, addTableData, editTableDataById,
  delTableDataById, getModelList, getModelById, addModel, editModelById, delModelById,
  getNodeList, getNodeById, addNode, editNodeById, delNodeById }
