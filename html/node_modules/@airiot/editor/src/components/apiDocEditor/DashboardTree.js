import React, { useMemo, useState } from 'react';
import { app, use } from 'xadmin'
import { Tree, Input, Menu, Dropdown, Popover, Tooltip } from 'antd'
import { getTreeFromFlatData } from 'react-sortable-tree';
import _ from 'lodash'

const { SubMenu } = Menu;

const getParentKey = (key, tree) => {
  let parentKey;
  for (let i = 0; i < tree.length; i++) {
    const node = tree[i];
    if (node.children) {
      if (node.children.some(item => item.key === key)) {
        parentKey = node.key;
      } else if (getParentKey(key, node.children)) {
        parentKey = getParentKey(key, node.children);
      }
    }
  }
  return parentKey;
};

const CellDetail = ({ data, insertWidget }) => {

  const { t:_t1 } = useI18n()

  return (
    <Menu className='script-cellTree' mode="inline" defaultOpenKeys={['funs']}
      onClick={({ key }) => insertWidget(key)}>
      <SubMenu key="props" title={_t1('属性')} >
        {
          data.props?.map(item => (
            <Menu.Item key={item.key}>
              <Tooltip title={`[${_t1('属性')}]${item.title}`}>
                <span>[{_t1('属性')}]{item.title}</span>
              </Tooltip>
            </Menu.Item>
          ))
        }
      </SubMenu>
      <SubMenu key="funs" title={_t1('方法')} >
        {
          data.funs?.map(item => (
            <Menu.Item key={item.key}>
              <Tooltip title={`[${_t1('方法')}]${item.title}`}>
                <span>[{_t1('方法')}]{item.title}</span>
              </Tooltip>
            </Menu.Item>
          ))
        }
      </SubMenu>
    </Menu>
  )
}

const DashboardTree = ({ dashboardCells, insertWidget }) => {
  const widgets = app.get('dashboardWidgets')
  const [expandedKeys, setExpandedKeys] = useState([]);
  const [searchValue, setSearchValue] = useState('');
  const [autoExpandParent, setAutoExpandParent] = useState(true);

  const { t:_t1 } = useI18n()
  
  const getName = (key) => {
    if (key === 'root') {
      return _t1('画布')
    } else if (dashboardCells[key]?.params?.base?.__name__) { // 组件设置了名称
      return dashboardCells[key].params.base.__name__
    } else if (widgets[dashboardCells[key].structure.type]) { // 没设置名称默认显示组件名
      return widgets[dashboardCells[key].structure.type].title
    } else {
      return key
    }
  }
  
  const getTreeNode = (item, insertWidget) => {
    const strTitle = getName(item.key);
    const index = strTitle.indexOf(searchValue);
    const beforeStr = strTitle.substring(0, index);
    const afterStr = strTitle.slice(index + searchValue.length);
    const title =
      index > -1 ? (
        <span>
          {beforeStr}
          <span className="site-tree-search-value">{searchValue}</span>
          {afterStr}
        </span>
      ) : (
        <span>{strTitle}</span>
      );
    return (
      <Tree.TreeNode
        title={() => (
          <Popover placement="bottom" content={() => <CellDetail data={item} insertWidget={insertWidget} />}>
            <span onDoubleClick={() => insertWidget(item.key)}>{title}</span>
          </Popover>
        )}
        key={item?.props?.[0]?.key?? Math.random()}
      >
        {
          item.children?.map(item1 => getTreeNode(item1, insertWidget))
        }
      </Tree.TreeNode>
    )
  }

  const getTreeData = (cells) => {
    let obj = {}
    let result = []
    for (let key in cells) {
      obj[key] = {
        ...cells[key],
        children: cells[key].structure.children,
        parent: cells[key].structure.parent
      }
    }

    let flatData = []
    Object.keys(obj).forEach(key => {
      const cell = obj[key]
      const isRootChild = cell.parent == 'root'
      const widget = widgets[cell?.type]
      const isContainer = widget?.container
      const fd = { ...cell, key, parent: isRootChild ? null : cell.parent, isLeaf: !isContainer }
      if (key != 'root') flatData.push(fd)
    })

    const initTreeData = getTreeFromFlatData({
      flatData: flatData,
      getKey: node => node.key,
      getParentKey: node => node.parent,
      rootKey: null,
    })
    
    result.push({
      key: 'root',
      children: initTreeData,
      props: obj['root'].props,
      funs: obj['root'].funs
    })

    return result
  }

  const treeData = getTreeData(dashboardCells)

  const onExpand = (newExpandedKeys) => {
    setExpandedKeys(newExpandedKeys);
    setAutoExpandParent(false);
  };

  const onChange = (e) => {
    const { value } = e.target;
    const dataList = Object.keys(dashboardCells).map(key => ({ ...dashboardCells[key], key, title: getName(key) }))
    const newExpandedKeys = dataList
      .map(item => {
        if (item.title.indexOf(value) > -1) {
          return getParentKey(item.key, treeData);
        }
        return null;
      })
      .filter((item, i, self) => item && self.indexOf(item) === i);
    setExpandedKeys(newExpandedKeys.map(k => 'Widgets.' + k + '.data'));
    setSearchValue(value);
    setAutoExpandParent(true);
  };

  return (
    <div>
      <Input style={{ margin: '0 10px 8px 10px', width: '90%' }} placeholder={_t1("请输入组件名")} onChange={onChange} />
      <Tree
        onExpand={onExpand}
        expandedKeys={expandedKeys}
        autoExpandParent={autoExpandParent}
      >
        { treeData?.map(item => getTreeNode(item, insertWidget))}
      </Tree>
    </div>
  );
};

export default DashboardTree;