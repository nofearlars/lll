
import React from 'react'
import { use, api, app } from 'xadmin'
import { C } from 'xadmin-ui'
import { Spin, Radio } from 'antd';
import _ from 'lodash';

const NODE_TYPES = ['string', 'number', 'boolean']
const TYPES = { 'Number': '数字', 'Boolean': '布尔值', 'String': '字符串', 'Object': '对象', 'Array': '数组' }

const JsonLogicEditor = props => {
  const { value, onChange, tags, schema, loading, systemVar, systemLoading } = props

  const renderProps = (s, prefix) => {
    if (s && s.properties) {
      return Object.keys(s.properties).reduce((prev, key) => {
        const p = s.properties[key]
        if (p.type == 'object' && p.properties) {
          const ps = renderProps(p, prefix + key + '.')
          if (Object.keys(ps).length > 0) {
            prev[p.title || p.name || key] = ps
          }
        } else if (NODE_TYPES.indexOf(p.type) >= 0) {
          prev[p.title || p.name || key] = prefix + key
        }
        return prev
      }, {})
    }
    return {}
  }

  const systemVarRender = (value, prefix, item) => {
    return Object.keys(value).reduce((prev, cur) => {
      if (_.isObject(value[cur])) {
        prev[cur + ` prefix:${TYPES[getType(value[cur])] || ''}`] = systemVarRender(value[cur], prefix + cur + '.', item)
      } else {
        const str = (prefix + cur).replace(/systemVar./, 'prefix:')
        prev[cur + `${str} -- ${TYPES[getType(value[cur])] || ''}`] = prefix + cur
      }
      return prev
    }, {})
  }

  const getType = (item) => Object.prototype.toString.apply(item).slice(8, -1);

  const getData = (tags, schema) => {
    let data = {
      '数据点': tags ? tags.reduce((p, t) => { p[t.name] = 'var.' + t.id; return p }, {}) : {},
      '属性': renderProps(schema, 'tableData.'),
    }
    data['数据字典'] = systemVar ? systemVar.reduce((p, t) => {
      if (_.isObject(t.value)) {
        p[t.name + `prefix:${t.uid} -- ${TYPES[getType(t.value)] || ''}`] = systemVarRender(t.value, 'systemVar.' + t.uid + '.', t)
      } else {
        p[t.name + `prefix:${t.uid} -- ${TYPES[getType(t.value)] || ''}`] = 'systemVar.' + t.uid
      }
      return p
    }, {}) : {}
    return data
  }

  return (loading || systemLoading) ? <Spin /> :
    (<C is="CodeEditor.JsonLogicEditor"
      data={getData(tags, schema)}
      value={value || {}}
      onChange={onChange}
    />)

}

const JsonLogicEditorWrap = props => (
  <C is="TagWrap" tableDataId={props.tableDataId} tableId={props.tableId}>
    {state => <JsonLogicEditor {...props} {...state} />}
  </C>
)

const JsLogic = (props) => {
  const { value, onChange, tags, schema, loading, systemVar } = props

  const tagsToSchema = (tags) => {
    const properties = {}
    for (let tag of tags) {
      properties[tag.id] = {
        title: tag.name,
        type: 'object',
        nodeType: 'tag',
        properties: {
          online: {
            title: _r('在线状态'),
            type: 'boolean'
          }
        }
      }
    }
    return properties
  }
  const systemVarToSchema = (tags) => {
    const properties = {}
    for (let tag of tags) {
      properties[tag.id] = {
        title: tag.name,
        type: tag.type
      }
    }
    return properties
  }

  const getSchema = (schema, tags) => {
    const result = {
      type: 'object',
      properties: {
        tags: {
          title: _r('数据点'),
          type: 'object',
          properties: tagsToSchema(tags || [])
        },
        '#$tableData': {
          title: _r('属性'),
          type: 'object',
          properties: schema?.properties || {}
        },
        '#$systemVariable': {
          title: _r('数据字典'),
          type: 'object',
          properties: systemVarToSchema(systemVar)
        }
      }
    }
    return result
  }

  const customStringify = (item, elementStringify) => {
    if (item?.variable?.path?.substr(0, 4) === 'tags') {
      const result = `{{${item.variable.path.substr(5, item.variable.path.length)}}}`
      if (result.indexOf('online') !== -1) {
        return result.replace('.', '_@')
      } else {
        return result
      }
    } else {
      return elementStringify(item)
    }
  }

  return <C 
    is="CodeEditor.VariableEditor"
    isFormula={true}
    value={value}
    onChange={onChange}
    schema={getSchema(schema, tags)}
    customStringify={customStringify}
  />
}

const JsLogicEditor = props => (
  <C is="TagWrap" tableDataId={props.tableDataId} tableId={props.tableId}>
    {state => <JsLogic {...props} {...state} />}
  </C>
)

const LogicEditor = ({ input, field: { tableDataId, tableId, option, resultType } }) => {

  const [ type, setType ] = React.useState(() => {
    if (input?.value?.type !== 'jsLogic') {
      return 'jsonlogic'
    } else {
      return input?.value?.type
    }
  })

  const [systemVar, setSystemVar] = React.useState([])
  const [systemLoading, setsystemLoading] = React.useState(true)

  React.useEffect(() => {
    api({ name: 'core/systemVariable' }).query({ fields: ['icon'] }, {})
      .then(({ items }) => {
        setSystemVar(items)
        setsystemLoading(false)
      })
    // }
  }, [])

  const { schema } = use('table.schema', tableId || option?.form?.data?.id)

  const onChange = (v) => {
    try {
      const val = JSON.parse(JSON.stringify(v))
      const payload = { type }
      if (type === 'jsLogic') {
        payload.jsLogic = val.stringify
        payload.origin = val.origin
      } else {
        payload.logic = val
      }
      input.onChange(payload)
    } catch (err) {
      console.log(err)
      input.onChange(v)
    }
  }

  return (
    <div>
      <Radio.Group value={type} buttonStyle="solid" onChange={(e) => { setType(e.target.value) }} style={{ marginBottom: '10px' }}>
        <Radio.Button value="jsonlogic">{_t1('选择器')}</Radio.Button>
        <Radio.Button value="jsLogic">{_t1('脚本编辑器')}</Radio.Button>
      </Radio.Group>
      {
        type === 'jsonlogic' ? (
          <div onClick={input.onBlur}>
            <JsonLogicEditorWrap
              value={input?.value?.type ? input?.value?.logic : input.value}
              onChange={onChange}
              tableDataId={tableDataId}
              tableId={tableId || option.form.data?.id}
              resultType={resultType || 'any'}
              systemVar={systemVar}
              systemLoading={systemLoading}
              schema={schema}
            />
          </div>
        ) : null
      }
      {
        type === 'jsLogic' ? (
          <JsLogicEditor
            value={input?.value?.type === 'jsLogic' ? {origin: input?.value?.origin, stringify: input?.value?.jsLogic} : null}
            onChange={onChange}
            tableDataId={tableDataId}
            tableId={tableId || option.form.data?.id}
            systemVar={systemVar}
            schema={schema}
          />
        ) : null
      }
      
    </div>
  )
}

export default LogicEditor
