import _ from 'lodash';
import { atom, selector } from 'recoil'
import { formulaTest } from './utils/expected'
import { editorValueEval } from './utils/parseAndStringify'
import extSchema, { convertFunSchema, convertAttrSchema } from './utils/extSchema'
import { randomString, dataToSchema, schemaToData } from './utils'

/* atom */

const keyAtom = atom({
  key: 'variable.key',
  default: randomString(12)
})

// schema结构
const schemaAtom = atom({
  key: 'variable.schema',
  default: null
})

// formula公式
const formulaAtom = atom({
  key: 'variable.formula',
  default: null
})
// data
const dataAtom = atom({
  key: 'variable.data',
  default: null
})

// 变量及函数信息
const varAndFunAtom = atom({
  key: 'variable.varAndFun',
  default: {}
})

// 选择模式
const selectAtom = atom({
  key: 'variable.select',
  default: null
})

// 节点类型
const nodeTypeAtom = atom({
  key: 'variable.nodeType',
  default: null
})
// 限制
const limitAtom = atom({
  key: 'variable.limit',
  default: null
})
// 加载判断
const hasLoadingAtom = atom({
  key: 'variable.hasLoading',
  default: null
})
// 字符串化
const stringifyAtom = atom({
  key: 'variable.stringify',
  default: false
})
// 函数扩展
const funcExtAtom = atom({
  key: 'variable.funcExt',
  default: []
})
// 属性扩展
const attrExtAtom = atom({
  key: 'variable.attrExt',
  default: []
})
// 公式模式
const isFormulaAtom = atom({
  key: 'variable.isFormulaAtom',
  default: false
})
// 自定义字符串模板解析函数
const customStringifyAtom = atom({
  key: 'variable.customStringify',
  default: null
})

const isSelectFormulaAtom = atom({
  key: 'variable.isSelectFormula',
  default: false
})

const errorAtom = atom({
  key: 'variable.error',
  default: false
})

const formulajsAtom = atom({
  key: 'variable.formulajsAtom',
  default: null
})

const esprimaAtom = atom({
  key: 'variable.esprimaAtom',
  default: null
})


/* selector */

// 最终的schema
const finalSchemaSelector = selector({
  key: 'variable.finalSchema',
  get: ({get}) => {
    const schema = get(schemaAtom)
    const data = get(dataAtom)
    const funcExt = get(funcExtAtom)
    const isSelectFormula = get(isSelectFormulaAtom)
    const isFormula = get(isFormulaAtom)
    if (!schema && data) {
      return dataToSchema(data)
    } else if (schema) {
      if (isSelectFormula || isFormula) {
        return extSchema(schema, funcExt)
      } else {
        return schema
      }
    } else {
      return { type: 'object', properties: {} }
    }
  }
})

const functionSchemaSelector = selector({
  key: 'variable.functionSchema',
  get: ({get}) => {
    const isSelectFormula = get(isSelectFormulaAtom)
    const isFormula = get(isFormulaAtom)
    const funcExt = get(funcExtAtom)
    const formulajs = get(formulajsAtom)
    if ((isSelectFormula || isFormula) && formulajs) {
      return convertFunSchema(funcExt, formulajs)
    } else {
      return []
    }
  }
})

const attrSchemaSelector = selector({
  key: 'variable.attrSchema',
  get: ({get}) => {
    const attrExt = get(attrExtAtom)
    return convertAttrSchema(attrExt)
  }
})

// 预期值
const expectedSelector = selector({
  key: 'variable.expected',
  get: ({get}) => {
    const schema = get(schemaAtom)
    const formula = get(formulaAtom)
    const data = get(dataAtom)
    const evalData = data || schemaToData(schema)
    const result = editorValueEval(formula?.origin, evalData)
    const type = _.isArray(result) ? 'array' : typeof result
    const isFormula = get(isFormulaAtom)
    const esprima = get(esprimaAtom)
    console.log(esprima, 'esprima')
    const error = formulaTest(formula?.origin || [], isFormula, esprima)
    
    // const evalInfo = expressionEval(expression, schema, data)
    return { error: null, result, type, reality: !!data }
  }
})

export { keyAtom, schemaAtom, formulaAtom, dataAtom, varAndFunAtom, selectAtom, nodeTypeAtom, limitAtom, hasLoadingAtom, stringifyAtom, funcExtAtom, attrExtAtom, isFormulaAtom, customStringifyAtom, errorAtom, finalSchemaSelector, expectedSelector, isSelectFormulaAtom, functionSchemaSelector, attrSchemaSelector, formulajsAtom, esprimaAtom }