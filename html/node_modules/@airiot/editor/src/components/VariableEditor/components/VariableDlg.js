import { Modal } from 'antd'
import { useRecoilValue, useSetRecoilState } from 'recoil'
import Wrap from './Wrap'
import Formula from './Formula'
import VariableSelect from './VariableSelect'
import React from 'react'
import { keyAtom, isFormulaAtom, errorAtom, stringifyAtom, esprimaAtom } from '../store'
import { formulaTest } from '../utils/expected'
import { getEditorValue } from '../utils/parseAndStringify'


const VariableDlg = (props) => {

  const { visible, value, onChange, onCancel, onForceChange, customStringify, querySchema } = props

  const editorRef = React.useRef(null)

  const [ innerValue, setInnerValue ] = React.useState(null)

  const key = useRecoilValue(keyAtom)

  const isFormula = useRecoilValue(isFormulaAtom)
  const setError = useSetRecoilState(errorAtom)
  const stringify = useRecoilValue(stringifyAtom)
  const esprima = useRecoilValue(esprimaAtom)
  

  // 确定
  const onOk = () => {
    const error = formulaTest(innerValue?.origin || [], isFormula, esprima)
    if (error) {
      setError(error)
    } else {
      setError(null)
      onForceChange && onForceChange(getEditorValue(innerValue?.origin, stringify, customStringify, isFormula))
      onCancel()
    }
  }

  const onCancelDlg = () => {
    onForceChange && onForceChange(getEditorValue(innerValue?.origin, stringify, customStringify, isFormula))
    onCancel()
  }

  React.useEffect(() => {
    setInnerValue(value)
  }, [ value ])

  return (
    <Modal
      title="公式编辑"
      visible={visible}
      width={1000}
      style={{
        height: '90%'
      }}
      onCancel={onCancelDlg}
      onOk={onOk}
      bodyStyle={{
        padding: 0
      }}
      destroyOnClose={true}
      maskTransitionName=""
      transitionName=""
      wrapClassName="iot-editor-variable"
    >
      <div key={key} style={{ height: '100%' }}>
        <Wrap value={value} onChange={(v) => { setInnerValue(v) }} onForceChange={onForceChange} customStringify={customStringify}>
          <div className="iot-editor-variable-dlg-formula">
            <Formula ref={editorRef} onForceChange={onForceChange} value={value} />
          </div>
          <VariableSelect editorRef={editorRef} onForceChange={onForceChange} querySchema={querySchema} customStringify={customStringify} />
        </Wrap>
      </div>
    </Modal>
  )
}

export default VariableDlg
