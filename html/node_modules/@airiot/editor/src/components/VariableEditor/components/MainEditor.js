import React from 'react'
import _ from 'lodash'
import { useRecoilValue, useSetRecoilState } from 'recoil'
import Wrap from './Wrap'
import Formula from './Formula'
import Panel from './Panel'
import VariableDlg from './VariableDlg'
import { keyAtom, varAndFunAtom } from '../store'

const MainEditor = (props) => {

  const { rootRef, style, value, hasPanel=true, onChange, onForceChange, panelWidth, select, panelVisible, panelTargetRef, customStringify, querySchema, notfocusedShow } = props

  // 编辑器Ref
  const variableRef = React.useRef(null)
  const editorRef = React.useRef(null)
  // 面板父级变量
  const [ visible, setVisble ] = React.useState(false)
  const [ show, setShow ] = React.useState(false)
  const key = useRecoilValue(keyAtom)
  const ready = React.useRef(false)

  // 全屏
  const onFull = () => {
    setVisble(true)
    setShow(false)
  }

  // 暴露方法
  React.useImperativeHandle(rootRef, () => ({ 
    insertVariable: editorRef.current.insertVariable, 
    insertFunction: editorRef.current.insertFunction, 
    insertText: editorRef.current.insertText,
    clear: editorRef.current.clear,
    show: () => { setShow(!show) },
    full: () => { onFull() }
  }))

  React.useEffect(() => {
    if (ready.current) {
      setShow(!show)
    } else {
      ready.current = true
    }
  }, [ panelVisible ])

  return (
    <div ref={variableRef} key={key} className="iot-editor-slate-wrap" style={{position: 'relative', ...style}}>
      <Wrap value={value} onChange={onChange} customStringify={customStringify} onForceChange={onForceChange}>
        <Formula ref={editorRef} style={style} onForceChange={onForceChange} />
        {
          hasPanel ? (
            <Panel editorRef={editorRef} width={panelWidth} variableRef={panelTargetRef || variableRef} onFull={onFull} show={show} setShow={setShow} onForceChange={onForceChange} querySchema={querySchema} customStringify={customStringify} notfocusedShow={notfocusedShow} />
          ): null
        }
      </Wrap>
      <VariableDlg visible={visible} value={value} onChange={onChange} onForceChange={onForceChange} querySchema={querySchema} onCancel={() => { setVisble(false) }} customStringify={customStringify}  />
    </div>
  )
}

export default MainEditor
