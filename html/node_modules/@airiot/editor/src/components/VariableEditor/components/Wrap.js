import React from 'react'
import _ from 'lodash'
import { createEditor } from 'slate'
import { Slate, withReact } from 'slate-react'
import { withHistory } from 'slate-history'
import { getVariableByPath } from '../utils'
import { useRecoilValue } from 'recoil'
import { schemaAtom, stringifyAtom, isFormulaAtom, keyAtom } from '../store'
import { getEditorValue } from '../utils/parseAndStringify'
import { randomString } from '../utils'

const withEditor = (editor, options) => {
  const { isInline, isVoid } = editor

  editor.isInline = element => {
    return element.type === 'variable' || element.type === 'formula' ? true : isInline(element)
  }
  editor.isVoid = element => {
    return element.type === 'variable' ? true : isVoid(element)
  }
  editor.options = options

  return editor
}

const parseValue = (value, schema) => {
  const reg = /\{\{(.+?)\}\}/g
  const regVar = /^\{\{(.+?)\}\}$/g
  const result = []
  const _value = value.replace(/\{#|#\}/g, '')
  _value.split('+').forEach(item => {
    if (item.match(reg)) {
      if (item.match(regVar)) {
        const path = item.replace(/\{\{|\}\}/g, '')
        const defineSchema = getVariableByPath(schema, path)
        const keyList = path.split('.')
        const key = keyList[keyList.length - 1]
        result.push({
          type: 'variable',
          children: [{ text: '' }],
          variable: {
            defineSchema: defineSchema || {
              title: key,
              type: 'string'
            },
            key: key,
            path: path,
            title: defineSchema?.title || key,
            type: defineSchema?.type || 'string'
          }
        })
        result.push({ text: '' })
      } else {
        const list = item.split(reg)
        list.forEach((subItem, index) => {
          const path = subItem
          const defineSchema = getVariableByPath(schema, path)
          const keyList = path.split('.')
          const key = keyList[keyList.length - 1]
          if (index % 2) {
            result.push({
              type: 'variable',
              children: [{ text: '' }],
              variable: {
                defineSchema: defineSchema || {
                  title: key,
                  type: 'string'
                },
                key: key,
                path: path,
                title: defineSchema?.title || key,
                type: defineSchema?.type || 'string'
              }
            })
            result.push({ text: '' })
          } else {
            result.push({ text: subItem.replace(/\'/g, '') })
          }
        })
      }
      
    } else {
      result.push({ text: item.replace(/\'/g, '') })
    }
  })
  return result
}

const getValue = (value, stringify, schema) => {
  return [{
    type: 'paragraph',
    children: stringify ? parseValue(value, schema) : value?.origin || [{ text: '' }]
  }]
}

// 公式编辑器上下文
const Wrap = (props) => {
  const { children, value, onChange, onForceChange, customStringify } = props

  const editor = React.useMemo(() => withEditor(withReact(withHistory(createEditor()))), [])

  const schema = useRecoilValue(schemaAtom)
  const stringify = useRecoilValue(stringifyAtom)
  const isFormula = useRecoilValue(isFormulaAtom)
  
  const isOnChangeRef = React.useRef(false)
  const isReady = React.useRef(false)

  const [slateValue, setSlateValue] = React.useState(getValue(value, stringify, schema))
  const [ key, setKey ] = React.useState(randomString(12))

  const onSlateChange = (newValue) => {
    isOnChangeRef.current = true
    setSlateValue(newValue)
    onChange && onChange(getEditorValue(newValue[0]?.children, stringify, customStringify, isFormula))
  }

  React.useEffect(() => {
    if (!isReady.current) {
      isReady.current = true
      return
    }
    if (isOnChangeRef.current === true) {
      isOnChangeRef.current = false
    } else {
      onForceChange(value)
    }
  }, [ JSON.stringify(value) ])

  React.useEffect(() => {
    setSlateValue(getValue(value, stringify, schema))
    setKey(randomString(12))

  }, [ stringify ])

  return (
    <Slate
      key={key}
      editor={editor}
      value={slateValue}
      onChange={onSlateChange}
    >
      {children}
    </Slate>
  )
}

export default Wrap
