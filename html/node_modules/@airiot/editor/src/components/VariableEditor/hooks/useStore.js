import React from 'react'
import { useSetRecoilState, useRecoilValue } from 'recoil'
import { schemaAtom, formulaAtom, dataAtom, expectedSelector, varAndFunAtom, selectAtom, hasLoadingAtom, nodeTypeAtom, limitAtom, stringifyAtom, funcExtAtom, attrExtAtom, isFormulaAtom, isSelectFormulaAtom, formulajsAtom, esprimaAtom } from '../store'
import _ from 'lodash'
import { editorValueStringify } from '../utils/parseAndStringify'

const useStore = (props) => {

  const { schema, funcExt, attrExt, value, data, select, hasLoading, nodeType, limit,  onExpected, onSelectVarAndFun, stringify, isFormula } = props

  const isSelectFormula = useRecoilValue(isSelectFormulaAtom)

  const setSchema = useSetRecoilState(schemaAtom)
  const setFormula = useSetRecoilState(formulaAtom)
  const setData = useSetRecoilState(dataAtom)
  const expected = useRecoilValue(expectedSelector)
  const varAndFun= useRecoilValue(varAndFunAtom)
  const setSelect = useSetRecoilState(selectAtom)
  const setHasLoading = useSetRecoilState(hasLoadingAtom)
  const setNodeType = useSetRecoilState(nodeTypeAtom)
  const setLimit = useSetRecoilState(limitAtom)
  const setStringify = useSetRecoilState(stringifyAtom)
  const setFuncExt = useSetRecoilState(funcExtAtom)
  const setAttrExt = useSetRecoilState(attrExtAtom)
  const setIsFormula = useSetRecoilState(isFormulaAtom)
  const setFormulajs = useSetRecoilState(formulajsAtom)
  const setEsprima = useSetRecoilState(esprimaAtom)
  // const setCustomStringify = useSetRecoilState(customStringifyAtom)

  // 监听schema
  React.useEffect(() => {
    if (schema) {
      const _schema = _.cloneDeep(schema)
      setSchema(_schema)
    }
  }, [ JSON.stringify(schema) ])
  // 监听funcExt
  React.useEffect(() => {
    setFuncExt(funcExt)
  }, [ JSON.stringify(funcExt) ])
  // 监听attrExt
  React.useEffect(() => {
    setAttrExt(attrExt)
  }, [ JSON.stringify(attrExt) ])
  // 监听value
  React.useEffect(() => {
    setFormula(_.cloneDeep(value))
  }, [ JSON.stringify(value) ])
  // 监听value
  React.useEffect(() => {
    setData(data)
  }, [ JSON.stringify(data) ])
  // 监听预期值变化
  React.useEffect(() => {
    onExpected && onExpected(expected)
  }, [ JSON.stringify(expected) ])
  // 监听预期值变化
  React.useEffect(() => {
    onSelectVarAndFun && onSelectVarAndFun(varAndFun)
  }, [ JSON.stringify(varAndFun) ])
  // 监听选择模式
  React.useEffect(() => {
    setSelect(select)
  }, [ select ])
  // 监听选择模式
  React.useEffect(() => {
    setHasLoading(hasLoading || null)
  }, [ hasLoading ])
  // 监听选择模式
  React.useEffect(() => {
    setNodeType(nodeType || null)
  }, [ nodeType ])
  // 监听选择模式
  React.useEffect(() => {
    if (isSelectFormula) {
      setLimit(null)
    } else {
      setLimit(limit || null)
    }
  }, [ limit, isSelectFormula ])
  // 监听字符串化
  React.useEffect(() => {
    setStringify(stringify || false)
  }, [ stringify ])
  // 监听字符串化
  React.useEffect(() => {
    setIsFormula(isFormula || false)
  }, [ isFormula ])
  // 
  
  React.useEffect(() => {
    (async () => {
      const formulajs = await import('@formulajs/formulajs');
      setFormulajs(formulajs)
    })()
  }, [])

  React.useEffect(() => {
    (async () => {
      const esprima = await import('esprima')
      setEsprima(esprima)
    })()
  }, [])
}

export default useStore
