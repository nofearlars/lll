// schema转换方法
import _ from 'lodash'
import { Icon } from 'xadmin-ui';
import { typeMap, createVariableFun, getVariableByPath } from './createVariableFun'

// 根据path获取变量列表
const getVariableList = (schema, parentVariable) => {
  let subSchema = schema
  const { path: parentPath, type: parentType, title: parentTitle }  = parentVariable || {}
  if (parentPath) {
    subSchema = getVariableByPath(schema, parentPath)
  }
  const keys = _.keys(subSchema.properties)
  return keys.map(key => {
    return {
      path: parentPath ? `${parentPath}.${key}` : key,
      type: parentType ? `${parentType}.${subSchema.properties[key].type}` : subSchema.properties[key].type,
      title: parentTitle ? `${parentTitle}.${subSchema.properties[key].title}` : subSchema.properties[key].title
    }
  })
}

const getPathLast = (path) => {
  if (!path || !path.split) {
    return null
  }
  const pathList = path.split('.')
  return pathList[pathList.length -1]
}

const getVariableType = (variable) => {
  const { type } = variable
  const result = {
    type: getPathLast(type),
    lastType: getPathLast(type)
  }
  if (type.indexOf('array') !== -1) {
    result.type = 'array'
  }
  return result
}

const filterPrototype = (name) => {
  if (name === 'constructor' || /^__/.test(name)) {
    return false
  }
  return true
}

const TypeIcon = (props) => {
  const { type } = props

  if (!type) {
    return null
  }
  const { title, color, icon } = typeMap[type] || typeMap['object']

  return title ? (
    <div class="editor-svg-icon">
      {
        icon ? (
          <i className="editor-iconfont" dangerouslySetInnerHTML={{__html: icon}} ></i>
        ) : (
          <Icon svg={require(`../../../icons/${title}.svg`)} />
        )
      }
    </div>
  ) : null
}

function randomString(e) {    
  e = e || 32;
  var t = "ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678",
  a = t.length,
  n = "";
  for (var i = 0; i < e; i++) n += t.charAt(Math.floor(Math.random() * a));
  return n
}

const dataToSchema = (data, title) => {
  const schema = {
    type: 'object',
    properties: {}
  }
  if (title) {
    schema.title = title
  }
  if (_.isPlainObject(data)) {
    for (let key of _.keys(data)) {
      const item = data[key]
      if (_.isPlainObject(item)) {
        schema.properties[key] = dataToSchema(item, key)
      } else if (_.isArray(item)) {
        schema.properties[key] = {
          title: key,
          type: 'array',
          items: {}
        }
      } else {
        schema.properties[key] = {
          title: key,
          type: typeof item
        }
      }
    }
  }
  return schema
}

const schemaToData = (schema, _data) => {
  const data = _data || {}
  for (let key of _.keys(schema?.properties)) {
    const item = schema.properties[key]
    if (item.type === 'object') {
      data[key] = {}
      schemaToData(item, data[key])
    } else if (item.type === 'array') {
      data[key] = [{}]
      if (item?.items?.properties) {
        schemaToData({ properties: item.items.properties }, data[key][0])
      }
    } else {
      data[key] = typeMap[item.type]?.data
    }
  }
  return data
}

export { getVariableList, getPathLast, getVariableType, getVariableByPath,filterPrototype, typeMap, createVariableFun, TypeIcon, randomString, dataToSchema, schemaToData }
