import _ from 'lodash'

const getVariableByPath = (schema, path) => {
  let subSchema = _.cloneDeep(schema)
  const levelArr = path.split('.').filter(item => item != '#')
  levelArr.forEach(level => {
    subSchema = subSchema?.properties && subSchema?.properties[level]
    if (!subSchema) {
      return null
    }
    // 判断不是数组
    if (subSchema.type === 'array') {
      subSchema = {
        type: 'array',
        title: subSchema.title,
        properties: subSchema?.items?.properties
      }
    }
  })
  return subSchema
}

const typeMap = {
  'string': {
    title: _r('文本'),
    data: '文本',
    color: '#FFAE70',
    Creator: String
  },
  'number': {
    title: _r('数字'),
    data: 123,
    color: '#478FF2',
    Creator: Number
  },
  'boolean': {
    title: _r('布尔'),
    data: 123,
    color: '#B0E967',
    Creator: Boolean
  },
  'time': {
    title: _r('日期'),
    data: '2021-12-20',
    color: '#79E2C2',
    Creator: String
  },
  'object': {
    title: _r('对象'),
    data: { a: '1' },
    color: '#7A90FF',
    Creator: Object
  },
  'array': {
    title: _r('数组'),
    data: ['aa', 'bb'],
    color: '#FFA19B',
    Creator: Array
  },
  'function': {
    title: _r('函数'),
    icon: '&#xeacb;'
  },
  'attr': {
    title: _r('属性'),
    icon: '&#xeaad;'
  },
  'table': {
    title: _r('工作表'),
    color: '#F89F7F',
  },
  'model': {
    title: _r('模型'),
    color: '#AD88F6'
  },
  'node': {
    title: _r('资产'),
    color: '#73D8E6'
  },
  'user': {
    title: _r('用户'),
    color: '#666FA6'
  },
  'nodeDataPoint': {
    title: _r('数据点'),
    color: '#EDABFF'
  },
  'tableRecord': {
    title: _r('工作表记录'),
    color: '#4D2EDC'
  },
  'bytesArray': {
    title: _r('字节数组'),
    color: '#59AC45'
  }
}

const createVariableFun = ({ schema, data }) => {
  const variable = (path) => {
    if (data) {
      const value = _.get(data, path)
      return value
    } else {
      const variableSchema = getVariableByPath(schema, path)
      return typeMap[variableSchema.type].data
    }
  }
  return variable
}



export { createVariableFun, typeMap, getVariableByPath }
