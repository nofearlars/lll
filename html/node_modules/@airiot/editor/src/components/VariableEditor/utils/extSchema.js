import _ from 'lodash'
import doc from './doc'

const lodashList = Object.keys(_)
const MathList = Object.getOwnPropertyNames(Math)

const convertSchema = (funcExt) => {
  const schema = {}
  // for (let item of formulaFunList) {
  //   if (funcExt && funcExt.indexOf(item.key) !== -1) {
  //     schema[item.key] = {
  //       title: item.name,
  //       type: 'object',
  //       description: item.desc,
  //       insert: false,
  //       properties: {}
  //     }
  //     if (item.children) {
  //       for (let cItem of item.children) {
  //         schema[item.key].properties[cItem.key] = {
  //           title: cItem.key,
  //           type: 'string',
  //           description: cItem.desc,
  //           nodeType: 'function'
  //         } 
  //       }
  //     }
  //   }
  // }
  return schema
}

const convertFunSchema = async (funcExt, formulajs) => {
  const result = []
  const formulaJsList = Object.keys(formulajs)
  if (funcExt && funcExt.indexOf('formulajs') !== -1) {
    const formulajsSchema = {
      id: 'formulajs',
      title: '公式函数',
      type: 'object',
      insert: false,
      properties: {},
      description: 'JavaScript实现大多数Microsoft Excel公式函数。'
    }
    for (let name of formulaJsList) {
      formulajsSchema.properties[`formulajs.${name}`] = {
        title: `formulajs.${name}`,
        type: 'string',
        nodeType: 'function',
      } 
    }
    result.push(formulajsSchema)
  }
  if (funcExt && funcExt.indexOf('lodash') !== -1) {
    const lodashSchema = {
      id: '_',
      title: '工具函数',
      type: 'object',
      insert: false,
      properties: {},
      description: 'Lodash 是一个一致性、模块化、高性能的 JavaScript 实用工具库。'
    }
    for (let name of lodashList) {
      lodashSchema.properties[name] = {
        title: `_.${name}`,
        type: 'string',
        nodeType: 'function',
        // description: createDescription(doc, 'lodash', name)
      } 
    }
    result.push(lodashSchema)
  }
  if (funcExt && funcExt.indexOf('Math') !== -1) {
    const mathSchema = {
      id: 'Math',
      title: '数学函数',
      type: 'object',
      insert: false,
      properties: {},
      description: 'JavaScript内置数学函数'
    }
    for (let name of MathList) {
      mathSchema.properties[`Math.${name}`] = {
        title: `Math.${name}`,
        type: 'string',
        nodeType: 'function',
        // description: createDescription(doc,'Math', name)
      }
    }
    result.push(mathSchema)
  }
  if (funcExt && funcExt.indexOf('moment') !== -1) {
    const momentSchema = {
      id: 'moment',
      title: '日期函数',
      type: 'object',
      insert: false,
      properties: {},
      description: 'JavaScript内置数学函数'
    }
  
    momentSchema.properties['moment'] = {
      title: 'moment',
      type: 'string',
      nodeType: 'function'
    }
    result.push(momentSchema)
  }

  return result
}

const convertAttrSchema = (attrExt) => {
  const result = []
  if (attrExt && attrExt.indexOf('SQL') !== -1) {
    const mathSchema = {
      id: 'SQL',
      title: 'SQL',
      type: 'object',
      insert: false,
      properties: {},
      description: 'SQL关键字'
    }
    for (let name of _.keys(doc.SQL)) {
      mathSchema.properties[name] = {
        title: name,
        type: 'string',
        nodeType: 'attr'
      }
    }
    result.push(mathSchema)
  }
  return result
}

const extSchema = (schema, funcExt) => {
  const formulaSchema = convertSchema(funcExt)
  return {
    ...schema,
    properties: {
      ...(schema?.properties || {}),
      ...formulaSchema
    }
  }
}

export { convertFunSchema, convertAttrSchema }

export default extSchema
