const doc = {
  Object: {
    hasOwnProperty: {
      definition: "返回一个布尔值，指示对象自身属性中是否具有指定的属性",
      syntax: "object.hasOwnProperty(prop)",
      parameters: "{String} prop - 要检查的属性名称",
      return: "Boolean",
      demo: "var obj = { x: 1, y: 2 };<br/>console.log(obj.hasOwnProperty('x'));",
    },
    isPrototypeOf: {
      definition: "返回一个布尔值，表示指定对象是否在另一个对象的原型链中",
      syntax: "prototypeObj.isPrototypeOf(object)",
      parameters: "{Object} prototypeObj - 要检查的对象是否在该对象的原型链中",
      return: "Boolean",
      demo: "function Foo() {}<br/>function Bar() {}<br/>Bar.prototype = Object.create(Foo.prototype);<br/>var obj = new Bar();<br/>console.log(Foo.prototype.isPrototypeOf(obj));",
    },
    propertyIsEnumerable: {
      definition: "返回一个布尔值，指示指定的属性是否可枚举",
      syntax: "object.propertyIsEnumerable(prop)",
      parameters: "{String} prop - 要检查的属性名称",
      return: "Boolean",
      demo: "var obj = { x: 1, y: 2 };<br/>console.log(obj.propertyIsEnumerable('x'));",
    },
    toString: {
      definition: "返回表示对象的字符串",
      syntax: "object.toString()",
      parameters: "{Null}",
      return: "String",
      demo: "var obj = { x: 1, y: 2 };<br/>console.log(obj.toString());",
    },
    valueOf: {
      definition: "返回指定对象的原始值",
      syntax: "object.valueOf()",
      parameters: "{Null}",
      return: "Any",
      demo: "var obj = { x: 1, y: 2 };<br/>console.log(obj.valueOf());",
    },
    toLocaleString: {
      definition: "返回对象的本地化字符串表示",
      syntax: "object.toLocaleString()",
      parameters: "{Null}",
      return: "String",
      demo: "var num = 123456.789;<br/>console.log(num.toLocaleString('en-US'));",
    },
  },
  String: {
    length: {
      definition: "返回字符串的长度",
      syntax: "string.length",
      return: "Number",
      demo: "var str = 'Hello, World!';<br/>console.log(str.length);",
    },
    anchor: {
      definition: "创建 HTML 锚链接",
      syntax: "string.anchor(name)",
      parameters: "{String} name - 锚链接的名称",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.anchor('myAnchor'));",
    },
    at: {
      definition: "返回指定索引位置的字符",
      syntax: "string.at(index)",
      parameters: "{Number} index - 字符的索引位置",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.at(7));",
    },
    big: {
      definition: "使用大号字体显示字符串",
      syntax: "string.big()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.big());",
    },
    blink: {
      definition: "以闪烁的文本显示字符串",
      syntax: "string.blink()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.blink());",
    },
    bold: {
      definition: "使用粗体显示字符串",
      syntax: "string.bold()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.bold());",
    },
    charAt: {
      definition: "返回指定索引位置的字符",
      syntax: "string.charAt(index)",
      parameters: "{Number} index - 字符的索引位置",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.charAt(7));",
    },
    charCodeAt: {
      definition: "返回指定索引位置的字符的 Unicode 编码",
      syntax: "string.charCodeAt(index)",
      parameters: "{Number} index - 字符的索引位置",
      return: "Number",
      demo: "var str = 'Hello, World!';<br/>console.log(str.charCodeAt(7));",
    },
    codePointAt: {
      definition: "返回指定索引位置的字符的 Unicode 码点值",
      syntax: "string.codePointAt(index)",
      parameters: "{Number} index - 字符的索引位置",
      return: "Number",
      demo: "var str = 'Hello, World!';<br/>console.log(str.codePointAt(7));",
    },
    concat: {
      definition: "将多个字符串连接成一个新字符串",
      syntax: "string.concat(string1, string2, ...)",
      parameters: "{String} string1, string2, ... - 要连接的字符串",
      return: "String",
      demo: "var str1 = 'Hello,';<br/>var str2 = ' World!';<br/>console.log(str1.concat(str2));",
    },
    endsWith: {
      definition: "判断字符串是否以指定的子字符串结尾",
      syntax: "string.endsWith(searchString, length)",
      parameters:
        "{String} searchString - 要搜索的子字符串<br/>{Number} length (可选) - 从原始字符串末尾开始搜索的位置，默认为原始字符串的长度",
      return: "Boolean",
      demo: "var str = 'Hello, World!';<br/>console.log(str.endsWith('World!'));",
    },
    fontcolor: {
      definition: "使用指定的颜色显示字符串",
      syntax: "string.fontcolor(color)",
      parameters: "{String} color - 字符串的颜色",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.fontcolor('blue'));",
    },
    fontsize: {
      definition: "使用指定的字体大小显示字符串",
      syntax: "string.fontsize(size)",
      parameters: "{String} size - 字体大小",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.fontsize('5'));",
    },
    fixed: {
      definition: "以打字机文本显示字符串",
      syntax: "string.fixed()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.fixed());",
    },
    includes: {
      definition: "判断字符串是否包含指定的子字符串",
      syntax: "string.includes(searchString, position)",
      parameters:
        "{String} searchString - 要搜索的子字符串<br/>{Number} position (可选) - 开始搜索的位置，默认为 0",
      return: "Boolean",
      demo: "var str = 'Hello, World!';<br/>console.log(str.includes('World'));",
    },
    indexOf: {
      definition: "返回指定子字符串第一次出现的索引位置",
      syntax: "string.indexOf(searchValue, fromIndex)",
      parameters:
        "{String} searchValue - 要搜索的子字符串<br/>{Number} fromIndex (可选) - 开始搜索的位置，默认为 0",
      return: "Number",
      demo: "var str = 'Hello, World!';<br/>console.log(str.indexOf('World'));",
    },
    italics: {
      definition: "使用斜体显示字符串",
      syntax: "string.italics()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.italics());",
    },
    lastIndexOf: {
      definition: "返回指定子字符串最后一次出现的索引位置",
      syntax: "string.lastIndexOf(searchValue, fromIndex)",
      parameters:
        "{String} searchValue - 要搜索的子字符串<br/>{Number} fromIndex (可选) - 开始搜索的位置，默认为字符串的末尾",
      return: "Number",
      demo: "var str = 'Hello, World!';<br/>console.log(str.lastIndexOf('o'));",
    },
    link: {
      definition: "创建 HTML 锚链接",
      syntax: "string.link(url)",
      parameters: "{String} url - 链接的 URL",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.link('https://www.example.com'));",
    },
    localeCompare: {
      definition: "按照本地特定的顺序比较两个字符串",
      syntax: "string.localeCompare(compareString, locales, options)",
      parameters:
        "{String} compareString - 要比较的字符串<br/>{String or Array} locales (可选) - 一个或多个用来指定比较规则的语言环境标记，或者用来启用自定义排序规则的一个字符串数组<br/>{Object} options (可选) - 一个用来定制比较行为的对象",
      return: "Number",
      demo: "var str1 = 'apple';<br/>var str2 = 'banana';<br/>console.log(str1.localeCompare(str2));",
    },
    match: {
      definition: "检索字符串与正则表达式匹配的结果",
      syntax: "string.match(regexp)",
      parameters: "{RegExp} regexp - 用于匹配的正则表达式",
      return: "Array or Null",
      demo: "var str = 'Hello, World!';<br/>console.log(str.match(/o/g));",
    },
    matchAll: {
      definition: "返回一个包含字符串中所有匹配正则表达式的结果的迭代器",
      syntax: "string.matchAll(regexp)",
      parameters: "{RegExp} regexp - 用于匹配的正则表达式",
      return: "Iterator",
      demo: "var str = 'Hello, World!';<br/>var matches = str.matchAll(/o/g);<br/>for (const match of matches) {<br/>&nbsp;&nbsp;console.log(match[0]);<br/>}",
    },
    normalize: {
      definition: "返回字符串的 Unicode 正规化形式",
      syntax: "string.normalize(form)",
      parameters:
        "{String} form (可选) - 指定正规化形式的字符串，可以是 'NFC'、'NFD'、'NFKC' 或 'NFKD'",
      return: "String",
      demo: "var str = 'Café';<br/>console.log(str.normalize('NFD'));",
    },
    padEnd: {
      definition: "将字符串用指定字符从末尾填充到指定长度",
      syntax: "string.padEnd(targetLength, padString)",
      parameters:
        "{Number} targetLength - 填充后字符串的目标长度<br/>{String} padString (可选) - 用于填充的字符，默认为空格",
      return: "String",
      demo: "var str = 'Hello';<br/>console.log(str.padEnd(10, '.'));",
    },
    padStart: {
      definition: "将字符串用指定字符从开头填充到指定长度",
      syntax: "string.padStart(targetLength, padString)",
      parameters:
        "{Number} targetLength - 填充后字符串的目标长度<br/>{String} padString (可选) - 用于填充的字符，默认为空格",
      return: "String",
      demo: "var str = 'Hello';<br/>console.log(str.padStart(10, '.'));",
    },
    repeat: {
      definition: "将字符串重复指定次数",
      syntax: "string.repeat(count)",
      parameters: "{Number} count - 重复的次数",
      return: "String",
      demo: "var str = 'Hello';<br/>console.log(str.repeat(3));",
    },
    replace: {
      definition: "替换字符串中的匹配项",
      syntax: "string.replace(searchValue, replaceValue)",
      parameters:
        "{String or RegExp} searchValue - 要替换的子字符串或正则表达式<br/>{String or Function} replaceValue - 替换的字符串或替换函数",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.replace('World', 'John'));",
    },
    replaceAll: {
      definition: "替换字符串中的所有匹配项",
      syntax: "string.replaceAll(searchValue, replaceValue)",
      parameters:
        "{String or RegExp} searchValue - 要替换的子字符串或正则表达式<br/>{String or Function} replaceValue - 替换的字符串或替换函数",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.replaceAll('o', 'a'));",
    },
    search: {
      definition: "搜索字符串中指定的值并返回索引位置",
      syntax: "string.search(regexp)",
      parameters: "{RegExp} regexp - 用于搜索的正则表达式",
      return: "Number",
      demo: "var str = 'Hello, World!';<br/>console.log(str.search(/o/));",
    },
    slice: {
      definition: "提取字符串的指定部分",
      syntax: "string.slice(startIndex, endIndex)",
      parameters:
        "{Number} startIndex - 提取的起始索引位置<br/>{Number} endIndex (可选) - 提取的结束索引位置（不包括该位置的字符）",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.slice(7));",
    },
    small: {
      definition: "使用小号字体显示字符串",
      syntax: "string.small()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.small());",
    },
    split: {
      definition: "将字符串分割为字符串数组",
      syntax: "string.split(separator, limit)",
      parameters:
        "{String or RegExp} separator - 分隔符字符串或正则表达式<br/>{Number} limit (可选) - 限制返回的分割片段数量",
      return: "Array",
      demo: "var str = 'Hello, World!';<br/>console.log(str.split(', '));",
    },
    strike: {
      definition: "使用删除线显示字符串",
      syntax: "string.strike()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.strike());",
    },
    sub: {
      definition: "使用下标显示字符串",
      syntax: "string.sub()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.sub());",
    },
    substr: {
      definition: "提取字符串中从指定位置开始的指定长度的子字符串",
      syntax: "string.substr(startIndex, length)",
      parameters:
        "{Number} startIndex - 子字符串的起始索引位置<br/>{Number} length (可选) - 要提取的子字符串的长度",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.substr(7, 5));",
    },
    substring: {
      definition: "提取字符串中两个指定索引之间的字符",
      syntax: "string.substring(indexStart, indexEnd)",
      parameters:
        "{Number} indexStart - 提取的起始索引位置<br/>{Number} indexEnd (可选) - 提取的结束索引位置（不包括该位置的字符）",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.substring(7, 12));",
    },
    sup: {
      definition: "使用上标显示字符串",
      syntax: "string.sup()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.sup());",
    },
    startsWith: {
      definition: "判断字符串是否以指定的子字符串开头",
      syntax: "string.startsWith(searchString, position)",
      parameters:
        "{String} searchString - 要搜索的子字符串<br/>{Number} position (可选) - 开始搜索的位置，默认为 0",
      return: "Boolean",
      demo: "var str = 'Hello, World!';<br/>console.log(str.startsWith('Hello'));",
    },
    toString: {
      definition: "返回字符串对象的原始字符串表示",
      syntax: "string.toString()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = new String('Hello, World!');<br/>console.log(str.toString());",
    },
    trim: {
      definition: "去除字符串两端的空白字符",
      syntax: "string.trim()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = '   Hello, World!   ';<br/>console.log(str.trim());",
    },
    trimStart: {
      definition: "去除字符串开头的空白字符",
      syntax: "string.trimStart()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = '   Hello, World!';<br/>console.log(str.trimStart());",
    },
    trimLeft: {
      definition: "去除字符串开头的空白字符",
      syntax: "string.trimLeft()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = '   Hello, World!';<br/>console.log(str.trimLeft());",
    },
    trimEnd: {
      definition: "去除字符串末尾的空白字符",
      syntax: "string.trimEnd()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!   ';<br/>console.log(str.trimEnd());",
    },
    trimRight: {
      definition: "去除字符串末尾的空白字符",
      syntax: "string.trimRight()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!   ';<br/>console.log(str.trimRight());",
    },
    toLocaleLowerCase: {
      definition: "将字符串转换为小写，并根据主机的语言环境进行本地化处理",
      syntax: "string.toLocaleLowerCase()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.toLocaleLowerCase());",
    },
    toLocaleUpperCase: {
      definition: "将字符串转换为大写，并根据主机的语言环境进行本地化处理",
      syntax: "string.toLocaleUpperCase()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.toLocaleUpperCase());",
    },
    toLowerCase: {
      definition: "将字符串转换为小写",
      syntax: "string.toLowerCase()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.toLowerCase());",
    },
    toUpperCase: {
      definition: "将字符串转换为大写",
      syntax: "string.toUpperCase()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.toUpperCase());",
    },
    valueOf: {
      definition: "返回指定对象的原始值",
      syntax: "string.valueOf()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = new String('Hello, World!');<br/>console.log(str.valueOf());",
    },
    isWellFormed: {
      definition: "检查字符串是否是一个形式良好的 Unicode 字符串",
      syntax: "string.isWellFormed()",
      parameters: "{Null}",
      return: "Boolean",
      demo: "var str = 'Hello, World!';<br/>console.log(str.isWellFormed());",
    },
    toWellFormed: {
      definition: "返回一个形式良好的 Unicode 字符串",
      syntax: "string.toWellFormed()",
      parameters: "{Null}",
      return: "String",
      demo: "var str = 'Hello, World!';<br/>console.log(str.toWellFormed());",
    },
  },
  Number: {
    toExponential: {
      definition: "以指数表示法返回该数字的字符串表示",
      syntax: "number.toExponential(fractionDigits)",
      parameters: "{Number} fractionDigits (可选) - 小数位数",
      return: "String",
      demo: "var num = 123.456789;<br/>console.log(num.toExponential(2));",
    },
    toFixed: {
      definition: "使用定点表示法返回该数字的字符串表示，指定小数位数",
      syntax: "number.toFixed(fractionDigits)",
      parameters: "{Number} fractionDigits - 小数位数",
      return: "String",
      demo: "var num = 123.456789;<br/>console.log(num.toFixed(2));",
    },
    toPrecision: {
      definition: "返回该数字的字符串表示，指定有效数字的总位数",
      syntax: "number.toPrecision(precision)",
      parameters: "{Number} precision - 有效数字的总位数",
      return: "String",
      demo: "var num = 123.456789;<br/>console.log(num.toPrecision(4));",
    },
    toString: {
      definition: "返回数字的字符串表示",
      syntax: "number.toString(radix)",
      parameters: "{Number} radix (可选) - 进制数，默认为 10",
      return: "String",
      demo: "var num = 123;<br/>console.log(num.toString(2));",
    },
    valueOf: {
      definition: "返回指定对象的原始值",
      syntax: "number.valueOf()",
      parameters: "{Null}",
      return: "Number",
      demo: "var num = new Number(123);<br/>console.log(num.valueOf());",
    },
    toLocaleString: {
      definition: "返回该数字的字符串表示，根据主机的语言环境进行本地化处理",
      syntax: "number.toLocaleString()",
      parameters: "{Null}",
      return: "String",
      demo: "var num = 1234567.89;<br/>console.log(num.toLocaleString());",
    },
  },
  Array: {
    length: {
      definition: "返回数组的长度",
      syntax: "array.length",
      parameters: "{Null}",
      return: "Number",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.length);",
    },
    at: {
      definition: "返回指定索引处的元素值",
      syntax: "array.at(index)",
      parameters: "{Number} index - 索引值",
      return: "Any",
      demo: "var arr = ['a', 'b', 'c'];<br/>console.log(arr.at(1));",
    },
    concat: {
      definition: "将多个数组或值合并为一个新数组",
      syntax: "array.concat(value1, value2, ..., valueN)",
      parameters: "{Any} value1, value2, ..., valueN - 要合并的数组或值",
      return: "Array",
      demo: "var arr1 = [1, 2, 3];<br/>var arr2 = [4, 5];<br/>var newArr = arr1.concat(arr2);<br/>console.log(newArr);",
    },
    copyWithin: {
      definition: "将数组的一部分元素复制到同一数组中的另一个位置",
      syntax: "array.copyWithin(target, start, end)",
      parameters:
        "{Number} target - 复制的目标位置索引<br/>{Number} start (可选) - 复制的起始位置索引，默认为 0<br/>{Number} end (可选) - 复制的结束位置索引，默认为数组长度",
      return: "Array",
      demo: "var arr = [1, 2, 3, 4, 5];<br/>arr.copyWithin(0, 3);<br/>console.log(arr);",
    },
    fill: {
      definition: "用一个固定值填充数组的所有元素",
      syntax: "array.fill(value, start, end)",
      parameters:
        "{Any} value - 填充的值<br/>{Number} start (可选) - 填充的起始位置索引，默认为 0<br/>{Number} end (可选) - 填充的结束位置索引，默认为数组长度",
      return: "Array",
      demo: "var arr = [1, 2, 3];<br/>arr.fill(0);<br/>console.log(arr);",
    },
    find: {
      definition: "返回数组中满足条件的第一个元素的值",
      syntax: "array.find(callback, thisArg)",
      parameters:
        "{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",
      return: "Any",
      demo: "var arr = [1, 2, 3];<br/>var result = arr.find(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(result);",
    },
    findIndex: {
      definition: "返回数组中满足条件的第一个元素的索引",
      syntax: "array.findIndex(callback, thisArg)",
      parameters:
        "{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",
      return: "Number",
      demo: "var arr = [1, 2, 3];<br/>var index = arr.findIndex(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(index);",
    },
    findLast: {
      definition: "返回数组中满足条件的最后一个元素的值",
      syntax: "array.findLast(callback, thisArg)",
      parameters:
        "{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",
      return: "Any",
      demo: "var arr = [1, 2, 3];<br/>var result = arr.findLast(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(result);",
    },
    findLastIndex: {
      definition: "返回数组中满足条件的最后一个元素的索引",
      syntax: "array.findLastIndex(callback, thisArg)",
      parameters:
        "{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",
      return: "Number",
      demo: "var arr = [1, 2, 3];<br/>var index = arr.findLastIndex(function(element) {<br/>&nbsp;&nbsp;return element > 1;<br/>});<br/>console.log(index);",
    },
    lastIndexOf: {
      definition: "返回指定元素在数组中最后出现的索引",
      syntax: "array.lastIndexOf(searchElement, fromIndex)",
      parameters:
        "{Any} searchElement - 要查找的元素值<br/>{Number} fromIndex (可选) - 开始搜索的索引，默认为数组末尾",
      return: "Number",
      demo: "var arr = [1, 2, 3, 2, 1];<br/>console.log(arr.lastIndexOf(2));",
    },
    pop: {
      definition: "删除并返回数组的最后一个元素",
      syntax: "array.pop()",
      parameters: "{Null}",
      return: "Any",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.pop());",
    },
    push: {
      definition: "向数组末尾添加一个或多个元素，并返回新的长度",
      syntax: "array.push(element1, element2, ..., elementN)",
      parameters: "{Any} element1, element2, ..., elementN - 要添加的元素",
      return: "Number",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.push(4, 5));",
    },
    reverse: {
      definition: "颠倒数组中元素的顺序",
      syntax: "array.reverse()",
      parameters: "{Null}",
      return: "Array",
      demo: "var arr = [1, 2, 3];<br/>arr.reverse();<br/>console.log(arr);",
    },
    shift: {
      definition: "删除并返回数组的第一个元素",
      syntax: "array.shift()",
      parameters: "{Null}",
      return: "Any",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.shift());",
    },
    unshift: {
      definition: "向数组的开头添加一个或多个元素，并返回新的长度",
      syntax: "array.unshift(element1, element2, ..., elementN)",
      parameters: "{Any} element1, element2, ..., elementN - 要添加的元素",
      return: "Number",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.unshift(0));",
    },
    slice: {
      definition: "从数组中提取指定范围的元素，返回一个新数组",
      syntax: "array.slice(start, end)",
      parameters:
        "{Number} start (可选) - 提取的起始位置索引，默认为 0<br/>{Number} end (可选) - 提取的结束位置索引，默认为数组长度",
      return: "Array",
      demo: "var arr = [1, 2, 3, 4, 5];<br/>var newArr = arr.slice(1, 4);<br/>console.log(newArr);",
    },
    sort: {
      definition: "对数组元素进行排序",
      syntax: "array.sort(compareFunction)",
      parameters: "{Function} compareFunction (可选) - 指定排序规则的比较函数",
      return: "Array",
      demo: "var arr = [3, 1, 2];<br/>arr.sort();<br/>console.log(arr);",
    },
    splice: {
      definition: "删除、替换或添加数组的元素，并返回被删除的元素组成的数组",
      syntax: "array.splice(start, deleteCount, item1, item2, ..., itemN)",
      parameters:
        "{Number} start - 开始修改的索引位置<br/>{Number} deleteCount (可选) - 要删除的元素个数<br/>{Any} item1, item2, ..., itemN (可选) - 要添加到数组的元素",
      return: "Array",
      demo: "var arr = [1, 2, 3, 4, 5];<br/>var deletedItems = arr.splice(2, 2, 'a', 'b');<br/>console.log(deletedItems);",
    },
    includes: {
      definition: "判断数组是否包含指定元素",
      syntax: "array.includes(searchElement, fromIndex)",
      parameters:
        "{Any} searchElement - 要查找的元素值<br/>{Number} fromIndex (可选) - 开始搜索的索引，默认为 0",
      return: "Boolean",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.includes(2));",
    },
    indexOf: {
      definition: "返回指定元素在数组中第一次出现的索引",
      syntax: "array.indexOf(searchElement, fromIndex)",
      parameters:
        "{Any} searchElement - 要查找的元素值<br/>{Number} fromIndex (可选) - 开始搜索的索引，默认为 0",
      return: "Number",
      demo: "var arr = [1, 2, 3, 2, 1];<br/>console.log(arr.indexOf(2));",
    },
    join: {
      definition: "将数组的所有元素连接成一个字符串",
      syntax: "array.join(separator)",
      parameters:
        "{String} separator (可选) - 指定连接元素的分隔符，默认为逗号",
      return: "String",
      demo: "var arr = ['Hello', 'World'];<br/>console.log(arr.join(' '));",
    },
    keys: {
      definition: "返回数组中每个元素的索引迭代器",
      syntax: "array.keys()",
      parameters: "{Null}",
      return: "Iterator",
      demo: "var arr = ['a', 'b', 'c'];<br/>var iterator = arr.keys();<br/>for (var key of iterator) {<br/>&nbsp;&nbsp;console.log(key);<br/>}",
    },
    entries: {
      definition: "返回数组中每个元素的索引和值迭代器",
      syntax: "array.entries()",
      parameters: "{Null}",
      return: "Iterator",
      demo: "var arr = ['a', 'b', 'c'];<br/>var iterator = arr.entries();<br/>for (var entry of iterator) {<br/>&nbsp;&nbsp;console.log(entry);<br/>}",
    },
    values: {
      definition: "返回数组中每个元素的值迭代器",
      syntax: "array.values()",
      parameters: "{Null}",
      return: "Iterator",
      demo: "var arr = ['a', 'b', 'c'];<br/>var iterator = arr.values();<br/>for (var value of iterator) {<br/>&nbsp;&nbsp;console.log(value);<br/>}",
    },
    forEach: {
      definition: "对数组的每个元素执行指定操作",
      syntax: "array.forEach(callback, thisArg)",
      parameters:
        "{Function} callback - 对每个元素执行的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",
      return: "{Null}",
      demo: "var arr = [1, 2, 3];<br/>arr.forEach(function(element) {<br/>&nbsp;&nbsp;console.log(element);<br/>});",
    },
    filter: {
      definition: "根据指定条件筛选数组的元素，并返回一个新数组",
      syntax: "array.filter(callback, thisArg)",
      parameters:
        "{Function} callback - 用于测试每个元素的回调函数<br/>{Any} thisArg (可选) - 回调函数中的 this 值，默认为 undefined",
      return: "Array",
      demo: "var arr = [1, 2, 3, 4, 5];<br/>var newArr = arr.filter(function(element) {<br/>&nbsp;&nbsp;return element > 2;<br/>});<br/>console.log(newArr);",
    },
    flat: {
      definition: "将嵌套多维数组转换为一维数组",
      syntax: "array.flat(depth)",
      parameters: "{Number} depth (可选) - 指定递归展开的深度，默认为 1",
      return: "Array",
      demo: "var arr = [1, [2, [3, 4], 5]];<br/>var flatArr = arr.flat();<br/>console.log(flatArr);",
    },
    flatMap: {
      definition:
        "先对数组中的每个元素执行映射函数，然后将结果展平成一个新数组",
      syntax: "array.flatMap(callback, thisArg)",
      parameters:
        "{Function} callback - 对每个元素执行的映射函数<br/>{Any} thisArg (可选) - 映射函数中的 this 值，默认为 undefined",
      return: "Array",
      demo: "var arr = [1, 2, 3];<br/>var newArr = arr.flatMap(function(element) {<br/>&nbsp;&nbsp;return [element, element * 2];<br/>});<br/>console.log(newArr);",
    },
    map: {
      definition: "对数组的每个元素执行指定映射操作，并返回一个新数组",
      syntax: "array.map(callback, thisArg)",
      parameters:
        "{Function} callback - 对每个元素执行的映射函数<br/>{Any} thisArg (可选) - 映射函数中的 this 值，默认为 undefined",
      return: "Array",
      demo: "var arr = [1, 2, 3];<br/>var newArr = arr.map(function(element) {<br/>&nbsp;&nbsp;return element * 2;<br/>});<br/>console.log(newArr);",
    },
    every: {
      definition: "判断数组中的所有元素是否满足指定条件",
      syntax: "array.every(callback, thisArg)",
      parameters:
        "{Function} callback - 对每个元素执行的条件判断函数<br/>{Any} thisArg (可选) - 条件判断函数中的 this 值，默认为 undefined",
      return: "Boolean",
      demo: "var arr = [1, 2, 3];<br/>var result = arr.every(function(element) {<br/>&nbsp;&nbsp;return element > 0;<br/>});<br/>console.log(result);",
    },
    some: {
      definition: "判断数组中是否存在满足指定条件的元素",
      syntax: "array.some(callback, thisArg)",
      parameters:
        "{Function} callback - 对每个元素执行的条件判断函数<br/>{Any} thisArg (可选) - 条件判断函数中的 this 值，默认为 undefined",
      return: "Boolean",
      demo: "var arr = [1, 2, 3];<br/>var result = arr.some(function(element) {<br/>&nbsp;&nbsp;return element > 2;<br/>});<br/>console.log(result);",
    },
    reduce: {
      definition: "对数组的每个元素执行指定归约操作，返回一个累计值",
      syntax: "array.reduce(callback, initialValue)",
      parameters:
        "{Function} callback - 对每个元素执行的归约函数<br/>{Any} initialValue (可选) - 归约的初始值",
      return: "Any",
      demo: "var arr = [1, 2, 3];<br/>var sum = arr.reduce(function(accumulator, currentValue) {<br/>&nbsp;&nbsp;return accumulator + currentValue;<br/>}, 0);<br/>console.log(sum);",
    },
    reduceRight: {
      definition:
        "对数组的每个元素执行指定归约操作（从右到左），返回一个累计值",
      syntax: "array.reduceRight(callback, initialValue)",
      parameters:
        "{Function} callback - 对每个元素执行的归约函数<br/>{Any} initialValue (可选) - 归约的初始值",
      return: "Any",
      demo: "var arr = [1, 2, 3];<br/>var sum = arr.reduceRight(function(accumulator, currentValue) {<br/>&nbsp;&nbsp;return accumulator + currentValue;<br/>}, 0);<br/>console.log(sum);",
    },
    toLocaleString: {
      definition: "返回数组的元素转换为字符串后的本地化表示",
      syntax: "array.toLocaleString(locales, options)",
      parameters:
        "{String|Array} locales (可选) - 指定要使用的语言或语言数组，默认为宿主环境的默认语言<br/>{Object} options (可选) - 可配置的选项对象",
      return: "String",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.toLocaleString('en-US'));",
    },
    toString: {
      definition: "将数组转换为字符串",
      syntax: "array.toString()",
      parameters: "{Null}",
      return: "String",
      demo: "var arr = [1, 2, 3];<br/>console.log(arr.toString());",
    },
    toReversed: {
      definition: "返回一个将数组元素颠倒顺序的新数组",
      syntax: "array.toReversed()",
      parameters: "{Null}",
      return: "Array",
      demo: "var arr = [1, 2, 3];<br/>var reversedArr = arr.toReversed();<br/>console.log(reversedArr);",
    },
    toSorted: {
      definition: "返回一个按升序排列数组元素的新数组",
      syntax: "array.toSorted()",
      parameters: "{Null}",
      return: "Array",
      demo: "var arr = [3, 1, 2];<br/>var sortedArr = arr.toSorted();<br/>console.log(sortedArr);",
    },
    toSpliced: {
      definition: "返回一个删除指定元素后的新数组",
      syntax: "array.toSpliced(index, deleteCount)",
      parameters:
        "{Number} index - 要删除的元素的索引<br/>{Number} deleteCount - 要删除的元素个数",
      return: "Array",
      demo: "var arr = [1, 2, 3, 4, 5];<br/>var splicedArr = arr.toSpliced(2, 2);<br/>console.log(splicedArr);",
    },
    with: {
      definition: "使用给定的对象调用数组的方法",
      syntax: "array.with(thisArg)",
      parameters: "{Any} thisArg - 方法调用的 this 值",
      return: "{Any}",
      demo: "var arr = [1, 2, 3];<br/>var sum = arr.with(Math).reduce(function(accumulator, currentValue) {<br/>&nbsp;&nbsp;return accumulator + currentValue;<br/>}, 0);<br/>console.log(sum);",
    },
  },
  Boolean: {
    toString: {
      definition: "将布尔值转换为字符串",
      syntax: "boolean.toString()",
      parameters: "{Null}",
      return: "String",
      demo: "var bool = true;<br/>console.log(bool.toString());",
    },
    valueOf: {
      definition: "返回布尔值的原始值",
      syntax: "boolean.valueOf()",
      parameters: "{Null}",
      return: "Boolean",
      demo: "var bool = new Boolean(true);<br/>console.log(bool.valueOf());",
    },
  },
  Date: {
    toString: {
      definition: "将日期对象转换为字符串",
      syntax: "date.toString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toString());",
    },
    toDateString: {
      definition: "返回日期的字符串表示，不包含时间部分",
      syntax: "date.toDateString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toDateString());",
    },
    toTimeString: {
      definition: "返回时间的字符串表示，不包含日期部分",
      syntax: "date.toTimeString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toTimeString());",
    },
    toISOString: {
      definition: "返回日期对象的字符串表示，采用ISO格式",
      syntax: "date.toISOString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toISOString());",
    },
    toUTCString: {
      definition: "根据世界时，将日期对象转换为字符串",
      syntax: "date.toUTCString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toUTCString());",
    },
    toGMTString: {
      definition: "根据格林威治时间，将日期对象转换为字符串",
      syntax: "date.toGMTString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toGMTString());",
    },
    getDate: {
      definition: "返回日期的天数（1-31）",
      syntax: "date.getDate()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getDate());",
    },
    setDate: {
      definition: "设置日期的天数",
      syntax: "date.setDate(day)",
      parameters: "day: Number (1-31)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setDate(15);",
    },
    getDay: {
      definition: "返回星期几的索引（0-6）",
      syntax: "date.getDay()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getDay());",
    },
    getFullYear: {
      definition: "返回四位数的年份",
      syntax: "date.getFullYear()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getFullYear());",
    },
    setFullYear: {
      definition: "设置四位数的年份",
      syntax: "date.setFullYear(year)",
      parameters: "year: Number",
      return: "Number",
      demo: "var date = new Date();<br/>date.setFullYear(2022);",
    },
    getHours: {
      definition: "返回小时数（0-23）",
      syntax: "date.getHours()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getHours());",
    },
    setHours: {
      definition: "设置小时数",
      syntax: "date.setHours(hour)",
      parameters: "hour: Number (0-23)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setHours(12);",
    },
    getMilliseconds: {
      definition: "返回毫秒数（0-999）",
      syntax: "date.getMilliseconds()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getMilliseconds());",
    },
    setMilliseconds: {
      definition: "设置毫秒数",
      syntax: "date.setMilliseconds(ms)",
      parameters: "ms: Number (0-999)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setMilliseconds(500);",
    },
    getMinutes: {
      definition: "返回分钟数（0-59）",
      syntax: "date.getMinutes()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getMinutes());",
    },
    setMinutes: {
      definition: "设置分钟数",
      syntax: "date.setMinutes(minutes)",
      parameters: "minutes: Number (0-59)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setMinutes(30);",
    },
    getMonth: {
      definition: "返回月份的索引（0-11）",
      syntax: "date.getMonth()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getMonth());",
    },
    setMonth: {
      definition: "设置月份的索引",
      syntax: "date.setMonth(month)",
      parameters: "month: Number (0-11)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setMonth(9);",
    },
    getSeconds: {
      definition: "返回秒数（0-59）",
      syntax: "date.getSeconds()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getSeconds());",
    },
    setSeconds: {
      definition: "设置秒数",
      syntax: "date.setSeconds(seconds)",
      parameters: "seconds: Number (0-59)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setSeconds(45);",
    },
    getTime: {
      definition: "返回自 1970 年 1 月 1 日 00:00:00 UTC 以来的毫秒数",
      syntax: "date.getTime()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getTime());",
    },
    setTime: {
      definition: "设置日期对象的毫秒数",
      syntax: "date.setTime(milliseconds)",
      parameters: "milliseconds: Number",
      return: "Number",
      demo: "var date = new Date();<br/>date.setTime(1623934800000);",
    },
    getTimezoneOffset: {
      definition: "返回当前时区与UTC之间的分钟差",
      syntax: "date.getTimezoneOffset()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getTimezoneOffset());",
    },
    getUTCDate: {
      definition: "根据世界时返回日期的天数（1-31）",
      syntax: "date.getUTCDate()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCDate());",
    },
    setUTCDate: {
      definition: "根据世界时设置日期的天数",
      syntax: "date.setUTCDate(day)",
      parameters: "day: Number (1-31)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCDate(20);",
    },
    getUTCDay: {
      definition: "根据世界时返回星期几的索引（0-6）",
      syntax: "date.getUTCDay()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCDay());",
    },
    getUTCFullYear: {
      definition: "根据世界时返回四位数的年份",
      syntax: "date.getUTCFullYear()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCFullYear());",
    },
    setUTCFullYear: {
      definition: "根据世界时设置四位数的年份",
      syntax: "date.setUTCFullYear(year)",
      parameters: "year: Number",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCFullYear(2022);",
    },
    getUTCHours: {
      definition: "根据世界时返回小时数（0-23）",
      syntax: "date.getUTCHours()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCHours());",
    },
    setUTCHours: {
      definition: "根据世界时设置小时数",
      syntax: "date.setUTCHours(hour)",
      parameters: "hour: Number (0-23)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCHours(8);",
    },
    getUTCMilliseconds: {
      definition: "根据世界时返回毫秒数（0-999）",
      syntax: "date.getUTCMilliseconds()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCMilliseconds());",
    },
    setUTCMilliseconds: {
      definition: "根据世界时设置毫秒数",
      syntax: "date.setUTCMilliseconds(ms)",
      parameters: "ms: Number (0-999)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCMilliseconds(500);",
    },
    getUTCMinutes: {
      definition: "根据世界时返回分钟数（0-59）",
      syntax: "date.getUTCMinutes()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCMinutes());",
    },
    setUTCMinutes: {
      definition: "根据世界时设置分钟数",
      syntax: "date.setUTCMinutes(minutes)",
      parameters: "minutes: Number (0-59)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCMinutes(30);",
    },
    getUTCMonth: {
      definition: "根据世界时返回月份的索引（0-11）",
      syntax: "date.getUTCMonth()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCMonth());",
    },
    setUTCMonth: {
      definition: "根据世界时设置月份的索引",
      syntax: "date.setUTCMonth(month)",
      parameters: "month: Number (0-11)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCMonth(9);",
    },
    getUTCSeconds: {
      definition: "根据世界时返回秒数（0-59）",
      syntax: "date.getUTCSeconds()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getUTCSeconds());",
    },
    setUTCSeconds: {
      definition: "根据世界时设置秒数",
      syntax: "date.setUTCSeconds(seconds)",
      parameters: "seconds: Number (0-59)",
      return: "Number",
      demo: "var date = new Date();<br/>date.setUTCSeconds(45);",
    },
    valueOf: {
      definition: "返回日期对象的原始值",
      syntax: "date.valueOf()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.valueOf());",
    },
    getYear: {
      definition: "返回年份的后两位数",
      syntax: "date.getYear()",
      parameters: "{Null}",
      return: "Number",
      demo: "var date = new Date();<br/>console.log(date.getYear());",
    },
    setYear: {
      definition: "设置年份的后两位数",
      syntax: "date.setYear(year)",
      parameters: "year: Number",
      return: "Number",
      demo: "var date = new Date();<br/>date.setYear(22);",
    },
    toJSON: {
      definition: "将日期对象转换为JSON字符串",
      syntax: "date.toJSON()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toJSON());",
    },
    toLocaleString: {
      definition: "返回日期对象的本地字符串表示",
      syntax: "date.toLocaleString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toLocaleString());",
    },
    toLocaleDateString: {
      definition: "返回日期对象的本地日期字符串表示",
      syntax: "date.toLocaleDateString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toLocaleDateString());",
    },
    toLocaleTimeString: {
      definition: "返回日期对象的本地时间字符串表示",
      syntax: "date.toLocaleTimeString()",
      parameters: "{Null}",
      return: "String",
      demo: "var date = new Date();<br/>console.log(date.toLocaleTimeString());",
    },
  },
  Math: {
    abs: {
      definition: "返回一个数的绝对值",
      syntax: "Math.abs(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.abs(-5));",
    },
    acos: {
      definition: "返回一个数的反余弦值",
      syntax: "Math.acos(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.acos(0.5));",
    },
    acosh: {
      definition: "返回一个数的反双曲余弦值",
      syntax: "Math.acosh(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.acosh(2));",
    },
    asin: {
      definition: "返回一个数的反正弦值",
      syntax: "Math.asin(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.asin(0.5));",
    },
    asinh: {
      definition: "返回一个数的反双曲正弦值",
      syntax: "Math.asinh(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.asinh(1));",
    },
    atan: {
      definition: "返回一个数的反正切值",
      syntax: "Math.atan(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.atan(1));",
    },
    atanh: {
      definition: "返回一个数的反双曲正切值",
      syntax: "Math.atanh(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.atanh(0.5));",
    },
    atan2: {
      definition: "返回两个数的反正切值",
      syntax: "Math.atan2(y, x)",
      parameters: "y: Number, x: Number",
      return: "Number",
      demo: "console.log(Math.atan2(1, 1));",
    },
    ceil: {
      definition: "对一个数进行上取整",
      syntax: "Math.ceil(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.ceil(4.3));",
    },
    cbrt: {
      definition: "返回一个数的立方根",
      syntax: "Math.cbrt(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.cbrt(8));",
    },
    expm1: {
      definition: "返回e的x次方减1的值",
      syntax: "Math.expm1(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.expm1(1));",
    },
    clz32: {
      definition: "返回一个数在二进制表示中前导零的个数",
      syntax: "Math.clz32(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.clz32(1));",
    },
    cos: {
      definition: "返回一个数的余弦值",
      syntax: "Math.cos(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.cos(Math.PI));",
    },
    cosh: {
      definition: "返回一个数的双曲余弦值",
      syntax: "Math.cosh(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.cosh(0));",
    },
    exp: {
      definition: "返回e的x次方",
      syntax: "Math.exp(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.exp(1));",
    },
    floor: {
      definition: "对一个数进行下取整",
      syntax: "Math.floor(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.floor(4.7));",
    },
    fround: {
      definition: "返回一个数的单精度浮点表示",
      syntax: "Math.fround(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.fround(0.1 + 0.2));",
    },
    hypot: {
      definition: "返回一组数的平方和的平方根",
      syntax: "Math.hypot(...args)",
      parameters: "args: Number",
      return: "Number",
      demo: "console.log(Math.hypot(3, 4));",
    },
    imul: {
      definition: "返回两个数相乘的32位整数结果",
      syntax: "Math.imul(x, y)",
      parameters: "x: Number, y: Number",
      return: "Number",
      demo: "console.log(Math.imul(2, 3));",
    },
    log: {
      definition: "返回一个数的自然对数",
      syntax: "Math.log(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.log(10));",
    },
    log1p: {
      definition: "返回一个数加1的自然对数",
      syntax: "Math.log1p(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.log1p(1));",
    },
    log2: {
      definition: "返回一个数以2为底的对数",
      syntax: "Math.log2(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.log2(8));",
    },
    log10: {
      definition: "返回一个数以10为底的对数",
      syntax: "Math.log10(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.log10(100));",
    },
    max: {
      definition: "返回一组数中的最大值",
      syntax: "Math.max(...args)",
      parameters: "args: Number",
      return: "Number",
      demo: "console.log(Math.max(1, 2, 3));",
    },
    min: {
      definition: "返回一组数中的最小值",
      syntax: "Math.min(...args)",
      parameters: "args: Number",
      return: "Number",
      demo: "console.log(Math.min(1, 2, 3));",
    },
    pow: {
      definition: "返回一个数的指定次幂",
      syntax: "Math.pow(base, exponent)",
      parameters: "base: Number, exponent: Number",
      return: "Number",
      demo: "console.log(Math.pow(2, 3));",
    },
    random: {
      definition: "返回一个0到1之间的随机数",
      syntax: "Math.random()",
      return: "Number",
      demo: "console.log(Math.random());",
    },
    round: {
      definition: "对一个数进行四舍五入",
      syntax: "Math.round(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.round(4.5));",
    },
    sign: {
      definition: "返回一个数的符号",
      syntax: "Math.sign(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.sign(-3));",
    },
    sin: {
      definition: "返回一个数的正弦值",
      syntax: "Math.sin(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.sin(Math.PI / 2));",
    },
    sinh: {
      definition: "返回一个数的双曲正弦值",
      syntax: "Math.sinh(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.sinh(0));",
    },
    sqrt: {
      definition: "返回一个数的平方根",
      syntax: "Math.sqrt(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.sqrt(9));",
    },
    tan: {
      definition: "返回一个数的正切值",
      syntax: "Math.tan(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.tan(0));",
    },
    tanh: {
      definition: "返回一个数的双曲正切值",
      syntax: "Math.tanh(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.tanh(0));",
    },
    trunc: {
      definition: "去除一个数的小数部分，返回整数部分",
      syntax: "Math.trunc(x)",
      parameters: "x: Number",
      return: "Number",
      demo: "console.log(Math.trunc(4.9));",
    },
    E: {
      definition: "常量，自然对数的底数e",
      syntax: "Math.E",
      return: "Number",
      demo: "console.log(Math.E);",
    },
    LN10: {
      definition: "常量，10的自然对数",
      syntax: "Math.LN10",
      return: "Number",
      demo: "console.log(Math.LN10);",
    },
    LN2: {
      definition: "常量，2的自然对数",
      syntax: "Math.LN2",
      return: "Number",
      demo: "console.log(Math.LN2);",
    },
    LOG10E: {
      definition: "常量，以10为底的e的对数",
      syntax: "Math.LOG10E",
      return: "Number",
      demo: "console.log(Math.LOG10E);",
    },
    LOG2E: {
      definition: "常量，以2为底的e的对数",
      syntax: "Math.LOG2E",
      return: "Number",
      demo: "console.log(Math.LOG2E);",
    },
    PI: {
      definition: "常量，圆周率π",
      syntax: "Math.PI",
      return: "Number",
      demo: "console.log(Math.PI);",
    },
    SQRT1_2: {
      definition: "常量，1/2的平方根",
      syntax: "Math.SQRT1_2",
      return: "Number",
      demo: "console.log(Math.SQRT1_2);",
    },
    SQRT2: {
      definition: "常量，2的平方根",
      syntax: "Math.SQRT2",
      return: "Number",
      demo: "console.log(Math.SQRT2);",
    },
  },
  _: {
    length: {
      definition: "返回集合的长度",
      syntax: "_.length(collection)",
      parameters: "collection: Array | Object | String",
      return: "Number",
      demo: "console.log(_.length([1, 2, 3]));",
    },
    name: {
      definition: "获取函数的名称",
      syntax: "_.name(func)",
      parameters: "func: Function",
      return: "String",
      demo: "console.log(_.name(_.map));",
    },
    arguments: {
      definition: "获取函数的参数列表",
      syntax: "_.arguments(func)",
      parameters: "func: Function",
      return: "Array",
      demo: "console.log(_.arguments(_.map));",
    },
    caller: {
      definition: "获取函数的调用者",
      syntax: "_.caller(func)",
      parameters: "func: Function",
      return: "Function",
      demo: "console.log(_.caller(_.map));",
    },
    prototype: {
      definition: "获取对象的原型",
      syntax: "_.prototype(value)",
      parameters: "value: any",
      return: "Object",
      demo: "console.log(_.prototype([]));",
    },
    templateSettings: {
      definition: "获取或设置模板引擎的设置",
      syntax: "_.templateSettings",
      return: "Object",
      demo: "console.log(_.templateSettings.escape);",
    },
    after: {
      definition: "创建一个函数，调用n次后才会执行",
      syntax: "_.after(n, func)",
      parameters: "n: Number, func: Function",
      return: "Function",
      demo: "const greet = _.after(3, () => console.log('Hello!'));<br/>greet();<br/>greet();<br/>greet();",
    },
    ary: {
      definition: "创建一个函数，限制函数的参数个数",
      syntax: "_.ary(func, n)",
      parameters: "func: Function, n: Number",
      return: "Function",
      demo: "const add = (a, b) => a + b;<br/>const addTwo = _.ary(add, 2);<br/>console.log(addTwo(1, 2, 3));",
    },
    assign: {
      definition: "将源对象的可枚举属性复制到目标对象",
      syntax: "_.assign(object, ...sources)",
      parameters: "object: Object, sources: Object",
      return: "Object",
      demo: "const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assign(obj1, obj2);<br/>console.log(merged);",
    },
    assignIn: {
      definition: "将所有可枚举属性从一个或多个源对象复制到目标对象",
      syntax: "_.assignIn(object, ...sources)",
      parameters: "object: Object, sources: Object",
      return: "Object",
      demo: "const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assignIn(obj1, obj2);<br/>console.log(merged);",
    },
    assignInWith: {
      definition:
        "将所有可枚举属性从一个或多个源对象复制到目标对象，可自定义复制行为",
      syntax: "_.assignInWith(object, ...sources, customizer)",
      parameters: "object: Object, sources: Object, customizer: Function",
      return: "Object",
      demo: "const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assignInWith(obj1, obj2, (objValue, srcValue) => objValue || srcValue);<br/>console.log(merged);",
    },
    assignWith: {
      definition: "将源对象的可枚举属性复制到目标对象，可自定义复制行为",
      syntax: "_.assignWith(object, ...sources, customizer)",
      parameters: "object: Object, sources: Object, customizer: Function",
      return: "Object",
      demo: "const obj1 = { a: 1 };<br/>const obj2 = { b: 2 };<br/>const merged = _.assignWith(obj1, obj2, (objValue, srcValue) => objValue || srcValue);<br/>console.log(merged);",
    },
    at: {
      definition: "从对象中获取指定路径的值",
      syntax: "_.at(object, paths)",
      parameters: "object: Object, paths: (string | string[])",
      return: "Array",
      demo: "const obj = { a: { b: { c: 3 } } };<br/>const value = _.at(obj, ['a.b.c']);<br/>console.log(value);",
    },
    before: {
      definition: "创建一个函数，调用n次后不再执行",
      syntax: "_.before(n, func)",
      parameters: "n: Number, func: Function",
      return: "Function",
      demo: "const greet = _.before(3, () => console.log('Hello!'));<br/>greet();<br/>greet();<br/>greet();",
    },
    bind: {
      definition: "创建一个绑定上下文的函数",
      syntax: "_.bind(func, thisArg, ...partials)",
      parameters: "func: Function, thisArg: any, partials: any",
      return: "Function",
      demo: "const greet = function (message) {<br/>  console.log(`${message} ${this.name}!`);<br/>};<br/>const boundGreet = _.bind(greet, { name: 'Alice' }, 'Hello');<br/>boundGreet();",
    },
    bindAll: {
      definition: "绑定对象中的所有方法到对象本身",
      syntax: "_.bindAll(object, ...methodNames)",
      parameters: "object: Object, methodNames: (string | string[])",
      return: "Object",
      demo: "const obj = {<br/>  name: 'Alice',<br/>  greet() {<br/>    console.log(`Hello, ${this.name}!`);<br/>  },<br/>};<br/><br/>_.bindAll(obj, 'greet');<br/>obj.greet();",
    },
    bindKey: {
      definition: "创建一个绑定上下文和指定键的函数",
      syntax: "_.bindKey(object, key, ...partials)",
      parameters: "object: Object, key: string, partials: any",
      return: "Function",
      demo: "const obj = {<br/>  name: 'Alice',<br/>  greet(message) {<br/>    console.log(`${message} ${this.name}!`);<br/>  },<br/>};<br/><br/>const boundGreet = _.bindKey(obj, 'greet', 'Hello');<br/>boundGreet();",
    },
    castArray: {
      definition: "将值转换为数组",
      syntax: "_.castArray(value)",
      parameters: "value: any",
      return: "Array",
      demo: "console.log(_.castArray(1));<br/>console.log(_.castArray({ a: 1 }));<br/>console.log(_.castArray([1, 2, 3]));",
    },
    chain: {
      definition: "创建一个lodash链式调用的封装对象",
      syntax: "_.chain(value)",
      parameters: "value: any",
      return: "Object",
      demo: "const result = _.chain([1, 2, 3])<br/>  .map(n => n * 2)<br/>  .filter(n => n % 3 === 0)<br/>  .value();<br/>console.log(result);",
    },
    chunk: {
      definition: "将数组分割成指定大小的块",
      syntax: "_.chunk(array, size)",
      parameters: "array: Array, size: Number",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5, 6];<br/>const chunks = _.chunk(array, 2);<br/>console.log(chunks);",
    },
    compact: {
      definition: "创建一个移除所有假值的数组副本",
      syntax: "_.compact(array)",
      parameters: "array: Array",
      return: "Array",
      demo: "const array = [1, 0, null, '', undefined, 2, false];<br/>const compactArray = _.compact(array);<br/>console.log(compactArray);",
    },
    concat: {
      definition: "将多个数组或值连接成一个数组",
      syntax: "_.concat(array, ...values)",
      parameters: "array: Array, values: any",
      return: "Array",
      demo: "const array1 = [1];<br/>const array2 = [2];<br/>const concatenated = _.concat(array1, array2, [3], 4);<br/>console.log(concatenated);",
    },
    cond: {
      definition: "创建一个函数，根据断言函数返回的结果执行对应的函数",
      syntax: "_.cond(pairs)",
      parameters: "pairs: Array",
      return: "Function",
      demo: "const classify = _.cond([<br/>  [n => n < 0, n => 'negative'],<br/>  [n => n === 0, n => 'zero'],<br/>  [n => n > 0, n => 'positive'],<br/>]);<br/><br/>console.log(classify(5));<br/>console.log(classify(0));<br/>console.log(classify(-5));",
    },
    conforms: {
      definition: "创建一个断言函数，根据对象的属性是否满足特定条件返回结果",
      syntax: "_.conforms(source)",
      parameters: "source: Object",
      return: "Function",
      demo: "const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const criteria = _.conforms({<br/>  age: age => age < 30,<br/>});<br/><br/>const filtered = _.filter(users, criteria);<br/>console.log(filtered);",
    },
    constant: {
      definition: "创建一个返回固定值的函数",
      syntax: "_.constant(value)",
      parameters: "value: any",
      return: "Function",
      demo: "const alwaysTrue = _.constant(true);<br/>console.log(alwaysTrue());<br/>console.log(alwaysTrue());",
    },
    countBy: {
      definition: "根据迭代函数的结果对集合中的元素进行分组统计",
      syntax: "_.countBy(collection, iteratee)",
      parameters: "collection: Array | Object, iteratee: Function",
      return: "Object",
      demo: "const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 25 },<br/>];<br/><br/>const countByAge = _.countBy(users, user => user.age);<br/>console.log(countByAge);",
    },
    create: {
      definition: "创建一个具有指定原型的对象",
      syntax: "_.create(prototype, properties)",
      parameters: "prototype: Object, properties: Object",
      return: "Object",
      demo: "const person = {<br/>  greet() {<br/>    console.log(`Hello, ${this.name}!`);<br/>  },<br/>};<br/><br/>const alice = _.create(person, { name: 'Alice' });<br/>alice.greet();",
    },
    curry: {
      definition: "创建一个柯里化的函数",
      syntax: "_.curry(func, arity)",
      parameters: "func: Function, arity: Number",
      return: "Function",
      demo: "const add = (a, b, c) => a + b + c;<br/>const curriedAdd = _.curry(add);<br/>console.log(curriedAdd(1)(2)(3));<br/>console.log(curriedAdd(1, 2)(3));<br/>console.log(curriedAdd(1, 2, 3));",
    },
    curryRight: {
      definition: "从右到左创建一个柯里化的函数",
      syntax: "_.curryRight(func, arity)",
      parameters: "func: Function, arity: Number",
      return: "Function",
      demo: "const divide = (a, b, c) => a / b / c;<br/>const curriedDivide = _.curryRight(divide);<br/>console.log(curriedDivide(12)(6)(2));<br/>console.log(curriedDivide(12, 6)(2));<br/>console.log(curriedDivide(12, 6, 2));",
    },
    debounce: {
      definition:
        "创建一个防抖函数，延迟执行函数的调用，直到一段时间内没有新的调用",
      syntax: "_.debounce(func, wait, options)",
      parameters: "func: Function, wait: Number, options: Object",
      return: "Function",
      demo: "window.addEventListener('scroll', _.debounce(() => {<br/>  console.log('Scroll event debounced.');<br/>}, 200));",
    },
    defaults: {
      definition:
        "将指定对象的属性复制到目标对象，但只复制目标对象不存在的属性",
      syntax: "_.defaults(object, ...sources)",
      parameters: "object: Object, sources: Object",
      return: "Object",
      demo: "const obj1 = { a: 1 };<br/>const obj2 = { b: 2, c: 3 };<br/>const merged = _.defaults(obj1, obj2);<br/>console.log(merged);",
    },
    defaultsDeep: {
      definition:
        "将指定对象的属性复制到目标对象的深层属性中，但只复制目标对象不存在的属性",
      syntax: "_.defaultsDeep(object, ...sources)",
      parameters: "object: Object, sources: Object",
      return: "Object",
      demo: "const obj1 = { a: { b: 1 } };<br/>const obj2 = { a: { c: 2 } };<br/>const merged = _.defaultsDeep(obj1, obj2);<br/>console.log(merged);",
    },
    defer: {
      definition: "延迟调用函数，直到当前调用栈清空",
      syntax: "_.defer(func, ...args)",
      parameters: "func: Function, args: any",
      return: "Number",
      demo: "_.defer(() => {<br/>  console.log('Deferred function called.');<br/>});",
    },
    delay: {
      definition: "延迟调用函数，经过指定的延迟时间后执行",
      syntax: "_.delay(func, wait, ...args)",
      parameters: "func: Function, wait: Number, args: any",
      return: "Number",
      demo: "_.delay(() => {<br/>  console.log('Delayed function called.');<br/>}, 2000);",
    },
    difference: {
      definition: "创建一个剔除所有给定数组中的元素后的数组",
      syntax: "_.difference(array, ...values)",
      parameters: "array: Array, values: Array",
      return: "Array",
      demo: "const array1 = [1, 2, 3, 4, 5];<br/>const array2 = [3, 4, 5, 6, 7];<br/>const diff = _.difference(array1, array2);<br/>console.log(diff);",
    },
    differenceBy: {
      definition: "根据迭代函数的结果创建一个剔除所有给定数组中的元素后的数组",
      syntax: "_.differenceBy(array, ...values, iteratee)",
      parameters: "array: Array, values: Array, iteratee: Function | string",
      return: "Array",
      demo: "const array1 = [1.1, 2.2, 3.3, 4.4, 5.5];<br/>const array2 = [3.3, 4.4, 5.5, 6.6, 7.7];<br/>const diff = _.differenceBy(array1, array2, Math.floor);<br/>console.log(diff);",
    },
    differenceWith: {
      definition: "使用比较函数创建一个剔除所有给定数组中的元素后的数组",
      syntax: "_.differenceWith(array, values, comparator)",
      parameters: "array: Array, values: Array, comparator: Function",
      return: "Array",
      demo: "const array1 = [{ x: 1, y: 2 }, { x: 2, y: 3 }];<br/>const array2 = [{ x: 1, y: 2 }];<br/>const diff = _.differenceWith(array1, array2, _.isEqual);<br/>console.log(diff);",
    },
    drop: {
      definition: "创建一个剔除指定数量元素后的数组",
      syntax: "_.drop(array, n)",
      parameters: "array: Array, n: Number",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const dropped = _.drop(array, 2);<br/>console.log(dropped);",
    },
    dropRight: {
      definition: "创建一个剔除指定数量元素后的倒序数组",
      syntax: "_.dropRight(array, n)",
      parameters: "array: Array, n: Number",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const droppedRight = _.dropRight(array, 2);<br/>console.log(droppedRight);",
    },
    dropRightWhile: {
      definition: "创建一个剔除满足条件的元素后的倒序数组",
      syntax: "_.dropRightWhile(array, predicate)",
      parameters: "array: Array, predicate: Function | Object",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', active: true },<br/>  { name: 'Bob', active: true },<br/>  { name: 'Charlie', active: false },<br/>];<br/><br/>const droppedRight = _.dropRightWhile(users, user => !user.active);<br/>console.log(droppedRight);",
    },
    dropWhile: {
      definition: "创建一个剔除满足条件的元素后的数组",
      syntax: "_.dropWhile(array, predicate)",
      parameters: "array: Array, predicate: Function | Object",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', active: false },<br/>  { name: 'Bob', active: false },<br/>  { name: 'Charlie', active: true },<br/>];<br/><br/>const dropped = _.dropWhile(users, user => !user.active);<br/>console.log(dropped);",
    },
    fill: {
      definition: "用指定值填充数组的元素",
      syntax: "_.fill(array, value, start, end)",
      parameters: "array: Array, value: any, start: Number, end: Number",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5];<br/>_.fill(array, 'a', 1, 4);<br/>console.log(array);",
    },
    filter: {
      definition: "根据断言函数筛选出符合条件的元素",
      syntax: "_.filter(collection, predicate)",
      parameters: "collection: Array | Object, predicate: Function | Object",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', active: true },<br/>  { name: 'Bob', active: false },<br/>  { name: 'Charlie', active: true },<br/>];<br/><br/>const filtered = _.filter(users, user => user.active);<br/>console.log(filtered);",
    },
    flatMap: {
      definition: "先映射每个元素，然后将结果扁平化为一个新数组",
      syntax: "_.flatMap(collection, iteratee)",
      parameters: "collection: Array | Object, iteratee: Function",
      return: "Array",
      demo: "const array = [1, 2, 3];<br/>const doubled = _.flatMap(array, num => [num, num * 2]);<br/>console.log(doubled);",
    },
    flatMapDeep: {
      definition: "递归地先映射每个元素，然后将结果扁平化为一个新数组",
      syntax: "_.flatMapDeep(collection, iteratee)",
      parameters: "collection: Array | Object, iteratee: Function",
      return: "Array",
      demo: "const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flatMapDeep(array, num => [num, num * 2]);<br/>console.log(flattened);",
    },
    flatMapDepth: {
      definition: "指定递归深度地先映射每个元素，然后将结果扁平化为一个新数组",
      syntax: "_.flatMapDepth(collection, iteratee, depth)",
      parameters:
        "collection: Array | Object, iteratee: Function, depth: Number",
      return: "Array",
      demo: "const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flatMapDepth(array, num => [num, num * 2], 2);<br/>console.log(flattened);",
    },
    flatten: {
      definition: "扁平化数组",
      syntax: "_.flatten(array)",
      parameters: "array: Array",
      return: "Array",
      demo: "const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flatten(array);<br/>console.log(flattened);",
    },
    flattenDeep: {
      definition: "递归地扁平化数组",
      syntax: "_.flattenDeep(array)",
      parameters: "array: Array",
      return: "Array",
      demo: "const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flattenDeep(array);<br/>console.log(flattened);",
    },
    flattenDepth: {
      definition: "指定递归深度地扁平化数组",
      syntax: "_.flattenDepth(array, depth)",
      parameters: "array: Array, depth: Number",
      return: "Array",
      demo: "const array = [1, [2, [3, [4]], 5]];<br/>const flattened = _.flattenDepth(array, 2);<br/>console.log(flattened);",
    },
    flip: {
      definition: "创建一个接受参数顺序相反的函数",
      syntax: "_.flip(func)",
      parameters: "func: Function",
      return: "Function",
      demo: "const subtract = (a, b) => a - b;<br/>const flippedSubtract = _.flip(subtract);<br/>console.log(flippedSubtract(5, 10));",
    },
    flow: {
      definition:
        "创建一个函数，依次调用给定的函数，将每个函数的返回值作为下一个函数的参数",
      syntax: "_.flow(...funcs)",
      parameters: "funcs: Function[]",
      return: "Function",
      demo: "const add = (a, b) => a + b;<br/>const square = x => x * x;<br/>const addThenSquare = _.flow(add, square);<br/>console.log(addThenSquare(2, 3));",
    },
    flowRight: {
      definition:
        "创建一个函数，依次调用给定的函数，将每个函数的返回值作为下一个函数的参数（从右到左）",
      syntax: "_.flowRight(...funcs)",
      parameters: "funcs: Function[]",
      return: "Function",
      demo: "const add = (a, b) => a + b;<br/>const square = x => x * x;<br/>const squareThenAdd = _.flowRight(square, add);<br/>console.log(squareThenAdd(2, 3));",
    },
    fromPairs: {
      definition: "将键值对数组转换为对象",
      syntax: "_.fromPairs(pairs)",
      parameters: "pairs: Array",
      return: "Object",
      demo: "const pairs = [['a', 1], ['b', 2], ['c', 3]];<br/>const obj = _.fromPairs(pairs);<br/>console.log(obj);",
    },
    functions: {
      definition: "获取对象自身可枚举属性名组成的数组",
      syntax: "_.functions(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "const object = {<br/>  a: () => {},<br/>  b: () => {},<br/>  c: () => {}<br/>};<br/><br/>const funcs = _.functions(object);<br/>console.log(funcs);",
    },
    functionsIn: {
      definition: "获取对象自身和继承的可枚举属性名组成的数组",
      syntax: "_.functionsIn(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "function Foo() {<br/>  this.a = () => {};<br/>  this.b = () => {};<br/>}<br/><br/>Foo.prototype.c = () => {};<br/><br/>const object = new Foo();<br/>const funcs = _.functionsIn(object);<br/>console.log(funcs);",
    },
    groupBy: {
      definition: "根据指定条件对集合进行分组",
      syntax: "_.groupBy(collection, iteratee)",
      parameters: "collection: Array | Object, iteratee: Function | Object",
      return: "Object",
      demo: "const users = [<br/>  { name: 'Alice', age: 20 },<br/>  { name: 'Bob', age: 25 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const grouped = _.groupBy(users, 'age');<br/>console.log(grouped);",
    },
    initial: {
      definition: "获取除了最后一个元素外的所有元素组成的数组",
      syntax: "_.initial(array)",
      parameters: "array: Array",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const initial = _.initial(array);<br/>console.log(initial);",
    },
    intersection: {
      definition: "创建一个包含所有给定数组中共有元素的数组",
      syntax: "_.intersection(...arrays)",
      parameters: "arrays: Array[]",
      return: "Array",
      demo: "const array1 = [1, 2, 3];<br/>const array2 = [2, 3, 4];<br/>const array3 = [3, 4, 5];<br/>const intersection = _.intersection(array1, array2, array3);<br/>console.log(intersection);",
    },
    intersectionBy: {
      definition: "使用迭代函数创建一个包含所有给定数组中共有元素的数组",
      syntax: "_.intersectionBy(...arrays, iteratee)",
      parameters: "arrays: Array[], iteratee: Function",
      return: "Array",
      demo: "const array1 = [1.1, 2.2, 3.3];<br/>const array2 = [2.2, 3.3, 4.4];<br/>const array3 = [3.3, 4.4, 5.5];<br/>const intersection = _.intersectionBy(array1, array2, array3, Math.floor);<br/>console.log(intersection);",
    },
    intersectionWith: {
      definition: "使用比较函数创建一个包含所有给定数组中共有元素的数组",
      syntax: "_.intersectionWith(...arrays, comparator)",
      parameters: "arrays: Array[], comparator: Function",
      return: "Array",
      demo: "const array1 = [{ x: 1, y: 2 }, { x: 2, y: 3 }];<br/>const array2 = [{ x: 2, y: 3 }, { x: 3, y: 4 }];<br/>const array3 = [{ x: 3, y: 4 }, { x: 4, y: 5 }];<br/>const intersection = _.intersectionWith(array1, array2, array3, _.isEqual);<br/>console.log(intersection);",
    },
    invert: {
      definition: "创建一个对象，其键值对是原始对象的值和键的对应关系",
      syntax: "_.invert(object)",
      parameters: "object: Object",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const inverted = _.invert(object);<br/>console.log(inverted);",
    },
    invertBy: {
      definition:
        "根据迭代函数创建一个对象，其键值对是原始对象的值和键的对应关系",
      syntax: "_.invertBy(object, iteratee)",
      parameters: "object: Object, iteratee: Function",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const inverted = _.invertBy(object, String);<br/>console.log(inverted);",
    },
    invokeMap: {
      definition: "对集合中的每个元素调用相应的方法，并返回结果组成的数组",
      syntax: "_.invokeMap(collection, path, ...args)",
      parameters:
        "collection: Array | Object, path: Function | Array | string, args: any[]",
      return: "Array",
      demo: "const objects = [{ a: 1, b: 2 }, { a: 3, b: 4 }];<br/>const result = _.invokeMap(objects, 'a.toFixed', 1);<br/>console.log(result);",
    },
    iteratee: {
      definition: "转换参数为一个可以作为迭代函数的函数",
      syntax: "_.iteratee(value)",
      parameters: "value: any",
      return: "Function",
      demo: "const iteratee = _.iteratee('a.b.c');<br/>console.log(iteratee({ a: { b: { c: 42 } } }));",
    },
    keyBy: {
      definition: "根据指定条件将集合转换为以指定键为索引的对象",
      syntax: "_.keyBy(collection, iteratee)",
      parameters:
        "collection: Array | Object, iteratee: Function | Object | string",
      return: "Object",
      demo: "const users = [<br/>  { id: '1', name: 'Alice' },<br/>  { id: '2', name: 'Bob' },<br/>  { id: '3', name: 'Charlie' },<br/>];<br/><br/>const indexed = _.keyBy(users, 'id');<br/>console.log(indexed);",
    },
    keys: {
      definition: "获取对象自身可枚举属性名组成的数组",
      syntax: "_.keys(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const keys = _.keys(object);<br/>console.log(keys);",
    },
    keysIn: {
      definition: "获取对象自身和继承的可枚举属性名组成的数组",
      syntax: "_.keysIn(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "function Foo() {<br/>  this.a = 1;<br/>  this.b = 2;<br/>}<br/><br/>Foo.prototype.c = 3;<br/><br/>const object = new Foo();<br/>const keys = _.keysIn(object);<br/>console.log(keys);",
    },
    map: {
      definition: "对集合中的每个元素调用相应的方法，并返回结果组成的数组",
      syntax: "_.map(collection, iteratee)",
      parameters: "collection: Array | Object, iteratee: Function",
      return: "Array",
      demo: "const array = [1, 2, 3];<br/>const doubled = _.map(array, n => n * 2);<br/>console.log(doubled);",
    },
    mapKeys: {
      definition: "根据指定条件将对象的键转换为新的键",
      syntax: "_.mapKeys(object, iteratee)",
      parameters: "object: Object, iteratee: Function",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const mapped = _.mapKeys(object, (value, key) => key.toUpperCase());<br/>console.log(mapped);",
    },
    mapValues: {
      definition: "根据指定条件对对象的值进行转换",
      syntax: "_.mapValues(object, iteratee)",
      parameters: "object: Object, iteratee: Function",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const mapped = _.mapValues(object, n => n * 2);<br/>console.log(mapped);",
    },
    matches: {
      definition: "创建一个深度比较的对象",
      syntax: "_.matches(source)",
      parameters: "source: Object",
      return: "Function",
      demo: "const object = { a: 1, b: 2 };<br/>const matcher = _.matches({ b: 2 });<br/>console.log(matcher(object));",
    },
    matchesProperty: {
      definition: "创建一个基于对象的属性和值的深度比较的函数",
      syntax: "_.matchesProperty(path, srcValue)",
      parameters: "path: Array | string, srcValue: any",
      return: "Function",
      demo: "const object = { a: 1, b: 2 };<br/>const matcher = _.matchesProperty('b', 2);<br/>console.log(matcher(object));",
    },
    memoize: {
      definition: "创建一个记忆化的函数，缓存其结果",
      syntax: "_.memoize(func, [resolver])",
      parameters: "func: Function, resolver: Function",
      return: "Function",
      demo: "const expensiveFunc = n => {<br/>  console.log('Computing...');<br/>  return n * 2;<br/>};<br/><br/>const memoizedFunc = _.memoize(expensiveFunc);<br/>console.log(memoizedFunc(5));<br/>console.log(memoizedFunc(5)); // Output should be cached",
    },
    merge: {
      definition: "将源对象的可枚举属性合并到目标对象",
      syntax: "_.merge(object, ...sources)",
      parameters: "object: Object, sources: Object[]",
      return: "Object",
      demo: "const object = { a: 1 };<br/>const source = { b: 2 };<br/>const merged = _.merge(object, source);<br/>console.log(merged);",
    },
    mergeWith: {
      definition: "使用自定义合并函数将源对象的可枚举属性合并到目标对象",
      syntax: "_.mergeWith(object, ...sources, customizer)",
      parameters: "object: Object, sources: Object[], customizer: Function",
      return: "Object",
      demo: "const object = { a: [1], b: [2] };<br/>const source = { a: [3], b: [4] };<br/><br/>const merged = _.mergeWith(object, source, (objValue, srcValue) => objValue.concat(srcValue));<br/>console.log(merged);",
    },
    method: {
      definition: "创建一个调用给定对象的指定方法的函数",
      syntax: "_.method(path, [...args])",
      parameters: "path: Array | string, args: any[]",
      return: "Function",
      demo: "const objects = [<br/>  { name: 'Alice', age: 20 },<br/>  { name: 'Bob', age: 25 },<br/>  { name: 'Charlie', age: 30 },<br/>];<br/><br/>const getName = _.method('name');<br/>const names = _.map(objects, getName);<br/>console.log(names);",
    },
    methodOf: {
      definition: "创建一个在给定对象上调用指定方法的函数",
      syntax: "_.methodOf(object, [...args])",
      parameters: "object: Object, args: any[]",
      return: "Function",
      demo: "const object = {<br/>  greeting: 'Hello',<br/>  greet(name) {<br/>    return `${this.greeting}, ${name}!`;<br/>  },<br/>};<br/><br/>const greet = _.methodOf(object);<br/>console.log(greet('Alice'));",
    },
    mixin: {
      definition: "向Lodash对象中添加自定义方法",
      syntax: "_.mixin([options={}], [source=lodash])",
      parameters: "options: Object, source: Object",
      return: "void",
      demo: "_.mixin({<br/>  multiply(a, b) {<br/>    return a * b;<br/>  }<br/>});<br/><br/>console.log(_.multiply(2, 3));",
    },
    negate: {
      definition: "创建一个否定给定函数返回结果的函数",
      syntax: "_.negate(predicate)",
      parameters: "predicate: Function",
      return: "Function",
      demo: "const isEven = n => n % 2 === 0;<br/>const isOdd = _.negate(isEven);<br/><br/>console.log(isOdd(3)); // true<br/>console.log(isOdd(4)); // false",
    },
    nthArg: {
      definition: "创建一个接受参数数组并返回第n个参数的函数",
      syntax: "_.nthArg(n)",
      parameters: "n: number",
      return: "Function",
      demo: "const func = _.nthArg(1);<br/>console.log(func('a', 'b', 'c')); // 'b'",
    },
    omit: {
      definition: "创建一个排除指定属性的对象副本",
      syntax: "_.omit(object, [...props])",
      parameters: "object: Object, props: string[]",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const omitted = _.omit(object, ['a', 'c']);<br/>console.log(omitted);",
    },
    omitBy: {
      definition: "根据断言函数排除对象的属性",
      syntax: "_.omitBy(object, predicate)",
      parameters: "object: Object, predicate: Function",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const omitted = _.omitBy(object, n => n % 2 === 0);<br/>console.log(omitted);",
    },
    once: {
      definition: "创建一个函数，调用不超过一次",
      syntax: "_.once(func)",
      parameters: "func: Function",
      return: "Function",
      demo: "const initialize = _.once(() => {<br/>  console.log('Initializing...');<br/>});<br/><br/>initialize(); // 'Initializing...'<br/>initialize(); // (no output)",
    },
    orderBy: {
      definition: "根据指定条件对集合进行排序",
      syntax: "_.orderBy(collection, iteratees, orders)",
      parameters:
        "collection: Array | Object, iteratees: Function[] | string[], orders: string[]",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const sorted = _.orderBy(users, ['name', 'age'], ['asc', 'desc']);<br/>console.log(sorted);",
    },
    over: {
      definition: "创建一个接受一系列函数并返回其结果数组的函数",
      syntax: "_.over(...fns)",
      parameters: "fns: Function[]",
      return: "Function",
      demo: "const square = n => n * n;<br/>const double = n => n * 2;<br/>const squareAndDouble = _.over(square, double);<br/>console.log(squareAndDouble(5)); // [25, 10]",
    },
    overArgs: {
      definition: "创建一个函数，调用时将参数转换为对应函数的预期参数",
      syntax: "_.overArgs(func, [transforms])",
      parameters: "func: Function, transforms: Function[] | Object[]",
      return: "Function",
      demo: "const greet = (firstName, lastName) => `Hello, ${firstName} ${lastName}!`;<br/>const capitalize = str => str.toUpperCase();<br/><br/>const greetAndCapitalize = _.overArgs(greet, [capitalize, capitalize]);<br/>console.log(greetAndCapitalize('alice', 'smith')); // 'Hello, ALICE SMITH!'",
    },
    overEvery: {
      definition:
        "创建一个接受一系列断言函数并返回布尔值的函数，当所有断言函数都返回truthy时，返回true",
      syntax: "_.overEvery(...predicates)",
      parameters: "predicates: Function[]",
      return: "Function",
      demo: "const isEven = n => n % 2 === 0;<br/>const isPositive = n => n > 0;<br/>const isEvenAndPositive = _.overEvery(isEven, isPositive);<br/><br/>console.log(isEvenAndPositive(4)); // true<br/>console.log(isEvenAndPositive(-2)); // false",
    },
    overSome: {
      definition:
        "创建一个接受一系列断言函数并返回布尔值的函数，当至少有一个断言函数返回truthy时，返回true",
      syntax: "_.overSome(...predicates)",
      parameters: "predicates: Function[]",
      return: "Function",
      demo: "const isEven = n => n % 2 === 0;<br/>const isPositive = n => n > 0;<br/>const isEvenOrPositive = _.overSome(isEven, isPositive);<br/><br/>console.log(isEvenOrPositive(4)); // true<br/>console.log(isEvenOrPositive(-2)); // true",
    },
    partial: {
      definition:
        "创建一个函数，调用时传递部分参数，返回一个接受剩余参数的函数",
      syntax: "_.partial(func, [...partials])",
      parameters: "func: Function, partials: any[]",
      return: "Function",
      demo: "const greet = (greeting, name) => `${greeting}, ${name}!`;<br/>const sayHello = _.partial(greet, 'Hello');<br/>console.log(sayHello('Alice')); // 'Hello, Alice!'",
    },
    partialRight: {
      definition:
        "创建一个函数，调用时传递部分参数，返回一个接受先前传递的参数的函数",
      syntax: "_.partialRight(func, [...partials])",
      parameters: "func: Function, partials: any[]",
      return: "Function",
      demo: "const greet = (greeting, name) => `${greeting}, ${name}!`;<br/>const greetAlice = _.partialRight(greet, 'Alice');<br/>console.log(greetAlice('Hello')); // 'Hello, Alice!'",
    },
    partition: {
      definition:
        "根据断言函数将集合的元素分成两个数组，一个是符合条件的元素，另一个是不符合条件的元素",
      syntax: "_.partition(collection, predicate)",
      parameters: "collection: Array | Object, predicate: Function",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const [adults, minors] = _.partition(users, user => user.age >= 18);<br/>console.log(adults);<br/>console.log(minors);",
    },
    pick: {
      definition: "创建一个从对象中选择指定属性的对象副本",
      syntax: "_.pick(object, [...props])",
      parameters: "object: Object, props: string[]",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const picked = _.pick(object, ['a', 'c']);<br/>console.log(picked);",
    },
    pickBy: {
      definition: "根据断言函数选择对象的属性",
      syntax: "_.pickBy(object, predicate)",
      parameters: "object: Object, predicate: Function",
      return: "Object",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const picked = _.pickBy(object, n => n % 2 === 0);<br/>console.log(picked);",
    },
    property: {
      definition: "创建一个返回给定对象的指定属性的函数",
      syntax: "_.property(path)",
      parameters: "path: Array | string",
      return: "Function",
      demo: "const objects = [<br/>  { name: 'Alice', age: 20 },<br/>  { name: 'Bob', age: 25 },<br/>  { name: 'Charlie', age: 30 },<br/>];<br/><br/>const getAge = _.property('age');<br/>const ages = _.map(objects, getAge);<br/>console.log(ages);",
    },
    propertyOf: {
      definition: "创建一个返回给定对象指定属性的函数",
      syntax: "_.propertyOf(object)",
      parameters: "object: Object",
      return: "Function",
      demo: "const object = { a: { b: { c: 1 } } };<br/>const getValue = _.propertyOf(object);<br/>console.log(getValue('a.b.c')); // 1",
    },
    pull: {
      definition: "从数组中移除指定的值，并返回移除的值组成的数组",
      syntax: "_.pull(array, ...values)",
      parameters: "array: any[], values: any[]",
      return: "Array",
      demo: "const array = [1, 2, 3, 1, 2, 3];<br/>const removed = _.pull(array, 2, 3);<br/>console.log(removed); // [2, 3]<br/>console.log(array); // [1, 1]",
    },
    pullAll: {
      definition: "从数组中移除指定的值，并返回移除的值组成的数组",
      syntax: "_.pullAll(array, values)",
      parameters: "array: any[], values: any[]",
      return: "Array",
      demo: "const array = [1, 2, 3, 1, 2, 3];<br/>const removed = _.pullAll(array, [2, 3]);<br/>console.log(removed); // [2, 3]<br/>console.log(array); // [1, 1]",
    },
    pullAllBy: {
      definition: "根据迭代函数从数组中移除指定的值，并返回移除的值组成的数组",
      syntax: "_.pullAllBy(array, values, [iteratee=_.identity])",
      parameters: "array: any[], values: any[], iteratee: Function",
      return: "Array",
      demo: "const array = [{ x: 1 }, { x: 2 }, { x: 3 }, { x: 1 }, { x: 2 }, { x: 3 }];<br/>const removed = _.pullAllBy(array, [{ x: 2 }, { x: 3 }], 'x');<br/>console.log(removed); // [{ x: 2 }, { x: 3 }]<br/>console.log(array); // [{ x: 1 }, { x: 1 }]",
    },
    pullAllWith: {
      definition: "使用比较函数从数组中移除指定的值，并返回移除的值组成的数组",
      syntax: "_.pullAllWith(array, values, [comparator])",
      parameters: "array: any[], values: any[], comparator: Function",
      return: "Array",
      demo: "const array = [{ x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }, { x: 1, y: 1 }, { x: 2, y: 2 }, { x: 3, y: 3 }];<br/>const removed = _.pullAllWith(array, [{ x: 2, y: 2 }, { x: 3, y: 3 }], _.isEqual);<br/>console.log(removed); // [{ x: 2, y: 2 }, { x: 3, y: 3 }]<br/>console.log(array); // [{ x: 1, y: 1 }, { x: 1, y: 1 }]",
    },
    pullAt: {
      definition:
        "根据索引值从数组中移除对应的元素，并返回移除的元素组成的数组",
      syntax: "_.pullAt(array, [...indexes])",
      parameters: "array: any[], indexes: number[]",
      return: "Array",
      demo: "const array = ['a', 'b', 'c', 'd'];<br/>const removed = _.pullAt(array, [1, 3]);<br/>console.log(removed); // ['b', 'd']<br/>console.log(array); // ['a', 'c']",
    },
    range: {
      definition: "创建一个包含指定范围内数字的数组",
      syntax: "_.range([start=0], end, [step=1])",
      parameters: "start: number, end: number, step: number",
      return: "Array",
      demo: "const numbers = _.range(1, 10, 2);<br/>console.log(numbers); // [1, 3, 5, 7, 9]",
    },
    rangeRight: {
      definition: "创建一个包含指定范围内数字的数组，从右到左生成",
      syntax: "_.rangeRight([start=0], end, [step=1])",
      parameters: "start: number, end: number, step: number",
      return: "Array",
      demo: "const numbers = _.rangeRight(1, 10, 2);<br/>console.log(numbers); // [9, 7, 5, 3, 1]",
    },
    rearg: {
      definition: "创建一个函数，调用时根据指定的参数索引顺序重新排列参数",
      syntax: "_.rearg(func, indexes)",
      parameters: "func: Function, indexes: number[]",
      return: "Function",
      demo: "const greet = (greeting, name) => `${greeting}, ${name}!`;<br/>const greetAndReverse = _.rearg(greet, [1, 0]);<br/>console.log(greetAndReverse('Hello', 'Alice')); // 'Alice, Hello!'",
    },
    reject: {
      definition: "根据断言函数排除集合的元素",
      syntax: "_.reject(collection, predicate)",
      parameters: "collection: Array | Object, predicate: Function",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const youngUsers = _.reject(users, user => user.age >= 30);<br/>console.log(youngUsers);",
    },
    remove: {
      definition:
        "根据断言函数移除数组中符合条件的元素，并返回移除的元素组成的数组",
      syntax: "_.remove(array, predicate)",
      parameters: "array: any[], predicate: Function",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const removed = _.remove(array, n => n % 2 === 0);<br/>console.log(removed); // [2, 4]<br/>console.log(array); // [1, 3, 5]",
    },
    rest: {
      definition: "创建一个函数，调用时从指定索引开始接收参数",
      syntax: "_.rest(func, [start=func.length-1])",
      parameters: "func: Function, start: number",
      return: "Function",
      demo: "const logArguments = (...args) => console.log(args);<br/>const logRestArguments = _.rest(logArguments, 2);<br/><br/>logRestArguments(1, 2, 3, 4); // [3, 4]",
    },
    reverse: {
      definition: "反转数组或字符串",
      syntax: "_.reverse(collection)",
      parameters: "collection: Array | string",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const reversedArray = _.reverse(array);<br/>console.log(reversedArray); // [5, 4, 3, 2, 1]<br/><br/>const string = 'Hello';<br/>const reversedString = _.reverse(string);<br/>console.log(reversedString); // 'olleH'",
    },
    sampleSize: {
      definition: "从数组或字符串中随机获取指定数量的元素",
      syntax: "_.sampleSize(collection, n)",
      parameters: "collection: Array | string, n: number",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const sample = _.sampleSize(array, 3);<br/>console.log(sample); // [2, 4, 1]<br/><br/>const string = 'Hello';<br/>const sampleString = _.sampleSize(string, 2);<br/>console.log(sampleString); // 'ol'",
    },
    set: {
      definition: "设置对象指定路径上的值。如果路径不存在，则会创建它",
      syntax: "_.set(object, path, value)",
      parameters: "object: Object, path: Array | string, value: any",
      return: "Object",
      demo: "const object = {};<br/><br/>_.set(object, 'a[0].b.c', 42);<br/>console.log(object); // { a: [{ b: { c: 42 } }] }",
    },
    setWith: {
      definition:
        "设置对象指定路径上的值。如果路径不存在，则会创建它。使用自定义的值计算函数",
      syntax: "_.setWith(object, path, value, customizer)",
      parameters:
        "object: Object, path: Array | string, value: any, customizer: Function",
      return: "Object",
      demo: "const object = {};<br/><br/>_.setWith(object, 'a[0].b.c', 42, Object);<br/>console.log(object); // { a: [{ b: { c: 42 } }] }",
    },
    shuffle: {
      definition: "随机打乱数组或字符串的顺序",
      syntax: "_.shuffle(collection)",
      parameters: "collection: Array | string",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const shuffledArray = _.shuffle(array);<br/>console.log(shuffledArray); // [4, 2, 1, 5, 3]<br/><br/>const string = 'Hello';<br/>const shuffledString = _.shuffle(string);<br/>console.log(shuffledString); // 'oHelL'",
    },
    slice: {
      definition: "返回数组或字符串的片段",
      syntax: "_.slice(collection, [start=0], [end=collection.length])",
      parameters: "collection: Array | string, start: number, end: number",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const slicedArray = _.slice(array, 1, 3);<br/>console.log(slicedArray); // [2, 3]<br/><br/>const string = 'Hello';<br/>const slicedString = _.slice(string, 1, 4);<br/>console.log(slicedString); // 'ell'",
    },
    sortBy: {
      definition: "根据指定的属性排序集合的元素",
      syntax: "_.sortBy(collection, [iteratees])",
      parameters: "collection: Array | Object, iteratees: (Function | Array)",
      return: "Array",
      demo: "const users = [<br/>  { name: 'Alice', age: 25 },<br/>  { name: 'Bob', age: 30 },<br/>  { name: 'Charlie', age: 20 },<br/>];<br/><br/>const sortedUsers = _.sortBy(users, ['age']);<br/>console.log(sortedUsers);",
    },
    sortedUniq: {
      definition: "返回一个去重并排序的数组",
      syntax: "_.sortedUniq(array)",
      parameters: "array: Array",
      return: "Array",
      demo: "const array = [1, 2, 2, 3, 4, 4, 5];<br/>const sortedUniqArray = _.sortedUniq(array);<br/>console.log(sortedUniqArray); // [1, 2, 3, 4, 5]",
    },
    sortedUniqBy: {
      definition: "根据迭代函数返回的结果对数组进行去重并排序",
      syntax: "_.sortedUniqBy(array, [iteratee=_.identity])",
      parameters: "array: Array, iteratee: Function",
      return: "Array",
      demo: "const array = [1.1, 1.2, 2.3, 2.4, 3.5, 3.6];<br/>const sortedUniqByArray = _.sortedUniqBy(array, Math.floor);<br/>console.log(sortedUniqByArray); // [1.1, 2.3, 3.5]",
    },
    split: {
      definition: "将字符串按指定的分隔符拆分成数组",
      syntax: "_.split(string, separator, [limit])",
      parameters: "string: string, separator: RegExp | string, limit: number",
      return: "Array",
      demo: "const string = 'Hello, World!';<br/>const words = _.split(string, ' ');<br/>console.log(words); // ['Hello,', 'World!']",
    },
    spread: {
      definition:
        "创建一个函数，调用时将接收到的参数作为单独的参数传递给另一个函数",
      syntax: "_.spread(func, [start=0])",
      parameters: "func: Function, start: number",
      return: "Function",
      demo: "const sum = (a, b, c) => a + b + c;<br/>const spreadSum = _.spread(sum);<br/><br/>console.log(spreadSum([1, 2, 3])); // 6",
    },
    tail: {
      definition: "返回数组或字符串的除第一个元素外的剩余部分",
      syntax: "_.tail(array)",
      parameters: "array: Array | string",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const tailArray = _.tail(array);<br/>console.log(tailArray); // [2, 3, 4, 5]<br/><br/>const string = 'Hello';<br/>const tailString = _.tail(string);<br/>console.log(tailString); // 'ello'",
    },
    take: {
      definition: "返回数组或字符串的前n个元素",
      syntax: "_.take(array, [n=1])",
      parameters: "array: Array | string, n: number",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const takenArray = _.take(array, 3);<br/>console.log(takenArray); // [1, 2, 3]<br/><br/>const string = 'Hello';<br/>const takenString = _.take(string, 2);<br/>console.log(takenString); // 'He'",
    },
    takeRight: {
      definition: "返回数组或字符串的后n个元素",
      syntax: "_.takeRight(array, [n=1])",
      parameters: "array: Array | string, n: number",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const takenRightArray = _.takeRight(array, 3);<br/>console.log(takenRightArray); // [3, 4, 5]<br/><br/>const string = 'Hello';<br/>const takenRightString = _.takeRight(string, 2);<br/>console.log(takenRightString); // 'lo'",
    },
    takeRightWhile: {
      definition: "从数组或字符串的末尾开始获取元素，直到断言函数返回假值",
      syntax: "_.takeRightWhile(array, [predicate=_.identity])",
      parameters: "array: Array | string, predicate: Function",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const takenRightWhileArray = _.takeRightWhile(array, n => n > 2);<br/>console.log(takenRightWhileArray); // [3, 4, 5]<br/><br/>const string = 'Hello';<br/>const takenRightWhileString = _.takeRightWhile(string, c => c !== 'o');<br/>console.log(takenRightWhileString); // 'Hell'",
    },
    takeWhile: {
      definition: "从数组或字符串的开头开始获取元素，直到断言函数返回假值",
      syntax: "_.takeWhile(array, [predicate=_.identity])",
      parameters: "array: Array | string, predicate: Function",
      return: "Array | string",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const takenWhileArray = _.takeWhile(array, n => n < 4);<br/>console.log(takenWhileArray); // [1, 2, 3]<br/><br/>const string = 'Hello';<br/>const takenWhileString = _.takeWhile(string, c => c !== 'o');<br/>console.log(takenWhileString); // 'Hell'",
    },
    tap: {
      definition: "调用函数，并传递值，然后返回该值",
      syntax: "_.tap(value, interceptor)",
      parameters: "value: any, interceptor: Function",
      return: "any",
      demo: "const greet = name => `Hello, ${name}!`;<br/>const tappedGreet = _.tap(greet, console.log);<br/><br/>tappedGreet('Alice'); // 'Hello, Alice!' (printed to console)",
    },
    throttle: {
      definition: "创建一个节流函数，确保在指定的时间间隔内最多只调用一次函数",
      syntax: "_.throttle(func, [wait=0], [options={}])",
      parameters: "func: Function, wait: number, options: Object",
      return: "Function",
      demo: "const logMessage = message => console.log(message);<br/>const throttledLog = _.throttle(logMessage, 1000);<br/><br/>throttledLog('Hello'); // 'Hello' (printed to console)<br/>throttledLog('World'); // (nothing printed)<br/><br/>// After 1 second<br/>throttledLog('OpenAI'); // 'OpenAI' (printed to console)",
    },
    thru: {
      definition: "通过将值传递给函数并返回该函数的结果来链式调用方法",
      syntax: "_.thru(value, interceptor)",
      parameters: "value: any, interceptor: Function",
      return: "any",
      demo: "const double = n => n * 2;<br/>const result = _.thru(5, double);<br/>console.log(result); // 10",
    },
    toArray: {
      definition: "将值转换为数组",
      syntax: "_.toArray(value)",
      parameters: "value: any",
      return: "Array",
      demo: "const object = { a: 1, b: 2 };<br/>const array = _.toArray(object);<br/>console.log(array); // [1, 2]<br/><br/>const string = 'Hello';<br/>const stringArray = _.toArray(string);<br/>console.log(stringArray); // ['H', 'e', 'l', 'l', 'o']",
    },
    toPairs: {
      definition: "将对象转换为[key, value]对的数组",
      syntax: "_.toPairs(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "const object = { a: 1, b: 2 };<br/>const pairs = _.toPairs(object);<br/>console.log(pairs); // [['a', 1], ['b', 2]]",
    },
    toPairsIn: {
      definition: "将对象自身和继承的可枚举属性转换为[key, value]对的数组",
      syntax: "_.toPairsIn(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "function Shape() {<br/>  this.x = 0;<br/>  this.y = 0;<br/>}<br/><br/>Shape.prototype.z = 0;<br/><br/>const shape = new Shape();<br/>const pairsIn = _.toPairsIn(shape);<br/>console.log(pairsIn); // [['x', 0], ['y', 0], ['z', 0]]",
    },
    toPath: {
      definition: "将字符串转换为路径数组",
      syntax: "_.toPath(value)",
      parameters: "value: any",
      return: "Array",
      demo: "const path = _.toPath('a.b[0].c');<br/>console.log(path); // ['a', 'b', '0', 'c']",
    },
    toPlainObject: {
      definition: "将对象的原型链上的属性复制到新的普通对象上",
      syntax: "_.toPlainObject(value)",
      parameters: "value: any",
      return: "Object",
      demo: "const person = Object.create({ name: 'Alice' });<br/>person.age = 25;<br/><br/>const plainObject = _.toPlainObject(person);<br/>console.log(plainObject); // { age: 25 }",
    },
    transform: {
      definition: "对对象的自身和继承的可枚举属性进行迭代并应用转换函数",
      syntax: "_.transform(object, [iteratee=_.identity], [accumulator])",
      parameters: "object: Object, iteratee: Function, accumulator: any",
      return: "any",
      demo: "const object = { a: 1, b: 2, c: 1 };<br/><br/>const result = _.transform(object, (result, value, key) => {<br/>  (result[value] || (result[value] = [])).push(key);<br/>}, {});<br/><br/>console.log(result); // { '1': ['a', 'c'], '2': ['b'] }",
    },
    unary: {
      definition: "创建一个接受一个参数的函数",
      syntax: "_.unary(func)",
      parameters: "func: Function",
      return: "Function",
      demo: "const binaryFn = (a, b) => a + b;<br/>const unaryFn = _.unary(binaryFn);<br/><br/>console.log(unaryFn(1, 2)); // 3",
    },
    union: {
      definition: "创建一个按顺序排列的唯一值的数组",
      syntax: "_.union([arrays])",
      parameters: "arrays: Array[]",
      return: "Array",
      demo: "const array1 = [2];<br/>const array2 = [1, 2];<br/><br/>const unionArray = _.union(array1, array2);<br/>console.log(unionArray); // [2, 1]",
    },
    unionBy: {
      definition:
        "根据转换函数对数组的元素进行比较，创建一个按顺序排列的唯一值的数组",
      syntax: "_.unionBy([arrays], [iteratee=_.identity])",
      parameters: "arrays: Array[], iteratee: Function",
      return: "Array",
      demo: "const array1 = [2.1];<br/>const array2 = [1.2, 2.3];<br/><br/>const unionByArray = _.unionBy(array1, array2, Math.floor);<br/>console.log(unionByArray); // [2.1, 1.2]",
    },
    unionWith: {
      definition:
        "使用比较函数对数组的元素进行比较，创建一个按顺序排列的唯一值的数组",
      syntax: "_.unionWith([arrays], [comparator])",
      parameters: "arrays: Array[], comparator: Function",
      return: "Array",
      demo: "const objects1 = [{ x: 1, y: 2 }, { x: 2, y: 1 }];<br/>const objects2 = [{ x: 1, y: 1 }, { x: 1, y: 2 }];<br/><br/>const unionWithArray = _.unionWith(objects1, objects2, _.isEqual);<br/>console.log(unionWithArray); // [{ x: 1, y: 2 }, { x: 2, y: 1 }, { x: 1, y: 1 }]",
    },
    uniq: {
      definition: "创建一个去重后的数组",
      syntax: "_.uniq(array)",
      parameters: "array: Array",
      return: "Array",
      demo: "const array = [1, 2, 2, 3, 3, 4, 5, 5];<br/>const uniqueArray = _.uniq(array);<br/>console.log(uniqueArray); // [1, 2, 3, 4, 5]",
    },
    uniqBy: {
      definition: "根据转换函数创建一个去重后的数组",
      syntax: "_.uniqBy(array, [iteratee=_.identity])",
      parameters: "array: Array, iteratee: Function",
      return: "Array",
      demo: "const array = [1.1, 1.2, 2.3, 2.4, 3.5];<br/>const uniqueByArray = _.uniqBy(array, Math.floor);<br/>console.log(uniqueByArray); // [1.1, 2.3, 3.5]",
    },
    uniqWith: {
      definition: "使用比较函数创建一个去重后的数组",
      syntax: "_.uniqWith(array, [comparator])",
      parameters: "array: Array, comparator: Function",
      return: "Array",
      demo: "const objects = [{ x: 1, y: 2 }, { x: 2, y: 1 }, { x: 1, y: 2 }];<br/><br/>const uniqueWithArray = _.uniqWith(objects, _.isEqual);<br/>console.log(uniqueWithArray); // [{ x: 1, y: 2 }, { x: 2, y: 1 }]",
    },
    unset: {
      definition: "从对象中删除指定路径的属性",
      syntax: "_.unset(object, path)",
      parameters: "object: Object, path: string | Array",
      return: "boolean",
      demo: "const object = { 'a': [{ 'b': { 'c': 7 } }] };<br/><br/>_.unset(object, 'a[0].b.c');<br/>console.log(object); // { 'a': [{}] }",
    },
    unzip: {
      definition: "将多个数组的对应元素组合成新的数组",
      syntax: "_.unzip(arrays)",
      parameters: "arrays: Array[]",
      return: "Array",
      demo: "const zipped = [['a', 1, true], ['b', 2, false]];<br/>const unzipped = _.unzip(zipped);<br/>console.log(unzipped); // [['a', 'b'], [1, 2], [true, false]]",
    },
    unzipWith: {
      definition:
        "将多个数组的对应元素组合成新的数组，并使用指定的迭代器对每个组合进行处理",
      syntax: "_.unzipWith(arrays, [iteratee=_.identity])",
      parameters: "arrays: Array[], iteratee: Function",
      return: "Array",
      demo: "const zipped = [[1, 10, 100], [2, 20, 200]];<br/>const unzippedWith = _.unzipWith(zipped, _.add);<br/>console.log(unzippedWith); // [3, 30, 300]",
    },
    update: {
      definition: "根据指定路径更新对象的属性值",
      syntax: "_.update(object, path, updater)",
      parameters: "object: Object, path: string | Array, updater: Function",
      return: "Object",
      demo: "const object = { 'a': [{ 'b': { 'c': 3 } }] };<br/><br/>const updatedObject = _.update(object, 'a[0].b.c', n => n * 2);<br/>console.log(updatedObject); // { 'a': [{ 'b': { 'c': 6 } }] }",
    },
    updateWith: {
      definition: "根据指定路径和自定义函数更新对象的属性值",
      syntax: "_.updateWith(object, path, updater, [customizer])",
      parameters:
        "object: Object, path: string | Array, updater: Function, customizer: Function",
      return: "Object",
      demo: "const object = { 'a': [{ 'b': { 'c': 3 } }] };<br/><br/>const updatedObject = _.updateWith(object, 'a[0].b.c', n => n * 2);<br/>console.log(updatedObject); // { 'a': [{ 'b': { 'c': 6 } }] }",
    },
    values: {
      definition: "提取对象自身可枚举属性的值，返回一个数组",
      syntax: "_.values(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const valuesArray = _.values(object);<br/>console.log(valuesArray); // [1, 2, 3]",
    },
    valuesIn: {
      definition: "提取对象自身和继承的可枚举属性的值，返回一个数组",
      syntax: "_.valuesIn(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "function Shape() {<br/>  this.x = 0;<br/>  this.y = 0;<br/>}<br/><br/>Shape.prototype.z = 0;<br/><br/>const shape = new Shape();<br/>const valuesInArray = _.valuesIn(shape);<br/>console.log(valuesInArray); // [0, 0, 0]",
    },
    without: {
      definition: "创建一个不包含指定值的数组副本",
      syntax: "_.without(array, [values])",
      parameters: "array: Array, values: ...any",
      return: "Array",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const newArray = _.without(array, 2, 4);<br/>console.log(newArray); // [1, 3, 5]",
    },
    words: {
      definition: "将字符串拆分为单词数组",
      syntax: "_.words([string=''], [pattern])",
      parameters: "string: string, pattern: RegExp",
      return: "Array",
      demo: "const sentence = 'Hello, world!';<br/>const wordsArray = _.words(sentence);<br/>console.log(wordsArray); // ['Hello', 'world']",
    },
    wrap: {
      definition: "将函数包装在一个函数中，并将其作为第一个参数传递给封装函数",
      syntax: "_.wrap(value, [wrapper=identity])",
      parameters: "value: any, wrapper: Function",
      return: "Function",
      demo: "const greet = name => `Hello, ${name}!`;<br/>const wrappedGreet = _.wrap(greet, func => `*${func('John')}*`);<br/>console.log(wrappedGreet()); // '*Hello, John!*'",
    },
    xor: {
      definition: "创建一个排除了所有给定数组的元素后的数组",
      syntax: "_.xor([arrays])",
      parameters: "arrays: Array[]",
      return: "Array",
      demo: "const array1 = [2, 1];<br/>const array2 = [2, 3];<br/><br/>const xorArray = _.xor(array1, array2);<br/>console.log(xorArray); // [1, 3]",
    },
    xorBy: {
      definition:
        "根据转换函数对数组进行比较，创建一个排除了所有给定数组的元素后的数组",
      syntax: "_.xorBy([arrays], [iteratee=_.identity])",
      parameters: "arrays: Array[], iteratee: Function",
      return: "Array",
      demo: "const array1 = [2.1, 1.2];<br/>const array2 = [2.3, 3.4];<br/><br/>const xorByArray = _.xorBy(array1, array2, Math.floor);<br/>console.log(xorByArray); // [1.2, 3.4]",
    },
    xorWith: {
      definition:
        "使用比较函数对数组进行比较，创建一个排除了所有给定数组的元素后的数组",
      syntax: "_.xorWith([arrays], [comparator])",
      parameters: "arrays: Array[], comparator: Function",
      return: "Array",
      demo: "const objects1 = [{ x: 1, y: 2 }, { x: 2, y: 1 }];<br/>const objects2 = [{ x: 1, y: 1 }, { x: 1, y: 2 }];<br/><br/>const xorWithArray = _.xorWith(objects1, objects2, _.isEqual);<br/>console.log(xorWithArray); // [{ x: 2, y: 1 }, { x: 1, y: 1 }]",
    },
    zip: {
      definition: "创建一个组合了多个数组对应位置元素的新数组",
      syntax: "_.zip([arrays])",
      parameters: "arrays: Array[]",
      return: "Array",
      demo: "const array1 = ['a', 'b', 'c'];<br/>const array2 = [1, 2, 3];<br/><br/>const zippedArray = _.zip(array1, array2);<br/>console.log(zippedArray); // [['a', 1], ['b', 2], ['c', 3]]",
    },
    zipObject: {
      definition:
        "将两个数组组合成一个对象，以第一个数组作为键名，第二个数组作为对应的值",
      syntax: "_.zipObject([props=[]], [values=[]])",
      parameters: "props: Array, values: Array",
      return: "Object",
      demo: "const props = ['a', 'b', 'c'];<br/>const values = [1, 2, 3];<br/><br/>const zipObject = _.zipObject(props, values);<br/>console.log(zipObject); // { 'a': 1, 'b': 2, 'c': 3 }",
    },
    zipObjectDeep: {
      definition:
        "将两个数组组合成一个嵌套对象，以第一个数组作为键路径，第二个数组作为对应的值",
      syntax: "_.zipObjectDeep([props=[]], [values=[]])",
      parameters: "props: Array, values: Array",
      return: "Object",
      demo: "const props = [['a'], ['b'], ['c']];<br/>const values = [1, 2, 3];<br/><br/>const zipObjectDeep = _.zipObjectDeep(props, values);<br/>console.log(zipObjectDeep); // { 'a': { 'b': { 'c': 3 } } }",
    },
    zipWith: {
      definition:
        "创建一个组合了多个数组对应位置元素的新数组，并使用指定的迭代器对每个组合进行处理",
      syntax: "_.zipWith([arrays], [iteratee=_.identity])",
      parameters: "arrays: Array[], iteratee: Function",
      return: "Array",
      demo: "const array1 = [1, 2, 3];<br/>const array2 = [4, 5, 6];<br/><br/>const zipWithArray = _.zipWith(array1, array2, (a, b) => a + b);<br/>console.log(zipWithArray); // [5, 7, 9]",
    },
    entries: {
      definition: "返回对象自身可枚举属性的键值对数组",
      syntax: "_.entries(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/>const entriesArray = _.entries(object);<br/>console.log(entriesArray); // [['a', 1], ['b', 2], ['c', 3]]",
    },
    entriesIn: {
      definition: "返回对象自身和继承的可枚举属性的键值对数组",
      syntax: "_.entriesIn(object)",
      parameters: "object: Object",
      return: "Array",
      demo: "function Shape() {<br/>  this.x = 0;<br/>  this.y = 0;<br/>}<br/><br/>Shape.prototype.z = 0;<br/><br/>const shape = new Shape();<br/>const entriesInArray = _.entriesIn(shape);<br/>console.log(entriesInArray); // [['x', 0], ['y', 0], ['z', 0]]",
    },
    extend: {
      definition: "将源对象的可枚举属性扩展到目标对象上",
      syntax: "_.extend(destination, [sources])",
      parameters: "destination: Object, sources: Object[]",
      return: "Object",
      demo: "const object = { a: 1 };<br/>const other = { b: 2 };<br/><br/>const extendedObject = _.extend(object, other);<br/>console.log(extendedObject); // { a: 1, b: 2 }",
    },
    extendWith: {
      definition:
        "将源对象的可枚举属性扩展到目标对象上，并使用自定义函数处理冲突的属性",
      syntax: "_.extendWith(destination, [sources], [customizer])",
      parameters:
        "destination: Object, sources: Object[], customizer: Function",
      return: "Object",
      demo: "const object = { a: 1 };<br/>const other = { b: 2 };<br/><br/>const extendedObject = _.extendWith(object, other, (objValue, srcValue) => objValue === 1 ? 3 : srcValue);<br/>console.log(extendedObject); // { a: 3, b: 2 }",
    },
    add: {
      definition: "两个数相加",
      syntax: "_.add(augend, addend)",
      parameters: "augend: number, addend: number",
      return: "number",
      demo: "const sum = _.add(2, 3);<br/>console.log(sum); // 5",
    },
    attempt: {
      definition: "尝试调用函数，如果函数抛出错误，则返回错误对象",
      syntax: "_.attempt(func, [args])",
      parameters: "func: Function, args: ...any",
      return: "any",
      demo: "const result = _.attempt(JSON.parse, '{\"x\": 1}');<br/><br/>if (_.isError(result)) {<br/>  console.log('Parsing failed');<br/>} else {<br/>  console.log(result); // { x: 1 }<br/>}",
    },
    camelCase: {
      definition: "将字符串转换为驼峰命名法",
      syntax: "_.camelCase([string=''])",
      parameters: "string: string",
      return: "string",
      demo: "const camelCaseString = _.camelCase('Foo Bar');<br/>console.log(camelCaseString); // 'fooBar'",
    },
    capitalize: {
      definition: "将字符串的第一个字符转换为大写，其他字符转换为小写",
      syntax: "_.capitalize([string=''])",
      parameters: "string: string",
      return: "string",
      demo: "const capitalizedString = _.capitalize('hello');<br/>console.log(capitalizedString); // 'Hello'",
    },
    ceil: {
      definition: "将数字向上取整",
      syntax: "_.ceil(number, [precision=0])",
      parameters: "number: number, precision: number",
      return: "number",
      demo: "const roundedNumber = _.ceil(4.006);<br/>console.log(roundedNumber); // 5",
    },
    clamp: {
      definition: "将数字限制在指定范围内",
      syntax: "_.clamp(number, [lower], upper)",
      parameters: "number: number, lower: number, upper: number",
      return: "number",
      demo: "const clampedNumber = _.clamp(7, 3, 5);<br/>console.log(clampedNumber); // 5",
    },
    clone: {
      definition: "创建一个浅拷贝的值",
      syntax: "_.clone(value)",
      parameters: "value: any",
      return: "any",
      demo: "const object = { a: 1 };<br/>const clonedObject = _.clone(object);<br/>console.log(clonedObject); // { a: 1 }<br/>console.log(object === clonedObject); // false",
    },
    cloneDeep: {
      definition: "创建一个深拷贝的值",
      syntax: "_.cloneDeep(value)",
      parameters: "value: any",
      return: "any",
      demo: "const object = { a: 1 };<br/>const clonedObject = _.cloneDeep(object);<br/>console.log(clonedObject); // { a: 1 }<br/>console.log(object === clonedObject); // false",
    },
    cloneDeepWith: {
      definition: "创建一个深拷贝的值，并使用自定义函数进行转换",
      syntax: "_.cloneDeepWith(value, [customizer])",
      parameters: "value: any, customizer: Function",
      return: "any",
      demo: "const object = { a: 1 };<br/>const clonedObject = _.cloneDeepWith(object, value => [value]);<br/>console.log(clonedObject); // [{ a: 1 }]<br/>console.log(object === clonedObject); // false",
    },
    cloneWith: {
      definition: "创建一个浅拷贝的值，并使用自定义函数进行转换",
      syntax: "_.cloneWith(value, [customizer])",
      parameters: "value: any, customizer: Function",
      return: "any",
      demo: "const object = { a: 1 };<br/>const clonedObject = _.cloneWith(object, value => [value]);<br/>console.log(clonedObject); // [{ a: 1 }]<br/>console.log(object === clonedObject); // false",
    },
    conformsTo: {
      definition: "检查对象是否符合给定的属性约束",
      syntax: "_.conformsTo(object, source)",
      parameters: "object: Object, source: Object",
      return: "boolean",
      demo: "const object = { a: 1, b: 2 };<br/>const conforms = _.conformsTo(object, { b: n => n > 1 });<br/>console.log(conforms); // true",
    },
    deburr: {
      definition: "将字符串中的重音字符转换为对应的非重音字符",
      syntax: "_.deburr([string=''])",
      parameters: "string: string",
      return: "string",
      demo: "const deburredString = _.deburr('déjà vu');<br/>console.log(deburredString); // 'deja vu'",
    },
    defaultTo: {
      definition: "如果给定值为null或undefined，则返回默认值",
      syntax: "_.defaultTo(value, defaultValue)",
      parameters: "value: any, defaultValue: any",
      return: "any",
      demo: "const result1 = _.defaultTo(1, 10);<br/>console.log(result1); // 1<br/><br/>const result2 = _.defaultTo(null, 10);<br/>console.log(result2); // 10<br/><br/>const result3 = _.defaultTo(undefined, 10);<br/>console.log(result3); // 10",
    },
    divide: {
      definition: "两个数相除",
      syntax: "_.divide(dividend, divisor)",
      parameters: "dividend: number, divisor: number",
      return: "number",
      demo: "const quotient = _.divide(6, 3);<br/>console.log(quotient); // 2",
    },
    endsWith: {
      definition: "检查字符串是否以给定的目标字符串结尾",
      syntax: "_.endsWith([string=''], target, [position=string.length])",
      parameters: "string: string, target: string, position: number",
      return: "boolean",
      demo: "const endsWithFoo = _.endsWith('foobar', 'bar');<br/>console.log(endsWithFoo); // true<br/><br/>const endsWithBar = _.endsWith('foobar', 'foo');<br/>console.log(endsWithBar); // false",
    },
    eq: {
      definition: "执行严格相等比较，判断两个值是否相等",
      syntax: "_.eq(value, other)",
      parameters: "value: any, other: any",
      return: "boolean",
      demo: "const equal = _.eq(1, 1);<br/>console.log(equal); // true<br/><br/>const notEqual = _.eq(1, '1');<br/>console.log(notEqual); // false",
    },
    escape: {
      definition: "转义字符串中的特殊字符",
      syntax: "_.escape([string=''])",
      parameters: "string: string",
      return: "string",
      demo: "const escapedString = _.escape('<p>Hello, world!</p>');<br/>console.log(escapedString); // '&lt;p&gt;Hello, world!&lt;/p&gt;'",
    },
    escapeRegExp: {
      definition: "转义字符串中的正则表达式特殊字符",
      syntax: "_.escapeRegExp([string=''])",
      parameters: "string: string",
      return: "string",
      demo: "const escapedRegExp = _.escapeRegExp('[lodash](https://lodash.com/)');<br/>console.log(escapedRegExp); // '\\[lodash\\]\\(https://lodash\\.com/\\)'",
    },
    every: {
      definition:
        "对集合中的每个元素应用断言函数，如果所有元素都满足条件，则返回true",
      syntax: "_.every(collection, [predicate=_.identity])",
      parameters: "collection: Array|Object, predicate: Function",
      return: "boolean",
      demo: "const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const allUnder40 = _.every(users, user => user.age < 40);<br/>console.log(allUnder40); // true<br/><br/>const allOver30 = _.every(users, user => user.age > 30);<br/>console.log(allOver30); // false",
    },
    find: {
      definition: "返回集合中满足条件的第一个元素",
      syntax: "_.find(collection, [predicate=_.identity], [fromIndex=0])",
      parameters:
        "collection: Array|Object, predicate: Function, fromIndex: number",
      return: "any",
      demo: "const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const user = _.find(users, user => user.age > 30);<br/>console.log(user); // { name: 'Jane', age: 30 }",
    },
    findIndex: {
      definition: "返回集合中满足条件的第一个元素的索引",
      syntax: "_.findIndex(array, [predicate=_.identity], [fromIndex=0])",
      parameters: "array: Array, predicate: Function, fromIndex: number",
      return: "number",
      demo: "const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const index = _.findIndex(users, user => user.age > 30);<br/>console.log(index); // 1",
    },
    findKey: {
      definition: "返回集合中满足条件的第一个元素的键",
      syntax: "_.findKey(object, [predicate=_.identity])",
      parameters: "object: Object, predicate: Function",
      return: "string|null",
      demo: "const users = {<br/>  john: { name: 'John', age: 25 },<br/>  jane: { name: 'Jane', age: 30 },<br/>  jim: { name: 'Jim', age: 35 }<br/>};<br/><br/>const key = _.findKey(users, user => user.age > 30);<br/>console.log(key); // 'jane'",
    },
    findLast: {
      definition: "返回集合中满足条件的最后一个元素",
      syntax:
        "_.findLast(collection, [predicate=_.identity], [fromIndex=collection.length-1])",
      parameters:
        "collection: Array|Object, predicate: Function, fromIndex: number",
      return: "any",
      demo: "const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const user = _.findLast(users, user => user.age > 30);<br/>console.log(user); // { name: 'Jim', age: 35 }",
    },
    findLastIndex: {
      definition: "返回集合中满足条件的最后一个元素的索引",
      syntax:
        "_.findLastIndex(array, [predicate=_.identity], [fromIndex=array.length-1])",
      parameters: "array: Array, predicate: Function, fromIndex: number",
      return: "number",
      demo: "const users = [<br/>  { name: 'John', age: 25 },<br/>  { name: 'Jane', age: 30 },<br/>  { name: 'Jim', age: 35 }<br/>];<br/><br/>const index = _.findLastIndex(users, user => user.age > 30);<br/>console.log(index); // 2",
    },
    findLastKey: {
      definition: "返回集合中满足条件的最后一个元素的键",
      syntax: "_.findLastKey(object, [predicate=_.identity])",
      parameters: "object: Object, predicate: Function",
      return: "string|null",
      demo: "const users = {<br/>  john: { name: 'John', age: 25 },<br/>  jane: { name: 'Jane', age: 30 },<br/>  jim: { name: 'Jim', age: 35 }<br/>};<br/><br/>const key = _.findLastKey(users, user => user.age > 30);<br/>console.log(key); // 'jim'",
    },
    floor: {
      definition: "将数字向下取整",
      syntax: "_.floor(number, [precision=0])",
      parameters: "number: number, precision: number",
      return: "number",
      demo: "const roundedNumber = _.floor(4.006);<br/>console.log(roundedNumber); // 4",
    },
    forEach: {
      definition: "对集合中的每个元素应用迭代函数",
      syntax: "_.forEach(collection, [iteratee=_.identity])",
      parameters: "collection: Array|Object, iteratee: Function",
      return: "void",
      demo: "_.forEach([1, 2, 3], number => {<br/>  console.log(number);<br/>});<br/><br/>// Output:<br/>// 1<br/>// 2<br/>// 3",
    },
    forEachRight: {
      definition: "对集合中的每个元素应用迭代函数，从最后一个元素开始迭代",
      syntax: "_.forEachRight(collection, [iteratee=_.identity])",
      parameters: "collection: Array|Object, iteratee: Function",
      return: "void",
      demo: "_.forEachRight([1, 2, 3], number => {<br/>  console.log(number);<br/>});<br/><br/>// Output:<br/>// 3<br/>// 2<br/>// 1",
    },
    forIn: {
      definition: "遍历对象的可枚举属性并应用迭代函数",
      syntax: "_.forIn(object, [iteratee=_.identity])",
      parameters: "object: Object, iteratee: Function",
      return: "void",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forIn(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// a 1<br/>// b 2<br/>// c 3",
    },
    forInRight: {
      definition: "从最后一个可枚举属性开始，遍历对象并应用迭代函数",
      syntax: "_.forInRight(object, [iteratee=_.identity])",
      parameters: "object: Object, iteratee: Function",
      return: "void",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forInRight(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// c 3<br/>// b 2<br/>// a 1",
    },
    forOwn: {
      definition: "遍历对象的自身可枚举属性并应用迭代函数",
      syntax: "_.forOwn(object, [iteratee=_.identity])",
      parameters: "object: Object, iteratee: Function",
      return: "void",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forOwn(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// a 1<br/>// b 2<br/>// c 3",
    },
    forOwnRight: {
      definition: "从最后一个自身可枚举属性开始，遍历对象并应用迭代函数",
      syntax: "_.forOwnRight(object, [iteratee=_.identity])",
      parameters: "object: Object, iteratee: Function",
      return: "void",
      demo: "const object = { a: 1, b: 2, c: 3 };<br/><br/>_.forOwnRight(object, (value, key) => {<br/>  console.log(key, value);<br/>});<br/><br/>// Output:<br/>// c 3<br/>// b 2<br/>// a 1",
    },
    get: {
      definition: "获取对象的属性值",
      syntax: "_.get(object, path, [defaultValue])",
      parameters: "object: Object, path: string|Array, defaultValue: any",
      return: "any",
      demo: "const object = { a: { b: { c: 1 } } };<br/><br/>const value = _.get(object, 'a.b.c');<br/>console.log(value); // 1<br/><br/>const defaultValue = _.get(object, 'a.b.d', 'default');<br/>console.log(defaultValue); // 'default'",
    },
    gt: {
      definition: "检查第一个值是否大于第二个值",
      syntax: "_.gt(value, other)",
      parameters: "value: any, other: any",
      return: "boolean",
      demo: "const result = _.gt(5, 3);<br/>console.log(result); // true",
    },
    gte: {
      definition: "检查第一个值是否大于或等于第二个值",
      syntax: "_.gte(value, other)",
      parameters: "value: any, other: any",
      return: "boolean",
      demo: "const result1 = _.gte(5, 3);<br/>console.log(result1); // true<br/><br/>const result2 = _.gte(3, 3);<br/>console.log(result2); // true",
    },
    has: {
      definition: "检查对象是否具有指定属性",
      syntax: "_.has(object, path)",
      parameters: "object: Object, path: string|Array",
      return: "boolean",
      demo: "const object = { a: 1, b: 2 };<br/><br/>const hasA = _.has(object, 'a');<br/>console.log(hasA); // true<br/><br/>const hasC = _.has(object, 'c');<br/>console.log(hasC); // false",
    },
    hasIn: {
      definition: "检查对象是否具有指定路径的属性（包括继承的属性）",
      syntax: "_.hasIn(object, path)",
      parameters: "object: Object, path: string|Array",
      return: "boolean",
      demo: "const object = { a: 1 };<br/>const inheritedObject = Object.create(object);<br/><br/>const hasA = _.hasIn(inheritedObject, 'a');<br/>console.log(hasA); // true<br/><br/>const hasB = _.hasIn(inheritedObject, 'b');<br/>console.log(hasB); // false",
    },
    head: {
      definition: "获取数组的第一个元素",
      syntax: "_.head(array)",
      parameters: "array: Array",
      return: "any",
      demo: "const array = [1, 2, 3];<br/><br/>const firstElement = _.head(array);<br/>console.log(firstElement); // 1",
    },
    identity: {
      definition: "返回接收到的第一个参数",
      syntax: "_.identity(value)",
      parameters: "value: any",
      return: "any",
      demo: "const result = _.identity(42);<br/>console.log(result); // 42",
    },
    includes: {
      definition: "检查集合中是否包含指定值",
      syntax: "_.includes(collection, value, [fromIndex=0])",
      parameters:
        "collection: Array|Object|string, value: any, fromIndex: number",
      return: "boolean",
      demo: "const array = [1, 2, 3];<br/>const object = { a: 1, b: 2 };<br/><br/>const includes1 = _.includes(array, 2);<br/>console.log(includes1); // true<br/><br/>const includes2 = _.includes(object, 1);<br/>console.log(includes2); // true<br/><br/>const includes3 = _.includes('hello', 'e');<br/>console.log(includes3); // true",
    },
    indexOf: {
      definition: "返回数组中首次出现指定值的索引，从前往后搜索",
      syntax: "_.indexOf(array, value, [fromIndex=0])",
      parameters: "array: Array, value: any, fromIndex: number",
      return: "number",
      demo: "const array = [1, 2, 1, 2];<br/><br/>const index = _.indexOf(array, 2);<br/>console.log(index); // 1",
    },
    inRange: {
      definition: "检查指定值是否在指定范围内，范围为[start=0, end]",
      syntax: "_.inRange(number, [start=0], end)",
      parameters: "number: number, start: number, end: number",
      return: "boolean",
      demo: "const inRange1 = _.inRange(3, 2, 5);<br/>console.log(inRange1); // true<br/><br/>const inRange2 = _.inRange(1, 2, 5);<br/>console.log(inRange2); // false",
    },
    invoke: {
      definition: "调用集合中每个元素的方法",
      syntax: "_.invoke(collection, path, [...args])",
      parameters: "collection: Array|Object, path: string|Array, args: any",
      return: "Array",
      demo: "const array = ['hello', 'world'];<br/><br/>const result = _.invoke(array, 'toUpperCase');<br/>console.log(result); // ['HELLO', 'WORLD']",
    },
    isArguments: {
      definition: "检查值是否为Arguments对象",
      syntax: "_.isArguments(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const args = (function() {<br/>  return arguments;<br/>})();<br/><br/>const isArgs = _.isArguments(args);<br/>console.log(isArgs); // true",
    },
    isArray: {
      definition: "检查值是否为数组",
      syntax: "_.isArray(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isArray1 = _.isArray([1, 2, 3]);<br/>console.log(isArray1); // true<br/><br/>const isArray2 = _.isArray('hello');<br/>console.log(isArray2); // false",
    },
    isArrayBuffer: {
      definition: "检查值是否为ArrayBuffer对象",
      syntax: "_.isArrayBuffer(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const buffer = new ArrayBuffer(8);<br/><br/>const isArrayBuffer = _.isArrayBuffer(buffer);<br/>console.log(isArrayBuffer); // true",
    },
    isArrayLike: {
      definition: "检查值是否类似数组，即具有类数组的特征",
      syntax: "_.isArrayLike(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const arrayLike1 = 'hello';<br/>const arrayLike2 = [1, 2, 3];<br/><br/>const isArrayLike1 = _.isArrayLike(arrayLike1);<br/>console.log(isArrayLike1); // true<br/><br/>const isArrayLike2 = _.isArrayLike(arrayLike2);<br/>console.log(isArrayLike2); // true",
    },
    isArrayLikeObject: {
      definition: "检查值是否既是对象又是类数组",
      syntax: "_.isArrayLikeObject(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const arrayLikeObject = { 0: 'hello', 1: 'world', length: 2 };<br/><br/>const isArrayLikeObject = _.isArrayLikeObject(arrayLikeObject);<br/>console.log(isArrayLikeObject); // true",
    },
    isBoolean: {
      definition: "检查值是否为布尔值",
      syntax: "_.isBoolean(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isBoolean1 = _.isBoolean(true);<br/>console.log(isBoolean1); // true<br/><br/>const isBoolean2 = _.isBoolean(0);<br/>console.log(isBoolean2); // false",
    },
    isBuffer: {
      definition: "检查值是否为Buffer对象",
      syntax: "_.isBuffer(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const buffer = Buffer.from('hello');<br/><br/>const isBuffer = _.isBuffer(buffer);<br/>console.log(isBuffer); // true",
    },
    isDate: {
      definition: "检查值是否为日期对象",
      syntax: "_.isDate(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const date = new Date();<br/><br/>const isDate = _.isDate(date);<br/>console.log(isDate); // true",
    },
    isElement: {
      definition: "检查值是否为DOM元素",
      syntax: "_.isElement(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const element = document.createElement('div');<br/><br/>const isElement = _.isElement(element);<br/>console.log(isElement); // true",
    },
    isEmpty: {
      definition:
        "检查值是否为空，为空的情况包括：null、undefined、空字符串、空数组、空对象",
      syntax: "_.isEmpty(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isEmpty1 = _.isEmpty(null);<br/>console.log(isEmpty1); // true<br/><br/>const isEmpty2 = _.isEmpty([]);<br/>console.log(isEmpty2); // true<br/><br/>const isEmpty3 = _.isEmpty({});<br/>console.log(isEmpty3); // true<br/><br/>const isEmpty4 = _.isEmpty('');<br/>console.log(isEmpty4); // true",
    },
    isEqual: {
      definition: "执行深度比较以确定两个值是否相等",
      syntax: "_.isEqual(value, other)",
      parameters: "value: any, other: any",
      return: "boolean",
      demo: "const object1 = { a: 1 };<br/>const object2 = { a: 1 };<br/><br/>const isEqual = _.isEqual(object1, object2);<br/>console.log(isEqual); // true",
    },
    isEqualWith: {
      definition: "使用自定义比较器执行深度比较以确定两个值是否相等",
      syntax: "_.isEqualWith(value, other, [customizer])",
      parameters: "value: any, other: any, customizer: Function",
      return: "boolean",
      demo: "const object1 = { a: 1 };<br/>const object2 = { a: 1 };<br/><br/>const isEqual = _.isEqualWith(object1, object2, (val1, val2) => val1 === val2);<br/>console.log(isEqual); // true",
    },
    isError: {
      definition: "检查值是否为Error对象",
      syntax: "_.isError(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const error = new Error('An error occurred');<br/><br/>const isError = _.isError(error);<br/>console.log(isError); // true",
    },
    isFinite: {
      definition: "检查值是否为有限数值",
      syntax: "_.isFinite(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isFinite1 = _.isFinite(42);<br/>console.log(isFinite1); // true<br/><br/>const isFinite2 = _.isFinite(Infinity);<br/>console.log(isFinite2); // false",
    },
    isFunction: {
      definition: "检查值是否为函数",
      syntax: "_.isFunction(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isFunction1 = _.isFunction(() => {});<br/>console.log(isFunction1); // true<br/><br/>const isFunction2 = _.isFunction('hello');<br/>console.log(isFunction2); // false",
    },
    isInteger: {
      definition: "检查值是否为整数",
      syntax: "_.isInteger(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isInteger1 = _.isInteger(42);<br/>console.log(isInteger1); // true<br/><br/>const isInteger2 = _.isInteger(3.14);<br/>console.log(isInteger2); // false",
    },
    isLength: {
      definition: "检查值是否为有效的数组长度",
      syntax: "_.isLength(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isLength1 = _.isLength(3);<br/>console.log(isLength1); // true<br/><br/>const isLength2 = _.isLength(-1);<br/>console.log(isLength2); // false",
    },
    isMap: {
      definition: "检查值是否为Map对象",
      syntax: "_.isMap(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const map = new Map();<br/><br/>const isMap = _.isMap(map);<br/>console.log(isMap); // true",
    },
    isMatch: {
      definition: "执行部分深度比较以确定对象是否包含给定的键值对",
      syntax: "_.isMatch(object, source)",
      parameters: "object: Object, source: Object",
      return: "boolean",
      demo: "const object = { a: 1, b: 2 };<br/><br/>const isMatch1 = _.isMatch(object, { a: 1 });<br/>console.log(isMatch1); // true<br/><br/>const isMatch2 = _.isMatch(object, { b: 1 });<br/>console.log(isMatch2); // false",
    },
    isMatchWith: {
      definition:
        "使用自定义比较器执行部分深度比较以确定对象是否包含给定的键值对",
      syntax: "_.isMatchWith(object, source, [customizer])",
      parameters: "object: Object, source: Object, customizer: Function",
      return: "boolean",
      demo: "const object = { a: 1, b: 2 };<br/><br/>const isMatch = _.isMatchWith(object, { a: 1 }, (val1, val2) => val1 === val2);<br/>console.log(isMatch); // true",
    },
    isNaN: {
      definition: "检查值是否为NaN",
      syntax: "_.isNaN(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isNaN1 = _.isNaN(NaN);<br/>console.log(isNaN1); // true<br/><br/>const isNaN2 = _.isNaN(0 / 0);<br/>console.log(isNaN2); // true<br/><br/>const isNaN3 = _.isNaN(42);<br/>console.log(isNaN3); // false",
    },
    isNative: {
      definition: "检查值是否为原生函数",
      syntax: "_.isNative(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isNative = _.isNative(Array.prototype.push);<br/>console.log(isNative); // true",
    },
    isNil: {
      definition: "检查值是否为null或undefined",
      syntax: "_.isNil(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isNil1 = _.isNil(null);<br/>console.log(isNil1); // true<br/><br/>const isNil2 = _.isNil(undefined);<br/>console.log(isNil2); // true<br/><br/>const isNil3 = _.isNil(0);<br/>console.log(isNil3); // false",
    },
    isNull: {
      definition: "检查值是否为null",
      syntax: "_.isNull(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isNull1 = _.isNull(null);<br/>console.log(isNull1); // true<br/><br/>const isNull2 = _.isNull(undefined);<br/>console.log(isNull2); // false",
    },
    isNumber: {
      definition: "检查值是否为数值",
      syntax: "_.isNumber(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isNumber1 = _.isNumber(42);<br/>console.log(isNumber1); // true<br/><br/>const isNumber2 = _.isNumber('42');<br/>console.log(isNumber2); // false",
    },
    isObject: {
      definition: "检查值是否为对象",
      syntax: "_.isObject(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isObject1 = _.isObject({});<br/>console.log(isObject1); // true<br/><br/>const isObject2 = _.isObject([]);<br/>console.log(isObject2); // true<br/><br/>const isObject3 = _.isObject(null);<br/>console.log(isObject3); // false",
    },
    isObjectLike: {
      definition: "检查值是否为对象或类对象",
      syntax: "_.isObjectLike(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isObjectLike1 = _.isObjectLike({});<br/>console.log(isObjectLike1); // true<br/><br/>const isObjectLike2 = _.isObjectLike([]);<br/>console.log(isObjectLike2); // true<br/><br/>const isObjectLike3 = _.isObjectLike(null);<br/>console.log(isObjectLike3); // false",
    },
    isPlainObject: {
      definition:
        "检查值是否为纯对象，即通过对象字面量或Object构造函数创建的对象",
      syntax: "_.isPlainObject(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isPlainObject1 = _.isPlainObject({});<br/>console.log(isPlainObject1); // true<br/><br/>const isPlainObject2 = _.isPlainObject(Object.create(null));<br/>console.log(isPlainObject2); // true<br/><br/>const isPlainObject3 = _.isPlainObject([]);<br/>console.log(isPlainObject3); // false",
    },
    isRegExp: {
      definition: "检查值是否为正则表达式对象",
      syntax: "_.isRegExp(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isRegExp = _.isRegExp(/abc/);<br/>console.log(isRegExp); // true",
    },
    isSafeInteger: {
      definition: "检查值是否为安全整数",
      syntax: "_.isSafeInteger(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isSafeInteger1 = _.isSafeInteger(42);<br/>console.log(isSafeInteger1); // true<br/><br/>const isSafeInteger2 = _.isSafeInteger(9007199254740992);<br/>console.log(isSafeInteger2); // false",
    },
    isSet: {
      definition: "检查值是否为Set对象",
      syntax: "_.isSet(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const set = new Set();<br/><br/>const isSet = _.isSet(set);<br/>console.log(isSet); // true",
    },
    isString: {
      definition: "检查值是否为字符串",
      syntax: "_.isString(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isString1 = _.isString('hello');<br/>console.log(isString1); // true<br/><br/>const isString2 = _.isString(42);<br/>console.log(isString2); // false",
    },
    isSymbol: {
      definition: "检查值是否为符号",
      syntax: "_.isSymbol(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const symbol = Symbol('mySymbol');<br/><br/>const isSymbol = _.isSymbol(symbol);<br/>console.log(isSymbol); // true",
    },
    isTypedArray: {
      definition: "检查值是否为类型化数组",
      syntax: "_.isTypedArray(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const typedArray = new Int32Array();<br/><br/>const isTypedArray = _.isTypedArray(typedArray);<br/>console.log(isTypedArray); // true",
    },
    isUndefined: {
      definition: "检查值是否为undefined",
      syntax: "_.isUndefined(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const isUndefined1 = _.isUndefined(undefined);<br/>console.log(isUndefined1); // true<br/><br/>const isUndefined2 = _.isUndefined(null);<br/>console.log(isUndefined2); // false",
    },
    isWeakMap: {
      definition: "检查值是否为WeakMap对象",
      syntax: "_.isWeakMap(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const weakMap = new WeakMap();<br/><br/>const isWeakMap = _.isWeakMap(weakMap);<br/>console.log(isWeakMap); // true",
    },
    isWeakSet: {
      definition: "检查值是否为WeakSet对象",
      syntax: "_.isWeakSet(value)",
      parameters: "value: any",
      return: "boolean",
      demo: "const weakSet = new WeakSet();<br/><br/>const isWeakSet = _.isWeakSet(weakSet);<br/>console.log(isWeakSet); // true",
    },
    join: {
      definition: "将数组中的所有元素转化为字符串并连接起来",
      syntax: "_.join(array, [separator=','])",
      parameters: "array: Array, separator: string",
      return: "string",
      demo: "const array = ['Hello', 'World'];<br/><br/>const joinedString = _.join(array, ' ');<br/>console.log(joinedString); // 'Hello World'",
    },
    kebabCase: {
      definition: "将字符串转化为kebab case格式（单词之间使用连字符-分隔）",
      syntax: "_.kebabCase(string)",
      parameters: "string: string",
      return: "string",
      demo: "const kebabCase = _.kebabCase('helloWorld');<br/>console.log(kebabCase); // 'hello-world'",
    },
    last: {
      definition: "获取数组中的最后一个元素",
      syntax: "_.last(array)",
      parameters: "array: Array",
      return: "any",
      demo: "const array = ['apple', 'banana', 'orange'];<br/><br/>const lastElement = _.last(array);<br/>console.log(lastElement); // 'orange'",
    },
    lastIndexOf: {
      definition: "返回数组中指定元素最后一次出现的索引",
      syntax: "_.lastIndexOf(array, value, [fromIndex=array.length-1])",
      parameters: "array: Array, value: any, fromIndex: number",
      return: "number",
      demo: "const array = [1, 2, 3, 4, 3, 2, 1];<br/><br/>const lastIndex1 = _.lastIndexOf(array, 3);<br/>console.log(lastIndex1); // 4<br/><br/>const lastIndex2 = _.lastIndexOf(array, 3, 3);<br/>console.log(lastIndex2); // 2",
    },
    lowerCase: {
      definition: "将字符串转化为小写，并将非单词字符替换为连字符-",
      syntax: "_.lowerCase(string)",
      parameters: "string: string",
      return: "string",
      demo: "const lowerCase = _.lowerCase('Hello World!');<br/>console.log(lowerCase); // 'hello-world'",
    },
    lowerFirst: {
      definition: "将字符串的首字母转化为小写",
      syntax: "_.lowerFirst(string)",
      parameters: "string: string",
      return: "string",
      demo: "const lowerFirst = _.lowerFirst('Hello');<br/>console.log(lowerFirst); // 'hello'",
    },
    lt: {
      definition: "检查第一个值是否小于第二个值",
      syntax: "_.lt(value, other)",
      parameters: "value: any, other: any",
      return: "boolean",
      demo: "const isLessThan = _.lt(3, 5);<br/>console.log(isLessThan); // true",
    },
    lte: {
      definition: "检查第一个值是否小于或等于第二个值",
      syntax: "_.lte(value, other)",
      parameters: "value: any, other: any",
      return: "boolean",
      demo: "const isLessThanOrEqualTo = _.lte(3, 3);<br/>console.log(isLessThanOrEqualTo); // true",
    },
    max: {
      definition: "返回数组中的最大值",
      syntax: "_.max(array)",
      parameters: "array: Array",
      return: "any",
      demo: "const array = [1, 3, 2, 5, 4];<br/><br/>const maxValue = _.max(array);<br/>console.log(maxValue); // 5",
    },
    maxBy: {
      definition: "根据迭代器返回的结果获取数组中的最大值",
      syntax: "_.maxBy(array, [iteratee=_.identity])",
      parameters: "array: Array, iteratee: Function",
      return: "any",
      demo: "const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Mary', age: 25 },<br/>  { name: 'Peter', age: 35 }<br/>];<br/><br/>const oldestUser = _.maxBy(users, user => user.age);<br/>console.log(oldestUser); // { name: 'Peter', age: 35 }",
    },
    mean: {
      definition: "计算数组中所有数值的平均值",
      syntax: "_.mean(array)",
      parameters: "array: Array",
      return: "number",
      demo: "const array = [1, 2, 3, 4, 5];<br/><br/>const meanValue = _.mean(array);<br/>console.log(meanValue); // 3",
    },
    meanBy: {
      definition: "根据迭代器返回的结果计算数组中所有数值的平均值",
      syntax: "_.meanBy(array, [iteratee=_.identity])",
      parameters: "array: Array, iteratee: Function",
      return: "number",
      demo: "const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Mary', age: 25 },<br/>  { name: 'Peter', age: 35 }<br/>];<br/><br/>const averageAge = _.meanBy(users, user => user.age);<br/>console.log(averageAge); // 30",
    },
    min: {
      definition: "返回数组中的最小值",
      syntax: "_.min(array)",
      parameters: "array: Array",
      return: "any",
      demo: "const array = [1, 3, 2, 5, 4];<br/><br/>const minValue = _.min(array);<br/>console.log(minValue); // 1",
    },
    minBy: {
      definition: "根据迭代器返回的结果获取数组中的最小值",
      syntax: "_.minBy(array, [iteratee=_.identity])",
      parameters: "array: Array, iteratee: Function",
      return: "any",
      demo: "const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Mary', age: 25 },<br/>  { name: 'Peter', age: 35 }<br/>];<br/><br/>const youngestUser = _.minBy(users, user => user.age);<br/>console.log(youngestUser); // { name: 'Mary', age: 25 }",
    },
    stubArray: {
      definition: "创建一个空数组",
      syntax: "_.stubArray()",
      parameters: "",
      return: "Array",
      demo: "const array = _.stubArray();<br/>console.log(array); // []",
    },
    stubFalse: {
      definition: "返回false",
      syntax: "_.stubFalse()",
      parameters: "",
      return: "boolean",
      demo: "const result = _.stubFalse();<br/>console.log(result); // false",
    },
    stubObject: {
      definition: "创建一个空对象",
      syntax: "_.stubObject()",
      parameters: "",
      return: "Object",
      demo: "const object = _.stubObject();<br/>console.log(object); // {}",
    },
    stubString: {
      definition: "返回空字符串",
      syntax: "_.stubString()",
      parameters: "",
      return: "string",
      demo: "const string = _.stubString();<br/>console.log(string); // ''",
    },
    stubTrue: {
      definition: "返回true",
      syntax: "_.stubTrue()",
      parameters: "",
      return: "boolean",
      demo: "const result = _.stubTrue();<br/>console.log(result); // true",
    },
    multiply: {
      definition: "返回两个数的乘积",
      syntax: "_.multiply(multiplier, multiplicand)",
      parameters: "multiplier: number, multiplicand: number",
      return: "number",
      demo: "const product = _.multiply(6, 7);<br/>console.log(product); // 42",
    },
    nth: {
      definition: "获取数组中第n个元素",
      syntax: "_.nth(array, [n=0])",
      parameters: "array: Array, n: number",
      return: "any",
      demo: "const array = ['a', 'b', 'c', 'd'];<br/><br/>const nthElement = _.nth(array, 2);<br/>console.log(nthElement); // 'c'",
    },
    noConflict: {
      definition: "将全局变量中的`_`恢复为之前的值，并返回`lodash`对象",
      syntax: "_.noConflict()",
      parameters: "",
      return: "Object",
      demo: "_.noConflict();<br/><br/>// 此时`_`不再是`lodash`库<br/>const result = _.add(1, 2);<br/>console.log(result); // Uncaught ReferenceError: _ is not defined",
    },
    noop: {
      definition: "一个什么都不做的空函数",
      syntax: "_.noop()",
      parameters: "",
      return: "undefined",
      demo: "_.noop();<br/><br/>// 该函数不会产生任何输出或副作用",
    },
    now: {
      definition: "返回当前时间的时间戳",
      syntax: "_.now()",
      parameters: "",
      return: "number",
      demo: "const timestamp = _.now();<br/>console.log(timestamp); // 1624224929532",
    },
    pad: {
      definition: "用指定的字符将字符串填充为指定的长度",
      syntax: "_.pad(string, [length=0], [chars=' '])",
      parameters: "string: string, length: number, chars: string",
      return: "string",
      demo: "const paddedString = _.pad('hello', 8, '*');<br/>console.log(paddedString); // '**hello*'",
    },
    padEnd: {
      definition: "用指定的字符将字符串填充到指定的长度（末尾填充）",
      syntax: "_.padEnd(string, [length=0], [chars=' '])",
      parameters: "string: string, length: number, chars: string",
      return: "string",
      demo: "const paddedString = _.padEnd('hello', 8, '*');<br/>console.log(paddedString); // 'hello***'",
    },
    padStart: {
      definition: "用指定的字符将字符串填充到指定的长度（开头填充）",
      syntax: "_.padStart(string, [length=0], [chars=' '])",
      parameters: "string: string, length: number, chars: string",
      return: "string",
      demo: "const paddedString = _.padStart('hello', 8, '*');<br/>console.log(paddedString); // '***hello'",
    },
    parseInt: {
      definition: "将字符串转化为整数",
      syntax: "_.parseInt(string, [radix=10])",
      parameters: "string: string, radix: number",
      return: "number",
      demo: "const parsedInt = _.parseInt('42');<br/>console.log(parsedInt); // 42",
    },
    random: {
      definition: "生成一个在指定范围内的随机数",
      syntax: "_.random([lower=0], [upper=1], [floating])",
      parameters: "lower: number, upper: number, floating: boolean",
      return: "number",
      demo: "const randomNum = _.random(1, 10);<br/>console.log(randomNum); // 7",
    },
    reduce: {
      definition: "将数组或对象中的元素累积为一个值",
      syntax: "_.reduce(collection, [iteratee=_.identity], [accumulator])",
      parameters:
        "collection: Array or Object, iteratee: Function, accumulator: any",
      return: "any",
      demo: "const array = [1, 2, 3, 4, 5];<br/><br/>const sum = _.reduce(array, (accumulator, value) => accumulator + value, 0);<br/>console.log(sum); // 15",
    },
    reduceRight: {
      definition: "将数组或对象中的元素从右到左累积为一个值",
      syntax: "_.reduceRight(collection, [iteratee=_.identity], [accumulator])",
      parameters:
        "collection: Array or Object, iteratee: Function, accumulator: any",
      return: "any",
      demo: "const array = [1, 2, 3, 4, 5];<br/><br/>const sum = _.reduceRight(array, (accumulator, value) => accumulator + value, 0);<br/>console.log(sum); // 15",
    },
    repeat: {
      definition: "重复指定次数的字符串",
      syntax: "_.repeat(string, [n=1])",
      parameters: "string: string, n: number",
      return: "string",
      demo: "const repeatedString = _.repeat('hello', 3);<br/>console.log(repeatedString); // 'hellohellohello'",
    },
    replace: {
      definition: "替换字符串中的匹配部分",
      syntax: "_.replace(string, pattern, replacement)",
      parameters:
        "string: string, pattern: RegExp or string, replacement: string or Function",
      return: "string",
      demo: "const replacedString = _.replace('Hello World', 'World', 'Universe');<br/>console.log(replacedString); // 'Hello Universe'",
    },
    result: {
      definition: "根据对象路径获取对应的值",
      syntax: "_.result(object, path, [defaultValue])",
      parameters: "object: Object, path: string or Array, defaultValue: any",
      return: "any",
      demo: "const object = { name: 'John', age: 30 };<br/><br/>const name = _.result(object, 'name');<br/>console.log(name); // 'John'",
    },
    round: {
      definition: "将数值四舍五入到指定的精度",
      syntax: "_.round(number, [precision=0])",
      parameters: "number: number, precision: number",
      return: "number",
      demo: "const roundedNumber = _.round(3.14159, 2);<br/>console.log(roundedNumber); // 3.14",
    },
    runInContext: {
      definition: "使用指定的`lodash`对象运行函数",
      syntax: "_.runInContext([context=root])",
      parameters: "context: Object",
      return: "Function",
      demo: "const lodash = _.runInContext();<br/><br/>const array = [1, 2, 3];<br/>const square = lodash.map(array, num => num * num);<br/>console.log(square); // [1, 4, 9]",
    },
    sample: {
      definition: "随机返回数组或对象中的一个元素",
      syntax: "_.sample(collection)",
      parameters: "collection: Array or Object",
      return: "any",
      demo: "const array = [1, 2, 3, 4, 5];<br/><br/>const randomElement = _.sample(array);<br/>console.log(randomElement); // e.g., 3",
    },
    size: {
      definition: "获取数组或对象的长度",
      syntax: "_.size(collection)",
      parameters: "collection: Array or Object",
      return: "number",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const object = { a: 1, b: 2, c: 3 };<br/><br/>const arraySize = _.size(array);<br/>const objectSize = _.size(object);<br/><br/>console.log(arraySize); // 5<br/>console.log(objectSize); // 3",
    },
    snakeCase: {
      definition: "将字符串转换为蛇形命名法（小写单词之间使用下划线连接）",
      syntax: "_.snakeCase(string)",
      parameters: "string: string",
      return: "string",
      demo: "const snakeCaseString = _.snakeCase('Hello World');<br/>console.log(snakeCaseString); // 'hello_world'",
    },
    some: {
      definition: "检查集合中是否至少有一个元素满足条件",
      syntax: "_.some(collection, [predicate=_.identity])",
      parameters: "collection: Array or Object, predicate: Function",
      return: "boolean",
      demo: "const array = [1, 2, 3, 4, 5];<br/><br/>const hasEvenNumber = _.some(array, num => num % 2 === 0);<br/>console.log(hasEvenNumber); // true",
    },
    sortedIndex: {
      definition: "确定在已排序的数组中插入值的索引位置",
      syntax: "_.sortedIndex(array, value)",
      parameters: "array: Array, value: any",
      return: "number",
      demo: "const array = [10, 20, 30, 40, 50];<br/><br/>const index = _.sortedIndex(array, 35);<br/>console.log(index); // 3",
    },
    sortedIndexBy: {
      definition: "使用迭代器确定在已排序的数组中插入值的索引位置",
      syntax: "_.sortedIndexBy(array, value, [iteratee=_.identity])",
      parameters: "array: Array, value: any, iteratee: Function",
      return: "number",
      demo: "const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Alice', age: 40 },<br/>  { name: 'Bob', age: 50 }<br/>];<br/><br/>const index = _.sortedIndexBy(users, { name: 'Charlie', age: 35 }, 'age');<br/>console.log(index); // 1",
    },
    sortedIndexOf: {
      definition: "在已排序的数组中查找第一个匹配值的索引",
      syntax: "_.sortedIndexOf(array, value)",
      parameters: "array: Array, value: any",
      return: "number",
      demo: "const array = [10, 20, 30, 40, 50, 50, 50];<br/><br/>const index = _.sortedIndexOf(array, 50);<br/>console.log(index); // 4",
    },
    sortedLastIndex: {
      definition: "确定在已排序的数组中插入值的最后一个索引位置",
      syntax: "_.sortedLastIndex(array, value)",
      parameters: "array: Array, value: any",
      return: "number",
      demo: "const array = [10, 20, 30, 40, 50];<br/><br/>const index = _.sortedLastIndex(array, 35);<br/>console.log(index); // 4",
    },
    sortedLastIndexBy: {
      definition: "使用迭代器确定在已排序的数组中插入值的最后一个索引位置",
      syntax: "_.sortedLastIndexBy(array, value, [iteratee=_.identity])",
      parameters: "array: Array, value: any, iteratee: Function",
      return: "number",
      demo: "const users = [<br/>  { name: 'John', age: 30 },<br/>  { name: 'Alice', age: 40 },<br/>  { name: 'Bob', age: 50 }<br/>];<br/><br/>const index = _.sortedLastIndexBy(users, { name: 'Charlie', age: 35 }, 'age');<br/>console.log(index); // 2",
    },
    sortedLastIndexOf: {
      definition: "在已排序的数组中查找最后一个匹配值的索引",
      syntax: "_.sortedLastIndexOf(array, value)",
      parameters: "array: Array, value: any",
      return: "number",
      demo: "const array = [10, 20, 30, 40, 50, 50, 50];<br/><br/>const index = _.sortedLastIndexOf(array, 50);<br/>console.log(index); // 6",
    },
    startCase: {
      definition: "将字符串转换为以空格分隔的大写单词形式",
      syntax: "_.startCase(string)",
      parameters: "string: string",
      return: "string",
      demo: "const startCaseString = _.startCase('hello world');<br/>console.log(startCaseString); // 'Hello World'",
    },
    startsWith: {
      definition: "检查字符串是否以指定的字符串开始",
      syntax: "_.startsWith(string, target, [position=0])",
      parameters: "string: string, target: string, position: number",
      return: "boolean",
      demo: "const string = 'Hello World';<br/><br/>const startsWithHello = _.startsWith(string, 'Hello');<br/>console.log(startsWithHello); // true",
    },
    subtract: {
      definition: "计算两个数的差",
      syntax: "_.subtract(minuend, subtrahend)",
      parameters: "minuend: number, subtrahend: number",
      return: "number",
      demo: "const difference = _.subtract(10, 5);<br/>console.log(difference); // 5",
    },
    sum: {
      definition: "计算数组或对象中的所有数值的总和",
      syntax: "_.sum(collection)",
      parameters: "collection: Array or Object",
      return: "number",
      demo: "const array = [1, 2, 3, 4, 5];<br/>const object = { a: 1, b: 2, c: 3 };<br/><br/>const arraySum = _.sum(array);<br/>const objectSum = _.sum(object);<br/><br/>console.log(arraySum); // 15<br/>console.log(objectSum); // 6",
    },
    sumBy: {
      definition: "根据迭代器计算数组或对象中的所有元素的总和",
      syntax: "_.sumBy(collection, [iteratee=_.identity])",
      parameters: "collection: Array or Object, iteratee: Function",
      return: "number",
      demo: "const users = [<br/>  { name: 'John', age: 30, score: 100 },<br/>  { name: 'Alice', age: 40, score: 200 },<br/>  { name: 'Bob', age: 50, score: 150 }<br/>];<br/><br/>const totalScore = _.sumBy(users, 'score');<br/>console.log(totalScore); // 450",
    },
    template: {
      definition: "使用占位符替换字符串模板中的值",
      syntax: "_.template(string, [options={}])",
      parameters: "string: string, options: Object",
      return: "Function",
      demo: "const compiled = _.template('Hello <%= user %>!');<br/><br/>const result = compiled({ user: 'Alice' });<br/>console.log(result); // 'Hello Alice!'",
    },
    times: {
      definition: "调用迭代器指定次数并返回结果",
      syntax: "_.times(n, [iteratee=_.identity])",
      parameters: "n: number, iteratee: Function",
      return: "Array",
      demo: "const squares = _.times(5, n => n * n);<br/>console.log(squares); // [0, 1, 4, 9, 16]",
    },
    toFinite: {
      definition: "将值转换为有限数",
      syntax: "_.toFinite(value)",
      parameters: "value: any",
      return: "number",
      demo: "const finiteNumber = _.toFinite(3.14);<br/>console.log(finiteNumber); // 3.14",
    },
    toInteger: {
      definition: "将值转换为整数",
      syntax: "_.toInteger(value)",
      parameters: "value: any",
      return: "number",
      demo: "const integer = _.toInteger('42');<br/>console.log(integer); // 42",
    },
    toLength: {
      definition: "将值转换为有效数组长度",
      syntax: "_.toLength(value)",
      parameters: "value: any",
      return: "number",
      demo: "const length = _.toLength('3.14');<br/>console.log(length); // 3",
    },
    toLower: {
      definition: "将字符串转换为小写",
      syntax: "_.toLower(string)",
      parameters: "string: string",
      return: "string",
      demo: "const lowerCaseString = _.toLower('Hello World');<br/>console.log(lowerCaseString); // 'hello world'",
    },
    toNumber: {
      definition: "将值转换为数字",
      syntax: "_.toNumber(value)",
      parameters: "value: any",
      return: "number",
      demo: "const number = _.toNumber('42.5');<br/>console.log(number); // 42.5",
    },
    toSafeInteger: {
      definition: "将值转换为安全整数",
      syntax: "_.toSafeInteger(value)",
      parameters: "value: any",
      return: "number",
      demo: "const safeInteger = _.toSafeInteger('9007199254740992');<br/>console.log(safeInteger); // 9007199254740992",
    },
    toString: {
      definition: "将值转换为字符串",
      syntax: "_.toString(value)",
      parameters: "value: any",
      return: "string",
      demo: "const string = _.toString(123);<br/>console.log(string); // '123'",
    },
    toUpper: {
      definition: "将字符串转换为大写",
      syntax: "_.toUpper(string)",
      parameters: "string: string",
      return: "string",
      demo: "const upperCaseString = _.toUpper('Hello World');<br/>console.log(upperCaseString); // 'HELLO WORLD'",
    },
    trim: {
      definition: "去除字符串两侧的空格或指定字符",
      syntax: "_.trim(string, [chars=whitespace])",
      parameters: "string: string, chars: string",
      return: "string",
      demo: "const trimmedString = _.trim('  Hello World  ');<br/>console.log(trimmedString); // 'Hello World'",
    },
    trimEnd: {
      definition: "去除字符串末尾的空格或指定字符",
      syntax: "_.trimEnd(string, [chars=whitespace])",
      parameters: "string: string, chars: string",
      return: "string",
      demo: "const trimmedString = _.trimEnd('  Hello World  ');<br/>console.log(trimmedString); // '  Hello World'",
    },
    trimStart: {
      definition: "去除字符串开头的空格或指定字符",
      syntax: "_.trimStart(string, [chars=whitespace])",
      parameters: "string: string, chars: string",
      return: "string",
      demo: "const trimmedString = _.trimStart('  Hello World  ');<br/>console.log(trimmedString); // 'Hello World  '",
    },
    truncate: {
      definition: "根据指定的长度截断字符串并添加省略号",
      syntax: "_.truncate(string, [options={}])",
      parameters: "string: string, options: Object",
      return: "string",
      demo: "const truncatedString = _.truncate('Hello World', { length: 7 });<br/>console.log(truncatedString); // 'Hello...'",
    },
    unescape: {
      definition: "将HTML实体转换为对应的字符",
      syntax: "_.unescape(string)",
      parameters: "string: string",
      return: "string",
      demo: "const unescapedString = _.unescape('Hello &amp; World');<br/>console.log(unescapedString); // 'Hello & World'",
    },
    uniqueId: {
      definition: "生成唯一标识符",
      syntax: "_.uniqueId([prefix=''])",
      parameters: "prefix: string",
      return: "string",
      demo: "const id1 = _.uniqueId('user_');<br/>const id2 = _.uniqueId('user_');<br/><br/>console.log(id1); // 'user_1'<br/>console.log(id2); // 'user_2'",
    },
    upperCase: {
      definition: "将字符串转换为大写并以空格分隔单词",
      syntax: "_.upperCase(string)",
      parameters: "string: string",
      return: "string",
      demo: "const upperCaseString = _.upperCase('hello world');<br/>console.log(upperCaseString); // 'HELLO WORLD'",
    },
    upperFirst: {
      definition: "将字符串的第一个字符转换为大写",
      syntax: "_.upperFirst(string)",
      parameters: "string: string",
      return: "string",
      demo: "const upperFirstString = _.upperFirst('hello world');<br/>console.log(upperFirstString); // 'Hello world'",
    },
    each: {
      definition: "迭代数组或对象的每个元素，并对其执行回调函数",
      syntax: "_.each(collection, [iteratee=_.identity])",
      parameters: "collection: Array or Object, iteratee: Function",
      return: "undefined",
      demo: "_.each([1, 2, 3], value => console.log(value));<br/>// Output:<br/>// 1<br/>// 2<br/>// 3",
    },
    eachRight: {
      definition: "反向迭代数组或对象的每个元素，并对其执行回调函数",
      syntax: "_.eachRight(collection, [iteratee=_.identity])",
      parameters: "collection: Array or Object, iteratee: Function",
      return: "undefined",
      demo: "_.eachRight([1, 2, 3], value => console.log(value));<br/>// Output:<br/>// 3<br/>// 2<br/>// 1",
    },
    first: {
      definition: "获取数组或字符串的第一个元素",
      syntax: "_.first(array)",
      parameters: "array: Array or string",
      return: "any",
      demo: "const firstElement = _.first([1, 2, 3]);<br/>console.log(firstElement); // 1",
    },
    VERSION: {
      definition: "lodash库的版本号",
      syntax: "_.VERSION",
      return: "string",
      demo: "console.log(_.VERSION); // '4.17.21'",
    },
  },
  formulajs: {
    ABS: {
      definition: "返回一个数的绝对值",
      syntax: "ABS(number)",
      parameters: "number: number",
      return: "number",
    },
    ACCRINT: {
      definition: "计算从付息期开始到某个日期之间的累计应计利息",
      syntax:
        "ACCRINT(issue, firstInterest, settlement, rate, par, frequency, [basis])",
      parameters:
        "issue: Date, firstInterest: Date, settlement: Date, rate: number, par: number, frequency: number, basis: number",
      return: "number",
    },
    ACCRINTM: {
      definition: "计算在付息期内的累计应计利息",
      syntax: "ACCRINTM(issue, settlement, rate, par, basis)",
      parameters:
        "issue: Date, settlement: Date, rate: number, par: number, basis: number",
      return: "number",
    },
    ACOS: {
      definition: "返回一个数的反余弦值（单位为弧度）",
      syntax: "ACOS(number)",
      parameters: "number: number",
      return: "number",
    },
    ACOSH: {
      definition: "返回一个数的反双曲余弦值",
      syntax: "ACOSH(number)",
      parameters: "number: number",
      return: "number",
    },
    ACOT: {
      definition: "返回一个数的反余切值（单位为弧度）",
      syntax: "ACOT(number)",
      parameters: "number: number",
      return: "number",
    },
    ACOTH: {
      definition: "返回一个数的反双曲余切值",
      syntax: "ACOTH(number)",
      parameters: "number: number",
      return: "number",
    },
    ADD: {
      definition: "对两个数或范围的所有单元格执行加法操作",
      syntax: "ADD(...values)",
      parameters: "values: number or Range",
      return: "number",
    },
    AGGREGATE: {
      definition: "根据指定的选项对范围进行聚合计算",
      syntax: "AGGREGATE(function, options, ...values)",
      parameters: "function: number, options: number, values: number or Range",
      return: "number",
    },
    AMORDEGRC: {
      definition: "根据一年中的天数计算基于部分偿还的固定收益证券的应计折旧",
      syntax:
        "AMORDEGRC(cost, purchaseDate, firstPeriod, salvage, period, rate, basis)",
      parameters:
        "cost: number, purchaseDate: Date, firstPeriod: Date, salvage: number, period: number, rate: number, basis: number",
      return: "number",
    },
    AMORLINC: {
      definition: "根据一年中的天数计算基于完全偿还的固定收益证券的应计折旧",
      syntax:
        "AMORLINC(cost, purchaseDate, firstPeriod, salvage, period, rate, basis)",
      parameters:
        "cost: number, purchaseDate: Date, firstPeriod: Date, salvage: number, period: number, rate: number, basis: number",
      return: "number",
    },
    AND: {
      definition:
        "检查多个条件是否都为 TRUE，如果是则返回 TRUE，否则返回 FALSE",
      syntax: "AND(...logicalValues)",
      parameters: "logicalValues: boolean",
      return: "boolean",
    },
    ARABIC: {
      definition: "将罗马数字转换为阿拉伯数字",
      syntax: "ARABIC(romanNumber)",
      parameters: "romanNumber: string",
      return: "number",
    },
    ARGS2ARRAY: {
      definition: "将参数列表转换为数组",
      syntax: "ARGS2ARRAY(...args)",
      parameters: "args: any",
      return: "Array",
    },
    ASC: {
      definition: "返回给定字符的字符编码",
      syntax: "ASC(text)",
      parameters: "text: string",
      return: "number",
    },
    ASIN: {
      definition: "返回一个数的反正弦值（单位为弧度）",
      syntax: "ASIN(number)",
      parameters: "number: number",
      return: "number",
    },
    ASINH: {
      definition: "返回一个数的反双曲正弦值",
      syntax: "ASINH(number)",
      parameters: "number: number",
      return: "number",
    },
    ATAN: {
      definition: "返回一个数的反正切值（单位为弧度）",
      syntax: "ATAN(number)",
      parameters: "number: number",
      return: "number",
    },
    ATAN2: {
      definition:
        "返回点的极坐标，即从原点到点 (x_num, y_num) 之间的直线与正 x 轴之间的夹角（单位为弧度）",
      syntax: "ATAN2(xNum, yNum)",
      parameters: "xNum: number, yNum: number",
      return: "number",
    },
    ATANH: {
      definition: "返回一个数的反双曲正切值",
      syntax: "ATANH(number)",
      parameters: "number: number",
      return: "number",
    },
    AVEDEV: {
      definition: "计算一组数的平均绝对偏差",
      syntax: "AVEDEV(...values)",
      parameters: "values: number",
      return: "number",
    },
    AVERAGE: {
      definition: "计算一组数的算术平均值",
      syntax: "AVERAGE(...values)",
      parameters: "values: number",
      return: "number",
    },
    AVERAGEA: {
      definition: "计算一组数的算术平均值，包括对布尔值和文本的处理",
      syntax: "AVERAGEA(...values)",
      parameters: "values: number or boolean or string",
      return: "number",
    },
    AVERAGEIF: {
      definition: "根据指定条件计算一组数的条件平均值",
      syntax: "AVERAGEIF(range, criteria, [averageRange])",
      parameters:
        "range: Range, criteria: string or number or boolean, averageRange: Range (optional)",
      return: "number",
    },
    AVERAGEIFS: {
      definition: "根据多个条件计算一组数的条件平均值",
      syntax:
        "AVERAGEIFS(averageRange, criteriaRange1, criteria1, [criteriaRange2, criteria2, ...])",
      parameters:
        "averageRange: Range, criteriaRange1: Range, criteria1: string or number or boolean, criteriaRange2: Range, criteria2: string or number or boolean, ...",
      return: "number",
    },
    BAHTTEXT: {
      definition: "将数字转换为泰国文字格式",
      syntax: "BAHTTEXT(number)",
      parameters: "number: number",
      return: "string",
    },
    BASE: {
      definition: "将数字转换为指定基数的文本格式",
      syntax: "BASE(number, radix, [minLength])",
      parameters: "number: number, radix: number, minLength: number (optional)",
      return: "string",
    },
    BESSELI: {
      definition: "计算修正的贝塞尔函数 I(n, x)",
      syntax: "BESSELI(n, x)",
      parameters: "n: number, x: number",
      return: "number",
    },
    BESSELJ: {
      definition: "计算贝塞尔函数 J(n, x)",
      syntax: "BESSELJ(n, x)",
      parameters: "n: number, x: number",
      return: "number",
    },
    BESSELK: {
      definition: "计算贝塞尔函数 K(n, x)",
      syntax: "BESSELK(n, x)",
      parameters: "n: number, x: number",
      return: "number",
    },
    BESSELY: {
      definition: "计算贝塞尔函数 Y(n, x)",
      syntax: "BESSELY(n, x)",
      parameters: "n: number, x: number",
      return: "number",
    },
    BETA: {
      definition: "计算贝塔函数值",
      syntax: "BETA(x, y)",
      parameters: "x: number, y: number",
      return: "number",
    },
    BETADIST: {
      definition: "计算贝塔分布的累积分布函数值",
      syntax: "BETADIST(x, alpha, beta, [lowerBound], [upperBound])",
      parameters:
        "x: number, alpha: number, beta: number, lowerBound: number (optional), upperBound: number (optional)",
      return: "number",
    },
    BETAINV: {
      definition: "计算贝塔分布的反函数值",
      syntax: "BETAINV(probability, alpha, beta, [lowerBound], [upperBound])",
      parameters:
        "probability: number, alpha: number, beta: number, lowerBound: number (optional), upperBound: number (optional)",
      return: "number",
    },
    BIN2DEC: {
      definition: "将二进制数转换为十进制数",
      syntax: "BIN2DEC(binaryNumber)",
      parameters: "binaryNumber: string",
      return: "number",
    },
    BIN2HEX: {
      definition: "将二进制数转换为十六进制数",
      syntax: "BIN2HEX(binaryNumber, [minLength])",
      parameters: "binaryNumber: string, minLength: number (optional)",
      return: "string",
    },
    BIN2OCT: {
      definition: "将二进制数转换为八进制数",
      syntax: "BIN2OCT(binaryNumber, [minLength])",
      parameters: "binaryNumber: string, minLength: number (optional)",
      return: "string",
    },
    BINOMDIST: {
      definition: "计算二项分布的概率",
      syntax: "BINOMDIST(successes, trials, probability, [cumulative])",
      parameters:
        "successes: number, trials: number, probability: number, cumulative: boolean (optional)",
      return: "number",
    },
    CEILING: {
      definition: "将数向上取整为最接近的指定因数的倍数",
      syntax: "CEILING(number, [factor])",
      parameters: "number: number, factor: number (optional)",
      return: "number",
    },
    CELL: {
      definition: "返回单元格的属性信息，例如格式、地址和内容类型",
      syntax: "CELL(infoType, reference)",
      parameters: "infoType: string, reference: Range",
      return: "various",
    },
    CHAR: {
      definition: "根据字符编码返回字符",
      syntax: "CHAR(charCode)",
      parameters: "charCode: number",
      return: "string",
    },
    CHIDIST: {
      definition: "计算卡方分布的单尾概率",
      syntax: "CHIDIST(x, degreesOfFreedom)",
      parameters: "x: number, degreesOfFreedom: number",
      return: "number",
    },
    CHIINV: {
      definition: "计算卡方分布的反函数值",
      syntax: "CHIINV(probability, degreesOfFreedom)",
      parameters: "probability: number, degreesOfFreedom: number",
      return: "number",
    },
    CHISQ: {
      definition: "计算卡方分布的值",
      syntax: "CHISQ(x, degreesOfFreedom)",
      parameters: "x: number, degreesOfFreedom: number",
      return: "number",
    },
    CHITEST: {
      definition: "执行卡方检验以检测独立性",
      syntax: "CHITEST(actualRange, expectedRange)",
      parameters: "actualRange: Range, expectedRange: Range",
      return: "number",
    },
    CHOOSE: {
      definition: "根据索引返回选项列表中的元素",
      syntax: "CHOOSE(index, choice1, choice2, ...)",
      parameters: "index: number, choice1: any, choice2: any, ...",
      return: "any",
    },
    CLEAN: {
      definition: "从文本中删除非打印字符",
      syntax: "CLEAN(text)",
      parameters: "text: string",
      return: "string",
    },
    CODE: {
      definition: "返回文本中第一个字符的字符编码",
      syntax: "CODE(text)",
      parameters: "text: string",
      return: "number",
    },
    COLUMN: {
      definition: "返回包含指定单元格引用的列号",
      syntax: "COLUMN(reference)",
      parameters: "reference: Range",
      return: "number",
    },
    COLUMNS: {
      definition: "返回指定区域中的列数",
      syntax: "COLUMNS(range)",
      parameters: "range: Range",
      return: "number",
    },
    COMBIN: {
      definition: "计算从给定集合中选择指定数量的对象的组合数",
      syntax: "COMBIN(n, k)",
      parameters: "n: number, k: number",
      return: "number",
    },
    COMPLEX: {
      definition: "将实部和虚部的系数用于创建复数",
      syntax: "COMPLEX(real, [imaginary], [suffix])",
      parameters:
        "real: number, imaginary: number (optional), suffix: string (optional)",
      return: "complex number",
    },
    CONCAT: {
      definition: "将多个文本字符串连接为一个字符串",
      syntax: "CONCAT(text1, text2, ...)",
      parameters: "text1: string, text2: string, ...",
      return: "string",
    },
    CONCATENATE: {
      definition: "将多个文本字符串连接为一个字符串",
      syntax: "CONCATENATE(text1, text2, ...)",
      parameters: "text1: string, text2: string, ...",
      return: "string",
    },
    CONFIDENCE: {
      definition: "计算总体均值的置信区间范围",
      syntax: "CONFIDENCE(alpha, standardDeviation, size)",
      parameters: "alpha: number, standardDeviation: number, size: number",
      return: "number",
    },
    "CONFIDENCE.NORM": {
      definition: "计算正态分布总体均值的置信区间范围",
      syntax: "CONFIDENCE.NORM(alpha, standardDeviation, size)",
      parameters: "alpha: number, standardDeviation: number, size: number",
      return: "number",
    },
    "CONFIDENCE.T": {
      definition: "计算 t 分布总体均值的置信区间范围",
      syntax: "CONFIDENCE.T(alpha, standardDeviation, size)",
      parameters: "alpha: number, standardDeviation: number, size: number",
      return: "number",
    },
    CONVERT: {
      definition: "将数值从一种度量单位转换为另一种度量单位",
      syntax: "CONVERT(value, fromUnit, toUnit)",
      parameters: "value: number, fromUnit: string, toUnit: string",
      return: "number",
    },
    CORREL: {
      definition: "计算两个数据集之间的相关性",
      syntax: "CORREL(dataSet1, dataSet2)",
      parameters: "dataSet1: Range, dataSet2: Range",
      return: "number",
    },
    COS: {
      definition: "计算给定角度的余弦值",
      syntax: "COS(angle)",
      parameters: "angle: number",
      return: "number",
    },
    COSH: {
      definition: "计算给定角度的双曲余弦值",
      syntax: "COSH(angle)",
      parameters: "angle: number",
      return: "number",
    },
    COUNT: {
      definition: "计算给定数据集中的数字个数",
      syntax: "COUNT(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    COUNTA: {
      definition: "计算给定数据集中的非空单元格个数",
      syntax: "COUNTA(value1, value2, ...)",
      parameters: "value1: any, value2: any, ...",
      return: "number",
    },
    COUNTBLANK: {
      definition: "计算给定数据集中的空单元格个数",
      syntax: "COUNTBLANK(range)",
      parameters: "range: Range",
      return: "number",
    },
    COUNTIF: {
      definition: "根据指定条件计算数据集中满足条件的单元格个数",
      syntax: "COUNTIF(range, criteria)",
      parameters: "range: Range, criteria: string or number or boolean",
      return: "number",
    },
    COUNTIFS: {
      definition: "根据多个条件计算数据集中满足所有条件的单元格个数",
      syntax:
        "COUNTIFS(criteriaRange1, criteria1, [criteriaRange2, criteria2, ...])",
      parameters:
        "criteriaRange1: Range, criteria1: string or number or boolean, criteriaRange2: Range, criteria2: string or number or boolean, ...",
      return: "number",
    },
    COUPDAYBS: {
      definition: "计算从结算日到下一付息日之间的天数",
      syntax: "COUPDAYBS(settlement, maturity, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, frequency: number, basis: number (optional)",
      return: "number",
    },
    COUPDAYS: {
      definition: "计算在结算日和到期日之间的天数",
      syntax: "COUPDAYS(settlement, maturity, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, frequency: number, basis: number (optional)",
      return: "number",
    },
    COUPDAYSNC: {
      definition: "计算在结算日和下一付息日之间的天数，不考虑其他支付条件",
      syntax: "COUPDAYSNC(settlement, maturity, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, frequency: number, basis: number (optional)",
      return: "number",
    },
    COUPNCD: {
      definition: "返回下一付息日的日期",
      syntax: "COUPNCD(settlement, maturity, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, frequency: number, basis: number (optional)",
      return: "Date",
    },
    COUPNUM: {
      definition: "计算在结算日和到期日之间的付息期数",
      syntax: "COUPNUM(settlement, maturity, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, frequency: number, basis: number (optional)",
      return: "number",
    },
    COUPPCD: {
      definition: "返回上一付息日的日期",
      syntax: "COUPPCD(settlement, maturity, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, frequency: number, basis: number (optional)",
      return: "Date",
    },
    COSH: {
      definition: "计算给定角度的双曲余弦值",
      syntax: "COSH(angle)",
      parameters: "angle: number",
      return: "number",
    },
    COT: {
      definition: "计算给定角度的余切值",
      syntax: "COT(angle)",
      parameters: "angle: number",
      return: "number",
    },
    COTH: {
      definition: "计算给定角度的双曲余切值",
      syntax: "COTH(angle)",
      parameters: "angle: number",
      return: "number",
    },
    COUNT: {
      definition: "计算给定数据集中的数字个数",
      syntax: "COUNT(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    COUNTA: {
      definition: "计算给定数据集中的非空单元格个数",
      syntax: "COUNTA(value1, value2, ...)",
      parameters: "value1: any, value2: any, ...",
      return: "number",
    },
    COUNTBLANK: {
      definition: "计算给定数据集中的空单元格个数",
      syntax: "COUNTBLANK(range)",
      parameters: "range: Range",
      return: "number",
    },
    COUNTIF: {
      definition: "根据指定条件计算数据集中满足条件的单元格个数",
      syntax: "COUNTIF(range, criteria)",
      parameters: "range: Range, criteria: string or number or boolean",
      return: "number",
    },
    COUNTIFS: {
      definition: "根据多个条件计算数据集中满足所有条件的单元格个数",
      syntax:
        "COUNTIFS(criteriaRange1, criteria1, [criteriaRange2, criteria2, ...])",
      parameters:
        "criteriaRange1: Range, criteria1: string or number or boolean, criteriaRange2: Range, criteria2: string or number or boolean, ...",
      return: "number",
    },
    COUNTUNIQUE: {
      definition: "计算给定数据集中的唯一值的个数",
      syntax: "COUNTUNIQUE(value1, value2, ...)",
      parameters: "value1: any, value2: any, ...",
      return: "number",
    },
    CURRENCY: {
      definition: "将给定数字格式化为货币",
      syntax: "CURRENCY(value, [symbol])",
      parameters: "value: number, symbol: string (optional)",
      return: "string",
    },
    CURRENCYCONVERT: {
      definition: "将数值从一种货币单位转换为另一种货币单位",
      syntax:
        "CURRENCYCONVERT(value, fromCurrency, toCurrency, [conversionType])",
      parameters:
        "value: number, fromCurrency: string, toCurrency: string, conversionType: number (optional)",
      return: "number",
    },
    CURRENTCELL: {
      definition: "返回包含公式的单元格的引用",
      syntax: "CURRENTCELL()",
      parameters: "",
      return: "Range",
    },
    CUSTOMFUNCTIONS: {
      definition: "返回已定义的自定义函数的列表",
      syntax: "CUSTOMFUNCTIONS()",
      parameters: "",
      return: "array of strings",
    },
    DATE: {
      definition: "返回给定年、月、日的日期",
      syntax: "DATE(year, month, day)",
      parameters: "year: number, month: number, day: number",
      return: "Date",
    },
    DATEDIF: {
      definition: "计算两个日期之间的差异",
      syntax: "DATEDIF(startDate, endDate, unit)",
      parameters: "startDate: Date, endDate: Date, unit: string",
      return: "number",
    },
    DATEVALUE: {
      definition: "将日期字符串转换为日期值",
      syntax: "DATEVALUE(date)",
      parameters: "date: string",
      return: "Date",
    },
    DAY: {
      definition: "返回给定日期的日份",
      syntax: "DAY(date)",
      parameters: "date: Date",
      return: "number",
    },
    DAYS: {
      definition: "计算两个日期之间的天数差",
      syntax: "DAYS(startDate, endDate)",
      parameters: "startDate: Date, endDate: Date",
      return: "number",
    },
    DAYS360: {
      definition: "计算两个日期之间的360天数差",
      syntax: "DAYS360(startDate, endDate, [method])",
      parameters: "startDate: Date, endDate: Date, method: number (optional)",
      return: "number",
    },
    DB: {
      definition: "返回给定资产在指定时期内的折旧费用",
      syntax: "DB(cost, salvage, life, period, [month])",
      parameters:
        "cost: number, salvage: number, life: number, period: number, month: number (optional)",
      return: "number",
    },
    DCOUNT: {
      definition: "根据指定条件计算数据集中满足条件的单元格个数",
      syntax: "DCOUNT(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DCOUNTA: {
      definition: "计算数据集中满足非空条件的单元格个数",
      syntax: "DCOUNTA(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DCOUNTBLANK: {
      definition: "计算数据集中满足空条件的单元格个数",
      syntax: "DCOUNTBLANK(database, field)",
      parameters: "database: Range, field: string",
      return: "number",
    },
    DCOUNTUNIQUE: {
      definition: "计算数据集中满足唯一值条件的单元格个数",
      syntax: "DCOUNTUNIQUE(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DECIMAL: {
      definition: "将给定文本表示的数字转换为十进制数",
      syntax: "DECIMAL(text, [base])",
      parameters: "text: string, base: number (optional)",
      return: "number",
    },
    DEGREES: {
      definition: "将给定弧度转换为度数",
      syntax: "DEGREES(angle)",
      parameters: "angle: number",
      return: "number",
    },
    DELTA: {
      definition: "如果两个值相等，则返回1；否则返回0",
      syntax: "DELTA(value1, value2)",
      parameters: "value1: number, value2: number",
      return: "number",
    },
    DEVSQ: {
      definition: "计算数据集的偏差平方和",
      syntax: "DEVSQ(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    DGET: {
      definition: "根据指定条件从数据库中提取单个记录",
      syntax: "DGET(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "any",
    },
    DISC: {
      definition: "计算有价证券的贴现率",
      syntax: "DISC(settlement, maturity, pr, redemption, [basis])",
      parameters:
        "settlement: Date, maturity: Date, pr: number, redemption: number, basis: number (optional)",
      return: "number",
    },
    DMAX: {
      definition: "从数据库中返回满足条件的最大值",
      syntax: "DMAX(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "any",
    },
    DMIN: {
      definition: "从数据库中返回满足条件的最小值",
      syntax: "DMIN(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "any",
    },
    DOLLAR: {
      definition: "将给定数字格式化为货币，可指定小数位数和货币符号",
      syntax: "DOLLAR(value, [decimals])",
      parameters: "value: number, decimals: number (optional)",
      return: "string",
    },
    DOLLARDE: {
      definition: "将以分为单位的价格转换为以小数表示的价格",
      syntax: "DOLLARDE(fractionalDollar, [fraction])",
      parameters: "fractionalDollar: number, fraction: number (optional)",
      return: "number",
    },
    DOLLARFR: {
      definition: "将以小数表示的价格转换为以分为单位的价格",
      syntax: "DOLLARFR(decimalDollar, [fraction])",
      parameters: "decimalDollar: number, fraction: number (optional)",
      return: "number",
    },
    DPRODUCT: {
      definition: "在数据库中计算满足条件的数值字段的乘积",
      syntax: "DPRODUCT(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DSTDEV: {
      definition: "计算在数据库中满足条件的数值字段的样本标准偏差",
      syntax: "DSTDEV(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DSTDEVP: {
      definition: "计算在数据库中满足条件的数值字段的总体标准偏差",
      syntax: "DSTDEVP(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DSUM: {
      definition: "在数据库中计算满足条件的数值字段的总和",
      syntax: "DSUM(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DURATION: {
      definition: "计算固定利率债券的修正久期",
      syntax:
        "DURATION(settlement, maturity, coupon, yield, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, coupon: number, yield: number, frequency: number, basis: number (optional)",
      return: "number",
    },
    DVAR: {
      definition: "计算在数据库中满足条件的数值字段的样本方差",
      syntax: "DVAR(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    DVARP: {
      definition: "计算在数据库中满足条件的数值字段的总体方差",
      syntax: "DVARP(database, field, criteria)",
      parameters: "database: Range, field: string, criteria: Range",
      return: "number",
    },
    EDATE: {
      definition: "返回给定日期之后或之前指定月份数的日期",
      syntax: "EDATE(startDate, months)",
      parameters: "startDate: Date, months: number",
      return: "Date",
    },
    EFFECT: {
      definition: "根据名义年利率和每年复利计息次数，计算实际年利率",
      syntax: "EFFECT(nominalRate, npery)",
      parameters: "nominalRate: number, npery: number",
      return: "number",
    },
    ENCODEURL: {
      definition: "将 URL 字符串进行 URL 编码",
      syntax: "ENCODEURL(url)",
      parameters: "url: string",
      return: "string",
    },
    EOMONTH: {
      definition: "返回给定日期所在月份的月底日期",
      syntax: "EOMONTH(startDate, months)",
      parameters: "startDate: Date, months: number",
      return: "Date",
    },
    ERF: {
      definition: "计算高斯误差函数的值",
      syntax: "ERF(x)",
      parameters: "x: number",
      return: "number",
    },
    ERFC: {
      definition: "计算补余误差函数的值",
      syntax: "ERFC(x)",
      parameters: "x: number",
      return: "number",
    },
    "ERROR.TYPE": {
      definition: "返回错误值的类型",
      syntax: "ERROR.TYPE(errorValue)",
      parameters: "errorValue: any",
      return: "number",
    },
    EURO: {
      definition: "将给定数字格式化为欧元货币",
      syntax: "EURO(value)",
      parameters: "value: number",
      return: "string",
    },
    EUROCONVERT: {
      definition: "将数值从一种欧元货币单位转换为另一种欧元货币单位",
      syntax:
        "EUROCONVERT(value, sourceCurrency, targetCurrency, [fullPrecision], [triangulationPrecision])",
      parameters:
        "value: number, sourceCurrency: string, targetCurrency: string, fullPrecision: boolean (optional), triangulationPrecision: number (optional)",
      return: "number",
    },
    EVEN: {
      definition: "将给定数值向上取整为最接近的偶数",
      syntax: "EVEN(value)",
      parameters: "value: number",
      return: "number",
    },
    EXACT: {
      definition: "比较两个文本字符串是否完全相同",
      syntax: "EXACT(text1, text2)",
      parameters: "text1: string, text2: string",
      return: "boolean",
    },
    EXP: {
      definition: "计算 e 的指定次幂",
      syntax: "EXP(x)",
      parameters: "x: number",
      return: "number",
    },
    "EXPON.DIST": {
      definition: "计算指数分布的概率密度函数或累积分布函数",
      syntax: "EXPON.DIST(x, lambda, [cumulative])",
      parameters: "x: number, lambda: number, cumulative: boolean (optional)",
      return: "number",
    },
    FACT: {
      definition: "计算给定数值的阶乘",
      syntax: "FACT(number)",
      parameters: "number: number",
      return: "number",
    },
    FACTDOUBLE: {
      definition: "计算给定数值的双阶乘",
      syntax: "FACTDOUBLE(number)",
      parameters: "number: number",
      return: "number",
    },
    FALSE: {
      definition: "返回逻辑值 FALSE",
      syntax: "FALSE()",
      return: "boolean",
    },
    FDIST: {
      definition: "计算 Fisher 分布的累积分布函数",
      syntax: "FDIST(x, degreesFreedom1, degreesFreedom2)",
      parameters: "x: number, degreesFreedom1: number, degreesFreedom2: number",
      return: "number",
    },
    FINDB: {
      definition: "在文本字符串中查找指定子字符串的起始位置（不区分大小写）",
      syntax: "FINDB(findText, withinText, [startIndex])",
      parameters:
        "findText: string, withinText: string, startIndex: number (optional)",
      return: "number",
    },
    FIND: {
      definition: "在文本字符串中查找指定子字符串的起始位置（区分大小写）",
      syntax: "FIND(findText, withinText, [startIndex])",
      parameters:
        "findText: string, withinText: string, startIndex: number (optional)",
      return: "number",
    },
    FINV: {
      definition: "计算 Fisher 分布的反函数",
      syntax: "FINV(probability, degreesFreedom1, degreesFreedom2)",
      parameters:
        "probability: number, degreesFreedom1: number, degreesFreedom2: number",
      return: "number",
    },
    FISHER: {
      definition: "计算 Fisher 变换后的值",
      syntax: "FISHER(x)",
      parameters: "x: number",
      return: "number",
    },
    FISHERINV: {
      definition: "计算 Fisher 变换的逆值",
      syntax: "FISHERINV(y)",
      parameters: "y: number",
      return: "number",
    },
    FIXED: {
      definition: "将给定数字按指定小数位数和用逗号分隔的千位分隔符进行格式化",
      syntax: "FIXED(value, [decimals], [noCommas])",
      parameters:
        "value: number, decimals: number (optional), noCommas: boolean (optional)",
      return: "string",
    },
    FLOOR: {
      definition: "将给定数值向下取整为最接近的指定因子的倍数",
      syntax: "FLOOR(value, factor)",
      parameters: "value: number, factor: number",
      return: "number",
    },
    "FLOOR.MATH": {
      definition: "将给定数值向下取整为最接近的指定因子的倍数，可指定取整方式",
      syntax: "FLOOR.MATH(value, factor, [mode])",
      parameters: "value: number, factor: number, mode: number (optional)",
      return: "number",
    },
    "FLOOR.PRECISE": {
      definition: "将给定数值向下取整为最接近的指定因子的倍数",
      syntax: "FLOOR.PRECISE(value, factor)",
      parameters: "value: number, factor: number",
      return: "number",
    },
    FORECAST: {
      definition: "使用线性回归计算给定 x 值对应的 y 值",
      syntax: "FORECAST(x, knownYs, knownXs)",
      parameters: "x: number, knownYs: Range, knownXs: Range",
      return: "number",
    },
    FORMULATEXT: {
      definition: "返回指定单元格中公式的文本表示形式",
      syntax: "FORMULATEXT(reference)",
      parameters: "reference: Range",
      return: "string",
    },
    FREQUENCY: {
      definition: "计算数据集中在给定区间内的值的频率分布",
      syntax: "FREQUENCY(data, bins)",
      parameters: "data: Range, bins: Range",
      return: "Array",
    },
    FTEST: {
      definition: "计算两个数据集之间的方差比",
      syntax: "FTEST(array1, array2)",
      parameters: "array1: Range, array2: Range",
      return: "number",
    },
    FV: {
      definition: "计算投资或贷款的未来价值",
      syntax: "FV(rate, nper, pmt, [pv], [type])",
      parameters:
        "rate: number, nper: number, pmt: number, pv: number (optional), type: number (optional)",
      return: "number",
    },
    FVSCHEDULE: {
      definition: "根据多个不同的复利率计算投资的未来价值",
      syntax: "FVSCHEDULE(principal, schedule)",
      parameters: "principal: number, schedule: Range",
      return: "number",
    },
    GAMMA: {
      definition: "计算伽马函数的值",
      syntax: "GAMMA(x)",
      parameters: "x: number",
      return: "number",
    },
    "GAMMA.DIST": {
      definition: "计算伽马分布的概率密度函数或累积分布函数",
      syntax: "GAMMA.DIST(x, alpha, beta, [cumulative])",
      parameters:
        "x: number, alpha: number, beta: number, cumulative: boolean (optional)",
      return: "number",
    },
    "GAMMA.INV": {
      definition: "计算伽马分布的反函数",
      syntax: "GAMMA.INV(probability, alpha, beta)",
      parameters: "probability: number, alpha: number, beta: number",
      return: "number",
    },
    GAMMALN: {
      definition: "计算伽马函数的自然对数",
      syntax: "GAMMALN(x)",
      parameters: "x: number",
      return: "number",
    },
    "GAMMALN.PRECISE": {
      definition: "计算伽马函数的自然对数",
      syntax: "GAMMALN.PRECISE(x)",
      parameters: "x: number",
      return: "number",
    },
    GAUSS: {
      definition: "计算标准正态分布的累积分布函数",
      syntax: "GAUSS(z)",
      parameters: "z: number",
      return: "number",
    },
    GCD: {
      definition: "计算给定数值的最大公约数",
      syntax: "GCD(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    GEOMEAN: {
      definition: "计算给定数值的几何平均值",
      syntax: "GEOMEAN(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    GESTEP: {
      definition: "如果给定数值大于等于阈值，返回 1；否则返回 0",
      syntax: "GESTEP(number, step)",
      parameters: "number: number, step: number",
      return: "number",
    },
    GROWTH: {
      definition: "基于已知 x 值和 y 值，计算指数回归的预测结果",
      syntax: "GROWTH(knownYs, [knownXs], [newXs], [const])",
      parameters:
        "knownYs: Range, knownXs: Range (optional), newXs: Range (optional), const: boolean (optional)",
      return: "Array",
    },
    HARMEAN: {
      definition: "计算给定数值的调和平均值",
      syntax: "HARMEAN(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    HEX2BIN: {
      definition: "将十六进制数转换为二进制数",
      syntax: "HEX2BIN(number, [places])",
      parameters: "number: string, places: number (optional)",
      return: "string",
    },
    HEX2DEC: {
      definition: "将十六进制数转换为十进制数",
      syntax: "HEX2DEC(number)",
      parameters: "number: string",
      return: "number",
    },
    HEX2OCT: {
      definition: "将十六进制数转换为八进制数",
      syntax: "HEX2OCT(number, [places])",
      parameters: "number: string, places: number (optional)",
      return: "string",
    },
    HLOOKUP: {
      definition: "在水平范围内查找指定值，并返回对应的垂直范围内的值",
      syntax: "HLOOKUP(lookupValue, table, rowIndex, [rangeLookup])",
      parameters:
        "lookupValue: any, table: Range, rowIndex: number, rangeLookup: boolean (optional)",
      return: "any",
    },
    HOUR: {
      definition: "从给定日期或时间值中提取小时部分",
      syntax: "HOUR(value)",
      parameters: "value: date or time",
      return: "number",
    },
    HYPERLINK: {
      definition: "创建一个链接，将显示文本指向指定的 URL",
      syntax: "HYPERLINK(url, [linkText])",
      parameters: "url: string, linkText: string (optional)",
      return: "string",
    },
    "HYPGEOM.DIST": {
      definition: "计算超几何分布的概率密度函数或累积分布函数",
      syntax:
        "HYPGEOM.DIST(x, sampleS, numberSample, populationS, [cumulative])",
      parameters:
        "x: number, sampleS: number, numberSample: number, populationS: number, cumulative: boolean (optional)",
      return: "number",
    },
    IF: {
      definition: "根据给定条件返回不同的结果",
      syntax: "IF(condition, valueIfTrue, valueIfFalse)",
      parameters: "condition: boolean, valueIfTrue: any, valueIfFalse: any",
      return: "any",
    },
    IFERROR: {
      definition: "如果表达式返回错误值，返回指定的值，否则返回表达式的结果",
      syntax: "IFERROR(value, valueIfError)",
      parameters: "value: any, valueIfError: any",
      return: "any",
    },
    IFNA: {
      definition:
        "如果表达式返回 #N/A 错误，返回指定的值，否则返回表达式的结果",
      syntax: "IFNA(value, valueIfNa)",
      parameters: "value: any, valueIfNa: any",
      return: "any",
    },
    IMABS: {
      definition: "计算复数的绝对值",
      syntax: "IMABS(inumber)",
      parameters: "inumber: complex number",
      return: "number",
    },
    IMAGINARY: {
      definition: "从复数中提取虚部",
      syntax: "IMAGINARY(inumber)",
      parameters: "inumber: complex number",
      return: "number",
    },
    IMARGUMENT: {
      definition: "计算复数的辐角",
      syntax: "IMARGUMENT(inumber)",
      parameters: "inumber: complex number",
      return: "number",
    },
    IMCONJUGATE: {
      definition: "计算复数的共轭复数",
      syntax: "IMCONJUGATE(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMCOS: {
      definition: "计算复数的余弦值",
      syntax: "IMCOS(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMCOSH: {
      definition: "计算复数的双曲余弦值",
      syntax: "IMCOSH(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMCOT: {
      definition: "计算复数的余切值",
      syntax: "IMCOT(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMCSC: {
      definition: "计算复数的余割值",
      syntax: "IMCSC(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMCSCH: {
      definition: "计算复数的双曲余割值",
      syntax: "IMCSCH(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMDIV: {
      definition: "计算两个复数的商",
      syntax: "IMDIV(inumber1, inumber2)",
      parameters: "inumber1: complex number, inumber2: complex number",
      return: "complex number",
    },
    IMEXP: {
      definition: "计算复数的指数函数值",
      syntax: "IMEXP(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMLN: {
      definition: "计算复数的自然对数",
      syntax: "IMLN(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMLOG10: {
      definition: "计算复数的以 10 为底的对数",
      syntax: "IMLOG10(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMLOG2: {
      definition: "计算复数的以 2 为底的对数",
      syntax: "IMLOG2(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMPOWER: {
      definition: "计算复数的指定幂次方",
      syntax: "IMPOWER(inumber, number)",
      parameters: "inumber: complex number, number: number",
      return: "complex number",
    },
    IMPRODUCT: {
      definition: "计算多个复数的乘积",
      syntax: "IMPRODUCT(inumber1, inumber2, ...)",
      parameters: "inumber1: complex number, inumber2: complex number, ...",
      return: "complex number",
    },
    IMREAL: {
      definition: "从复数中提取实部",
      syntax: "IMREAL(inumber)",
      parameters: "inumber: complex number",
      return: "number",
    },
    IMSEC: {
      definition: "计算复数的正割值",
      syntax: "IMSEC(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMSECH: {
      definition: "计算复数的双曲正割值",
      syntax: "IMSECH(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMSIN: {
      definition: "计算复数的正弦值",
      syntax: "IMSIN(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMSINH: {
      definition: "计算复数的双曲正弦值",
      syntax: "IMSINH(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMSQRT: {
      definition: "计算复数的平方根",
      syntax: "IMSQRT(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    IMSUB: {
      definition: "计算两个复数的差",
      syntax: "IMSUB(inumber1, inumber2)",
      parameters: "inumber1: complex number, inumber2: complex number",
      return: "complex number",
    },
    IMSUM: {
      definition: "计算多个复数的和",
      syntax: "IMSUM(inumber1, inumber2, ...)",
      parameters: "inumber1: complex number, inumber2: complex number, ...",
      return: "complex number",
    },
    IMTAN: {
      definition: "计算复数的正切值",
      syntax: "IMTAN(inumber)",
      parameters: "inumber: complex number",
      return: "complex number",
    },
    INDEX: {
      definition: "返回给定范围内指定行和列的单元格值",
      syntax: "INDEX(range, row, [column])",
      parameters: "range: Range, row: number, column: number (optional)",
      return: "any",
    },
    INDIRECT: {
      definition: "返回由给定字符串构建的单元格引用的值",
      syntax: "INDIRECT(refText, [a1])",
      parameters: "refText: string, a1: boolean (optional)",
      return: "any",
    },
    INT: {
      definition: "向下取整，返回小于或等于给定数值的最大整数",
      syntax: "INT(number)",
      parameters: "number: number",
      return: "number",
    },
    INTERCEPT: {
      definition: "计算线性回归线的截距",
      syntax: "INTERCEPT(knownYs, knownXs)",
      parameters: "knownYs: Range, knownXs: Range",
      return: "number",
    },
    INTRATE: {
      definition: "计算定期利息的利率",
      syntax: "INTRATE(settlement, maturity, investment, redemption, basis)",
      parameters:
        "settlement: date, maturity: date, investment: number, redemption: number, basis: number",
      return: "number",
    },
    IPMT: {
      definition: "计算定期支付期间的利息部分",
      syntax:
        "IPMT(rate, period, periods, presentValue, [futureValue], [type])",
      parameters:
        "rate: number, period: number, periods: number, presentValue: number, futureValue: number (optional), type: number (optional)",
      return: "number",
    },
    IRR: {
      definition: "计算一系列现金流的内部收益率",
      syntax: "IRR(values, [guess])",
      parameters: "values: Range, guess: number (optional)",
      return: "number",
    },
    ISBLANK: {
      definition: "检查给定单元格是否为空",
      syntax: "ISBLANK(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISERR: {
      definition: "检查给定值是否为除 #N/A 之外的错误值",
      syntax: "ISERR(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISERROR: {
      definition: "检查给定值是否为任何错误值",
      syntax: "ISERROR(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISEVEN: {
      definition: "检查给定数值是否为偶数",
      syntax: "ISEVEN(value)",
      parameters: "value: number",
      return: "boolean",
    },
    ISFORMULA: {
      definition: "检查给定单元格是否包含公式",
      syntax: "ISFORMULA(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISLOGICAL: {
      definition: "检查给定值是否为逻辑值",
      syntax: "ISLOGICAL(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISNA: {
      definition: "检查给定值是否为 #N/A 错误",
      syntax: "ISNA(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISNONTEXT: {
      definition: "检查给定值是否为非文本值",
      syntax: "ISNONTEXT(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISNUMBER: {
      definition: "检查给定值是否为数值",
      syntax: "ISNUMBER(value)",
      parameters: "value: any",
      return: "boolean",
    },
    "ISO.CEILING": {
      definition: "按指定倍数将数值向上舍入到最接近的整数或指定的倍数",
      syntax: "ISO.CEILING(number, [significance])",
      parameters: "number: number, significance: number (optional)",
      return: "number",
    },
    ISODD: {
      definition: "检查给定数值是否为奇数",
      syntax: "ISODD(value)",
      parameters: "value: number",
      return: "boolean",
    },
    ISPMT: {
      definition: "计算固定利率下特定支付期间的利息支付额",
      syntax: "ISPMT(rate, period, periods, presentValue)",
      parameters:
        "rate: number, period: number, periods: number, presentValue: number",
      return: "number",
    },
    ISREF: {
      definition: "检查给定值是否为引用",
      syntax: "ISREF(value)",
      parameters: "value: any",
      return: "boolean",
    },
    ISTEXT: {
      definition: "检查给定值是否为文本",
      syntax: "ISTEXT(value)",
      parameters: "value: any",
      return: "boolean",
    },
    KURT: {
      definition: "计算一组数据的峰度（峰值与正态分布峰值之间的差异程度）",
      syntax: "KURT(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    LARGE: {
      definition: "返回一组数据中第 k 个最大值",
      syntax: "LARGE(array, k)",
      parameters: "array: Range, k: number",
      return: "number",
    },
    LCM: {
      definition: "计算一组数的最小公倍数",
      syntax: "LCM(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    LEFT: {
      definition: "从文本字符串的左侧提取指定数量的字符",
      syntax: "LEFT(text, [numChars])",
      parameters: "text: string, numChars: number (optional)",
      return: "string",
    },
    LEN: {
      definition: "返回文本字符串中的字符数",
      syntax: "LEN(text)",
      parameters: "text: string",
      return: "number",
    },
    LINEST: {
      definition: "计算最佳拟合直线的统计信息",
      syntax: "LINEST(knownYs, [knownXs], [const], [stats])",
      parameters:
        "knownYs: Range, knownXs: Range (optional), const: boolean (optional), stats: boolean (optional)",
      return: "array or value",
    },
    LN: {
      definition: "计算数值的自然对数",
      syntax: "LN(number)",
      parameters: "number: number",
      return: "number",
    },
    LOG: {
      definition: "计算数值的对数",
      syntax: "LOG(number, [base])",
      parameters: "number: number, base: number (optional)",
      return: "number",
    },
    LOG10: {
      definition: "计算数值的以 10 为底的对数",
      syntax: "LOG10(number)",
      parameters: "number: number",
      return: "number",
    },
    LOGEST: {
      definition: "根据指定的数据集计算最佳拟合指数曲线的统计信息",
      syntax: "LOGEST(knownYs, [knownXs], [const], [stats])",
      parameters:
        "knownYs: Range, knownXs: Range (optional), const: boolean (optional), stats: boolean (optional)",
      return: "array or value",
    },
    LOGINV: {
      definition: "计算指定均值和标准差的对数正态分布的反函数值",
      syntax: "LOGINV(probability, mean, standardDev)",
      parameters: "probability: number, mean: number, standardDev: number",
      return: "number",
    },
    "LOGNORM.DIST": {
      definition: "计算指定均值和标准差的对数正态分布的概率密度函数值",
      syntax: "LOGNORM.DIST(x, mean, standardDev, [cumulative])",
      parameters:
        "x: number, mean: number, standardDev: number, cumulative: boolean (optional)",
      return: "number",
    },
    "LOGNORM.INV": {
      definition: "计算指定均值和标准差的对数正态分布的反函数值",
      syntax: "LOGNORM.INV(probability, mean, standardDev)",
      parameters: "probability: number, mean: number, standardDev: number",
      return: "number",
    },
    LOOKUP: {
      definition: "在向量或数组中查找一个值，并返回该值所在位置的对应值",
      syntax: "LOOKUP(lookupValue, lookupVector, [resultVector])",
      parameters:
        "lookupValue: any, lookupVector: Range, resultVector: Range (optional)",
      return: "any",
    },
    LOWER: {
      definition: "将文本字符串转换为小写",
      syntax: "LOWER(text)",
      parameters: "text: string",
      return: "string",
    },
    MATCH: {
      definition: "查找指定值在向量或数组中的位置",
      syntax: "MATCH(lookupValue, lookupArray, [matchType])",
      parameters:
        "lookupValue: any, lookupArray: Range, matchType: number (optional)",
      return: "number",
    },
    MAX: {
      definition: "返回一组数值中的最大值",
      syntax: "MAX(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    MAXA: {
      definition: "返回一组数值或文本中的最大值（不计算空值）",
      syntax: "MAXA(value1, value2, ...)",
      parameters: "value1: any, value2: any, ...",
      return: "any",
    },
    MDETERM: {
      definition: "计算给定矩阵的行列式",
      syntax: "MDETERM(array)",
      parameters: "array: Range",
      return: "number",
    },
    MDURATION: {
      definition: "计算修正久期，即一种测量债券价格对于收益率变化的敏感度指标",
      syntax:
        "MDURATION(settlement, maturity, coupon, yld, frequency, [basis])",
      parameters:
        "settlement: Date, maturity: Date, coupon: number, yld: number, frequency: number, basis: number (optional)",
      return: "number",
    },
    MEDIAN: {
      definition: "返回一组数值中的中位数",
      syntax: "MEDIAN(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    MID: {
      definition: "从文本字符串的指定位置开始提取指定数量的字符",
      syntax: "MID(text, startNum, numChars)",
      parameters: "text: string, startNum: number, numChars: number",
      return: "string",
    },
    MIN: {
      definition: "返回一组数值中的最小值",
      syntax: "MIN(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number",
    },
    MINA: {
      definition: "返回一组数值或文本中的最小值（不计算空值）",
      syntax: "MINA(value1, value2, ...)",
      parameters: "value1: any, value2: any, ...",
      return: "any",
    },
    MINVERSE: {
      definition: "计算给定矩阵的逆矩阵",
      syntax: "MINVERSE(array)",
      parameters: "array: Range",
      return: "array",
    },
    MIRR: {
      definition: "计算一系列现金流的修改内部收益率",
      syntax: "MIRR(values, financeRate, reinvestRate)",
      parameters: "values: Range, financeRate: number, reinvestRate: number",
      return: "number",
    },
    MMULT: {
      definition: "计算两个矩阵的乘积",
      syntax: "MMULT(array1, array2)",
      parameters: "array1: Range, array2: Range",
      return: "array",
    },
    MOD: {
      definition: "返回两个数相除的余数",
      syntax: "MOD(number, divisor)",
      parameters: "number: number, divisor: number",
      return: "number",
    },
    MODE: {
      definition: "返回一组数值中的众数（出现频率最高的值）",
      syntax: "MODE(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "number or array",
    },
    "MODE.MULT": {
      definition: "返回一组数值中的多个众数（出现频率最高的值）",
      syntax: "MODE.MULT(value1, value2, ...)",
      parameters: "value1: number, value2: number, ...",
      return: "array",
    },
    MONTH: {
      definition: "返回给定日期的月份",
      syntax: "MONTH(date)",
      parameters: "date: Date",
      return: "number",
    },
    MROUND: {
      definition: "将数值舍入到指定的倍数",
      syntax: "MROUND(number, multiple)",
      parameters: "number: number, multiple: number",
      return: "number",
    },
    MULTINOMIAL: {
      definition: "计算一组数的多项式系数",
      syntax: "MULTINOMIAL(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    MUNIT: {
      definition: "生成给定维度的单位矩阵",
      syntax: "MUNIT(dimension)",
      parameters: "dimension: number",
      return: "array",
    },
    N: {
      definition: "将给定值转换为数值",
      syntax: "N(value)",
      parameters: "value: any",
      return: "number",
    },
    NA: {
      definition: "返回错误值 #N/A",
      syntax: "NA()",
      parameters: "",
      return: "error",
    },
    "NEGBINOM.DIST": {
      definition: "计算负二项分布的概率密度函数值",
      syntax: "NEGBINOM.DIST(x, r, p, [cumulative])",
      parameters:
        "x: number, r: number, p: number, cumulative: boolean (optional)",
      return: "number",
    },
    NETWORKDAYS: {
      definition: "计算两个日期之间的工作日数",
      syntax: "NETWORKDAYS(startDate, endDate, [holidays])",
      parameters: "startDate: Date, endDate: Date, holidays: Range (optional)",
      return: "number",
    },
    NOMINAL: {
      definition: "计算指定名义利率和复利期数下的年利率",
      syntax: "NOMINAL(effectiveRate, periods)",
      parameters: "effectiveRate: number, periods: number",
      return: "number",
    },
    "NORM.DIST": {
      definition: "计算正态分布的概率密度函数值",
      syntax: "NORM.DIST(x, mean, standardDev, [cumulative])",
      parameters:
        "x: number, mean: number, standardDev: number, cumulative: boolean (optional)",
      return: "number",
    },
    "NORM.INV": {
      definition: "计算指定均值和标准差的正态分布的反函数值",
      syntax: "NORM.INV(probability, mean, standardDev)",
      parameters: "probability: number, mean: number, standardDev: number",
      return: "number",
    },
    "NORM.S.DIST": {
      definition: "计算标准正态分布的概率密度函数值",
      syntax: "NORM.S.DIST(x, [cumulative])",
      parameters: "x: number, cumulative: boolean (optional)",
      return: "number",
    },
    "NORM.S.INV": {
      definition: "计算标准正态分布的反函数值",
      syntax: "NORM.S.INV(probability)",
      parameters: "probability: number",
      return: "number",
    },
    NOT: {
      definition: "对逻辑值进行取反操作",
      syntax: "NOT(logical)",
      parameters: "logical: boolean",
      return: "boolean",
    },
    NOW: {
      definition: "返回当前日期和时间",
      syntax: "NOW()",
      parameters: "",
      return: "Date",
    },
    NPER: {
      definition: "计算定期支付额、利率和期数下的贷款或投资的净现值",
      syntax: "NPER(rate, payment, presentValue, [futureValue], [type])",
      parameters:
        "rate: number, payment: number, presentValue: number, futureValue: number (optional), type: number (optional)",
      return: "number",
    },
    NPV: {
      definition: "计算一系列现金流的净现值",
      syntax: "NPV(rate, value1, value2, ...)",
      parameters: "rate: number, value1: number, value2: number, ...",
      return: "number",
    },
    NUMBERVALUE: {
      definition:
        "将文本字符串转换为数值，根据指定的千位分隔符和小数分隔符进行解析",
      syntax: "NUMBERVALUE(text, [decimalSeparator], [groupSeparator])",
      parameters:
        "text: string, decimalSeparator: string (optional), groupSeparator: string (optional)",
      return: "number",
    },
    ODD: {
      definition: "将数值向上取整为最接近的奇数",
      syntax: "ODD(number)",
      parameters: "number: number",
      return: "number",
    },
    OFFSET: {
      definition: "返回给定范围的相对偏移范围",
      syntax: "OFFSET(reference, rows, cols, [height], [width])",
      parameters:
        "reference: Range, rows: number, cols: number, height: number (optional), width: number (optional)",
      return: "Range",
    },
    OR: {
      definition: "对一组逻辑值进行逻辑或操作",
      syntax: "OR(logical1, logical2, ...)",
      parameters: "logical1: boolean, logical2: boolean, ...",
      return: "boolean",
    },
    PEARSON: {
      definition: "计算两组数值之间的皮尔逊相关系数",
      syntax: "PEARSON(array1, array2)",
      parameters: "array1: Range, array2: Range",
      return: "number",
    },
    "PERCENTILE.EXC": {
      definition: "计算一组数值中的指定百分位数（排除最高和最低值）",
      syntax: "PERCENTILE.EXC(array, k)",
      parameters: "array: Range, k: number",
      return: "number",
    },
    "PERCENTILE.INC": {
      definition: "计算一组数值中的指定百分位数（包括最高和最低值）",
      syntax: "PERCENTILE.INC(array, k)",
      parameters: "array: Range, k: number",
      return: "number",
    },
    "PERCENTRANK.EXC": {
      definition: "计算一组数值中给定值的百分等级（排除最高和最低值）",
      syntax: "PERCENTRANK.EXC(array, x, [significance])",
      parameters: "array: Range, x: number, significance: number (optional)",
      return: "number",
    },
    "PERCENTRANK.INC": {
      definition: "计算一组数值中给定值的百分等级（包括最高和最低值）",
      syntax: "PERCENTRANK.INC(array, x, [significance])",
      parameters: "array: Range, x: number, significance: number (optional)",
      return: "number",
    },
    PERMUT: {
      definition: "计算从给定数目的对象中选择若干个对象的排列数",
      syntax: "PERMUT(number, numberChosen)",
      parameters: "number: number, numberChosen: number",
      return: "number",
    },
    PHI: {
      definition: "计算标准正态分布的累积分布函数值",
      syntax: "PHI(x)",
      parameters: "x: number",
      return: "number",
    },
    PI: {
      definition: "返回圆周率 π (pi)",
      syntax: "PI()",
      parameters: "",
      return: "number",
    },
    PMT: {
      definition: "计算等额分期付款的每期付款额",
      syntax: "PMT(rate, numPeriods, presentValue, [futureValue], [type])",
      parameters:
        "rate: number, numPeriods: number, presentValue: number, futureValue: number (optional), type: number (optional)",
      return: "number",
    },
    "POISSON.DIST": {
      definition: "计算泊松分布的概率密度函数值",
      syntax: "POISSON.DIST(x, mean, [cumulative])",
      parameters: "x: number, mean: number, cumulative: boolean (optional)",
      return: "number",
    },
    POWER: {
      definition: "计算给定数的指定次幂",
      syntax: "POWER(number, power)",
      parameters: "number: number, power: number",
      return: "number",
    },
    PPMT: {
      definition: "计算贷款或投资的指定期数下的本金偿还额",
      syntax:
        "PPMT(rate, period, numPeriods, presentValue, [futureValue], [type])",
      parameters:
        "rate: number, period: number, numPeriods: number, presentValue: number, futureValue: number (optional), type: number (optional)",
      return: "number",
    },
    PRICE: {
      definition: "计算定期支付利息的债券的价格",
      syntax:
        "PRICE(settlement, maturity, rate, yld, redemption, [frequency], [basis])",
      parameters:
        "settlement: Date, maturity: Date, rate: number, yld: number, redemption: number, frequency: number (optional), basis: number (optional)",
      return: "number",
    },
    PRICEDISC: {
      definition: "计算折价债券的价格",
      syntax: "PRICEDISC(settlement, maturity, discount, redemption, [basis])",
      parameters:
        "settlement: Date, maturity: Date, discount: number, redemption: number, basis: number (optional)",
      return: "number",
    },
    PRICEMAT: {
      definition: "计算到期付息的债券的价格",
      syntax: "PRICEMAT(settlement, maturity, issue, rate, yld, [basis])",
      parameters:
        "settlement: Date, maturity: Date, issue: Date, rate: number, yld: number, basis: number (optional)",
      return: "number",
    },
    PROB: {
      definition: "计算一组数值落在指定区间的概率",
      syntax: "PROB(range, probabilityRange, [lowerLimit], [upperLimit])",
      parameters:
        "range: Range, probabilityRange: Range, lowerLimit: number (optional), upperLimit: number (optional)",
      return: "number",
    },
    PRODUCT: {
      definition: "计算一组数值的乘积",
      syntax: "PRODUCT(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    PROPER: {
      definition: "将给定文本字符串中的每个单词的首字母大写",
      syntax: "PROPER(text)",
      parameters: "text: string",
      return: "string",
    },
    PV: {
      definition: "计算未来支付的现值",
      syntax: "PV(rate, numPeriods, payment, [futureValue], [type])",
      parameters:
        "rate: number, numPeriods: number, payment: number, futureValue: number (optional), type: number (optional)",
      return: "number",
    },
    "QUARTILE.EXC": {
      definition: "计算一组数值的指定四分位数（排除最高和最低值）",
      syntax: "QUARTILE.EXC(array, quart)",
      parameters: "array: Range, quart: number",
      return: "number",
    },
    "QUARTILE.INC": {
      definition: "计算一组数值的指定四分位数（包括最高和最低值）",
      syntax: "QUARTILE.INC(array, quart)",
      parameters: "array: Range, quart: number",
      return: "number",
    },
    QUOTIENT: {
      definition: "计算两个数的整除结果",
      syntax: "QUOTIENT(numerator, denominator)",
      parameters: "numerator: number, denominator: number",
      return: "number",
    },
    RADIANS: {
      definition: "将角度值转换为弧度值",
      syntax: "RADIANS(angle)",
      parameters: "angle: number",
      return: "number",
    },
    RAND: {
      definition: "返回 0 到 1 之间的随机数",
      syntax: "RAND()",
      parameters: "",
      return: "number",
    },
    RANDBETWEEN: {
      definition: "返回指定范围内的随机整数",
      syntax: "RANDBETWEEN(bottom, top)",
      parameters: "bottom: number, top: number",
      return: "number",
    },
    "RANK.AVG": {
      definition: "计算一组数值中给定值的平均排名",
      syntax: "RANK.AVG(number, array, [order])",
      parameters: "number: number, array: Range, order: number (optional)",
      return: "number",
    },
    "RANK.EQ": {
      definition: "计算一组数值中给定值的排名",
      syntax: "RANK.EQ(number, array, [order])",
      parameters: "number: number, array: Range, order: number (optional)",
      return: "number",
    },
    RATE: {
      definition: "计算投资的每期利率",
      syntax:
        "RATE(numPeriods, payment, presentValue, [futureValue], [type], [guess])",
      parameters:
        "numPeriods: number, payment: number, presentValue: number, futureValue: number (optional), type: number (optional), guess: number (optional)",
      return: "number",
    },
    RECEIVED: {
      definition: "计算债券的实际收益",
      syntax: "RECEIVED(settlement, maturity, investment, discount, [basis])",
      parameters:
        "settlement: Date, maturity: Date, investment: number, discount: number, basis: number (optional)",
      return: "number",
    },
    REPLACE: {
      definition: "替换文本字符串中的一部分文本",
      syntax: "REPLACE(oldText, start, numChars, newText)",
      parameters:
        "oldText: string, start: number, numChars: number, newText: string",
      return: "string",
    },
    REPT: {
      definition: "重复文本字符串多次",
      syntax: "REPT(text, numberTimes)",
      parameters: "text: string, numberTimes: number",
      return: "string",
    },
    RIGHT: {
      definition: "返回文本字符串的最右侧指定字符数",
      syntax: "RIGHT(text, numChars)",
      parameters: "text: string, numChars: number",
      return: "string",
    },
    ROMAN: {
      definition: "将阿拉伯数字转换为罗马数字",
      syntax: "ROMAN(number, [form])",
      parameters: "number: number, form: number (optional)",
      return: "string",
    },
    ROUND: {
      definition: "将数值四舍五入到指定的位数",
      syntax: "ROUND(number, numDigits)",
      parameters: "number: number, numDigits: number",
      return: "number",
    },
    ROUNDDOWN: {
      definition: "向下舍入数值到指定的位数",
      syntax: "ROUNDDOWN(number, numDigits)",
      parameters: "number: number, numDigits: number",
      return: "number",
    },
    ROUNDUP: {
      definition: "向上舍入数值到指定的位数",
      syntax: "ROUNDUP(number, numDigits)",
      parameters: "number: number, numDigits: number",
      return: "number",
    },
    ROW: {
      definition: "返回包含指定单元格的行号",
      syntax: "ROW([reference])",
      parameters: "reference: Range (optional)",
      return: "number",
    },
    ROWS: {
      definition: "返回指定范围内的行数",
      syntax: "ROWS(array)",
      parameters: "array: Range",
      return: "number",
    },
    RSQ: {
      definition: "计算给定数据集的 R 平方值",
      syntax: "RSQ(knownY, knownX)",
      parameters: "knownY: Range, knownX: Range",
      return: "number",
    },
    SEARCH: {
      definition: "在文本字符串中查找子字符串的位置",
      syntax: "SEARCH(findText, withinText, [start])",
      parameters:
        "findText: string, withinText: string, start: number (optional)",
      return: "number",
    },
    SECOND: {
      definition: "返回包含指定日期或时间的秒数",
      syntax: "SECOND(serialNumber)",
      parameters: "serialNumber: Date",
      return: "number",
    },
    SERIESSUM: {
      definition: "计算幂级数的和",
      syntax: "SERIESSUM(x, n, m, coefficients)",
      parameters: "x: number, n: number, m: number, coefficients: Range",
      return: "number",
    },
    SIGN: {
      definition: "返回数值的符号",
      syntax: "SIGN(number)",
      parameters: "number: number",
      return: "number",
    },
    SIN: {
      definition: "返回给定角度的正弦值",
      syntax: "SIN(angle)",
      parameters: "angle: number",
      return: "number",
    },
    SINH: {
      definition: "返回给定角度的双曲正弦值",
      syntax: "SINH(angle)",
      parameters: "angle: number",
      return: "number",
    },
    SKEW: {
      definition: "计算一组数据的偏度",
      syntax: "SKEW(range)",
      parameters: "range: Range",
      return: "number",
    },
    SLN: {
      definition: "计算固定资产的直线折旧",
      syntax: "SLN(cost, salvage, life)",
      parameters: "cost: number, salvage: number, life: number",
      return: "number",
    },
    SLOPE: {
      definition: "计算线性回归线的斜率",
      syntax: "SLOPE(knownY, knownX)",
      parameters: "knownY: Range, knownX: Range",
      return: "number",
    },
    SMALL: {
      definition: "返回一组数值中第 k 小的值",
      syntax: "SMALL(array, k)",
      parameters: "array: Range, k: number",
      return: "number",
    },
    SQRT: {
      definition: "返回给定数值的平方根",
      syntax: "SQRT(number)",
      parameters: "number: number",
      return: "number",
    },
    SQRTPI: {
      definition: "返回给定数值乘以 π 的平方根",
      syntax: "SQRTPI(number)",
      parameters: "number: number",
      return: "number",
    },
    STANDARDIZE: {
      definition: "标准化给定数值",
      syntax: "STANDARDIZE(x, mean, standardDev)",
      parameters: "x: number, mean: number, standardDev: number",
      return: "number",
    },
    "STDEV.P": {
      definition: "计算总体的标准偏差",
      syntax: "STDEV.P(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    "STDEV.S": {
      definition: "计算样本的标准偏差",
      syntax: "STDEV.S(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    STDEVA: {
      definition: "计算包含数值和逻辑值的样本的标准偏差",
      syntax: "STDEVA(value1, value2, ...)",
      parameters: "value1: number/logical, value2: number/logical, ...",
      return: "number",
    },
    STDEVP: {
      definition: "计算总体的标准偏差",
      syntax: "STDEVP(value1, value2, ...)",
      parameters: "value1: number/logical, value2: number/logical, ...",
      return: "number",
    },
    STDEVPA: {
      definition: "计算包含数值和逻辑值的总体的标准偏差",
      syntax: "STDEVPA(value1, value2, ...)",
      parameters: "value1: number/logical, value2: number/logical, ...",
      return: "number",
    },
    STEYX: {
      definition: "计算与线性回归线的 Y 值的预测值之间的标准误差",
      syntax: "STEYX(knownY, knownX)",
      parameters: "knownY: Range, knownX: Range",
      return: "number",
    },
    SUBSTITUTE: {
      definition: "在文本字符串中替换指定的文本",
      syntax: "SUBSTITUTE(text, oldText, newText, [instanceNum])",
      parameters:
        "text: string, oldText: string, newText: string, instanceNum: number (optional)",
      return: "string",
    },
    SUBTOTAL: {
      definition: "使用指定的聚合函数计算指定范围的子总计",
      syntax: "SUBTOTAL(functionNum, range1, [range2], ...)",
      parameters:
        "functionNum: number, range1: Range, range2: Range (optional), ...",
      return: "number",
    },
    SUM: {
      definition: "计算一组数值的和",
      syntax: "SUM(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    SUMIF: {
      definition: "根据指定的条件对一组数值进行求和",
      syntax: "SUMIF(range, criteria, [sumRange])",
      parameters:
        "range: Range, criteria: string/number/boolean, sumRange: Range (optional)",
      return: "number",
    },
    SUMIFS: {
      definition: "根据多个条件对一组数值进行求和",
      syntax:
        "SUMIFS(sumRange, criteriaRange1, criteria1, [criteriaRange2, criteria2], ...)",
      parameters:
        "sumRange: Range, criteriaRange1: Range, criteria1: string/number/boolean, criteriaRange2: Range (optional), criteria2: string/number/boolean (optional), ...",
      return: "number",
    },
    SUMPRODUCT: {
      definition: "计算一组数组的逐元素乘积的和",
      syntax: "SUMPRODUCT(array1, array2, ...)",
      parameters: "array1: Range, array2: Range, ...",
      return: "number",
    },
    SUMSQ: {
      definition: "计算一组数值的平方和",
      syntax: "SUMSQ(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    SYD: {
      definition: "计算固定资产的年限总和折旧",
      syntax: "SYD(cost, salvage, life, period)",
      parameters: "cost: number, salvage: number, life: number, period: number",
      return: "number",
    },
    T: {
      definition: "将数值或布尔值转换为文本",
      syntax: "T(value)",
      parameters: "value: number/boolean",
      return: "string",
    },
    TAN: {
      definition: "返回给定角度的正切值",
      syntax: "TAN(angle)",
      parameters: "angle: number",
      return: "number",
    },
    TANH: {
      definition: "返回给定角度的双曲正切值",
      syntax: "TANH(angle)",
      parameters: "angle: number",
      return: "number",
    },
    TBILLEQ: {
      definition: "计算根据贴现率和到期日得到的国库券的当期收益率",
      syntax: "TBILLEQ(settlement, maturity, discount)",
      parameters: "settlement: Date, maturity: Date, discount: number",
      return: "number",
    },
    TBILLPRICE: {
      definition: "计算给定贴现率的国库券的价格",
      syntax: "TBILLPRICE(settlement, maturity, discount)",
      parameters: "settlement: Date, maturity: Date, discount: number",
      return: "number",
    },
    TBILLYIELD: {
      definition: "计算给定价格的国库券的收益率",
      syntax: "TBILLYIELD(settlement, maturity, price)",
      parameters: "settlement: Date, maturity: Date, price: number",
      return: "number",
    },
    TEXT: {
      definition: "将数值或日期格式化为文本",
      syntax: "TEXT(value, formatText)",
      parameters: "value: number/Date, formatText: string",
      return: "string",
    },
    TIME: {
      definition: "返回给定小时、分钟和秒数的时间值",
      syntax: "TIME(hour, minute, second)",
      parameters: "hour: number, minute: number, second: number",
      return: "Date",
    },
    TIMEVALUE: {
      definition: "将文本时间转换为时间值",
      syntax: "TIMEVALUE(timeText)",
      parameters: "timeText: string",
      return: "Date",
    },
    TODAY: {
      definition: "返回当前日期",
      syntax: "TODAY()",
      return: "Date",
    },
    TRANSPOSE: {
      definition: "将行向量转置为列向量，或将列向量转置为行向量",
      syntax: "TRANSPOSE(array)",
      parameters: "array: Range",
      return: "array",
    },
    TRIM: {
      definition: "删除文本字符串中多余的空格",
      syntax: "TRIM(text)",
      parameters: "text: string",
      return: "string",
    },
    TRIMMEAN: {
      definition: "计算一组数据的修剪平均值",
      syntax: "TRIMMEAN(range, percent)",
      parameters: "range: Range, percent: number",
      return: "number",
    },
    TRUE: {
      definition: "返回逻辑值 TRUE",
      syntax: "TRUE()",
      return: "boolean",
    },
    TRUNC: {
      definition: "截断数值到指定的位数",
      syntax: "TRUNC(number, numDigits)",
      parameters: "number: number, numDigits: number",
      return: "number",
    },
    TTEST: {
      definition: "计算两组数据之间的 t 检验结果",
      syntax: "TTEST(array1, array2, tails, type)",
      parameters:
        "array1: Range, array2: Range, tails: number, type: number (optional)",
      return: "number",
    },
    TYPE: {
      definition: "返回值的类型",
      syntax: "TYPE(value)",
      parameters: "value: any",
      return: "number",
    },
    UNICHAR: {
      definition: "根据 Unicode 值返回字符",
      syntax: "UNICHAR(number)",
      parameters: "number: number",
      return: "string",
    },
    UNICODE: {
      definition: "返回指定字符的 Unicode 值",
      syntax: "UNICODE(text)",
      parameters: "text: string",
      return: "number",
    },
    UPPER: {
      definition: "将文本字符串转换为大写",
      syntax: "UPPER(text)",
      parameters: "text: string",
      return: "string",
    },
    VALUE: {
      definition: "将文本字符串转换为数值",
      syntax: "VALUE(text)",
      parameters: "text: string",
      return: "number",
    },
    "VAR.P": {
      definition: "计算总体的方差",
      syntax: "VAR.P(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    "VAR.S": {
      definition: "计算样本的方差",
      syntax: "VAR.S(number1, number2, ...)",
      parameters: "number1: number, number2: number, ...",
      return: "number",
    },
    VARA: {
      definition: "计算包含数值和逻辑值的样本的方差",
      syntax: "VARA(value1, value2, ...)",
      parameters: "value1: number/logical, value2: number/logical, ...",
      return: "number",
    },
    VARP: {
      definition: "计算总体的方差",
      syntax: "VARP(value1, value2, ...)",
      parameters: "value1: number/logical, value2: number/logical, ...",
      return: "number",
    },
    VARPA: {
      definition: "计算包含数值和逻辑值的总体的方差",
      syntax: "VARPA(value1, value2, ...)",
      parameters: "value1: number/logical, value2: number/logical, ...",
      return: "number",
    },
    VDB: {
      definition: "计算指定期间内的折旧值",
      syntax:
        "VDB(cost, salvage, life, startPeriod, endPeriod, [factor], [noSwitch])",
      parameters:
        "cost: number, salvage: number, life: number, startPeriod: number, endPeriod: number, factor: number (optional), noSwitch: boolean (optional)",
      return: "number",
    },
    VLOOKUP: {
      definition: "根据指定的值在某个范围内查找并返回相应的值",
      syntax: "VLOOKUP(lookupValue, range, index, [isSorted])",
      parameters:
        "lookupValue: any, range: Range, index: number, isSorted: boolean (optional)",
      return: "any",
    },
    WEEKDAY: {
      definition: "返回给定日期的星期几",
      syntax: "WEEKDAY(date, [returnType])",
      parameters: "date: Date, returnType: number (optional)",
      return: "number",
    },
    WEIBULL: {
      definition: "计算 Weibull 分布的密度函数值",
      syntax: "WEIBULL(x, alpha, beta, cumulative)",
      parameters: "x: number, alpha: number, beta: number, cumulative: boolean",
      return: "number",
    },
    WORKDAY: {
      definition: "返回从指定日期开始经过指定工作日数量后的日期",
      syntax: "WORKDAY(startDate, numDays, [holidays])",
      parameters:
        "startDate: Date, numDays: number, holidays: Range (optional)",
      return: "Date",
    },
    XIRR: {
      definition: "计算不规则现金流的内部收益率",
      syntax: "XIRR(cashFlow, dates, [guess])",
      parameters: "cashFlow: Range, dates: Range, guess: number (optional)",
      return: "number",
    },
    XNPV: {
      definition: "计算不规则现金流的净现值",
      syntax: "XNPV(rate, cashFlow, dates)",
      parameters: "rate: number, cashFlow: Range, dates: Range",
      return: "number",
    },
    YEAR: {
      definition: "返回给定日期的年份",
      syntax: "YEAR(date)",
      parameters: "date: Date",
      return: "number",
    },
    YEARFRAC: {
      definition: "计算两个日期之间的年份差值",
      syntax: "YEARFRAC(startDate, endDate, [basis])",
      parameters: "startDate: Date, endDate: Date, basis: number (optional)",
      return: "number",
    },
    YIELD: {
      definition: "计算固定利率证券的收益率",
      syntax:
        "YIELD(settlement, maturity, rate, pr, redemption, [frequency], [basis])",
      parameters:
        "settlement: Date, maturity: Date, rate: number, pr: number, redemption: number, frequency: number (optional), basis: number (optional)",
      return: "number",
    },
    YIELDDISC: {
      definition: "计算贴现证券的收益率",
      syntax: "YIELDDISC(settlement, maturity, price, redemption, [basis])",
      parameters:
        "settlement: Date, maturity: Date, price: number, redemption: number, basis: number (optional)",
      return: "number",
    },
    YIELDMAT: {
      definition: "计算到期付息证券的收益率",
      syntax: "YIELDMAT(settlement, maturity, issue, rate, price, [basis])",
      parameters:
        "settlement: Date, maturity: Date, issue: Date, rate: number, price: number, basis: number (optional)",
      return: "number",
    },
    "Z.TEST": {
      definition: "计算正态分布的 z 检验结果",
      syntax: "Z.TEST(range, [mu], [sigma])",
      parameters:
        "range: Range, mu: number (optional), sigma: number (optional)",
      return: "number",
    },
  },
  moment: {
    moment: {
      definition: "JavaScript 日期处理类库",
      syntax: "moment([date], [format], [strict])",
      parameters:
        "[date]: string/Date/moment/momentInput/undefined, [format]: string/boolean/undefined, [strict]: boolean/undefined",
      return: "Moment",
      demo: "const now = moment();<br/>const date = moment('2022-01-01', 'YYYY-MM-DD');<br/>console.log(now.format('YYYY-MM-DD')); // Output: current date<br/>console.log(date.format('YYYY-MM-DD')); // Output: 2022-01-01",
    }
  },
  SQL: {
    SELECT: {
      definition: "从数据库中检索数据。",
      demo: "SELECT * FROM employees;",
    },
    INSERT: {
      definition: "将新数据插入数据库表。",
      demo: "INSERT INTO customers (name, email) VALUES ('John Doe', 'john@example.com');",
    },
    UPDATE: {
      definition: "更新数据库表中的现有数据。",
      demo: "UPDATE products SET price = 20 WHERE category = 'Electronics';",
    },
    DELETE: {
      definition: "从数据库表中删除数据。",
      demo: "DELETE FROM orders WHERE order_date < '2023-01-01';",
    },
    CREATE: {
      definition: "创建新的数据库对象，如表、视图等。",
      demo: "CREATE TABLE users (id INT PRIMARY KEY, username VARCHAR(255));",
    },
    ALTER: {
      definition: "修改现有的数据库对象，如表结构。",
      demo: "ALTER TABLE products ADD COLUMN description TEXT;",
    },
    DROP: {
      definition: "删除数据库对象，如表、视图等。",
      demo: "DROP TABLE customers;",
    },
    JOIN: {
      definition: "在多个表之间根据关联条件联接数据。",
      demo: "SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;",
    },
    WHERE: {
      definition: "指定检索条件，过滤数据库中的数据。",
      demo: "SELECT * FROM products WHERE price > 50;",
    },
    'ORDER BY': {
      definition: "按指定的列对检索结果进行排序。",
      demo: "SELECT * FROM employees ORDER BY last_name, first_name;",
    },
    'GROUP BY': {
      definition: "将结果集按指定的列分组，通常与聚合函数一起使用。",
      demo: "SELECT department, AVG(salary) FROM employees GROUP BY department;",
    },
    HAVING: {
      definition: "在GROUP BY之后，过滤分组后的数据。",
      demo: "SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;",
    },
    COUNT: {
      definition: "统计满足条件的行数或非重复值的数量。",
      demo: "SELECT COUNT(*) FROM orders;",
    },
    SUM: {
      definition: "计算指定列的数值总和。",
      demo: "SELECT SUM(price) FROM products;",
    },
    AVG: {
      definition: "计算指定列的数值平均值。",
      demo: "SELECT AVG(age) FROM students;",
    },
    MAX: {
      definition: "找出指定列的最大值。",
      demo: "SELECT MAX(salary) FROM employees;",
    },
    MIN: {
      definition: "找出指定列的最小值。",
      demo: "SELECT MIN(population) FROM cities;",
    },
    BETWEEN: {
      definition: "判断某个值是否在指定的范围之间。",
      demo: "SELECT * FROM products WHERE price BETWEEN 10 AND 50;",
    },
    LIKE: {
      definition: "用于模糊匹配，通常与通配符一起使用。",
      demo: "SELECT * FROM customers WHERE name LIKE 'John%';",
    },
    IN: {
      definition: "判断某个值是否在一组值之中。",
      demo: "SELECT * FROM products WHERE category IN ('Electronics', 'Clothing');",
    },
    NOT: {
      definition: "否定一个条件。",
      demo: "SELECT * FROM students WHERE NOT grade = 'A';",
    },
    EXISTS: {
      definition: "判断子查询是否返回结果。",
      demo: "SELECT name FROM employees WHERE EXISTS (SELECT * FROM orders WHERE orders.employee_id = employees.id);",
    },
    UNION: {
      definition: "将多个查询结果集合并为一个结果集。",
      demo: "SELECT product_name FROM products_2022 UNION SELECT product_name FROM products_2023;",
    },
    DISTINCT: {
      definition: "去除查询结果中的重复行。",
      demo: "SELECT DISTINCT category FROM products;",
    },
    AS: {
      definition: "为列或表起别名，用于提高查询可读性。",
      demo: "SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM employees;",
    },
    'INNER JOIN': {
      definition: "返回两个表中匹配的行。",
      demo: "SELECT * FROM customers INNER JOIN orders ON customers.id = orders.customer_id;",
    },
    'LEFT JOIN': {
      definition: "返回左侧表中的所有行和右侧表中匹配的行。",
      demo: "SELECT * FROM departments LEFT JOIN employees ON departments.id = employees.department_id;",
    },
    'RIGHT JOIN': {
      definition: "返回右侧表中的所有行和左侧表中匹配的行。",
      demo: "SELECT * FROM employees RIGHT JOIN orders ON employees.id = orders.employee_id;",
    },
    'FULL JOIN': {
      definition: "返回两个表中的所有行，并在不匹配时填充NULL值。",
      demo: "SELECT * FROM students FULL JOIN scores ON students.id = scores.student_id;",
    },
    ON: {
      definition: "指定联接条件。",
      demo: "SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;",
    },
    AS: {
      definition: "为列或表起别名，用于提高查询可读性。",
      demo: "SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM employees;",
    },
    NULL: {
      definition: "表示未知值或缺失数据。",
      demo: "SELECT * FROM customers WHERE email IS NULL;",
    },
    IS: {
      definition: "用于比较值是否是某种特定值，通常与NULL一起使用。",
      demo: "SELECT * FROM orders WHERE status IS NOT NULL;",
    },
    LIMIT: {
      definition: "限制返回的结果行数。",
      demo: "SELECT * FROM products LIMIT 10;",
    },
    OFFSET: {
      definition: "指定返回结果的起始行位置。",
      demo: "SELECT * FROM employees LIMIT 5 OFFSET 10;",
    },
    TOP: {
      definition: "在某些数据库中，限制返回的结果行数。",
      demo: "SELECT TOP 5 * FROM orders;",
    },
    DISTINCTROW: {
      definition: "仅在某些数据库中，去除查询结果中的重复行。",
      demo: "SELECT DISTINCTROW category FROM products;",
    },
    AS: {
      definition: "为列或表起别名，用于提高查询可读性。",
      demo: "SELECT first_name AS 'First Name', last_name AS 'Last Name' FROM employees;",
    },
    JOIN: {
      definition: "在多个表之间根据关联条件联接数据。",
      demo: "SELECT * FROM orders JOIN customers ON orders.customer_id = customers.id;",
    },
    WHERE: {
      definition: "指定检索条件，过滤数据库中的数据。",
      demo: "SELECT * FROM products WHERE price > 50;",
    },
    'ORDER BY': {
      definition: "按指定的列对检索结果进行排序。",
      demo: "SELECT * FROM employees ORDER BY last_name, first_name;",
    },
    'GROUP BY': {
      definition: "将结果集按指定的列分组，通常与聚合函数一起使用。",
      demo: "SELECT department, AVG(salary) FROM employees GROUP BY department;",
    },
    HAVING: {
      definition: "在GROUP BY之后，过滤分组后的数据。",
      demo: "SELECT department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 50000;",
    }
  }
};

const createDescription = (doc, type, name) => {
  const item = doc && doc[type] && doc[type][name]
  return item ? <>
    <div className="detail-item-title">定义</div>
    <div className="detail-item">{item.definition}</div>
    {
      item.syntax ? <>
        <div className="detail-item-title">语法</div>
        <div className="detail-item">{item.syntax}</div>
      </> : null
    }
    {
      item.syntax ? <>
        <div className="detail-item-title">参数</div>
        <div className="detail-item">{item.parameters}</div>
      </> : null
    }
    {
      item.syntax ? <>
        <div className="detail-item-title">返回</div>
        <div className="detail-item">{item.return}</div>
      </> : null
    }
    {
      item.demo ? <>
        <div className="detail-item-title">例子</div>
        <div className="detail-item"><code dangerouslySetInnerHTML={{__html: item.demo}} ></code></div>
      </> : null
    }
  </>: null
}

export { createDescription }

export default doc

