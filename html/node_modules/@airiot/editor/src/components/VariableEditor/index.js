import React from 'react'
import { RecoilRoot, useRecoilValue, useSetRecoilState } from 'recoil'
import useStore from './hooks/useStore'
import MainEditor from './components/MainEditor'
import VariableDlg from './components/VariableDlg'
import { keyAtom } from './store'
import { randomString } from './utils'

// 整体效果
const VariableEditor = (props) => {
  const { rootRef, style, schema, data, value, hasPanel=true, onChange, onSelectVarAndFun, onExpected, panelWidth, select, panelVisible, panelTargetRef, hasLoading, limit, nodeType, stringify, funcExt=['formulajs', 'lodash', 'Math', 'moment'], attrExt=[], isModal, modalVisible, onModalCancel, isFormula, customStringify, querySchema, notfocusedShow } = props

  const setKey = useSetRecoilState(keyAtom)

  useStore({ schema, funcExt, attrExt, value, data, select, hasLoading, nodeType, limit,  onExpected, onSelectVarAndFun, isFormula, stringify })

  const onForceChange = (value, type) => {
    onChange(value)
    setKey(randomString(12))
  }

  return isModal ? (
    <VariableDlg
      visible={modalVisible}
      value={value}
      onChange={onChange}
      onCancel={onModalCancel} 
      onForceChange={onForceChange}
      customStringify={customStringify}
      querySchema={querySchema}
    ></VariableDlg>
  ) : (
    <MainEditor
      rootRef={rootRef}
      style={style}
      value={value}
      hasPanel={hasPanel}
      onChange={onChange}
      onForceChange={onForceChange}
      panelWidth={panelWidth}
      select={select} 
      panelVisible={panelVisible}
      panelTargetRef={panelTargetRef}
      stringify={stringify}
      customStringify={customStringify}
      querySchema={querySchema}
      notfocusedShow={notfocusedShow}
    ></MainEditor>
  )
}

const VariableEditorWrap = React.forwardRef((props, rootRef) => {
  return (
    <RecoilRoot>
      <VariableEditor {...props} rootRef={props.rootRef || rootRef}></VariableEditor>
    </RecoilRoot>
  )
})

export default VariableEditorWrap
