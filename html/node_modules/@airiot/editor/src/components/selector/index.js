/**
 * 编辑器下方函辅助函数组件
 */
import React, { Component } from "react";
import PropTypes from "prop-types";
import { List, Tree } from "antd";
import { Icon } from 'xadmin-ui';
import "./index.less";

const { TreeNode } = Tree;
const SvgColor = '#1296DB';
const FuncSvg = () => (
  <svg t="1575131111812" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="987" width="16" height="16">
    <path d="M665.6 225.706667c-46.933333-4.266667-88.32 30.293333-92.586667 77.653333L562.346667 426.666667H682.666667v85.333333h-128l-18.773334 216.32a170.069333 170.069333 0 0 1-184.746666 154.88 170.965333 170.965333 0 0 1-130.56-79.786667l64-64c10.24 31.573333 38.4 55.893333 73.813333 58.88 46.933333 4.266667 88.32-30.293333 92.586667-77.653333L469.333333 512H341.333333v-85.333333h135.253334l11.52-130.986667c8.106667-93.866667 90.88-163.413333 184.746666-154.88 55.893333 4.693333 102.826667 35.84 130.56 79.786667l-64 64c-10.24-31.573333-38.4-55.893333-73.813333-58.88z" fill={SvgColor} p-id="988"></path>
    </svg>
);
const OperatorSvg = () => (
  <svg t="1575132175224" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1847" width="16" height="16">
    <path d="M928 256a32 32 0 1 0 0-64v64z m-256-64a32 32 0 1 0 0 64V192z m256 608a32 32 0 1 0 0-64v64z m-256-64a32 32 0 1 0 0 64v-64zM416 256a32 32 0 1 0 0-64v64zM96 192a32 32 0 0 0 0 64V192z m192-128a32 32 0 0 0-64 0h64zM224 384a32 32 0 1 0 64 0H224z m137.376 534.624a32 32 0 0 0 45.248-45.248l-45.248 45.248z m-210.752-301.248a32 32 0 0 0-45.248 45.248l45.248-45.248z m256 45.248a32 32 0 0 0-45.248-45.248l45.248 45.248z m-301.248 210.752a32 32 0 1 0 45.248 45.248l-45.248-45.248zM928 192h-256v64h256V192z m0 544h-256v64h256v-64zM416 192H96v64h320V192zM224 64v320h64V64H224z m182.624 809.376l-256-256-45.248 45.248 256 256 45.248-45.248z m-45.248-256l-256 256 45.248 45.248 256-256-45.248-45.248zM800 640v64a64 64 0 0 0 64-64h-64z m0 0h-64a64 64 0 0 0 64 64v-64z m0 0v-64a64 64 0 0 0-64 64h64z m0 0h64a64 64 0 0 0-64-64v64z m0 256v64a64 64 0 0 0 64-64h-64z m0 0h-64a64 64 0 0 0 64 64v-64z m0 0v-64a64 64 0 0 0-64 64h64z m0 0h64a64 64 0 0 0-64-64v64z" fill={SvgColor} p-id="1849"></path>
  </svg>
);
const VarSvg = () => (
  <svg t="1575135429706" className="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="8397" width="16" height="16">
    <path d="M726.016 406.528c31.744 0 93.184-25.6 93.184-108.544s-59.392-87.04-77.824-87.04c-36.864 0-72.704 26.624-104.448 80.896C605.184 348.16 569.344 409.6 569.344 409.6h-1.024c-8.192-38.912-14.336-71.68-17.408-86.016-6.144-33.792-46.08-108.544-128-108.544S266.24 262.144 266.24 262.144c-14.336 9.216-23.552 24.576-23.552 41.984 0 27.648 22.528 50.176 50.176 50.176 8.192 0 15.36-2.048 21.504-5.12 0 0 62.464-34.816 75.776 0 4.096 10.24 7.168 22.528 11.264 34.816 16.384 53.248 30.72 116.736 43.008 174.08l-53.248 77.824s-60.416-21.504-92.16-21.504S204.8 640 204.8 722.944s59.392 87.04 77.824 87.04c36.864 0 72.704-26.624 104.448-80.896 31.744-56.32 67.584-117.76 67.584-117.76 10.24 51.2 19.456 92.16 24.576 108.544 20.48 58.368 67.584 93.184 130.048 93.184 0 0 64.512 0 140.288-43.008 18.432-7.168 31.744-25.6 31.744-46.08 0-27.648-22.528-50.176-50.176-50.176-8.192 0-15.36 2.048-21.504 5.12 0 0-54.272 30.72-72.704 6.144-13.312-25.6-24.576-58.368-32.768-99.328-8.192-36.864-17.408-79.872-25.6-121.856l54.272-78.848c1.024 0 61.44 21.504 93.184 21.504z" fill={SvgColor} p-id="8398"></path>
  </svg>
);
const IconMap = {
  'function': props => <Icon component={FuncSvg} {...props} />,
  'operator': props => <Icon component={OperatorSvg} {...props} />,
  'variable': props => <Icon component={VarSvg} {...props} />
};

export default class Selector extends Component {
  static propTypes = {
    width: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
    ]),
    height: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
    ]),
    left: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
    ]),
    top: PropTypes.oneOfType([
      PropTypes.string,
      PropTypes.number,
    ]),
    data: PropTypes.array, // [{oprateName: '' , value: [{key: '', name: '', desc:'', children: [{ key: "AVG",name: 'AVG()',desc: '平均数',example: "AVG(number, number2, ....)"}]}.....]}....]
    position: PropTypes.string,
    needHide: PropTypes.bool,
    onChange: PropTypes.func
  };

  constructor(props) {
    super(props);
    this.state = {
      firstIdx: undefined,
      secondIdx: undefined,
      secondLevelData: [],
      thirdLevelData: []
    };
  }

  /**
   *
   * @param {number} firstIdx 一级数据idx
   * @param {number} secondIdx 二级数据标题
   * @param {string} title 标题
   */
  handleFirstSelect(firstIdx, secondIdx, title) {
    if (this.props.data[firstIdx]["value"][secondIdx]["children"].length > 0) {
      // 有二级数据
      this.setState({
        firstIdx,
        secondIdx,
        secondLevelTitle: title,
        secondLevelData: this.props.data[firstIdx]["value"][secondIdx][
          "children"
        ]
      });
    } else {
      this.handleChooseOprate(this.props.data[firstIdx]["value"][secondIdx]);
    }
  }

  /**
   * 处理选中的数据
   * @param {object} item
   */
  handleChooseOprate(key, info) {
    const selectItem = info?.selectedNodes[0]?.data;
    this.props.onChange && this.props.onChange(selectItem);
  }

  render() {
    const loop = (data) => {
      return data.map((item) => {
        let desc = item.name;
        if (item.desc) {
          desc = <span style={{ width: 280, overflow: 'hidden', display: 'inline-block', textOverflow: 'ellipsis' }}>
            {item.name}<span className="item-desc">（{item.desc}）</span>
          </span>;
        }
        if (item.children && item.children.length) {
          return (
            <TreeNode
              key={item.key}
              title={desc}
              selectable={false}
              icon={<Icon type="unordered-list" style={{color: SvgColor}}/>}
            >
              {loop(item.children)}
            </TreeNode>
          );
        }
        let CustIcon = IconMap[item.type];
        return (
          <TreeNode
            key={item.key}
            title={desc}
            data={item}
            icon={<CustIcon />}
          />
        );
      });
    }
    return (
      <div
        className="selector-wrapper code-editor-select"
        style={{
          width: this.props.width,
          left: this.props.left,
          top: this.props.top,
          position: this.props.position
        }}
      >
        <div className="selector">
          <List
            itemLayout="horizontal"
            dataSource={this.props.data}
            size="small"
            split={false}
            renderItem={(item, firstIdx) => {
              return (
                <div key={item.name}>
                  <h5 className="name">{item.oprateName}</h5>
                  {item.value.map((valueItem, secondIdx) => {
                    return valueItem?.children?.length > 0 ? (
                      <List.Item
                        key={valueItem.name}
                        onClick={this.handleFirstSelect.bind(
                          this,
                          firstIdx,
                          secondIdx,
                          valueItem.name
                        )}
                      >
                        <List.Item.Meta
                          title={valueItem.name}
                          className="name"
                        />
                        {valueItem?.children?.length > 0 && (
                          <span className="desc">
                            {valueItem.desc}
                            <Icon type="right" className="right-icon" />
                          </span>
                        )}
                      </List.Item>
                    ) : null;
                  }) }
                </div>
              );
            }}
          />
        </div>
        {this.state.secondLevelData.length > 0 ? (
          <div className="selector subselector">
            <Tree
              showIcon
              defaultExpandedKeys={["0-0-0"]}
              onSelect={this.handleChooseOprate.bind(this)}
            >
              {loop(this.state.secondLevelData)}
            </Tree>
          </div>
        ) : this.props.needHide ? (
          ""
        ) : (
          <div className="selector subselector" />
        )}
      </div>
    );
  }
}
