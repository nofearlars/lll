/**
 * Field Types Available for Usage to Build JSON Logic Expressions
 *
 * ANY:       Consists of dropdown and selects its children fields.
 * Input:     Basic HTML input with type selection.
 * Accessor:  Data accessor field ("var" operator in JSON Logic)
 */
export const FIELD_TYPES = {
  ANY: require('./components/Any'),
  INPUT: require('./components/Input'),
  ACCESSOR: require('./components/Accessor'),
  HIGHER_ORDER: require('./components/HigherOrder')
}

/**
 * Operators Available for Usage to Build JSON Logic Expressions.
 *
 * - signature
 *   Signature of the operator.
 *
 * - label
 *   Visible name of the operator.
 *
 * - fields
 *   Child fields that operator's structure constists of.
 *
 * - notAvailableUnder
 *   Array of operators that wont be able to render this operator as its child field.
 */
export const OPERATORS = [
  {
    type: 'Accessor',
    signature: 'var',
    label: _r('参数'),
    fields: [ FIELD_TYPES.ACCESSOR ],
    notAvailableUnder: [ 'master' ],
    fieldCount: {
      min: 1,
      max: 1
    }
  },
  // {
  //   type: 'Accessor',
  //   signature: 'varrate',
  //   label: '数据变化率',
  //   fields: [ FIELD_TYPES.ACCESSOR ],
  //   notAvailableUnder: [ 'master' ],
  //   fieldCount: {
  //     min: 1,
  //     max: 1
  //   }
  // },
  {
    type: 'Value Field',
    signature: 'value',
    label: _r('数值'),
    fields: [ FIELD_TYPES.INPUT ],
    notAvailableUnder: [ 'master', 'or', 'and' ],
    fieldCount: {
      min: 1,
      max: 1
    }
  },
  // {
  //   type: 'Higher Order',
  //   signature: 'some',
  //   label: '一些',
  //   fields: [ FIELD_TYPES.HIGHER_ORDER, FIELD_TYPES.ANY ],
  //   notAvailableUnder: [],
  //   fieldCount: {
  //     min: 1,
  //     max: 10
  //   }
  // },
  // {
  //   type: 'Higher Order',
  //   signature: 'every',
  //   label: '每个',
  //   fields: [ FIELD_TYPES.HIGHER_ORDER, FIELD_TYPES.ANY ],
  //   notAvailableUnder: [],
  //   fieldCount: {
  //     min: 1,
  //     max: 10
  //   }
  // },
  // {
  //   type: 'Higher Order',
  //   signature: 'map',
  //   label: 'map',
  //   fields: [ FIELD_TYPES.HIGHER_ORDER, FIELD_TYPES.ANY ],
  //   notAvailableUnder: [],
  //   fieldCount: {
  //     min: 1,
  //     max: 10
  //   }
  // },
  // {
  //   type: 'Higher Order',
  //   signature: 'filter',
  //   label: '过滤',
  //   fields: [ FIELD_TYPES.HIGHER_ORDER, FIELD_TYPES.ANY ],
  //   notAvailableUnder: [],
  //   fieldCount: {
  //     min: 1,
  //     max: 10
  //   }
  // },
  {
    type: 'Statement',
    signature: 'or',
    label: _r('或者'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 10
    }
  },
  {
    type: 'Statement',
    signature: 'and',
    label: _r('并且'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 10
    }
  },
  {
    type: 'Logical',
    signature: '===',
    label: _r('恒等于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Logical',
    signature: '==',
    label: _r('等于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Logical',
    signature: '!=',
    label: _r('不等于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Logical',
    signature: '!==',
    label: _r('恒不等于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Logical',
    signature: '!',
    label: _r('取反'),
    fields: [ FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 1,
      max: 1
    }
  },
  {
    type: 'Numeric',
    signature: '<=',
    label: _r('小于等于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Numeric',
    signature: '>=',
    label: _r('大于等于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Numeric',
    signature: '<',
    label: _r('小于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Numeric',
    signature: '>',
    label: _r('大于'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Numeric',
    signature: '&',
    label: _r('逻辑与'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Numeric',
    signature: '|',
    label: _r('逻辑或'),
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Arithmetic',
    signature: '+',
    label: '+',
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [ ],
    fieldCount: {
      min: 1,
      max: 100
    }
  },
  {
    type: 'Arithmetic',
    signature: '-',
    label: '-',
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [ ],
    fieldCount: {
      min: 1,
      max: 2
    }
  },
  {
    type: 'Arithmetic',
    signature: '*',
    label: '*',
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [ ],
    fieldCount: {
      min: 2,
      max: 100
    }
  },
  {
    type: 'Arithmetic',
    signature: '/',
    label: '/',
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [ ],
    fieldCount: {
      min: 2,
      max: 2
    }
  },
  {
    type: 'Arithmetic',
    signature: '%',
    label: '%',
    fields: [ FIELD_TYPES.ANY, FIELD_TYPES.ANY ],
    notAvailableUnder: [ ],
    fieldCount: {
      min: 2,
      max: 2
    }
  }
]
