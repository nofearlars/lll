/**
 * Input Field
 *
 * This can be considered as a free entry field which contains logic about the type of its content.
 *
 * - onChange: Returns the latest part of the expression rendered by this component. Used by its
 * parent (and grand parents) to complete structure, part by part.
 *
 * - value: Value of the field, passed from its parent.
 *
 * - type: Type of the field, will be determined with respect to the `typeof` result of the value.
 */

// Core
import React from 'react'
import PropTypes from 'prop-types'
import { Select, Input as AntInput, InputNumber } from 'antd'

// Helpers
import _ from 'lodash'

// Constants
const INPUT_TYPES = ['number', 'text'] // @TODO: Add Date!
const INPUT_TYPES_LABEL = ['数字', '文本']

// Helpers
const isNumeric = value => typeof value === 'number'
const getType = (value) => {
  if (isNumeric(value) || value == undefined || value == null) {
    return 'number'
  } else {
    return 'text'
  }
}

// PropTypes
const { any, string, func } = PropTypes
const propTypes = {
  name: string,
  onChange: func.isRequired,
  value: any,
  type: string
}

const defaultProps = {
  name: '',
  type: INPUT_TYPES[0],
  value: ''
}

const Input = ({ name, value = [], onChange }) => {
  const [type, setType] = React.useState(getType(value))

  React.useEffect(() => {
    const newType = getType(value)
    if (newType != type) {
      setType(newType)
    }

  }, [JSON.stringify(value)])

  const onTypeChange = (type) => {
    if (type === 'number') {
      value = value && parseFloat(value)
    } else {
      value = value.toString()
    }
    setType(type)
    onChange(value)
  }

  const onValueChange = (e) => {
    let value = e?.target?.value
    if (_.isObject(e)) {
      value = e?.target?.value
    } else {
      value = e || 0
    }
    if (type === 'number') {
      value = isNaN(parseFloat(value)) ? 0 : parseFloat(value)
    }
    onChange(value)
  }


  const prop = {
    style: { width: 200 },
    name, value, onChange: onValueChange
  }
  return (
    <div style={{ display: 'flex' }}>
      <div style={{}}>
        <Select
          style={{ width: 100 }}
          allowClear={false}
          value={type || undefined}
          placeholder="请选择..."
          onChange={onTypeChange}
        >
          {INPUT_TYPES.map((inputType, i) => (
            <Select.Option value={inputType}>{INPUT_TYPES_LABEL[i] || inputType}</Select.Option>
          ))}
        </Select>
      </div>

      <div style={{ marginLeft: '.5rem' }}>
        {type == 'number' ? <InputNumber {...prop} /> : <AntInput {...prop} />}
      </div>
    </div>
  )
}

export default Input
