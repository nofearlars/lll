import React from 'react'
import { app } from 'xadmin'
import { Page, C } from 'xadmin-ui'
import { Card, Row, Col } from 'antd'
import apiBuilder from 'raw-loader!./apiDocEditor/api/api.js'
import dasBuilder from 'raw-loader!./apiDocEditor/api/dashboardApi.js'
import DocModal from './apiDocEditor/DocModal'
import { getFormatStr, mergeCells, mergeCellsForTree } from './apiDocEditor/util'
import DashboardTree from './apiDocEditor/DashboardTree'
import _ from 'lodash'
import API from './apiDocEditor/api/api'

const code2 = `let a = '123';
let b = () => {
  return 'OK'
}
Math.pow(2, 3);
`

function processSize(size) {
  return !/^\d+$/.test(size.toString()) ? size : `${size}px`;
}

const ApiDocEditor = props => {
  const [value, setValue] = React.useState(code2)
  const editor = React.useRef(null)
  const monaco = React.useRef(null)

  const insertFormulaCompletion = text => {
    if (!text || text.length === 0) {
      return
    }
    let line = editor.current.getPosition()
    let selectionStartNum = line.column + text.length

    // get value
    var model = editor.current.getModel()
    var partOfTheText = model.getValueInRange({
      startLineNumber: line.lineNumber,
      startColumn: line.column,
      endLineNumber: line.lineNumber,
      endColumn: line.column + text.length
    })

    // 保证选区内的text不被删除
    text = text + partOfTheText

    let range = new monaco.current.Range(
      line.lineNumber,
      line.column,
      line.lineNumber,
      selectionStartNum
    )
    // var range =  editor.current.getVisibleRanges();
    let id = {
      major: 1,
      minor: 1
    }
    let op = {
      identifier: id,
      range: range,
      text: text,
      forceMoveMarkers: true
    }
    editor.current.executeEdits('my-source', [op])
    editor.current.setPosition({
      column: selectionStartNum,
      lineNumber: line.lineNumber
    })
    setTimeout(() => {
      editor.current.focus()
    }, 500)
  }

  return (
    <>
      <Row style={{ position: 'absolute', zIndex: 9999, right: 50, top: 16, ...(props.btnStyle || {}) }}>
        <Col><DocModal handleOk={insertFormulaCompletion} /></Col>
      </Row>
      <Row>
        <Col span={props.dashboardCells ? 19 : 24}>
          <C
            is='CodeEditor'
            width='100%'
            height={500}
            language='javascript'
            value={value}
            editorDidMount={(_editor, _monaco) => {
              editor.current = _editor
              monaco.current = _monaco
              // if (props.dashboardCells) {
              //   // 加载画面组件列表
              //   _monaco.languages.typescript.javascriptDefaults.addExtraLib(
              //     'let Widgets = ' + JSON.stringify(props.dashboardCells)
              //   )
              // }
              if (props.getFunctions) {
                // 加载画面组件属性及方法
                const cells = mergeCells(props.getFunctions(), props.dashboardCells)
                _monaco.languages.typescript.javascriptDefaults.addExtraLib(
                  'let Widgets = ' + JSON.stringify(cells).replace(/\"\(\)\ \=\>\ \{\}\"/g, '() => {}')
                )
              }
              _monaco.languages.typescript.javascriptDefaults.addExtraLib(
                getFormatStr(apiBuilder)
              )
              _monaco.languages.typescript.javascriptDefaults.addExtraLib(
                getFormatStr(dasBuilder)
              )
            }}
            defaultValue={`/** 这里要填写CSS **/`}
            onChange={() => {}}
            {...props}
          />
        </Col>
        {
          !_.isEmpty(props.dashboardCells) && (
            <Col span={5} style={{
              maxHeight: props.height ? processSize(props.height) : 500,
              overflowY: 'scroll'
            }}>
              <DashboardTree
                insertWidget={insertFormulaCompletion}
                dashboardCells={mergeCellsForTree(props.getFunctions(), props.dashboardCells)}
              />
            </Col>
          )
        }
      </Row>
    </>
  )
}

export default ApiDocEditor
