import React from 'react'
import * as monaco from 'monaco-editor'

// Since packaging is done by you, you need
// to instruct the editor how you named the
// bundles that contain the web workers.
self.MonacoEnvironment = {
  getWorkerUrl: function (moduleId, label) {
    if (label === 'json') {
      return '/editor/json.worker.js';
    }
    if (label === 'css') {
      return '/editor/css.worker.js';
    }
    if (label === 'html') {
      return '/editor/html.worker.js';
    }
    if (label === 'typescript' || label === 'javascript') {
      return '/editor/ts.worker.js';
    }
    return '/editor/editor.worker.js';
  }
}
function processSize(size) {
  return !/^\d+$/.test(size.toString()) ? size : `${size}px`;
}

const CodeEditor = props => {

  const { width, height, value, defaultValue, onChange, theme, options, 
    language, overrideServices, editorWillMount, editorDidMount, onHeightChange, disableEnter } = props

  const container = React.useRef()
  const editor = React.useRef()
  const trigger = React.useRef(false)
  const onChangeRef = React.useRef(onChange)

  const fixedWidth = processSize(width);
  const fixedHeight = processSize(height);

  const style = {
    width: fixedWidth,
    height: fixedHeight,
  };

  React.useEffect(() => {
    if(container.current) {
      let opts = { ...options };
      if(editorWillMount) {
        opts = { ...opts, ...editorWillMount(monaco) }
      }
      const val = value != null ? value : defaultValue

      editor.current = monaco.editor.create(
        container.current,
        {
          value: val,
          language,
          ...opts,
          ...(theme ? { theme } : {}),
        },
        overrideServices
      );

      if(editorDidMount) {
        editorDidMount(editor.current, monaco);
      }
      const subscription = editor.current.onDidChangeModelContent((event) => {
        if(onChange && !trigger.current) {
          onChangeRef.current(editor.current.getValue(), event);
        }
        const lineHeight = document.querySelector('.view-lines').offsetHeight
        onHeightChange && onHeightChange(lineHeight)
      });

      return () => {
        if (editor.current) {
          editor.current.dispose();
          const model = editor.current.getModel();
          if (model) {
            model.dispose();
          }
        }
        if (subscription) {
          subscription.dispose();
        }
      }
    }
  }, [])

  React.useEffect(() => {
    onChangeRef.current = onChange
  }, [ onChange ])

  React.useEffect(() => {
    if(!editor.current) return

    const model = editor.current.getModel();
    if (value != null && value !== model.getValue()) {
      trigger.current = true;
      editor.current.pushUndoStop();

      model.pushEditOperations(
        [],
        [
          {
            range: model.getFullModelRange(),
            text: value,
          },
        ]
      );
      editor.current.pushUndoStop();
      trigger.current = false;
    }
  }, [ value ])

  React.useEffect(() => {
    if(!editor.current || !options) return

    const { model: _model, ...optionsWithoutModel } = options;
    editor.current.updateOptions(optionsWithoutModel);
  }, [ options ])

  React.useEffect(() => {
    if(!editor.current) return
    monaco.editor.setModelLanguage(editor.current.getModel(), language);
  }, [ language ])

  React.useEffect(() => {
    monaco.editor.setTheme(theme);
  }, [ theme ])

  React.useEffect(() => {
    if(!editor.current) return
    editor.current.layout();
  }, [ height, width ])

  React.useEffect(() => {
    editor.current.onKeyDown((event)=>{
      if(event.code === 'Enter' && disableEnter){
        event.preventDefault()
      }
    })
  }, [ disableEnter ])

  return (
    <div
      ref={container}
      style={style}
      className="monaco-editor-container"
    />
  )
}

export default CodeEditor
