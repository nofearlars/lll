/*
 * 编辑器的基础配置（自动补全，颜色）
 */
import {showAutocompletion, getCompletionItems} from './autocomplete';

// 主题配置
export const OPTIONS = {
    THEME: 'cmdb-theme',
    LANGUAGE: 'cmdb-calc'
};

// 所有的补全函数
let constantArr = [];
let pureKeyArr = [];

/**
 * 过滤掉不需要的函数
 * @param {array} needFuncs
 */
function getKeywordArr(needFuncs=[], formula=[]) {
    pureKeyArr = formula.map(item => {
        return item.children.map(childItem => {
             return childItem.key;
         })
     });
     formula.map(item => {
        item.children.map(childItem => {
            if(needFuncs.includes(childItem.key)) {
                constantArr.push({
                   key: childItem.key,
                   desc: `${item.desc}-${childItem.desc}`
                });
            }
        })
    });
}

/**
 * 编辑器自动补全区域的外观颜色配置
 * 编辑器颜色设置
 */
function setTheme(monaco) {
    let keepRegex = new RegExp(`(${pureKeyArr.join('|')})`);
    monaco.languages.setMonarchTokensProvider(OPTIONS.LANGUAGE, {
        tokenizer: {
            root: [
                [keepRegex, 'cmdb-keyword'],
                [/\w+(\.\w+)?/, 'cmdb-expr'],
                // [/\[info.*/, 'custom-info'],
                // [/\[[a-zA-Z 0-9:]+\]/, "custom-date"],
                // [/.*/, 'default'],
            ]
        }
    });
    monaco.editor.defineTheme(OPTIONS.THEME, {
        base: 'vs',
        inherit: false,
        rules: [
            { token: 'cmdb-keyword', foreground: 'ff0000' },
            { token: 'cmdb-expr', foreground: '#0000ff' },
            { token: 'default', foreground: '808080' },
            { token: 'custom-date', foreground: '008800' },
            { token: 'custom-info', foreground: 'FFA500' },
        ]
    });

}

/**
 * 自动补全处理逻辑
 * @param {object} schema 标准的jsonschema
 */
function setCompletion(schema={}, formula=[], ignoreParentKeys=[], monaco) {
    let dataDefinitions = {};
    for (let key in schema?.definitions) {
        dataDefinitions[key] = {};
        for (let prop in schema.definitions[key].properties) {
            dataDefinitions[key][prop] = schema.definitions[key].properties[prop];
        }
    }
    showAutocompletion(dataDefinitions);
    
    monaco.languages.registerCompletionItemProvider(OPTIONS.LANGUAGE, {
        provideCompletionItems: () => {
            let suggestions = constantArr.map(item => {
                const keyword = item.key;
                return {
                    label: keyword,
                    /* eslint-disable no-template-curly-in-string */
                    insertText: keyword + '()',
                    /* eslint-enable no-template-curly-in-string */
                    kind: monaco.languages.CompletionItemKind.Keyword,
                    insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,
                    detail: `${keyword}:${item.descrition}`,
                    documentation: `${keyword}:${item.description}`,
                }
            });
            return { suggestions: suggestions };
        }
    });
}

/**
 * 设置编辑器Hover上去的自动提示
 * @param {object} schema JsonSchema
 */
function setHover(schema={}, formula=[], monaco) {
    let keywordsMap = {}, schemaMap = {};
    for (let category of formula) {
        for (let child of category.children) {
            keywordsMap[child.key] = child.example;
        }
    }
    for (let tableName in schema.definitions) {
        schemaMap[tableName] = schema.definitions[tableName].description || tableName;
        let properties = schema.definitions[tableName].properties;
        for (let rowName in properties) {
            let info = properties[rowName];
            schemaMap[rowName] = info.description
                || `名称：${tableName}.${rowName}, 类型：${info.type || '未知'}, example: ${info.example || '无'}`;
        }
    }
    monaco.languages.registerHoverProvider(OPTIONS.LANGUAGE, {
        provideHover: function (model, position) {
            var word = model.getWordAtPosition(position).word;
            let contents = [{ value: word }];
            let desc = keywordsMap[word] || schemaMap[word];
            if (desc) {
                contents.push({
                    value: desc
                });
            }
            return {
                contents
            };
        }
    })
}

export function setBaseEditor({schema, formula, needFuncs=[], ignoreParentKeys=[]}, monaco) {
    getKeywordArr(needFuncs, formula);
    monaco.languages.register({'id': OPTIONS.LANGUAGE});
    setTheme(monaco);
    setCompletion(schema, formula, ignoreParentKeys, monaco);
    setHover(schema, formula, monaco);
};