import React from "react";
import { C } from 'xadmin-ui'

import {
  setBaseEditor,
  OPTIONS
} from "./set";

import _formula from "../../formula";
import Completion from '../completion';
import {
  Formula2Jsonlogic,
  JsonLogic2Formula
} from '../../formula-to-jsonlogic';

import './style.less';

let monaco = null

const randomString = (length) => {
  const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'
  let result = ''
  for (var i = length; i > 0; --i) {
    result += chars[Math.floor(Math.random() * chars.length)]
  }
  return result
}

const replaceRaw = (raw, variableList) => {
   let result = raw
   for (let item of variableList) {
    result = result.replace(item.text, item.random)
   }
   return result
}

const replaceLogic = (logic, variableList) => {
  let result = JSON.stringify(logic)
  for (let item of variableList) {
    result = result.replace(item.random, item.text.replace('data.', 'var.'))
   }
   return JSON.parse(result)
}

const initVariableList = (raw, schema, variableList, outputMode) => {
  if (outputMode === 'raw' || outputMode === 'field') {
    return
  }
  const dataList = _.keys(schema?.definitions?.data?.properties)
  for( let item of dataList ) {
    item =  `data.${item}`
    if (raw.indexOf(item) !== -1) {
      variableList.push({
        text: item,
        random: `$${randomString(6)}`
      })
    }
  }
}

const errorZh = (msg) => {
  if (!msg) {
    return null
  }
  const msgArr = [
    {
      en: 'Unexpected token ILLEGAL',
      zh: '错误的字符'
    },
    {
      en: 'Unexpected end of input',
      zh: '错误的结尾'
    },
    {
      en: 'Unexpected end of input',
      zh: '错误的结尾'
    },
    {
      en: 'Invalid regular expression: missing',
      zh: '无效的表达式'
    },
    {
      en: 'Unexpected identifier',
      zh: '错误的标识符'
    },
    {
      en: 'Unexpected number',
      zh: '错误的数字'
    },
    {
      en: 'noDataPoint',
      zh: '无效的数据点名称'
    }
  ]
  for (let item of msgArr) {
    if (msg.indexOf(item.en) !== -1) {
      return msg.replace(item.en, item.zh)
    }
  }
  return '语法错误'
}

const hasPoint = (raw, tags) => {
  let ishas = false
  var regTest = raw.match(/\((.+)\)/g) || [];
  for (let item of regTest) {
    item = item.replace('(', '').replace(')', '')
    for (let key in tags || {}) {
      if (item === key) {
        ishas = true
        break
      }
      ishas = false
    }
    if (!ishas) {
      break
    }
  }
  return ishas
}

const Editor = props => {
  const {
    schema={},
    onChange,
    onHeightChange,
    onError,
    value,
    defaultValue = '',
    width = 600,
    height = 150,
    needFuncs,
    ignoreParentKeys = [], // 有哪些父级节点是需要省略的
    outputMode = 'jsonlogic', // jsonlogic | raw
  } = props

  const editor = React.useRef(null)
  const tags = React.useRef(null)
  const [ error, setError ] = React.useState(null)
  const [ formula, setFormula ] = React.useState(_formula)
  const { current: variableList } = React.useRef([])

  const { t:_t1 } = useI18n()

  /**
   * 处理点击下方辅助区域的函数后，编辑器插入对应的内容
   * @param {object} data
   * @param {string} data.name function name
   * @param {string} data.type function|variable
   * @param {string} data.parent
   * @return {null}
   */
  const insertFormulaCompletion = (data) => {
    if (!data || data.length === 0) {
      return;
    }
    let text = data.type === "variable" ? data.key : data.name;
    let line = editor.current.getPosition();
    let selectionStartNum;
    // 数据库变量
    if (outputMode === 'raw' || outputMode === 'field') {
      if (data.type === "variable" && !ignoreParentKeys.includes(data.parent)) {
        text = outputMode === 'raw' ? `"${text}"` : `[${text}]`;
        selectionStartNum =
        line.column + text.length;        
      } else if( data.type === "function") {
        selectionStartNum =line.column + data.name.indexOf("(") + 1;
      } else{
        selectionStartNum = line.column + text.length;
      }
    }
    if (outputMode === 'jsonlogic') {
      if (data.type === "variable" && !ignoreParentKeys.includes(data.parent)) {
        selectionStartNum =
        line.column + data.parent.length + 1 + text.length;
        text = data.parent + "." + text;
        variableList.push({
          text,
          random: `$${randomString(6)}`
        })
      } else if( data.type === "function") {
        selectionStartNum =line.column + data.key.indexOf("(") + 1;
      } else{
        selectionStartNum = line.column + 2 + text.length;
      }  
    }

    // get value
    var model = editor.current.getModel();
    var partOfTheText = model.getValueInRange({
      startLineNumber: line.lineNumber,
      startColumn: line.column,
      endLineNumber: line.lineNumber,
      endColumn: line.column + text.length
    });

    // 保证选区内的text不被删除
    text = text + partOfTheText;

    let range = new monaco.Range(
      line.lineNumber,
      line.column,
      line.lineNumber,
      selectionStartNum
    );
    // var range =  editor.current.getVisibleRanges();
    let id = {
      major: 1,
      minor: 1
    };
    let op = {
      identifier: id,
      range: range,
      text: text,
      forceMoveMarkers: true
    };
    editor.current.executeEdits("my-source", [op]);
    // editor.current.setEndPosition(line.lineNumber, selectionStartNum);
    editor.current.setPosition({
      column: selectionStartNum,
      lineNumber: line.lineNumber
    });
    editor.current.focus();
  };

  const editorDidMount = (_editor, _monaco) => {
    editor.current = _editor
    let rawInit = editor.current.getValue();
    initVariableList(rawInit, schema, variableList, outputMode)
    editor.current.onDidChangeModelContent(() => {
      if (onChange) {
        let raw = editor.current.getValue();
        // 无需校验
        if (outputMode === 'field') {
          onChange(raw)
          return
        }
        if (!raw) {
          return onChange({
            value: '',
            raw: ''
          });
        }
        // 为了防止数字开头的数据点校验报错
        let logic = Formula2Jsonlogic(replaceRaw(raw, variableList));
        if (logic instanceof Error) {
          setError(logic)
          onError && onError({
            error: logic
          });
        } else {
          // 为了防止数字开头的数据点校验报错
          logic = replaceLogic(logic, variableList)
          setError(null)
          onError && onError(null)
          let type;
          let mainOp = Object.keys(logic)[0];
          if (["==", "!=", ">", ">=", "<", "<="].indexOf(mainOp) > -1) {
            type = "bool";
          } else if (["+", "-", "*", "/", "%"].indexOf(mainOp) > -1) {
            type = "number";
          }
          onChange({
            raw,
            type,
            value: (outputMode === 'raw' || outputMode === 'field') ? raw : logic
          })
        }
        // 检测是否有数据点
        // if (!hasPoint(raw, tags.current)) {
        //   const error = { description: 'noDataPoint' }
        //   setError(error)
        //   onError && onError({ error });
        // }
      }
    });
  }

  const editorWillMount = React.useCallback((_monaco) => {
    if (schema) {
      setBaseEditor({
        schema,
        formula,
        needFuncs,
        ignoreParentKeys
      }, _monaco);
    }
    monaco = _monaco
  }, [])

  React.useEffect(() => {
    for (let i = formula.length - 1; i >= 0; i--) {
      if (ignoreParentKeys.includes(formula[i].key)) {
          formula.splice(i, 1)
      }
    }
    setFormula(formula)
  }, [ JSON.stringify(ignoreParentKeys) ])

  React.useEffect(() => {
    if (schema?.definitions?.data?.properties) {
      tags.current = schema.definitions.data.properties
    }
  }, [ JSON.stringify(schema) ])

  return (
    <div className={`code-editor App${error?.description ? ' editor-error' : ''}`}>
      <h4 className="sub-title">{_t1('公式输入')}</h4>
      <C is="CodeEditor"
        width={width}
        height={30}
        language={OPTIONS.LANGUAGE}
        theme={OPTIONS.THEME}
        defaultValue={(outputMode === 'raw' || outputMode === 'field') ? defaultValue : JsonLogic2Formula(defaultValue)}
        options={{ 
          minimap: {
            enabled: false
          },
          fontSize: 16,
          wordWrap: 'off',
          lineNumbers: 'off',
          overviewRulerLanes: 0,
          scrollbar: {horizontal: 'hidden', vertical: 'hidden'},
          renderLineHighlight: 'none',
          hover: {
            enabled: false
          },
          automaticLayout: false
        }}
        editorWillMount={editorWillMount}
        editorDidMount={editorDidMount}
        onHeightChange={onHeightChange}
        disableEnter={true}
      />
      <div className="error-msg">{errorZh(error?.description)}</div>
      <h4 className="sub-title">{_t1('变量与函数')}</h4>
      <Completion
        onSelect={insertFormulaCompletion}
        schema={schema}
        formula={formula}
        needFuncs={needFuncs}
      />
    </div>
  );
};

export default Editor;