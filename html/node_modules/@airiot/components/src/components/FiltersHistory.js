import _ from 'lodash'
import { Icon, C} from 'xadmin-ui'
import { app, api, use } from 'xadmin'
import { SchemaForm } from 'xadmin-form'
import React, { useState, useEffect } from 'react'
import { RecoilRoot, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'
import {
  Empty,Drawer, Button, Space, message, List, Popconfirm, Row, Col,
  Tooltip, Input, Collapse, Select, Form, Modal, Radio, Menu, Dropdown, Popover
} from 'antd'
import { PaperClipOutlined, PushpinFilled, PushpinOutlined, LinkOutlined } from '@ant-design/icons'
const { Search } = Input
const { Option } = Select

const DrawerModal = props => {
  const { getParams, filter, params, type, defaultFilterFlag, setWheres, setChangeTitle, changeTitle } = props
  let [ visible, setVisible ] = useState(false)
  let [ items, setItems ] = useState([])
  let [ showModal, setShowModal ] = useState(false)
  let [ initValue, setInitValue ] = useState()
  let [ data, setData ] = useState({ self: [], other: [] })

  const { user } = use('auth.user')

  const { t:_t1 } = useI18n()
 
  const defaultFilter = {
    skip: 0, limit: 10000,
    project: { name: 1, permission: 1, params: 1, showMode: 1, chartMode: 1, creator: 1, default: 1, filter: 1, settings: 1 },
    filter: { type },
    withCount: true
  }
  const showDrawer = () => {
    setVisible(true)
    querydata(defaultFilter)
  }

  const deleteRecord = id => {
    api({ name: `core/dataRecord/${id}` })
      .fetch('', { method: 'DELETE' })
      .then(({ status }) => {
        if (status == 200) {
          message.success(_t1('删除成功！'))
          showDrawer()
        }
      })
      .catch(err => message.error(err.message))
  }

  const editRecord = item => {
    setShowModal(true)
    setInitValue(item)
    setChangeTitle('修改记录')
  }

  const handleSearch = value => {
    let str = {
      skip: 0, limit: 10000,
      project: { name: 1, permission: 1, params: 1, showMode: 1, chartMode: 1, creator: 1, default: 1, settings: 1 },
      filter: { name: { '$regex': value } },
      withCount: true
    }

    // 根据类型查询不同记录
    if (type) {
      str['filter']['type'] = type
    }
    querydata(str)
  }


  const querydata = (filters) => {
    const querystr = encodeURIComponent(JSON.stringify(filters))
    api({ name: 'core/dataRecord' })
      .fetch('?query=' + querystr, {})
      .then(({ json }) => {
        setData({
          ...data,
          self: json?.length ? json.filter(item => item?.permission?.permissionType == 'self').reverse() : [],
          other: json?.length ? json.filter(item => item?.permission?.permissionType != 'self').reverse() : []
        })
        setItems(json)
      })
      .catch(err => message.error(err.message))
  }

  const pushpinClick = (boolean, item) => {
    function query(id, body) {
      api({ name: 'core/dataRecord' })
        .fetch(`/${id}`, { method: 'PATCH', body: JSON.stringify(body) })
        .then(({ status }) => {
          status == 200 && querydata(defaultFilter)
        })
    }

    const defaultObj = items.filter(opt => opt?.settings?.default && opt?.settings?.default.length > 0 && opt?.settings?.default.indexOf(user.userId) != -1)[0]
    if (defaultObj && defaultObj.id) {
      if (_.isArray(defaultObj?.settings?.default)) {
        query(defaultObj.id, { settings: { ...item?.settings, 'default': defaultObj?.settings?.default.filter(id => id != user.userId) } })
      }
    }
    query(item.id, { settings: { ...item?.settings, 'default': boolean ? [ ...item?.settings?.default || [], user.userId ] : item?.settings?.default.filter(id => id != user.userId) } })

  }

  const item_props = { user, setVisible, deleteRecord, editRecord, getParams, pushpinClick, defaultFilterFlag }

  return (
    <>
      <Tooltip title={_t1("查询记录")}>
        <Button style={{ marginRight: '.3rem' }} icon={<PaperClipOutlined />} type="primary" onClick={() => showDrawer()} />
      </Tooltip>
      <Drawer
        key="right"
        width={450}
        title={_t1("记录管理")}
        closable={true}
        placement="right"
        visible={visible}
        onClose={() => { setVisible(false), setChangeTitle('添加记录')}}
        bodyStyle={{ marginTop: '3.6rem' }}
      >
        <Search
          enterButton
          placeholder={_t1("搜索名称记录")}
          notFoundContent={<C is="NoData" />}
          onSearch={value => handleSearch(value)}
          style={{ padding: '0 24px', position: 'absolute', top: '80px', left: 0, width: '100%', height: '32px' }}
        />
        <Collapse defaultActiveKey={[ 'self', 'other' ]}>
          <Collapse.Panel header={_t1("个人")} key="self">
            <List
              locale={{ emptyText: <Empty image={require('../imgs/报警管理.png')}/> }}
              bordered
              dataSource={data.self}
              renderItem={item => <ListItemsComponent setWheres={setWheres} item={item} {...item_props} type={type} />}
            />
          </Collapse.Panel>
          <Collapse.Panel header={_t1("其他")} key="other">
            <List
              locale={{ emptyText:<Empty image={require('../imgs/报警管理.png')}/>}}
              bordered
              dataSource={data.other}
              renderItem={item => <ListItemsComponent item={item} setWheres={setWheres} {...item_props} type={type} />}
            />
          </Collapse.Panel>
        </Collapse>
        <AddHistoryModal
          changeTitle={changeTitle}
          setChangeTitle={setChangeTitle}
          filter={filter}
          mask={false}
          params={params}
          visible={showModal}
          initValue={initValue}
          uploadValue={() => showDrawer('upload')}
          changeViseble={() => setShowModal(false)}
        />
      </Drawer>
    </>
  )

}

const ListItemsComponent = (props) => {
  const { item, user, deleteRecord, editRecord, getParams, setVisible, pushpinClick, defaultFilterFlag, type, setParams, setWheres } = props
  const creator = item?.creator || {}
  const projecctId = api({ name: 'media' }).headers['x-request-project']
  const origin = window.location.origin + (projecctId ? '/_p_' + projecctId : '')
  const search = React.useRef()

  const { t:_t1 } = useI18n()

  const onViewClick = (item) => {
    if (getParams && _.isFunction(getParams)) {
      getParams(item)
      setVisible(false)
    } else if (item?.params) {
      // modelDispatch({ type: 'GET_ITEMS', wheres: { ...item.params } })
      setParams ? setParams({ ...item.params }) : setWheres(item.params)
      setVisible(false)
    } else {
      throw new Error(_t1('未定义 getParams 函数或未找到 model'));
    }
  }

  const copyLink = value => {
    search.current.select()
    const copyStatus = document.execCommand('Copy')
    if (copyStatus && value && search.current?.input?.value) {
      message.success(_t1('复制成功'));
    } else {
      message.error(_t1('复制失败'));
    }
  }
  
  return (<List.Item>
    <Row style={{ width: '100%' }}>
      <Col span={12} style={{ lineHeight: '32px' }}>{item.name}</Col>
      <Col span={12} style={{ textAlign: 'right' }}>
        <Space>
          <Button.Group>
            {
              defaultFilterFlag && <Tooltip title={_t1("默认为查询条件")}>
                {_.isArray(item?.settings?.default) && item?.settings?.default.indexOf(user.userId) != -1 ?
                  <Button icon={<PushpinFilled />} onClick={() => pushpinClick(false, item)} />
                  : <Button icon={<PushpinOutlined />} onClick={() => pushpinClick(true, item)} />}

              </Tooltip>
            }
            <Tooltip title={_t1("查看查询结果")}>
              <Button icon={<Icon type="eye"></Icon>} onClick={() => onViewClick(item)} />
            </Tooltip>
            {
              ((creator?.id == user?.id) || user.isSuper) &&
              <>
                <Button onClick={() => editRecord(item)} icon={<Icon type="edit"></Icon>} />
                <Popconfirm
                  okText={_t1("确定")}
                  cancelText={_t1("取消")}
                  placement="leftBottom"
                  arrowPointAtCenter={true}
                  title={_t1("是否确认删除已保存的记录?")}
                  onConfirm={() => deleteRecord(item.id)}
                >
                  <Button icon={<Icon type="delete"></Icon>} />
                </Popconfirm>
              </>
            }
            {
              type == 'analysis' ? 
                <Popover
                  placement="leftTop"
                  content={
                    <Search
                      ref={search}
                      id="search"
                      value={`${origin}#/app/record/${item.id}`}
                      enterButton={_t1("复制")}
                      onSearch={copyLink}
                    />
                  }
                >
                  <Button icon={<LinkOutlined />} />
                </Popover>
                : null
            }
            {
              type == 'analysis' ? 
                <C is="ShareDashbaordComponent" type={'analysis'} params={{ id: item.id }}/>
              : null
            }
          </Button.Group>
        </Space>
      </Col>
    </Row>
  </List.Item>)
}

const UserMultiple = props => {
  const { getUser, userList } = props
  const [ data, setData ] = useState([])

  const { t:_t1 } = useI18n()

  useEffect(() => { getUserList() }, [])

  const getUserList = () => {
    let str = { skip: 0, limit: 10000, project: { name: 1, department: 1 }, withCount: true }
    const querystr = encodeURIComponent(JSON.stringify(str))
    api({ name: 'core/user' })
      .fetch('?query=' + querystr, {})
      .then(({ json }) => {
        setData(json)
      })
      .catch(err => message.error(err.message))
  }

  const handleChange = value => {
    if (value && _.isArray(value) && value.length) {
      getUser(value.map(item => ({ id: item.value, name: item.label })))
    }
  }

  return (
    <Select
      allowClear
      labelInValue
      mode="multiple"
      placeholder={_t1("请选择用户")}
      onChange={handleChange}
      style={{ width: '200px' }}
      filterOption={(input, option) => (
        option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0
      )}
      defaultValue={_.isArray(userList) && userList.length && userList.map(item => ({ value: item.id, label: item.name })) || []}
    >
      {data.map(item => (<Option value={item.id} key={item.id}>{item.name}</Option>))}
    </Select>
  )
}

const currentDept = id => {
  const querystr = encodeURIComponent(JSON.stringify(
    { skip: 0, limit: 10000, project: { name: 1, department: 1 }, withCount: true }
  ))
  return api({ name: `core/user/${id}` }).fetch('?query=' + querystr, {})
}

const recordPermission = props => {
  const { input: { onChange, value } } = props
  const { user } = use('auth.user')
  let [ obj, setObj ] = useState(value)

  const { t:_t1 } = useI18n()

  const radioStyle = {
    display: 'block',
    // height: '30px',
    // lineHeight: '30px',
  }

  useEffect(() => {
    onChange(obj)
  }, [ JSON.stringify(obj) ])

  const handleChange = e => {
    let radioValue = e.target.value
    if (radioValue) {
      if (user && user.isSuper) {
        setObj({ ...obj, permissionType: radioValue })
      } else {
        if (radioValue == 'dept') {
          currentDept(user.userId)
            .then(({ json }) => {
              setObj({ permissionType: radioValue, department: json && json.department })
            })
            .catch(err => message.error(err.message))
        } else {
          setObj({ permissionType: radioValue })
        }
      }
    }
  }

  return (
    <Radio.Group onChange={handleChange} value={obj && obj.permissionType || ''}>
      {
        user && user.isSuper ? (
          <>
            <Radio style={radioStyle} value="self">{_t1("仅自己可见")}</Radio>
            <Radio style={radioStyle} value="public">{_t1("公开")}</Radio>
            <Space style={{ width: '100%' }}>
              <Radio style={radioStyle} value="dept">{_t1("按部门")}</Radio>
              <div style={{ width: 150 }}>
              {
                obj && obj.permissionType == 'dept' && <C is="DepartmentMultipleSelectField"
                  input={{
                    value: value.department,
                    onChange: (value) => setObj({ ...obj, department: value })
                  }}
                />
              }
              </div>
            </Space>
            <Space style={{ width: '100%' }}>
              <Radio style={radioStyle} value="user">{_t1("指定用户")}</Radio>
              {
                obj && obj.permissionType == 'user' && <UserMultiple
                  userList={value.user}
                  getUser={(value) => setObj({ ...obj, user: value })}
                />
              }
            </Space>
          </>
        ) : (
          <>
            <Radio style={radioStyle} value="self">{_t1("仅自己可见")}</Radio>
            <Radio style={radioStyle} value="public">{_t1("公开")}</Radio>
            <Radio style={radioStyle} value="dept">{_t1("本部门")}</Radio>
          </>
        )
      }
    </Radio.Group>
  )
}

const recordSchema = {
  type: 'object',
  properties: {
    name: {
      title: _r('记录名称'),
      type: 'string'
    },
    permission: {
      title: _r('记录权限'),
      type: 'object'
    }
  },
  form: [ '*', { key: 'permission', component: recordPermission } ],
  required: [ 'name', 'permission' ]
}

const DefaultLayout = props => {
  const { children, invalid, handleSubmit, onDelete, schema, submitting, hideModal } = props;
  const { t:_t1 } = useI18n()

  return (
    <Form className="form-horizontal voucherBox" onSubmit={handleSubmit}>
      { children}
      <div style={{ textAlign: 'right', marginTop: '2.2rem' }}>
        <Space>
          <Button
            type="primary"
            onClick={handleSubmit}
            disabled={invalid}
          >
            {_t1('确认')}
          </Button>
          <Button onClick={() => { hideModal() }}>{_t1('取消')}</Button>
        </Space>
      </div>
    </Form>
  )
}

const AddHistoryModal = props => {
  const { visible, changeViseble, initValue, uploadValue, params, mask, filter = {}, type, changeTitle } = props
  let id = initValue && initValue.id

  const { t:_t1 } = useI18n()

  const getValue = (value, id) => {
    let newData;
    if (value && value.permission && value.permission.permissionType) {
      let permissionType = value.permission.permissionType
      switch (permissionType) {
        case 'self':
          newData = { ...value, permission: { permissionType } }
          break;
        case 'public':
          newData = { ...value, permission: { permissionType } }
          break;
        case 'dept':
          newData = { ...value, permission: { permissionType, department: value.permission.department } }
          break;
        case 'user':
          newData = { ...value, permission: { permissionType, user: value.permission.user } }
          break;
      }
    }

    if (id) {
      eidtValue(newData, id)
    } else {
      let obj = { ...newData, params }

      if (type) {
        obj['type'] = type
      }
      if (JSON.stringify(filter) != '{}') {
        obj['filter'] = filter
      }

      api({ name: 'core/dataRecord' })
        .fetch('', { method: 'POST', body: JSON.stringify(obj) })
        .then(res => {
          message.success(_t1('保存成功！'))
          changeViseble()
        })
        .catch(err => {
          message.error(err.message)
        })
    }
  }

  const eidtValue = (value, id) => {
    api({ name: `core/dataRecord/${id}` })
      .fetch('', { method: 'PATCH', body: JSON.stringify(value) })
      .then(res => {
        message.success(_t1('修改成功！'))
        changeViseble()
        uploadValue()
      })
      .catch(err => {
        message.error(err.message)
      })
  }

  return (
    <Modal
      title={changeTitle}
      visible={visible}
      onCancel={() => changeViseble()}
      footer={null}
      mask={mask}
    >
      <C is="I18nSchemaForm"
        formKey={'anslysisCondition' + Math.random().toFixed(2)}
        schema={recordSchema}
        component={DefaultLayout}
        initialValues={initValue ? initValue : {}}
        onSubmit={(value) => getValue(value, id)}
        hideModal={() => changeViseble()}
      />
    </Modal>
  )
}


/** 
 * @param {string} type   存贮模块分类
 * @param {object} params   要保存的查询条件及权限
 * @param {object} filter   可传其他参数
 * @param {function} getParams  回调函数form复值
 */

const FiltersHistory = (props) => {
  let type = props && props.type
  const [ visible, setVisible ] = useState(false)
  const [ changeTitle, setChangeTitle ] = useState('添加记录')

  const { t:_t1 } = useI18n()

  let wheres = {}
  let setWheres = () => null

  let getModelState
  let { params } = props

  if (!params) {
    try {
      getModelState = use('model')['getModelState']
      type = use('model')['model']['name']
      const { atoms, model } = use('model')
      wheres = useRecoilValue(atoms.wheres)
      setWheres = useSetRecoilState(atoms.wheres)
    } catch (err) {
      console.error(err)
    }
  } else {
    wheres = params
  }

  // 保存自己传的参数或者redux上的查询条件
  const onSave = () => {
    if (params) {
      setWheres(params)
    } else {
      _.isFunction(getModelState) && setWheres(wheres)
    }
    setVisible(true)
    setChangeTitle('添加记录')
  }
  
  return (
    <RecoilRoot>
      <Space size={5}>
        <Tooltip title={_t1("可将查询条件保存记录，方便下次查询。")}>
          <Button type="primary" onClick={onSave}>
            {_t1("保存查询记录")}
          </Button>
        </Tooltip>
        <DrawerModal changeTitle={changeTitle} setChangeTitle={setChangeTitle}  {...props} params={wheres} type={type} setWheres={setWheres} />
        <AddHistoryModal
          {...props}
          changeTitle={changeTitle}
          setChangeTitle={setChangeTitle}
          mask={true}
          type={type}
          params={wheres}
          visible={visible}
          changeViseble={() => { setVisible(false) }}
        />
      </Space>
    </RecoilRoot>
  )
}


export default FiltersHistory
