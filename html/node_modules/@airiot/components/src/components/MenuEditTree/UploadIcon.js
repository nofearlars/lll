import React from 'react'
import _ from 'lodash'
import { Button, Modal, Upload, Avatar, message } from 'antd'
import { api, app, config } from 'xadmin'
import { Icon } from 'xadmin-ui'
class BaseUpLoad extends React.Component {

  state = {
    imageUrl: null
  }

  onClick = (src) => {
    const { onChange, handleCancel } = this.props
    onChange(src)
    handleCancel()
  }
  handleChange = (info) => {
    const { file } = info
    if (file.status == 'done') {
      const imageUrl = file.response && file.response.url
      this.setState({ imageUrl })
    }
  }

  componentWillReceiveProps(nextProps) {
    if (this.props.isDelete && this.state.imageUrl) {
      this.setState({ imageUrl: null })
    }
  }

  render() {
    const { imageUrl } = this.state
    const { imgList, isDelete, iconType, _t1 } = this.props
    const iconSize = 35
    const listStyle = {
      width: 50,
      height: 50,
      margin: '0 5px 15px',
      border: '1px dashed #ddd',
      padding: 5,
      cursor: 'pointer',
      textAlign: 'center'
    }
    const props = {
      action: api({ name: 'media' }).getHost() + 'core/media/modelIcon',
      accept: 'image/*',
      onChange: this.handleChange,
      showUploadList: false,
      withCredentials: true,
      headers: _.omit(api({ name: 'media' }).getHeaders(), 'Content-Type'),
      beforeUpload: (file) => {
        const { size, type } = file
        const isImg = type.slice(0, 5) == 'image'
        const isLarge = size / 1024 <= 500
        if (!isImg) {
          message.warning(_t1('请上传图片格式文件'))
          return false
        }
        if (!isLarge) {
          message.warning(_t1('上传图标不能大于500K'))
          return false
        }
      }
    }

    return (
      <div style={{ display: 'flex', flexWrap: 'wrap' }}>
        <Upload {...props}>
          <Button style={{ width: 50, height: 50, margin: '0 5px' }} icon={<Icon type="plus" />} />
        </Upload>
        {imageUrl ? <div style={listStyle}><Avatar shape="square" size={iconSize} onClick={() => this.onClick(imageUrl)} src={config('mediaUrl') + imageUrl} /></div> : null}
        {imgList && imgList.length > 0 ? imgList.map(item => {
          if (iconType == 'menuIcon') {
            return <div style={listStyle} onClick={() => this.onClick(item.name)} dangerouslySetInnerHTML={{ __html: item.url }} />
          } else if (iconType == 'modelDefaultIcon') {
            return <div style={listStyle} size={item.size} onClick={() => this.onClick(item.url)} ><Avatar shape="square" src={config('mediaUrl') + item.url} /></div>
          } else {
            return <div style={listStyle} onClick={() => this.onClick(item.name)} dangerouslySetInnerHTML={{ __html: item.url }} />
          }
        }) : null}
      </div>
    )
  }
}

class UploadIconCom extends React.Component {
  constructor(props) {
    super(props)
    this.state = {
      visible: false,
      isDelete: false,
      style: {
        position: 'absolute',
        top: 0,
        left: 0,
        zIndex: 99,
        background: 'rgba(0,0,0,.5)',
        height: '35px',
        width: '35px',
        borderRadius: '5px',
        textAlign: 'center',
        display: 'none',
        lineHeight: '35px',
      }
    }
  }

  showModal = () => {
    this.setState({ visible: true })
  }

  handleCancel = (e) => {
    this.setState({ visible: false })
  }

  handleOk = (e) => {
    this.setState({ visible: false })
  }

  deleteModal = () => {
    this.setState({ style: { ...this.state.style, display: 'block' } })
  }

  cancelDelete = () => {
    this.setState({ style: { ...this.state.style, display: 'none' } })
  }

  deleteImg = () => {
    const { onChange, imgList } = this.props
    onChange('')
    this.setState({ style: { ...this.state.style, display: 'none' }, isDelete: true })
  }
  onEdit = () => {
    this.setState({ visible: true })

  }

  render() {
    const { value, onChange, imgList, _t1 } = this.props
    const { visible, style, isDelete } = this.state

    let IconField = <Button icon={<Icon type="plus" />} onClick={this.showModal}>{_t1('选择图标')}</Button>
    if (value) {
      // 判断选择的是系统图标还是自定义图标。
      if (value.indexOf('/') > -1) {
        IconField = (<div style={{ position: 'relative', height: 30 }}>
          <div style={style} onMouseLeave={this.cancelDelete}>
            <Icon onClick={this.onEdit} name="edit" style={{ display: 'inlineBlock', margin: 'auto 0', color: '#fff' }} />{' '}
            <Icon onClick={this.deleteImg} name="delete" style={{ display: 'inlineBlock', margin: 'auto 0', color: '#fff' }} />
          </div>
          <Avatar style={{ position: 'absolute', top: 0, left: 0, zIndex: 88 }} size={35} shape="square" onClick={this.showModal} src={config('mediaUrl') + value}
            onMouseEnter={this.deleteModal}
          />
        </div>)
      } else {
        const img = _.find(imgList, item => item.name == value)
        if (img) {
          IconField = <div style={{ width: 35, height: 35 }} onClick={this.showModal} dangerouslySetInnerHTML={{ __html: img.url }} />
          IconField = (<div style={{ position: 'relative', height: 35 }}>
            <div style={style} onMouseLeave={this.cancelDelete}>
              <Icon onClick={this.deleteImg} name="delete" style={{ display: 'inlineBlock', margin: 'auto 0', color: '#fff' }} />
            </div>
            <div style={{ width: 35, height: 35, position: 'absolute', top: 0, left: 0, zIndex: 88 }} onClick={this.showModal} dangerouslySetInnerHTML={{ __html: img.url }}
              onMouseEnter={this.deleteModal}
            />
          </div>)
        }
      }
    }
    return (
      <div className="select-system-icon">
        {IconField}
        <Modal
          title={_t1("图标")}
          width={800}
          visible={visible}
          okText={_t1("确定")}
          onOk={this.handleOk}
          cancelText={_t1("取消")}
          footer={null}
          onCancel={this.handleCancel}
          className="select-system-icon"
        >
          <BaseUpLoad onChange={onChange} handleCancel={this.handleCancel} imgList={imgList} isDelete={isDelete} iconType={this.props.iconType} _t1={_t1} />
        </Modal>
      </div>
    )
  }
}

const UploadIcon = props => {
  const { t:_t1 } = useI18n()
  return <UploadIconCom {...props} _t1={_t1} />
}

let list = []

class UploadIconField extends React.Component {
  render() {
    const { input: { name, value, onChange }, label, meta, field } = this.props
    return <UploadIcon onChange={onChange} value={value} imgList={list} />
  }
}

export {
  UploadIcon,
  UploadIconField
}
