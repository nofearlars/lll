// 单表属性选择

import React from 'react'
import { api } from 'xadmin'
import { TreeSelect } from 'antd'
import _ from 'lodash'
import useInput from './hooks/useInput'

const schemaToTreeData = (schema, noTagField) => {
  console.log(schema, 'schema')
  return {
    title: _t1('表属性'),
    value: 'schema',
    selectable: false,
    children: _.keys(schema.properties).filter(key => {
      return noTagField ? (key.indexOf('tags_') === -1) : true
    }).filter(key => {
      const item = schema.properties[key]
      return item?.listFields
    }).map(key => {
      return {
        title: schema.properties[key].title,
        value: key,
        type: 'schema',
        id: key,
        name: schema.properties[key].title
      }
    })
  }
}

const tagsToTreeData = (tags) => {
  return {
    title: _t1('数据点'),
    value: 'tag',
    selectable: false,
    children: tags.map(tag => {
      return {
        title: tag.name,
        value: tag.id,
        id: tag.id,
        name: tag.name,
        type: 'tag'
      }
    })
  }
}



const SelectTableSchema = (props) => {
  const {
    table, // 表id
    id, // 记录id
    input, // 数据绑定
    multiple,
    onlyId,
    noTagField, // 隐藏数据点<显示到列表>生成的字段
    point=true // 是否展示数据点
  } = props

  const [treeData, setTreeData] = React.useState([])

  const [list, setList] = React.useState([])

  const _input = useInput({ input, multiple, onlyId, list })

  const fetchTable = async (table, id) => {
    if (table) {
      const { json: data } = await api({ name: `core/t/schema/${table}` }).fetch('')
      const { json } = await api({ name: `/core/t/schema/tag/${table}` }).fetch('')
      const { schema, device, computed } = data
      const schemaData = schemaToTreeData(schema, noTagField)
      if (point) {
        // 查询继承数据点
        const tags = [...json?.tags || []]
        if (id) {
          const { json: recordTags } = await api({ name: `core/t/${table}/d/tag/${id}` }).fetch('')
          tags = recordTags
        }
        const tagsData = tagsToTreeData(tags || [])
        setTreeData([schemaData, tagsData])
        setList([...schemaData.children, ...tagsData.children])
      } else {
        setTreeData([schemaData])
        setList([...schemaData.children])
      }
    }

  }


  React.useEffect(() => {
    fetchTable(table, id)
  }, [table, id])


  return (
    <TreeSelect
      showSearch
      autoClearSearchValue
      treeNodeFilterProp='title'
      treeData={treeData}
      {..._input}
      {...props}
    ></TreeSelect>
  )
}

export default SelectTableSchema
