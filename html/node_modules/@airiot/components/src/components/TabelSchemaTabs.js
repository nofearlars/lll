import React from 'react'
import { api, app, use } from 'xadmin'
import { Row, Col, Tooltip, Button, Spin, Tabs } from 'antd'
import _ from 'lodash'

const schemaToList = (schema, type, parentKey, parentName) => {
  let result = []
  if (schema?.properties) {
    for (let key of Object.keys(schema.properties)) {
      const item = schema.properties[key]
      const pkey = parentKey ? `${parentKey}.${key}` : key
      const pTitle = parentName ? `${parentName}.${item.title}` : item.title
      if (item.type === 'object') {
        const subResult = schemaToList(item, type, pkey, pTitle)
        result = result.concat(subResult)
      } else if (item.type !== 'array') {
        result.push({
          id: pkey, 
          name: pTitle, 
          type: type || 'schema'
        })
      }
    }
  }
  return result
}

const ButtonList = (props) => {

  const { list, onClick } = props

  return (
    <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }} >
      {list && list.length > 0 ? list.map(item => (
        <Col span={6} style={{ margin: '5px 0' }}>
          <Tooltip title={item && (item.name + `(${item.id})`)}>
            <Button block onClick={() => onClick(item)}>
              <span style={{ width: '100%', overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}>
                {item && item.name}
                <span style={{ fontSize: '10px', color: 'rgb(204, 204, 204)' }}>（{item && item.id}）</span>
              </span>
            </Button>
          </Tooltip>
        </Col>
      )) : null}
    </Row>
  )
}

const PluginTab = (props) => {
  const { plugin, onClick } = props

  const { schema } = plugin.useSetting({ data: {} })

  const list = schemaToList(schema, plugin.key)

  return <ButtonList list={list} onClick={onClick} ></ButtonList>

}

const SchemaTab = (props) => {
  const { data, onClick } = props
  const { schema } = data
  const list = schemaToList(schema)

  return <ButtonList list={list} onClick={onClick} ></ButtonList>
}

const TagsTab = (props) => {
  const { data, table, id, onClick } = props
  const { device } = data

  const [ tags, setTags ] = React.useState([])

  const fetchTags = async (device, id) => {
    let tags = device?.tags
    if (id) {
      const { json: recordTags } = await api({ name: `core/t/${table}/d/tag/${id}` }).fetch('')
      tags = recordTags
    }
    setTags(tags.map(item => ({ id: item.id, name: item.name, type: 'tags' })))
  }

  React.useEffect(() => {
    fetchTags(device, id)
  }, [ device, id ])

  return <ButtonList list={tags} onClick={onClick} ></ButtonList>
}

const DeviceTab = (props) => {

  const { data, onClick } = props

  const { device } = data

  const { getSchema } = use('device.driver')

  const [ list, setList ] = React.useState([])

  React.useEffect(() => {
    getSchema(device?.driver, {}).then(
      res => {
        const list = schemaToList(res, 'device')
        setList(list)
      }
    )
    // setList()
  }, [ device ])

  return <ButtonList list={list} onClick={onClick} ></ButtonList>
}

const TabComp = (props) => {
  const { item, data, table, id, onClick } = props
  if (item.key === 'schema') {
    return <SchemaTab data={data} onClick={onClick} ></SchemaTab>
  } else if (item.key === 'tags') {
    return <TagsTab data={data} table={table} id={id} onClick={onClick} ></TagsTab>
  } else if (item.key === 'device') {
    return <DeviceTab data={data} onClick={onClick} ></DeviceTab>
  } else {
    return <PluginTab plugin={item} onClick={onClick} ></PluginTab>
  }
}

const getSetup = (defaultPlugins, func) => {
  let setupPlugins = []
  setupPlugins.push({
    key: 'schema',
    name: _r('表定义')
  })
  if (func.indexOf('device') !== -1) {
    setupPlugins.push({
      key: 'tags',
      name: _r('数据点')
    })
  }
  setupPlugins = [...setupPlugins, ...defaultPlugins.filter(item => func.indexOf(item.key) !== -1)]
  return setupPlugins
}

const usePlugins = ({defaultPlugins, plugins, func}) => {

  const setupPlugins = getSetup(defaultPlugins, func)

  if (plugins === true) {
    return setupPlugins
  } else if (_.isArray(plugins)) {
    return plugins.reduce((pre, current) => {
      const item = setupPlugins.find(item => item.key === current)
      if ( item ) {
        return [...pre, item]
      } else {
        return pre
      }
    }, []) 
    // setupPlugins.filter(item => plugins.indexOf(item.key) !== -1)
  } else {
    return ['schema']
  }
}

const TabelSchemaTabs = (props) => {

  const { table, id, plugins, onClick } = props

  const [ data, setData ] = React.useState(null)
  const [ defaultPlugins, setDefaultPlugins ] = React.useState([])
  const [ func, setFunc ] = React.useState([])

  const displayPlugins = usePlugins({defaultPlugins, plugins, func})


  const fetchTable = async (table, defaultPlugins) => {
    if (table) {
      const str = { project: { function: 1 }, withCount: true }
      for (let plugin of defaultPlugins) {
        str.project[plugin.key] = 1
      }
      const queryStr = encodeURIComponent(JSON.stringify(str))
      const { json: data } = await api({ name: `core/t/schema/${table}` }).fetch(`?query=${queryStr}`)
      setData(data)
      const { function: _func } = data
      setFunc(_func)
    }
  }

  React.useEffect(() => {
    const defaultPlugins = app.get('plugins')
    fetchTable(table, defaultPlugins)
    setDefaultPlugins(defaultPlugins)
  }, [ table ])
    

  return data ? (
    displayPlugins?.length === 1 ? (
      <TabComp item={displayPlugins[0]} data={data} table={table} id={id} onClick={onClick}></TabComp>
    ) : (
      <Tabs>
        {
          displayPlugins.map(item => {
            return <Tabs.TabPane tab={item.name} key={item.key}>
              <TabComp item={item} data={data} table={table} id={id} onClick={onClick}></TabComp>
            </Tabs.TabPane>
            
          })
        }
      </Tabs>
    )
    
  ) : <Spin></Spin>
}

export default TabelSchemaTabs
