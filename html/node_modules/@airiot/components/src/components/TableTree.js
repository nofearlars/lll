import React from 'react'
import { Button, Tree } from 'antd'
import _, { identity } from 'lodash'
import { api, use } from 'xadmin'
import { SchemaForm } from 'xadmin-form'
import { getLabel } from './util'
import { C } from 'xadmin-ui'

const getTreeKey = ({ schema }) => {
  for (let key of schema?.form) {
    if (schema?.properties[key].treeMark) {
      return key
    }
  }
  return null
}

const listToTree = (list) => {
  const treeData = _.cloneDeep(list)
  for (let index in treeData) {
    const item = treeData[index]
    if (item.parent) {
      const parentItem = treeData.find(i => i.key === item.parent)
      if (parentItem) {
        if (!parentItem.children) {
          parentItem.children = []
        }
        parentItem.children.push(item)
        item.hasParent = true
      }
    }
  }
  const result = []
  for (let item of treeData) {
    if (!item.hasParent) {
      result.push(item)
    }
  }
  return result
}

const useChildTables = (tables, tableType) => {

  const [ childTables, setChildTables ] = React.useState(null) 

  const fetchTables = async (tables) => {
    let result = []
    for (let table of tables) {
      const { json: items } = await api({ name: `core/t/schema/child/${table?.id}` }).fetch('')
      if(tableType == 'depart' && items?.length) {
        const fields = [ 'id', 'name' ]
        const wheres = { function: { '$regex': 'dataAuth' }, id: { '$in': items.map(item=> item.id) } }
        const departChild = await api({ name: 'core/t/schema' }).query({ fields }, { wheres }).then(({ items }) => items)
        result = result.concat([table?.id, ...departChild.map(item => item.id)])
      } else {
        result = result.concat([table?.id, ...items.map(item => item.id)])
      }
    }
    return _.uniq(result)
  }

  React.useEffect(() => {
    (async () => {
      if (tables?.length) {
        const _tables = await fetchTables(tables)
        setChildTables(_tables)
      } else {
        setChildTables([])
      }
    })()
  }, [ tables ])

  return childTables
}

const useTables = (tables) => {

  const [ treeData, setTreeData ] = React.useState([])

  const fetch = async (tables) => {
    const result = []
    const children = []
    if (_.isArray(tables)) {
      for (let table of tables) {
        const { json: data } = await api({ name: `core/t/schema/${table}` }).fetch('')
        const { schema } = data
        const titlekey = getLabel({ schema })
        const treekey = getTreeKey({ schema })
        const { items: _list } = await api({ name: `core/t/${table}/d` }).query({
          fields: [ titlekey ].concat(treekey ? [ treekey ] : [])
        }, {})
        for (let item of _list) {
          if (treekey && item[treekey]) {
            if (_.isArray(item[treekey])) {
              for (let index in item[treekey]) {
                const relateItem = item[treekey][index]
                result.push({
                  key: `${item.id}_${index}`,
                  id: item.id,
                  title: item[titlekey],
                  parent: relateItem?.id,
                  table
                })
              }
            } else {
              result.push({
                key: item.id,
                id: item.id,
                title: item[titlekey],
                parent: item[treekey]?.id,
                table
              })
            }
            
          } else {
            result.push({
              key: item.id,
              title: item[titlekey],
              table
            })
          }
        }
      }
    }
    const treeData = listToTree(result)
    return treeData
  }

  React.useEffect(() => {
    (async () => {
      if (tables && tables.length) {
        const treeData = await fetch(tables)
        setTreeData(treeData)
      } else {
        setTreeData([])
      }
    })()
  }, [ tables ])

  return treeData

}

const TableTree = (props) => {
  const { table, cellKey, dashboardMode } = props
  const tables = useChildTables(table, props?.tableType)
  let treeData = useTables(tables)
  const setOutputValues = use('cell.output.set', cellKey)

  const { t:_t1 } = useI18n()

  const onChange = (value) => {
    if(_.isFunction(props?.getSelectedKeys)) props?.getSelectedKeys(value, treeData)
    setOutputValues(value)
  }

  if(props?.tableType == 'depart') {
    treeData = [
      {
        title: _t1('全部'),
        key: 'all_depart',
        children: treeData
      }
    ]
  }
  React.useEffect(() => {
    if (!_.isEmpty(treeData[0].children)) {
      setTimeout(() => {
        let list = document.getElementsByClassName('ant-tree-node-content-wrapper')
        for (let i = 0; i < list.length; i++) {
          list[i].setAttribute("title", "")
        }
      })
    }
  }, [JSON.stringify(treeData)])
  return (
    _.isEmpty(table) && dashboardMode ? <C is="NoData" style={{ position: 'absolute', left: 0, right: 0, top: '50%', marginTop: -80, color: '#999', fontSize: 12 }} description={_t1("请选择数据表")} /> :
    <Tree
      treeData={treeData}
      onSelect={onChange}
      blockNode
      defaultExpandParent={true}
      defaultExpandAll={true}
      defaultSelectedKeys={props?.tableType == 'depart' ? ['all_depart'] : []}
      defaultCheckedKeys={props?.tableType == 'depart' ? ['all_depart'] : []}
    >
    </Tree>
  )
}

const TableLevelSelect = () => {

  const { t:_t1 } = useI18n()

  const schema = {
    type: 'object',
    properties: {
      table: {
        title: _r('表选择'),
        type: 'array',
        items: {},
        fieldType: 'table'
      }
    }
  }

  const onClick = () => {
    return <Button></Button>
  }

  return <>
    <SchemaForm
      formKey='TableLevelSelect'
      title={_t1("添加部门")}
      saveText={_t1("确定")}
      schema={schema}
      show={showAddDepModal}
      onSubmit={handleSubmit}
      onClose={onClose}
      group={C.lazy('Form.SimpleGroup')}
      component={C.lazy('Form.ModalLayout')}
    />
    <Button onClick={onClick}>{_t1("点击配置")}</Button>
  </> 
}

const paramSchema = {
  type: 'object',
  properties: {
    table: {
      title: _r('表选择'),
      type: 'array',
      items: {},
      field: {
        component: TableLevelSelect,
      }
    }
  }
}

const TableTreeWidgets = {
  title: _r('表记录选择树'),
  category: _r('业务选择器'),
  icon: require('../icons/表记录选择树.svg'),
  component: TableTree,
  initLayout: { width: 300, height: 500 },
  paramSchema,
  fieldWidget: true
}

export default TableTree

export { TableTreeWidgets }
