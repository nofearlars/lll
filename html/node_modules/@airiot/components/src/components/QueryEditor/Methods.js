import React, { useState } from 'react'
import { app, use } from 'xadmin'
import { Icon, C } from 'xadmin-ui'
import { Button, Select, Divider, Input, InputNumber, Radio, DatePicker, TimePicker, Checkbox } from 'antd'
import moment from 'moment'

const { Option } = Select
const { RangePicker } = DatePicker

// 时间格式化
const formatDate = (value, dateFormat) => {
  if (_.isPlainObject(value) && value['gte'] && value['lte']) {
    const format = dateFormat || 'YYYY-MM-DD HH:mm:ss'
    value = [moment(value['gte'], format), moment(value['lte'], format)]
  } else {
    value = null
  }
  return value
}

const NullInput = () => null

const TextInput = ({ input }) => {
  return <Input style={{ width: '100%' }} {...input} />
}
const NumberInput = ({ input }) => {
  return <InputNumber style={{ width: '100%' }} {...input} value={_.isNil(input.value) ? input.value : Number(input.value)} />
}
const BooleanInput = ({ input }) => {

  const { t:_t1 } = useI18n()

  return <Radio.Group
    options={[{ label: _t1('真'), value: true }, { label: _t1('假'), value: false }]}
    onChange={input.onChange}
    value={input.value}
    optionType="button"
    buttonStyle="solid"
  />
}
const EnumInput = ({ input, field: { schema = {} } }) => {
  const enum_title = schema.enum_title || []
  const enums = schema.enum || []
  return <Select value={input.value} onChange={input.onChange} style={{ width: '100%' }}>
    {
      enums?.map((item, index) => {
        return <Option value={item}>{enum_title[index] || item}</Option>
      })
    }
  </Select>
}
const RangeInput = ({ input }) => {
  const onChange = (val, t) => {
    input.onChange({ ...input.value, [t]: val })
  }
  return <div style={{ display: 'flex' }}>
    <InputNumber value={input.value?.gte} onChange={v => onChange(v, 'gte')} style={{ flexGrow: 1, width: '100%' }}></InputNumber>
    <span style={{ margin: 'auto 5px' }}>~</span>
    <InputNumber value={input.value?.lte} onChange={v => onChange(v, 'lte')} style={{ flexGrow: 1, width: '100%' }}></InputNumber>
  </div>
}
const RangeTimeInput = ({ input, field: { schema } }) => {

  const { t:_t1 } = useI18n()

  const format = schema?.format || schema?.formatType
  const timeFormat = schema?.timeFormat || (format == 'time' ? 'HH:mm:ss' : format == 'date' ? 'YYYY-MM-DD' : 'YYYY-MM-DD HH:mm:ss')
  const onChange = (val) => {
    const date = val ? { 'gte': moment(val[0]).format(timeFormat), 'lte': moment(val[1]).format(timeFormat) } : val
    input.onChange(date)
  }
  return format == 'time' || schema?.timeFormat ? <TimePicker.RangePicker onChange={onChange} value={formatDate(input.value, timeFormat)} format={timeFormat} style={{ width: '100%' }} /> :
    <RangePicker showTime={format !== 'date'} onChange={onChange} value={formatDate(input.value, timeFormat)} style={{ width: '100%' }} />
}
const VariateRangeTimeInput = ({ input: { value, onChange }, field: { schema } }) => {
  const format = schema?.format || schema?.formatType
  const timeFormat = schema?.timeFormat || (format == 'time' ? 'HH:mm:ss' : format == 'date' ? 'YYYY-MM-DD' : 'YYYY-MM-DD HH:mm:ss')
  const [type, setType] = useState(value?.type)
  const opts = [{ key: _t1('前'), value: 'forward' }, { key: _t1('后'), value: 'backward' }, { key: _t1('当前'), value: 'now' }]
  const list = [{ key: _t1('年'), value: 'Y' }, { key: _t1('季度'), value: 'Q' }, { key: _t1('月'), value: 'M' }, { key: _t1('周'), value: 'w' }, { key: _t1('天'), value: 'd' }, { key: _t1('时'), value: 'h' }, { key: _t1('分'), value: 'm' }, { key: _t1('秒'), value: 's' }]
  const unitList = list.filter(item => {
    const arr = timeFormat == 'YYYY-MM-DD' ? ['Y', 'Q', 'M', 'w', 'd'] : timeFormat == 'HH:mm:ss' ? ['h', 'm', 's'] : timeFormat == 'HH:mm' ? ['h', 'm'] : list.map(v => v.value)
    return arr.indexOf(item.value) > -1
  })
  const handleChange = v => {
    const timeRange = { ...value, ...v }
    const start = timeRange.fromNow ? 'now' : 'nowzero'
    const mid = timeRange.type == 'forward' ? ' - ' : timeRange.type == 'backward' ? ' + ' : ''
    const end = timeRange.unit && !_.isNil(timeRange.count) ? timeRange.count + timeRange.unit : ''
    const newTime = timeRange.unit ? (timeRange.type == 'now' ? 'now ' + timeRange.unit : (end && mid ? start + mid + end : null)) : null
    onChange(timeRange, newTime)
  }
  return (
    <>
      <div style={{ display: 'flex', marginBottom: '0.5rem' }}>
        <Select style={{ marginRight: 5, minWidth: '30%' }} value={value?.type} onChange={v => { setType(v); handleChange({ type: v }) }} allowClear >
          {opts.map(item => <Select.Option value={item.value}>{item.key}</Select.Option>)}
        </Select>
        {type != 'now' && <InputNumber value={value?.count} onChange={(v) => handleChange({ count: v })} placeholder={_t1("输入数值")} min={1} style={{ flexGrow: 1, marginRight: 5, minWidth: '30%' }} />}
        <Select allowClear value={value?.unit} onChange={v => handleChange({ unit: v })} style={{ minWidth: '30%' }}>
          {unitList.map(item => <Select.Option value={item.value}>{item.key}</Select.Option>)}
        </Select>
      </div>
      {type != 'now' && <div style={{ marginBottom: '0.5rem' }}><Checkbox checked={value?.fromNow} onChange={e => handleChange({ fromNow: e.target.checked })}>{_t1('从当前开始')}</Checkbox></div>}
    </>
  )
}
const TimeInput = ({ input, field: { schema } }) => {
  const format = schema?.format || schema?.formatType
  const timeFormat = schema?.timeFormat || (format == 'time' ? 'HH:mm:ss' : format == 'date' ? 'YYYY-MM-DD' : 'YYYY-MM-DD HH:mm:ss')
  const onChange = (val) => {
    input.onChange(val ? moment(val).format(timeFormat) : val)
  }
  return format == 'time' || schema?.timeFormat ?
    <TimePicker onChange={onChange} value={input.value && typeof input.value == 'string' ? moment(input.value, timeFormat) : null} format={timeFormat} style={{ width: '100%' }} /> :
    <DatePicker showTime={format !== 'date'} onChange={onChange}
      value={input.value && typeof input.value == 'string' ? moment(input.value, timeFormat) : null} style={{ width: '100%' }} />
}

const METHODS = {
  'string': [
    { name: _r('是'), key: 'eq', component: TextInput },
    { name: _r('不是'), key: 'ne', component: TextInput },
    { name: _r('包含'), key: 'contains', component: TextInput },
    { name: _r('不包含'), key: 'notContains', component: TextInput },
    { name: _r('开始为'), key: 'startsWith', component: TextInput },
    { name: _r('结尾为'), key: 'endsWith', component: TextInput },
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ],
  'number': [
    { name: _r('等于'), key: 'eq', component: NumberInput },
    { name: _r('不等于'), key: 'ne', component: NumberInput },
    { name: _r('大于'), key: 'gt', component: NumberInput },
    { name: _r('小于'), key: 'lt', component: NumberInput },
    { name: _r('大于等于'), key: 'gte', component: NumberInput },
    { name: _r('小于等于'), key: 'lte', component: NumberInput },
    { name: _r('在范围内'), key: 'range', component: RangeInput },
    { name: _r('不在范围内'), key: 'notRange', component: RangeInput },
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ],
  'boolean': [
    { name: _r('等于'), key: 'eq', component: BooleanInput },
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ],
  'date': [
    { name: _r('等于'), key: 'eq', component: TimeInput },
    { name: _r('早于'), key: 'lt', component: TimeInput },
    { name: _r('晚于'), key: 'gt', component: TimeInput },
    { name: _r('在范围内'), key: 'range', component: RangeTimeInput },
    { name: _r('不在范围内'), key: 'notRange', component: RangeTimeInput },
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ],
  'enum': [
    { name: '等于', key: 'eq', component: EnumInput },
    { name: '不等于', key: 'ne', component: EnumInput },
    { name: '包含', key: 'in', type: 'multipleSelect' },
    { name: '不包含', key: 'nin', type: 'multipleSelect' },
    { name: '为空', key: 'isNull', component: NullInput },
    { name: '不为空', key: 'notNull', component: NullInput },
  ],
  'enums': [
    { name: _r('包含'), key: 'like', component: EnumInput },
    { name: _r('不包含'), key: 'notLike', component: EnumInput },
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ],
  'relate': [
    { name: _r('包含'), key: 'in' },
    { name: _r('不包含'), key: 'nin' },
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ],
  'relateTo': [
    { name: '等于', key: 'eq' },
    { name: '不等于', key: 'ne' },
    { name: '包含', key: 'in', type: 'multipleSelect' },
    { name: '不包含', key: 'nin', type: 'multipleSelect' },
    { name: '为空', key: 'isNull', component: NullInput },
    { name: '不为空', key: 'notNull', component: NullInput },
  ],
  'other': [
    { name: _r('为空'), key: 'isNull', component: NullInput },
    { name: _r('不为空'), key: 'notNull', component: NullInput },
  ]
}

export default METHODS

export {
  NullInput, TextInput, VariateRangeTimeInput
}