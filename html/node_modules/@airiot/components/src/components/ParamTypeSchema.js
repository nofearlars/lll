import React from 'react'
import { SchemaForm } from 'xadmin-form'
import { use } from 'xadmin'
import _ from 'lodash'
import { C } from 'xadmin-ui'

const groupSize = {
  labelCol: {
    span: 0
  },
  wrapperCol: {
    span: 24
  }
}

const schema = setInvalid => ({
  type: 'object',
  properties: {
    type: {
      type: 'string',
      title: _r('元素类型'),
      enum: ['string', 'number', 'boolean', 'object', 'array'],
      enum_title: [_r('字符串'), _r('数字'), _r('布尔值'), _r('对象'), _r('数组')],
      field: {
        attrs: { groupSize }
      }
    },
    objElement: {
      type: 'array',
      title: _r('对象元素'),
      items: {
        type: 'object',
        properties: {
          key: {
            type: 'string',
            title: _r('参数名称'),
            field: {
              validate: value => {
                setInvalid && setInvalid(invalid => ({ ...invalid, objElement: /^[0-9]*$/.test(value) }))
                return /^[0-9]*$/.test(value) ? _r('参数名称不能为纯数字') : null
              }
            }
          },
          type: {
            type: 'string',
            title: _r('参数类型'),
            enum: ['string', 'number', 'boolean', 'object', 'array'],
            enum_title: [_r('字符串'), _r('数字'), _r('布尔值'), _r('对象'), _r('数组')],
            field: {
              component: props => {
                const { input, field } = props
                const { form } = use('form')
                const values = form.getState().values
                const key = field.key.slice(0, -5)
                const onChange = val => {
                  !_.isEmpty(_.omit(val, 'type')) && _.map(_.omit(val, 'type'), (v, k) => {
                    form.change(`${key}.${k}`, v)
                    setInvalid && setInvalid(invalid => ({ ...invalid, [field.key]: v?.objElement?.some(item => /^[0-9]*$/.test(item.key)) }))
                  })
                  input.onChange(val.type)
                }
                return <TypeForm {...props} input={{ value: _.get(values, key), onChange }} setInvalid={setInvalid} />
              }
            }
          }
        }
      },
      field: {
        ButtonBody: ({ input, index, inputName }) => {
          const item = input?.value?.[index] || {}
          return item.key || inputName
        },
        ModalTitle: ({ input, index, inputName }) => {
          const { form } = use('form')
          const values = form.getState().values
          const item = input?.value?.[index] || {}
          return (values.modalTitle ? `${values.modalTitle}/${item.key || ''}` : item.key) || inputName
        },
      }
    }
  },
  formEffect: form => {
    form.useField('type', state => {
      form.setFieldData('objElement', { display: state?.value == 'object' })
    })
  }
})

const arrSchema = setInvalid => ({
  type: 'object',
  properties: {
    type: {
      type: 'string',
      title: _r('元素类型'),
      enum: ['string', 'number', 'boolean', 'object', 'array'],
      enum_title: [_r('字符串'), _r('数字'), _r('布尔值'), _r('对象'), _r('数组')],
      field: {
        attrs: { groupSize }
      }
    },
    arrElement: {
      type: 'string',
      title: _r('数组元素类型'),
      enum: ['string', 'number', 'boolean', 'object', 'array'],
      enum_title: [_r('字符串'), _r('数字'), _r('布尔值'), _r('对象'), _r('数组')],
      field: {
        component: (props) => {
          const { input } = props
          const { form } = use('form')
          const values = form.getState().values
          const { inModal } = use('dashboard.model.ctx')
          const onChange = v => {
            input.onChange(inModal ? { ...v, modalTitle: values.modalTitle } : v)
          }
          return <TypeForm {...props} input={{ ...input, onChange }} setInvalid={setInvalid} />
        }
      }
    }
  }
})

const TypeForm = props => {
  const { input: { value = {}, onChange }, field, option, group, setInvalid } = props
  const { inModal } = use('dashboard.model.ctx')
  const { form } = use('form')
  const formSchema = value?.type == 'array' ? arrSchema(setInvalid) : schema(setInvalid)
  const [formValues, setValue] = React.useState(value)

  // modalTitle用于显示弹窗标题路径
  React.useEffect(() => {
    if (inModal) {
      const values = form.getState().values
      const key = field.key?.endsWith('.type') ? field.key.slice(0, -5) : field.key
      form.change(`${key}.modalTitle`, _.trim(`${values.modalTitle ? values.modalTitle + '/' : ''}${value?.key || ''}`, '/'))
    }
  }, [value?.key, inModal])

  const handleChange = v => {
    setValue(v)
    onChange(v)
  }

  return React.useMemo(() => <C is="I18nSchemaForm"
    formKey={value?.type}
    initialValues={formValues}
    schema={formSchema}
    onChange={handleChange}
    component={({ children }) => children}
    group={group}
    option={option}
  />, [field?.key, JSON.stringify(formSchema)])
}

const OutputParamType = (props) => {
  const { input: { value = {}, onChange } } = props
  const [invalid, setInvalid] = React.useState()

  const formatSchema = data => {
    if (_.isEmpty(data)) return {}
    const schema = { type: data.type, title: data.key || '' }
    if (data.type == 'object') {
      schema.properties = !_.isEmpty(data.objElement) ? data.objElement.reduce((p, c) => {
        return c?.key ? { ...p, [c.key]: formatSchema(c) } : p
      }, {}) : {}
    } else if (data.type == 'array') {
      const children = formatSchema(data.arrElement) || {}
      schema.items = {
        type: data.arrElement?.type || 'string',
        ...children
      }
    }
    return schema
  }

  React.useEffect(() => {
    const formInvalid = Boolean(_.find(invalid, v => v))
    formInvalid && onChange({ ...value, invalid: formInvalid })
  }, [invalid])

  const handleChange = v => {
    const schema = formatSchema(v)
    onChange({ value: v, schema })
  }

  return <TypeForm {...props} input={{ value: value.value, onChange: handleChange }} setInvalid={setInvalid} />
}

export default OutputParamType