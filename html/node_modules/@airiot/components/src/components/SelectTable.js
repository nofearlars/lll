import React from 'react'
import { api } from 'xadmin'
import { Select, TreeSelect } from 'antd'
import useInput from './hooks/useInput'
import useDropdown from './hooks/useDropdown'
import useInitOptions from './hooks/useInitOptions'

const mapper = item => ({ label: item.title || item.name, value: item.id })

const getTreeData = async (list) => {
  const { json: parentList } = await api({name: `core/t/schema/batch/relations`}).fetch('', { 
    method: 'POST', 
    body: JSON.stringify(list.map(item => item.id))
  })
  for (let index in list) {
    const item = list[index]
    item.value = item.id
    const { parent } = parentList[index]
    if (parent?.length) {
      item.pId = parent[0].id
    }
  }
  return list
}

const SelectTable = (props) => {
  const { input, func, mode, onlyId, filter, tree } = props

  const [options, setOptions] = useInitOptions(input?.value, mapper)
  const [ treeOptions, setTreeOptions ] = React.useState([])
  const [list, setList] = React.useState([])

  const _input = useInput({ input, multiple: mode === 'multiple', onlyId, list })

  const fetchTable = React.useCallback(async () => {
    const { items: _list } = await api({ name: 'core/t/schema' }).query({ fields: props?.fields || ['title', 'name', 'function', 'schema'] }, { where: filter || { function: { '$regex': func } } })
    if (tree) {
      const _treeOptions = await getTreeData(_list)
      setTreeOptions(_treeOptions)
    } else {
      const _options = _list.map(mapper)
      setOptions(_options)
    }
    
    setList(_list.map(item => (props?.fields ? item : { id: item.id, title: item.title })))
  }, [filter, tree])

  const { ready, onDropdownVisibleChange, dropdownRender } = useDropdown({ fetch: fetchTable })

  React.useEffect(() => {
    if (ready) {
      fetchTable()
    }
  }, [tree, ready])

  if (tree) {
    return <TreeSelect
      treeData={treeOptions}
      {..._input}
      treeDataSimpleMode={true}
      allowClear
      showSearch
      optionFilterProp="label"
      onDropdownVisibleChange={onDropdownVisibleChange}
      dropdownRender={dropdownRender}
      style={{ width: props.width || '100%', minWidth: 120 }}
      {...props}
      placeholder={_t1(props?.placeholder || props?.label)}
    >

    </TreeSelect>
  } else {
    return <Select
      options={options}
      {..._input}
      allowClear
      showSearch
      optionFilterProp="label"
      onDropdownVisibleChange={onDropdownVisibleChange}
      dropdownRender={dropdownRender}
      style={{ width: props.width || '100%', minWidth: 120 }}
      {...props}
      placeholder={_t1(props?.placeholder || props?.label)}
    ></Select>
  }
}

export default SelectTable
