import React from 'react';
import { api, use } from 'xadmin';
import { C, Icon, Loading } from 'xadmin-ui';
import _ from 'lodash'
import { Button, Modal, Input, Popconfirm, Menu, Form, Layout, message, Row, Col, Tooltip } from 'antd'
import { HasPermission } from 'xadmin-auth'

const { Content, Sider } = Layout;

const style = {
  width: '100%',
  padding: '10px'
}

const TableTile = (props) => {

  const { title, data, setState, setActive, setSearchArr, getCycles, queryKey, url, cyclePermissionKey } = props
  const cleanEdit = `${cyclePermissionKey}.edit`
  const cleanDelete = `${cyclePermissionKey}.delete`
  const _id = data?.[queryKey] || data?.id || data?.name

  const onDisable = () => {
    const disabledKey = _.has(data, 'disable') || (data.table && data.id) ? 'disable' : 'disabled'
    const body = { ...data, [disabledKey]: !data[disabledKey] }
    api({ name: url }).fetch('/' + _id, {
      method: 'PATCH',
      body: JSON.stringify(body)
    }).then((arg) => {
      if (arg.status == 200) {
        message.success(_t1('修改成功'))
        data[disabledKey] = !data[disabledKey]
        setSearchArr(arr => _.cloneDeep(arr))
      } else {
        message.error(arg.message)
      }
    })
  }

  const onDelete = () => {
    api({ name: url }).fetch('/' + _id, {
      method: 'DELETE'
    }).then((arg) => {
      if (arg.status == 200) {
        message.success(_t1('删除成功'))
        setState({})
        setActive(null)
        getCycles()
      } else {
        message.error(arg.message)
      }
    })
  }

  const tips = !data.disabled || !data.disable ? _t1('确定禁用此项?') : _t1('确定启用此项?')
  const color = { color: data.disabled || data.disable ? 'red' : '#36af57' }

  return <div style={{ width: '16rem', display: 'flex', justifyContent: 'space-between' }}>
    <span>{title}</span>
    <span style={{ marginRight: 50 }}>
      {cleanEdit ? <HasPermission FailureComponent={null} permission={cleanEdit}>
        <Popconfirm
          title={tips}
          onConfirm={onDisable}
          onCancel={() => { }}
          okText={_t1('确定')}
          cancelText={_t1('取消')}
        >
          <Icon type="stop" style={color} />
        </Popconfirm>
      </HasPermission> : null
      }
      {
        cleanDelete ? <HasPermission FailureComponent={null} permission={cleanDelete}>
          <Popconfirm
            title={_t1('确定删除此项?')}
            onConfirm={onDelete}
            onCancel={() => { }}
            okText={_t1('确定')}
            cancelText={_t1('取消')}
          >
            <Icon type="delete" />
          </Popconfirm>
        </HasPermission> : null
      }
    </span>
  </div>
}

const Component = (props) => {

  const { setVisible, active, setActive, saveItem, queryKey, FormLayout } = props

  const [arr, setArr] = React.useState([])
  const [searchArr, setSearchArr] = React.useState([])
  const [state, setState] = React.useState({})
  const [type, setType] = React.useState('一键清除')
  const [loading, setLoading] = React.useState()
  const [listLoading, setListLoading] = React.useState(false)
  const { onceSchema, cycleSchema, oncePermission, cyclePermissionKey, url, query = { "limit": 30, "skip": 0, "sort": { "createTime": -1 }, "withCount": true } } = props

  const cleanAdd = active == '一键清除' ? oncePermission : `${cyclePermissionKey}.add`
  const cleanEdit = `${cyclePermissionKey}.edit`

  const ChildrenNode = (props) => {
    let { children, invalid, handleSubmit, submitting } = props
    const { form } = use('form')

    React.useEffect(() => { cycleSchema.formEffect && cycleSchema.formEffect(form) }, [cycleSchema])

    if (props.errors && Object.keys(props.errors).length == 1 && props.errors.time) invalid = false

    return (
      <Form onSubmit={handleSubmit}>
        {active || _.has(state, 'name') ?
          <div style={active == '一键清除' ? { width: '80%', margin: 'auto' } : { margin: '20px auto' }}>{children}</div> :
          <div style={{ width: '80%', margin: '60px auto', color: '#ccc' }}>
            <Row>
              <Col span={5}></Col>
              <Col span={19}>{_t1('请选择添加周期或已有周期')}</Col>
            </Row>
          </div>
        }
        <div style={{ textAlign: 'right', margin: '40px 50px 0px 0px' }}>
          <Form.Item>
            {
              ['一键清除', '周期清除'].includes(active) || !active ?
                cleanAdd ?
                  <HasPermission FailureComponent={null} permission={cleanAdd}>
                    <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
                      {_t1('确定')}
                    </Button>
                  </HasPermission> : null :
                cleanEdit ?
                  <HasPermission FailureComponent={null} permission={cleanEdit}>
                    <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
                      {_t1('修改')}
                    </Button>
                  </HasPermission> : null
            }
            <Button style={{ marginLeft: 15 }} onClick={() => { setActive('一键清除'); setType('一键清除'); setVisible(false); setState({}) }}>{_t1('取消')}</Button>
          </Form.Item>
        </div><br />
      </Form>
    )
  }

  const getCycles = () => {
    setListLoading(true)
    api({ name: url }).fetch('?query=' + JSON.stringify(query), {})
      .then(({ status, json }) => {
        setListLoading(false)
        if (status == 200) {
          setArr(json)
          setSearchArr(json)
        } else {
          message.error(arg.message)
        }
      }).catch(() => setListLoading(false))
  }

  const onSearch = value => {
    setSearchArr([...arr].filter(item => item.name.indexOf(value.target.value) != -1))
  };
  const addPeriodic = () => {
    setState({
      name: null//moment(new Date()).format('YYYY-MM-DD_HH:mm:ss')
    })
    setActive(null)
  }
  const searchSelect = (id) => {
    setLoading(true)
    api({ name: url }).fetch('/' + id, {})
      .then(({ status, json }) => {
        setLoading(false)
        if (status == 200) {
          json.cycle = {
            cycle: json.cycle,
            cycle_type: json.cycle_type
          }
          setState({ ...json })
        } else {
          message.error(arg)
        }
      }).catch(() => setLoading(false))
  }

  const onSubmit = (value) => {
    saveItem(value, type).then(() => {
      setState({})
      setActive('一键清除')
      setType('一键清除')
      setVisible(false)
    })
  }

  const ComLayout = FormLayout || ChildrenNode

  const clearForm = (
    React.useMemo(() => <C is="I18nSchemaForm" key={`ClearData-${active || Math.random()}`}
      schema={type == '一键清除' ? onceSchema : cycleSchema}
      initialValues={state}
      component={props => <ComLayout {...props} setVisible={setVisible} />}
      onSubmit={onSubmit}
    />, [type, JSON.stringify({ onceSchema, cycleSchema, state })])
  )

  return (
    <Layout style={{ padding: 0, maxHeight: 550, background: 'rgba(0,0,0,0)' }} className="warn-archive-model">
      <C is="I18nSchemaForm" 
        onChange={(arg) => {
          setType(arg.clearType)
          setActive(arg.clearType == '周期清除' ? null : arg.clearType)
          if (arg.clearType == '一键清除') {
            setState({})
          } else {
            getCycles()
          }
        }}
        initialValues={{ clearType: type }}
        schema={{
          type: 'object',
          properties: {
            clearType: {
              type: 'string',
              title: _r('清除方式'),
              enum: ['一键清除', '周期清除'],
              enum_title: [_r('一键清除'), _r('周期清除')]
            },
          }
        }}
        component={({ children }) => <Form >
          <div style={{ width: '80%', margin: 'auto' }}>{children}</div>
        </Form>}
      />
      {type == '一键清除' ? clearForm :
        <Layout style={{ padding: 0, borderTop: '1px solid #f0f0f0', background: 'rgba(0,0,0,0)' }} className="warn-archive-model">
          <Sider width={250} style={{ borderRight: '1px solid #f0f0f0', overflow: 'auto' }}>
            <div style={style}>
              <span style={{ fontSize: 16, fontWeight: 500, color: '#fff' }}>{_t1('周期管理')}</span>
              <HasPermission permission={cleanAdd}>
                <Tooltip title={_t1('添加周期')}>
                  <Button type='primary' size='small' onClick={addPeriodic} style={{ position: 'absolute', right: 10 }} icon={<Icon type='plus' />} />
                </Tooltip>
              </HasPermission>
            </div>
            <div style={style}><Input placeholder={_t1("搜索...")} onChange={onSearch} /></div>
            <Loading spinning={listLoading} style={{ marginTop: 15 }}>
              <Menu mode="inline" selectedKeys={active} onSelect={(arg) => {
                setActive(arg.key);
                let id = arg.key
                if (props?.btnModule == 'warning' || props?.btnModule == 'table' || queryKey == 'id') { id = arg?.item?.props?.id }
                searchSelect(id)
              }}>
                {searchArr?.map(item => <Menu.Item key={item.name} id={item?.id}>
                  <TableTile {...props} title={item.name} data={item} setActive={setActive} setState={setState} setSearchArr={setSearchArr} getCycles={getCycles} />
                </Menu.Item>)}
              </Menu>
            </Loading>
          </Sider>
          <Content style={{ padding: 10, overflow: 'auto' }}>
            {loading ? <Loading>{clearForm}</Loading> : clearForm}
          </Content>
        </Layout>
      }
    </Layout>
  )
}

/**
  * @param {string} title 标题
  * @param {object} onceSchema 一键清除Schema
  * @param {object} cycleSchema 周期清除Schema
  * @param {string} url 周期请求url
  * @param {string} queryKey 周期修改、删除key
  * @param {string} oncePermission 一键清除权限 比如logClean.add
  * @param {string} cyclePermissionKey 一键清除权限前缀 比如logClean
  * @param {Function} saveItem 异步保存方法
  * @param {Element} FormLayout 表单Layout
*/

const ClearData = (props) => {

  const { onChange, title = _r('日志') } = props
  const [visible, setVisible] = React.useState(false);
  const [active, setActive] = React.useState('一键清除')

  return <>
    <Modal destroyOnClose={true}
      maskClosable={false}
      keyboard={false}
      title={_t1('清除{{title}}', { title: title })}
      visible={visible}
      footer={[]}
      onCancel={() => { setActive('一键清除'); setVisible(false); }}
      width={'60%'}
    >
      <Component {...props} onChange={onChange} visible={visible} setVisible={setVisible} active={active} setActive={setActive} />
    </Modal>
    <Popconfirm placement="bottomRight"
      icon={null} title={_t1('清除的{{title}}将无法恢复，确定进行清除操作', { title: title })}
      onConfirm={() => setVisible(true)} >
      <Button>{`${_t1('清除')}${title}`}</Button>
    </Popconfirm>
  </>
}

export default ClearData
