
import React from 'react'
import { Tabs, Menu, Col, Input, Radio, Avatar, Empty, Row, Tooltip, Checkbox, Card, Tag, message } from 'antd';
import { api, app, config } from 'xadmin'
import { Loading, Icon } from 'xadmin-ui'
import NoData from '../NoData'

import _ from 'lodash'
import './ModelPointTable.css'
const TabPane = Tabs.TabPane
const RadioGroup = Radio.Group
const CheckboxGroup = Checkbox.Group;

const AvatarIcon = (props) => {
  if (props.icon) {
    return <Avatar size={20} shape="square" src={config('mediaUrl') + props.icon} style={{ margin: '0 10px 3px 0' }} />
  } else {
    return <Avatar size={20} shape="square" style={{ margin: '0 10px 3px 0' }}>M</Avatar>
  }
}

const convert_values = (data) => {
  if (!data || JSON.stringify(data) == '{}' || !_.isArray(data)) return {}
  let object = {}
  let arr = []
  data.forEach(item => {
    const model_id = item && item.table && item.table.id
    if (Object.keys(object).indexOf(model_id) > -1) {
      object[model_id].push(item)
    } else {
      object[model_id] = [item]
    }
  })
  return object

}

class ModelPointTable extends React.Component {
  constructor(props) {
    super(props);
    this.data = []
    const { value, input } = props
    const selectedKey = value ? (value.table && value.table.id ? [value.table.id] : [])
      : (input && input.value && input.value.table && input.value.table.id && [input.value.table.id]) || []
    const selectValue = value ? value.id : (input && input.value && input.value.id)
    this.checkedkeys = []
    this.state = {
      tables: null,
      activeKey: 'Tabs',
      table: {},
      tagData: null,
      value: null,
      loading: false,
      loadings: false,
      selectedKey: selectedKey,
      selectValue: selectValue,
      checkedList: convert_values(value ? value : (input && input.value && input.value)),
      checkedData: value ? value : (input && input.value && input.value)
    }
  }

  relationsFun = (modelId, data) => {
    let arrmodel = []
    if (modelId && data) {
      if (this.props.child) {
        arrmodel = data?.child
      } else {
        arrmodel = [...data?.parent, ...data?.child]
      }
    }
    return arrmodel.map(item => ({ ...item, name: item?.title || '' }))
  }
  componentDidMount() {
    const { modelId, value } = this.props
    const { selectedKey } = this.state
    const where = { where: { function: { '$regex': 'device' } } } // modelId && { where: { 'id': modelId } }
    this.setState({ loading: true })
    if (modelId) {
      api({ name: `core/t/schema/relations/` })
        .fetch(modelId + '?type=noDept', {})
        .then(({ json }) => {
          if (json) {
            const ms = this.relationsFun(modelId, json)
            this.setState({ tables: ms, loading: false })
            if (selectedKey?.length > 0) {
              this.onClick({
                key: selectedKey[0],
                tabskey: value && value.type,
                item: ms[0]
              })
            }
          }
        })
    } else {
      api({ name: 'core/t/schema' })
        .query({ fields: ['icon', 'relations', 'name'] }, where)
        .then(({ items }) => {
          if (items && !_.isEmpty(items)) {
            this.setState({ tables: items, loading: false })
          }
          if (selectedKey && selectedKey.length > 0) {
            this.onClick({ key: selectedKey[0], tabskey: value && value.type, item: items[0] })
          }
        })
    }
  }

  onClick = ({ item, key, tabskey }) => {
    if (!item) return false
    const prop = {
      id: key || (item && item.props && item.props.eventKey) || (item.id),
      name: (item && item.props && item.props.name) || (item.name)
    }
    const { tagData } = this.state
    this.setState({ loadings: true })
    api({ name: 'core/t/schema/tag' }).get(key || '').then((json) => {
      if (json) {
        json.tags?.forEach((tag) => {
          tag['table'] = prop
          tag['ref_id'] = tag.id + '_' + prop.id
        })
        this.setState({ tagData: json, loadings: false })
        if (json.tags) {
          this.data = json.tags
        }
        if (json.types) this.setState({ activeKey: json.types[0] })
      }
    })
    let table = this.state.tables?.filter(opt => opt.id == key)[0]
    this.setState({ activeKey: tabskey || '', table, targetValue: null, tagData: null })
  }

  convert_data = (checkedList) => {
    return checkedList && Object.values(checkedList).reduce((prev, curr) => {
      return prev.concat(curr)
    }, []) || []
  }

  onChange = (value) => {
    const { onChange, type, input } = this.props
    const { table, tagData, checkedList } = this.state
    let data = {}
    if (_.isArray(value) && type == 'checkbox') {
      checkedList[table.id] = _.intersectionWith(this.data, value, (a, c) => {
        let hasA
        if (_.isArray(c)) {
          hasA = c?.indexOf(a.id) >= 0
        } else if (_.isString(c)) {
          hasA = c == a.id
        } else if (_.isPlainObject(c)) {
          hasA = c.id == a.id
        }
        return hasA && a?.table?.id == table?.id
      })
      const newdata = this.convert_data(checkedList)
      this.setState({ checkedList, checkedData: newdata })
      data = newdata
    } else {
      const target = value.target
      data = {
        id: target.value || '',
        name: target.label || '',
        table: this.state.table,
        type: this.state.activeKey
      }
      this.setState({ selectValue: target.value || '' })
    }
    if ((onChange && _.isFunction(onChange)) || (input && input.onChange)) {
      input ? input.onChange(data) : onChange(data)
    } else {
      message.error('onChange事件出错了！')
    }
  }

  onTabChange = activeKey => this.setState({ activeKey })

  TabPaneRadio = (tab, data, type) => {
    const { table, selectValue, checkedList } = this.state
    const Title = (opt) => {
      return (
        <div>
          <p style={{ marginBottom: -5 }}>{opt && opt.name}({opt && opt.id})</p>
          {opt?.remark && <span>{_t1('备注')}：{opt?.remark}</span>}
        </div >
      )
    }
    if (!type || type == 'radio') {
      return (
        <TabPane tab={tab} key={tab}>
          <RadioGroup onChange={this.onChange} value={selectValue || ''}>
            {
              data.tags.map(opt => (
                <span style={{ display: 'inline-block' }}>
                  <Radio
                    style={{ width: 100, height: 30, marginRight: 60, marginLeft: 35 }}
                    label={opt && opt.name}
                    value={opt?.id}
                  >
                    <Tooltip title={Title(opt)}>
                      <span style={{
                        maxWidth: '150px', display: 'inline-block', height: '25px', lineHeight: '25px',
                        overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', marginBottom: '-8px'
                      }}>
                        {opt && opt.name}
                        <span style={{ color: '#ccc', fontSize: '13px' }}> ( {opt && opt.id || null} )</span>
                      </span>
                    </Tooltip>
                  </Radio>
                </span>
              ))
            }
          </RadioGroup>
        </TabPane>
      )
    } else if (type == 'checkbox') {
      return <TabPane tab={tab} key={tab}>
        <CheckboxGroup onChange={this.onChange} value={checkedList[table.id] && checkedList[table.id].map(i => i.id)} >
          {
            data.tags.map(opt => (
              <span style={{ display: 'inline-block', width: 200, height: 30, marginRight: 20, marginLeft: 25 }}>
                <Checkbox value={opt && opt.id} >
                  <Tooltip title={Title(opt)}>
                    <span style={{
                      maxWidth: '150px', display: 'inline-block', height: '25px', lineHeight: '25px',
                      overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap', marginBottom: '-8px'
                    }}>
                      {opt && opt.name}
                      <span style={{ color: '#ccc', fontSize: '13px' }}> ( {opt && opt.id || null} )</span>
                    </span>
                  </Tooltip>
                </Checkbox>
              </span>
            ))
          }
        </CheckboxGroup>
      </TabPane>
    }
  }

  RenderTabPane = (data = {}) => {
    const { table } = this.state
    const { value, input } = this.props
    const modelName = table?.title || value?.table?.title || input?.value?.table?.title
    if (data.tags && data.types) {
      return data.types.map(tab => (this.TabPaneRadio(tab, data, this.props.type)))
    } else if (data.tags && !data.types) {
      return this.TabPaneRadio(modelName || 'Tab', data, this.props.type)
    }
    return <TabPane key={modelName} tab={modelName}>
      <NoData />
     </TabPane >
  }

  InputChange = (event) => {
    this.setState({ targetValue: event.target.value })
    const { tagData } = this.state
    console.log(this.data, 'this.data')
    let filter_tags = this.data.filter(opt => {
      if (opt.name) return (opt.name + opt.id).indexOf(event.target.value) != -1
    })
    tagData['tags'] = filter_tags
    console.log(tagData, 'tagData')
    this.setState({ tagData })
  }

  onChangeClear = (v) => {
    const { checkedList } = this.state
    const { input: { onChange }, onChange: onChanges } = this.props
    const newdata = this.convert_data(checkedList).filter(item => item.ref_id != v.ref_id)
    this.setState({ checkedList: convert_values(newdata), checkedData: newdata }, () => {
      onChange ? onChange(newdata) : onChanges ? onChanges(newdata) : null
    })
  }

  render() {
    const {
      tables, tagData, activeKey, targetValue, selectedKey,
      loading, loadings, checkedData, checkedList
    } = this.state

    return [<>
      {
        (this.props.type != 'radio' && checkedData && checkedData.length > 0) ? (
          <Card bodyStyle={{ width: '100%', borderRadius: '5px', padding: 5 }}>
            {checkedData.map(item => (
              <span key={item.name}>
                <Tooltip title={'所属设备表 ' + (item.table && item.table.name || '')}>
                  <Tag closable onClose={() => this.onChangeClear(item)}>{
                    this.props.fullLable ? item?.table?.name + '-' + item.name : item.name
                  }</Tag>
                </Tooltip>
              </span>
            ))}
          </Card>
        ) : null
      }</>,
    <div className="ModelPointTable">
      <div className="ModelPointTable-left">
        <div className="ModelPointTable-left-title">{_t1('请选择设备表')}</div>
        <div className="ModelPointTable-left-list">
          <Menu theme="dark" mode="inline" onSelect={this.onClick} defaultSelectedKeys={selectedKey}>
            {
              loading ? <Loading /> : tables && tables.length > 0 ? tables.map(item => (
                <Menu.Item name={item.title} key={item.id}>
                  {item.icon ? <Avatar size={19} src={item?.icon} /> : <Icon className="table-type-icon" svg={require('../../icons/tableIcon/设备表.svg')} />}
                  <span>{item.title}</span>
                </Menu.Item>
              )) : null
            }
          </Menu>
        </div>
      </div>
      <div style={{ width: '100%' }} >
        <div className="ModelPointTable-right">
          <Input placeholder={_t1("变量搜索...")} style={{ border: 'none' }} value={targetValue} onChange={this.InputChange} />
        </div>
        <div style={{ height: '330px', overflow: 'auto' }}>
          {
            loadings ? <Loading /> : tagData ?
              <Tabs defaultActiveKey={activeKey} onChange={this.onTabChange}>
                {this.RenderTabPane(tagData)}
              </Tabs>
              : <Empty  style={{paddingTop:'50px'}} image={require('../../imgs/暂无数据空.png')}/>
          }
        </div>

      </div>
    </div>
    ]
  }
}
export default ModelPointTable
