import React from 'react';
import { use, app } from 'xadmin';
import { C } from 'xadmin-ui';
import { Modal, Card, Tooltip, Tag } from 'antd';
import PointTable from '../components/PointTable';

const PointTableComponent = (props) => {
  const { cellKey, tables, tableDataFilters } = props
  const outputParams = use('cell.output.value', cellKey)
  const setOutputParams = use('cell.output.set', cellKey)

  const viewSchema = {
    type: 'object',
    properties: app.get('plugins').find(item => item.key === 'device')?.defaultProperties
    || {}
  } 

  const { getQueryFilter } = use('queryEditor.methods')
  const [ value, setValue ] = React.useState([])
  const queryFilter = getQueryFilter(tableDataFilters, viewSchema)
  const [ visible, setVisible ] = React.useState(false)
  return (
    <>
      <Card onClick={() => { setVisible(true) }} bodyStyle={{ width: '100%', borderRadius: '5px', padding: 5, minHeight: 30 }}>
        {outputParams ? outputParams?.map(item => (
          <span key={item.ref_id}><Tooltip key={item.id} title={_t1('所属设备 ') + (item.tableData && item.tableData.name || '')}>
            <Tag>{item.name}</Tag>
          </Tooltip>
          </span>
        )) : _t1('点击选择数据点')}
      </Card>
      <Modal title={_t1("数据点选择")} visible={visible} width={1200} onCancel={() => { setVisible(false) }} onOk={() => { setVisible(false) }}>
        <PointTable value={outputParams} onChange={v => { setOutputParams(v) }} tables={tables} queryFilter={queryFilter}></PointTable>
      </Modal>
    </>
  )
}

const PointTableWidget = {
  title: _r('数据点选择器'),
  category: [_r('业务选择器'), _r('业务选择器')],
  icon: require('../icons/画面数据点选择器.svg'),
  component: PointTableComponent,
  paramSchema: {
    type: 'object',
    properties: {
      tables: {
        type: 'array',
        title: '表选择',
        fieldType: 'table',
        items: {}
      },
      tableDataFilters: {
        title: '内置查询',
        type: 'array',
        unbind: true,
        // properties: {},
        items: {},
        field: { component: ({ input }) => {
          const viewSchema = {
            type: 'object',
            properties: app.get('plugins').find(item => item.key === 'device')?.defaultProperties
            || {}
          } 
          // viewSchema.properties = _.omit(viewSchema.properties, ['model', 'parent'])
          return <C is='Dashboard.FormModalButton' align="left" offset={100} title="内置查询">
            <C is='QueryEditor'
              schema={viewSchema}
              input={input}
            />
          </C>
        } }
      },
    }
  },
  fieldWidget: true,
  // initParam: { placeholder: '请选择资产' },
  initLayout: { width: 160, height: 40 }
}

export default PointTableWidget
