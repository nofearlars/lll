import { Button, Card, Form, Row, Radio } from 'antd';
import _ from 'lodash';
import React, { useEffect } from 'react';
import { api, app, use } from 'xadmin';
import { SchemaForm } from 'xadmin-form';
import { C, Icon } from 'xadmin-ui';
import { loginForm } from './schema';
import LogoComponent from './LogoComponent';
import './css.css'

const DefaultLayout = props => {
  const { children, invalid, handleSubmit, showCode, submitting, loadButton, formConfig, showCodeEdit } = props;
  const { t: _t1 } = useI18n()
  const isEdit = app.context.router?.getCurrentLocation()?.pathname?.includes('edit')
  return (
    <Form onSubmit={handleSubmit} labelCol={{ span: formConfig?.labelCol || 24 }} labelAlign={formConfig?.labelAlign} layout={formConfig?.layout}
      wrapperCol={{ span: formConfig?.wrapperCol || 24 }}>
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333', maxWidth: 'none' }}>
        {children.filter(c => showCode == true && showCodeEdit || c.key != 'verifyCode')}
        <Row>
          <Button type={loadButton?.type || "primary"} loading={submitting} size={loadButton?.size} className="loginBtn" onClick={() => {
            if (!isEdit) {
              handleSubmit()
            }
          }} htmlType="submit">{loadButton?.text || _t1('登录')}</Button>
        </Row>
      </Card>
    </Form>
  );
}

const Login = props => {
  const { box, userConfigure, paassConfigure, loadButton, formConfig, cellKey, doEvents } = props
  const setEvents = use('cell.events.set', cellKey)
  let showCodeEdit = props.notShowCode

  const { t: _t1 } = useI18n()

  useEffect(() => {
    _.isFunction(setEvents) && setEvents({
      loginSuccess: {
        title: _t1('登录成功')
      },
      loginFail: {
        title: _t1('登录失败')
      }
    })
  }, [])
  let obj = new Object()
  obj['location'] = app.context.router?.getCurrentLocation()
  const { showCode, showExtra, onSubmit } = use('auth.login', obj)
  if (userConfigure?.userlabel) {
    loginForm.properties.username.title = userConfigure.userlabel
  }
  if (userConfigure?.passlabel) {
    loginForm.properties.password.title = userConfigure.passlabel
  }
  const onFormSubmit = values => {
    onSubmit(values).then(() => {
      doEvents && doEvents('loginSuccess')
    }).catch(() => doEvents && doEvents('loginFail'))
  }
  return (
    <div className="loginGuide login-guide" style={{ height: box?.height + 'px' }}>
      {/* <div className="loginBox">
                <LogoComponent></LogoComponent>
              </div> */}
      <div className="login-input">
        <C is="I18nSchemaForm"
          formKey={'setLoginGuide'}
          schema={loginForm}
          component={(props) => <DefaultLayout {...props} formConfig={formConfig} loadButton={loadButton} />}
          group={C('Form.SimpleGroup')}
          onSubmit={onFormSubmit}
          showCode={showCode}
          showCodeEdit={!showCodeEdit}
          {...props}
        />
      </div>
    </div>
  )
}

const formSchema = {
  layout: {
    title: _r('表单布局'),
    type: 'string',
    enum: ['horizontal', 'vertical', 'inline'],
    enum_title: [_r('水平'), _r('垂直'), _r('内联')],
    field: {
      effect: ({ value: active, name }, form) => {
        setTimeout(() => {
          form.setFieldData(`formConfig.labelAlign`, { display: active == 'horizontal' })
          form.setFieldData(`formConfig.labelCol`, { display: active == 'horizontal' })
          form.setFieldData(`formConfig.wrapperCol`, { display: active == 'horizontal' })
        })
      }
    }
  },
  labelAlign: {
    title: _r('标题对齐方式'),
    type: 'string',
    enum: ['left', 'right'],
    enum_title: [_r('左对齐'), _r('右对齐')],
  },
  labelCol: {
    title: _r('标题占比'),
    type: 'number',
    maximum: 24,
    minimum: 0
  },
  wrapperCol: {
    title: _r('输入框占比'),
    type: 'number',
    maximum: 24,
    minimum: 0
  },

}
const inputSchema = {
  userlabel: {
    title: _r('用户标题文字'),
    type: 'string',
  },
  passlabel: {
    title: _r('密码标题文字'),
    type: 'string',
  },
  // iconShow: {
  //   title: _r('是否展示图标'),
  //   type: 'boolean'
  // },
  // required: {
  //   title: _r('是否展示必填'),
  //   type: 'boolean'
  // },
}
const buttonSchema = {
  text: {
    title: _r('文字'),
    type: 'string'
  },
  type: {
    title: _r('类型'),
    type: 'string',
    enum: ['default', 'primary', 'dashed', 'text', 'link'],
    enum_title: [_r('默认'), _r('深色主题'), _r('虚线按钮'), _r('文字按钮'), _r('链接按钮')],
  },
  size: {
    title: _r('大小'),
    type: 'string',
    enum: ['small', 'middle', 'large'],
    enum_title: [_r('小'), _r('中'), _r('大')],
  }
}

const RadioCode = props => {
  const { input: { onChange, value, checked } } = props
  return (
    <Radio.Group onChange={(e) => { onChange(e.target.value) }} defaultValue={value} value={value} checked={value} optionType="button"
      buttonStyle="solid">
      <Radio.Button value={false}>是</Radio.Button>
      <Radio.Button value={true}>否</Radio.Button>
    </Radio.Group>
  )
}

const paramSchema = {
  type: 'object',
  properties: {
    box: {
      title: _r('登录卡片配置'),
      type: 'object',
      properties: {
        width: {
          title: _r('宽度'),
          type: 'number'
        },
        height: {
          title: _r('高度'),
          type: 'number'
        }
      }
    },
    userConfigure: {
      title: _r('标题配置'),
      type: 'object',
      properties: {
        ...inputSchema
      }
    },
    formConfig: {
      title: _r('表单配置'),
      type: 'object',
      properties: {
        ...formSchema
      }
    },
    loadButton: {
      title: _r('登录按钮配置'),
      type: 'object',
      properties: {
        ...buttonSchema,
      }
    },
    imgCodeBg: {
      title: _r('验证码背景色'),
      type: 'string',
      fieldType: 'color'
    },
    notShowCode: {
      title: '显示验证码',
      type: 'boolean'
    }
  },
  form: ['*', {
    key: 'notShowCode', component: RadioCode
  }]
}

const LoadComponent = {
  title: _r('登录组件'),
  category: [_r('页面元素'), _r('登录')],
  icon: require('../../icons/登录组件.svg'),
  component: Login,
  initLayout: { width: 1200, height: 800 },
  initParam: {
    box: {
      width: 648
    }
  },
  paramSchema,
  theme: [
    { selector: '.login-guide .ant-form-item:nth-child(1)', title: _r('用户名'), config: ['background', 'font', 'border', 'layout', 'flex'], hiddenConfig: ['ali'] },
    { selector: '.login-guide .ant-form-item:nth-child(2)', title: _r('密码'), config: ['background', 'font', 'border', 'layout', 'flex'], hiddenConfig: ['ali'] },
    { selector: '.loginGuide', title: _r('登录手册'), config: ['background', 'border', 'layout'] },
    { selector: '.ant-card-body', title: _r('登录卡片内容区'), config: ['background', 'border', 'layout'] },
    { selector: '.login-input button', title: _r('登录按钮'), config: ['background', 'font', 'border', 'layout', 'flex'], hiddenConfig: ['ali'] }
  ]
}

export default LoadComponent
