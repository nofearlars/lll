import React from 'react'
import { Card, Button, Row, Form } from 'antd'
import { SchemaForm } from 'xadmin-form'
import { regForm } from './schema'
import { Icon, C } from 'xadmin-ui';
import { app, use } from 'xadmin'
import LogoComponent from './LogoComponent'

const DefaultLayout = props => {
  const { children, invalid, handleSubmit, showCode, submitting, loadButton, formConfig } = props;
  const { _t } = app.context;
  return (
    <Form onSubmit={handleSubmit} labelCol={{ span: formConfig?.labelCol || 24 }} labelAlign={formConfig?.labelAlign} layout={formConfig?.layout}
    wrapperCol={{ span: formConfig?.wrapperCol || 24 }}>
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333', maxWidth: 'none' }}>
        {children}
        <Row>
          <Button type={loadButton?.type || "primary"} loading={submitting} size={loadButton?.size} className="loginBtn" onClick={handleSubmit} htmlType="submit">{loadButton?.text || _t('Login')}</Button>
        </Row>
      </Card>
    </Form>
  );
}
// const DefaultLayout = props => {
//   const { children, invalid, handleSubmit, submitting } = props;
//   const { _t } = app.context;
//   return (
//     <Form onSubmit={handleSubmit} layout="vertical">
//       <Card style={{ marginTop: 0, borderTop: 'none' }}>
//         {children}
//         <Row>
//           <Button type="primary" loading={submitting} className="loginBtn" onClick={handleSubmit} htmlType="submit" disabled={invalid}>{_t('Login')}</Button>
//         </Row>
//       </Card>
//     </Form>
//   );
// }

const Regstor = props => {
  const { box, userConfigure, paassConfigure, loadButton, formConfig } = props
  let obj = new Object()
  obj['location'] = app.context.router?.getCurrentLocation()
  const { showCode, showExtra, onSubmit } = use('auth.reg', obj)
  
  userConfigure && Object.keys(userConfigure).map(item => {
    regForm.properties[item].title = userConfigure[item]
  })

  const { t:_t1 } = useI18n()
  
  return (
        <div className="loginGuide login-guide">
          {/* <div className="loginBox">
            <LogoComponent></LogoComponent>
            <p className="guideUse">注册新账号</p>
          </div> */}
          <C is="I18nSchemaForm"
            formKey={'setRegGuide'}
            schema={regForm}
            component={(props)=><DefaultLayout {... props} formConfig={formConfig} loadButton={loadButton}/>}
            group={C('Form.SimpleGroup')}
            onSubmit={(value)=>onSubmit(value)}
          />
          <div className="loginBox">
            <p className="goReg goLogin" onClick={()=>app.go('/login')}>{_t1('已有账号，去登录->')}</p>
          </div>
        </div>
  )
}


const formSchema = {
  layout: {
    title: _r('表单布局'),
    type: 'string',
    enum: [ 'horizontal', 'vertical', 'inline' ],
    enum_title: [ _r('水平'), _r('垂直'), _r('内联') ],
    field: {
      effect: ({ value: active, name }, form) => {
        setTimeout(() => {
          form.setFieldData(`formConfig.labelAlign`, { display: active == 'horizontal' })
          form.setFieldData(`formConfig.labelCol`, { display: active == 'horizontal' })
          form.setFieldData(`formConfig.wrapperCol`, { display: active == 'horizontal' })
        })
      }
    }
  },
  labelAlign: {
    title: _r('标题对齐方式'),
    type: 'string',
    enum: [ 'left', 'right' ],
    enum_title: [ _r('左对齐'), _r('右对齐') ],
  },
  labelCol: {
    title: _r('标题占比'),
    type: 'number'
  },
  wrapperCol: {
    title: _r('输入框占比'),
    type: 'number'
  },
  
}
const inputSchema = {
  username: {
    title: _r('用户标题文字'),
    type: 'string',
  },
  password: {
    title: _r('密码标题文字'),
    type: 'string',
  },
  realname: {
    title: _r('姓名标题文字'),
    type: 'string',
  },
  mobileNumber: {
    title: _r('手机标题文字'),
    type: 'string',
  },
  com: {
    title: _r('公司标题文字'),
    type: 'string',
  },
  email: {
    title: _r('邮箱标题文字'),
    type: 'string',
  },
  // iconShow: {
  //   title: _r('是否展示图标'),
  //   type: 'boolean'
  // },
  // required: {
  //   title: _r('是否展示必填'),
  //   type: 'boolean'
  // },
}
const buttonSchema = {
  text: {
    title: _r('文字'),
    type: 'string'
  },
  type: {
    title: _r('类型'),
    type: 'string',
    enum: [ 'default', 'primary', 'dashed', 'text', 'link' ],
    enum_title: [ _r('默认'), _r('深色主题'), _r('虚线按钮'), _r('文字按钮'), _r('链接按钮') ],
  },
  // required: {
  //   title: _r('是否展示必填'),
  //   type: 'boolean'
  // },
  size:{
    title: _r('大小'),
    type: 'string',
    enum: [ 'small', 'middle', 'large' ],
    enum_title: [ _r('小'), _r('中'), _r('大') ],
  }
}

const paramSchema = {
  type: 'object',
  properties: {
    userConfigure: {
      title: _r('标题配置'),
      type: 'object',
      properties: {
        ... inputSchema
      }
    },
    // paassConfigure: {
    //   title: _r('密码配置'),
    //   type: 'object',
    //   properties: {
    //     ... inputSchema,
    //     passEyeIconShow: {
    //       title: _r('是否显示密码展示图标'),
    //       type: 'boolean'
    //     },
    //   }
    // },
    formConfig: {
      title: _r('表单配置'),
      type: 'object',
      properties: {
        ... formSchema
      }
    },
    loadButton:{
      title: _r('注册按钮配置'),
      type: 'object',
      properties: {
        ... buttonSchema,
      }
    },
    logo: {
      'title': _r('系统图片'),
      'type': 'string',
      'description': _r('上传平台的logo'),
      fieldType: 'image',
      field: {
        uploadType: 'img',
      }
    }
    // registerButton:{
    //   title: _r('注册按钮配置'),
    //   type: 'object',
    //   properties: {
    //     ... buttonSchema,
    //   }
    // },
  },
  form: ['*']
}

const Reg = {
  title: _r('注册组件'),
  category: _r('页面元素'),
  icon: require('../../icons/注册.svg'),
  component: Regstor,
  initLayout: { width: 1200, height: 800 },
  initParam: { 
    box: { 
      width: 648 
    } 
  },
  paramSchema,
  theme: [
    { selector: '.login-guide', title: _r('内层'), config: ['background', 'border', 'layout'] },
    { selector: 'label', title: _r('表单'), config: ['background', 'font', 'border', 'layout', 'flex'], hiddenConfig: ['ali'] },
    { selector: '.login-input button', title: _r('注册按钮'), config: ['background', 'font', 'border', 'layout', 'flex'], hiddenConfig: ['ali'] }
  ]
}

export default Reg
