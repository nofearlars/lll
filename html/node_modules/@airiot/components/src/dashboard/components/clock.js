import React, { useRef, useEffect, } from 'react'
import fetch from 'isomorphic-fetch'
import { Menu, Popover, Alert, Badge } from 'antd';
import { api, use, app } from 'xadmin'
import moment from 'moment'
import { Icon } from 'xadmin-ui';
import { dir } from 'async';

const useInterval = (callback, delay) => {
  const savedCallback = useRef()

  useEffect(() => {
    savedCallback.current = callback
  });

  useEffect(() => {
    const tick = () => {
      savedCallback.current()
    }
    if (delay !== null) {
      let id = setInterval(tick, delay)
      return () => clearInterval(id)
    }
  }, [delay])
}

const Clock = props => {
  const { time } = use('time', { interval: 1000 })
  const [netTime, setNetTime] = React.useState(null)
  const clientTime = moment()

  const { t:_t1 } = useI18n()
  

  // React.useEffect(() => {
  //   fetch('http://api.m.taobao.com/rest/api3.do?api=mtop.common.getTimestamp')
  //     .then(data => console.log(data))
  //     .catch(console.error)
  // }, [ ])

  const dura = (moment.duration(time.diff(clientTime)).as('seconds'))
  return (
    <Popover placement="bottom" title="系统时间" content={(
      <>
        <div><span >{_t1('服务器时间')}:</span> {time.format('YYYY年MM月DD日 HH:mm:ss')}</div>
        <div><span >{_t1('客户端时间')}:</span> {clientTime.format('YYYY年MM月DD日 HH:mm:ss')}</div>
        <div>{_t1('服务器时间与客户端时间相差')} {dura} {_t1('秒')}</div>
        {Math.abs(dura) > 5 ? <Alert type="warning" message={_t1("请检查服务器端时间是否正确!!!")} /> : null}
        {netTime && <div><span >{_t1("标准时间")}:</span> {netTime.format(`YYYY${_t1('年')}MM${_t1('月')}DD${_t1('日')} HH:mm:ss`)}</div>}
      </>
    )}>
      <div>{time.format(`YYYY${_t1('年')}MM${_t1('月')}DD${_t1('日')}`)}</div>
      <div style={{ fontSize: '1rem', textAlign: 'center' }}>
        {time.format('HH:mm:ss')}
        {Math.abs(dura) > 5 ? <Icon type="exclamation-circle"
          style={{ width: '16px', height: '16px', fontSize: '16px', margin: '0 0 0 0.3rem' }} /> : null}
      </div>
    </Popover>
  )
}

const ServerTimeContext = React.createContext()

const ClientTime = props => {
  const [time, setTime] = React.useState(moment())
  useInterval(() => setTime(moment()), 1000)

  const getTime = () => time
  return <ServerTimeContext.Provider value={getTime}>{props.children}</ServerTimeContext.Provider>
}

const ServerTime = props => {
  const time = React.useRef(moment())
  const { subscribe, onMessage } = use('ws')

  useInterval(() => time.current = moment(time.current.add(1, 's')), 1000)

  React.useEffect(() => subscribe('time', {}), [])
  React.useEffect(() => {
    onMessage(json => {
      if (json && json.time) {
        time.current = moment(parseInt(json.time))
      }
    })
  }, [])

  return (<ServerTimeContext.Provider value={time}>{props.children}</ServerTimeContext.Provider>)
}

export default {
  root_component: (app) => (children) => (
    <ServerTime>{children}</ServerTime>
  ),
  hooks: {
    'time': ({ interval = 1000, ...props }) => {
      const [time, setTime] = React.useState(moment())
      const serverTime = React.useContext(ServerTimeContext)
      useInterval(() => {
        serverTime && setTime(serverTime.current)
      }, interval)
      return { ...props, time }
    }
  },

}

export { Clock }
