import React, { useState, useEffect } from 'react'
import { Card, Table } from 'antd'
import { api, use } from 'xadmin'
import { C, Loading } from 'xadmin-ui'
import _ from 'lodash'
import moment from 'moment'

const LogTable = props => {
  const { consumerNode, consumerModel, limit, isShowPage, showlist, scrollY, cellKey, doEvents } = props
  const [ data, setTableData ] = useState([])
  const [ columns, setColumns ] = useState([])
  const [ customKey, SetCustomKey ] = useState()
  const [ enum_title, SetEnum_titles ] = useState()
  const id = consumerNode&&consumerNode.id
  const modelId = consumerModel&&consumerModel.id
  const [ timer, setTimer ]  = useState(null)

  useEffect(()=>{
    let initColumns = [
      {
        title: _r('操作时间'),
        dataIndex: 'time',
        key: 'time',
      },
      {
        title: _r('操作人'),
        dataIndex: 'user',
        key: 'user',
      },
      {
        title: _r('操作IP'),
        dataIndex: 'remoteAddr',
        key: 'remoteAddr',
      },
      {
        title: _r('设备属性'),
        dataIndex: 'status',
        key: 'status',
      }
    ]
  
    let listColumn = showlist&&showlist.map(item=>{
      switch(item.value) {
        case 'time': 
          return {
            title: _r('操作时间'),
            dataIndex: 'time',
            key: 'time',
          }
        case 'user':
          return {
            title: _r('操作人'),
            dataIndex: 'user',
            key: 'user',
          }
        case 'remoteAddr':
          return {
            title: '操作IP',
            dataIndex: 'remoteAddr',
            key: 'remoteAddr',
          }
        case 'status':  
          return {
            title: _r('设备属性'),
            dataIndex: 'status',
            key: 'status',
          }
        case 'message':
          return {
            title: _r('日志信息'),
            dataIndex: 'message',
            key: 'message',
          }
        case 'type':
          return {
            title: _r('操作类型'),
            dataIndex: 'type',
            key: 'type',
          }
      }
    })
    showlist&&showlist.length ? setColumns(listColumn)  : setColumns(initColumns)
  }, [ showlist ])

  useEffect(()=>{
    modelId && getCustom(modelId)
  }, [ modelId ])

  useEffect(()=>{
    if(timer) {
      clearInterval(timer)
    }
  }, [ id ])

  useEffect(()=>{
    if(id && customKey && enum_title) {
      if(timer) {
        clearInterval(timer)
      }
      setTimer(setInterval(()=>{
        enum_title&&enum_title.length&&getLog(id, customKey, enum_title)
      }, 5000))
    }else {
      getLog()
    }
  }, [ id, customKey, enum_title ])

  const getCustom = () => {
    api({ name: `core/model/${modelId}` })
      .fetch('', {})
      .then(({ json })=>{
        let jsonData = json&&json.custom&&json.custom.schema&&json.custom.schema.properties
        if(jsonData) {
          Object.keys(jsonData).forEach((key)=>{
            if(jsonData[key]&&jsonData[key].config == '选择器') {
              let enumkey = jsonData[key].key
          
              SetCustomKey(enumkey)
              SetEnum_titles(enum_title)
              getLog(id, enumkey, enum_title)
            }
          })
        }
      })
  }

  const getLog = (id, enumkey, enum_title) => {
    let query = id ? {
      'sort': { 'time': -1 },
      'skip': 0,
      'project': { 'time': 1, 'user': 1, 'remoteAddr': 1, 'data': 1, 'message': 1, 'type': 1 },
      'filter': { 'nodeId': id, 'data.custom': { '$exists':true } },
      'withCount': true
    } : {
      'sort': { 'time': -1 },
      'skip': 0,
      'project': { 'time': 1, 'user': 1, 'remoteAddr': 1, 'data': 1, 'message': 1, 'type': 1 },
      'withCount': true
    }
    let queryStr = encodeURIComponent(JSON.stringify(query))
    api({ name: 'core/log' })
      .fetch('?query='+queryStr, {})
      .then(({ json })=>{
        if(id) {
          const newData = json&&json.map( (item,index) => {
            return {
              key: index+1,
              time: moment(item.time).format('YYYY-MM-DD HH:mm:ss'),
              user: item?.user&&item.user.name,
              remoteAddr: item?.remoteAddr,
              status: item && item.data && item.data.custom && enumkey && item.data.custom[enumkey] ? _.isNumber(item.data.custom[enumkey]) ? enum_title[Number(item.data.custom[enumkey])-1] : '' : '',
              type: item?.type,
              message: item?.message
            }
          })
          setTableData(newData)
        }else {
          const newData = json&&json.map( (item,index) => {
            return {
              key: index+1,
              time: moment(item.time).format('YYYY-MM-DD HH:mm:ss'),
              user: item?.user?.name,
              remoteAddr: item?.remoteAddr,
              status: item?.data?.custom && enumkey && item.data.custom[enumkey] ? _.isNumber(item.data.custom[enumkey]) ? enum_title[Number(item.data.custom[enumkey])-1] : '' : '',
              type: item?.type,
              message: item?.message
            }
          })
          setTableData(newData)
        }
      })
  }

  const setEvents = use('cell.events.set', cellKey)
  useEffect(() => {
    _.isFunction(setEvents) && setEvents({
      valueChange: {
        title: _r('数据变化')
      }
    })
  }, [])

  useEffect(() => {
    doEvents && doEvents('valueChange', data)
  }, [JSON.stringify(data)])

  return (
    <>
      {
        data && data.length>0 ? <Table bordered columns={columns} dataSource={data}
          pagination={ isShowPage ? { pageSize: limit, total: data.length } : false }
          scroll={{ y: scrollY }}
        /> : <C is="NoData" />
      }
    </>
  )
}

export default LogTable
