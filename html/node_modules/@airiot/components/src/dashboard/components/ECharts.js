import React from 'react'
import echarts from 'echarts'

const EchartPie = ({ userPercent }) => {
  const echartDom = React.useRef()
  const [error, setError] = React.useState(null)

  const { t:_t1 } = useI18n()

  const getEchartsInstance = () => {
    return echarts.getInstanceByDom(echartDom.current) || echarts.init(echartDom.current)
  }

  React.useEffect(() => () => {
    try {
      echarts.dispose(echartDom.current)
    } catch (err) {

      console.log(err)
    }
  }, [])

  React.useLayoutEffect(() => {
    let echartObj = getEchartsInstance()
    try {
      echartObj.setOption({
        title: {
          // text: '用户数量',
          // subtext: '模型节点数',
          x: 'center'
        },
        tooltip: {
          trigger: 'item',
          formatter: '{a} <br/>{b}: {c} ({d}%)'
        },
        color: ['#FFD982', '#603BE7'],
        legend: {
          orient: 'vertical',
          x: 'left',
          data: [_t1('当前用户'), _t1('剩余用户'),]
        },
        series: [
          {
            name: '',
            type: 'pie',
            radius: ['40%', '60%'],
            center: ['50%', '55%'],
            data: [
              { value: userPercent[0], name: _t1('当前用户') },
              { value: userPercent[1], name: _t1('剩余用户') },

            ],
            itemStyle: {
              emphasis: {
                shadowBlur: 10,
                shadowOffsetX: 0,
                shadowColor: 'rgba(0, 0, 0, 0.5)'
              }
            }
          }
        ]
      })
      setError(null)
    } catch (error) {
      setError(error)
    }
  }, [userPercent])

  return <div key='EchartPie' ref={echartDom} style={{ width: '100%', height: 160, overflow: 'hidden' }} />

}

const EchartGauge = ({ modelNodeCounts, pointCounts }) => {

  const echartDom = React.useRef()
  const [error, setError] = React.useState(null)

  const { t:_t1 } = useI18n()

  const getEchartsInstance = () => {
    return echarts.getInstanceByDom(echartDom.current) || echarts.init(echartDom.current)
  }

  React.useEffect(() => () => {
    try {
      echarts.dispose(echartDom.current)
    } catch (err) {
    }
  }, [])

  React.useLayoutEffect(() => {
    let echartObj = getEchartsInstance()
    try {
      echartObj.setOption({
        title: {
          // text: '模型节点',
          x: 'center'
        },
        tooltip: {
          trigger: 'item',
          formatter: '{a} <br/>{b} : {c} ({d}%)'
        },
        color: ['#603BE7', '#FFD982',],

        legend: {
          orient: 'vertical',
          left: 'left',
          data: [_t1('当前数据点'), _t1('剩余数据点'),]
        },
        series: [
          {
            name: _t1('数据点'),
            type: 'pie',
            radius: '55%',
            center: ['50%', '60%'],
            data: [
              { value: modelNodeCounts - pointCounts || 0, name: _t1('剩余数据点') },
              { value: pointCounts || 0, name: _t1('当前数据点') },
            ],
            itemStyle: {
              emphasis: {
                shadowBlur: 10,
                shadowOffsetX: 0,
                shadowColor: 'rgba(0, 0, 0, 0.5)'
              }
            }
          }
        ]
      })
    } catch (error) {
      setError(error)
    }
  }, [modelNodeCounts, pointCounts])

  return <div key="main_Gauge" ref={echartDom} style={{ width: '100%', height: 160, fontSize: '12px' }}></div>
}

export { EchartPie, EchartGauge }
