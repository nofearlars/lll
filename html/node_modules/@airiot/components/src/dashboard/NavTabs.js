import React from 'react';
import { Tabs } from 'antd'
import { app, use } from 'xadmin'
import './NavTabs.css'

const NavTabsComponent = props => {
  const { max } = props

  const historys = use('navTab.historys')
  const setHistorys = use('navTab.historys.set')
  const home = { key: "home", title: _r("首页"), url: '/app/' }
  const currentUrl = decodeURI(location.hash?.slice(1))
  const _historyUrls = _.compact(_.uniqBy([home, ...(historys || [])], 'key'))
  const [historyUrls, setHistoryUrls] = React.useState(max ? _historyUrls?.slice(0, max) : _historyUrls)
  const [activeKey, setActiveKey] = React.useState('')
  
  React.useEffect(() => {
    setHistoryUrls(max ? _historyUrls?.slice(0, max) : _historyUrls)
  }, [max, JSON.stringify(historys || [])])

  React.useEffect(() => {
    setActiveKey(k => _historyUrls.some(h => h.url == currentUrl) ? currentUrl : (_.last(_historyUrls)?.url || k))
  }, [currentUrl, JSON.stringify(historyUrls)])

  const onEdit = (targetKey, action) => {
    if (action == 'remove') {
      let newActiveKey = activeKey
      let lastIndex = -1
      historyUrls.forEach((item, i) => {
        if (item.url === targetKey) {
          lastIndex = i - 1
        }
      });
      const newPanes = historyUrls.filter(item => item?.url !== targetKey)
      if (newPanes.length && newActiveKey === targetKey) {
        if (lastIndex >= 0) {
          newActiveKey = newPanes[lastIndex].url
        } else {
          newActiveKey = newPanes[0].url
        }
      }
      setHistorys(hs => hs?.filter(h => h?.url != targetKey))
      setHistoryUrls(newPanes)
      setActiveKey(newActiveKey)
      newActiveKey != activeKey && app.go(newActiveKey)
    }
  }

  const onTabChange = key => {
    key && app?.module == 'front' && app.go(key)
    setActiveKey(key)
  }

  return (
    <Tabs type="editable-card" className='dashboard-nav-tabs' hideAdd={true} activeKey={activeKey} onChange={onTabChange} onEdit={onEdit}>
      {
        historyUrls?.map(u => <Tabs.TabPane closable={u.key != 'home'} tab={_t1(u.title)} key={u.url} ></Tabs.TabPane>)
      }
    </Tabs>
  )
}

const paramSchema = {
  type: 'object',
  properties: {
    max: {
      type: 'number',
      title: _r('最大标签数'),
      minimum: 1,
      description: _r('设置标签导航最大显示的数量，超过数量将不显示新标签，若未配置，将不限制。')
    }
  }
}

const NavTabs = {
  title: _r('标签导航'),
  category: ['页面元素', '导航栏'],
  icon: require(`../icons/标签导航.svg`),
  component: NavTabsComponent,
  paramSchema,
  initLayout: { width: 500, height: 55 },
  theme: [
    { selector: '.dashboard-nav-tabs .ant-tabs-nav', title: _r('标签导航整体'), config: ['background', 'border', 'layout'] },
    { selector: '.dashboard-nav-tabs .ant-tabs-nav-wrap .ant-tabs-tab', title: _r('标签'), hiddenConfig: ['ali'] },
    { selector: '.dashboard-nav-tabs .ant-tabs-tab:hover', title: _r('标签悬停'), config: ['background', 'font'], hiddenConfig: ['ali'] },
    { selector: '.dashboard-nav-tabs .ant-tabs-tab.ant-tabs-tab-active', title: _r('标签选中'), config: ['background', 'font'], hiddenConfig: ['ali'] },
  ]
}

export default NavTabs
