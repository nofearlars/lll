import React from 'react'
import LogTable from './components/LogTable'
import { TreeSelect } from 'antd'

const { TreeNode } = TreeSelect

const treeData = [
  {
    title: _r('操作时间'),
    key: 'time',
    value: 'time'
  },
  {
    title: _r('操作人'),
    key: 'user',
    value: 'user'
  },
  {
    title: _r('操作IP'),
    key: 'remoteAddr',
    value: 'remoteAddr'
  },
  {
    title: _r('设备属性'),
    key: 'status',
    value: 'status'
  },
  {
    title: _r('日志信息'),
    key: 'message',
    value: 'message'
  },
  {
    title: _r('日志类型'),
    key: 'type',
    value: 'type'
  }
]

const SelectList = (props) => {
  const { input: { onChange, value } } = props
  const { t:_t1 } = useI18n()

  const addMessage = (value) => {
    if (value)
      onChange(value)
  }

  const getTreeNode = treeData => treeData.map(item => {
    if (item.children) {
      return <TreeNode value={item.value} title={item.title} key={item.key} disable={true}>{getTreeNode(item.children)}</TreeNode>
    }
    return <TreeNode value={item.value} title={item.title} key={item.key}></TreeNode>
  })

  return (
    <TreeSelect
      showSearch
      value={value || []}
      width="350px"
      dropdownStyle={{ maxHeight: 400, overflow: 'auto', width: '100%' }}
      placeholder={_t1("请选择")}
      treeData={treeData}
      allowClear
      multiple
      treeDefaultExpandAll
      treeCheckStrictly={true}
      onChange={(value) => { addMessage(value) }}
    >
      {getTreeNode(treeData)}
    </TreeSelect>
  )
}

const LogTableComponent = props => {
  return <LogTable {...props} />
}

const paramSchema = {
  type: 'object',
  properties: {
    limit: {
      type: 'string',
      title: _r('每页条数')
    },
    isShowPage: {
      type: 'boolean',
      title: _r('分页')
    },
    scrollY: {
      type: 'number',
      title: _r('纵向滚动条高度')
    },
    showlist: {
      title: _r('显示列'),
      type: 'array',
      items: {
        type: 'string',
        name: _r('信息')
      }
    }
  },
  form: ['*', { key: 'showlist', component: SelectList }],
  formEffect: form => {
    form.useField('isShowPage', state => {
      let value = state.value
      if (value) {
        form.setFieldData('limit', { display: true })
      } else {
        form.setFieldData('limit', { display: false })
      }
    })
  }
}

const NodeRecordWidget = {
  title: _r('操作日志记录表'),
  category: [_r('页面元素'), _r('其他')],
  icon: require('../icons/操作日志记录表.svg'),
  paramSchema,
  component: LogTableComponent,
  initLayout: { width: 480, height: 260 },
  initParam: {
    scrollY: 200,
    limit: 5
  }
}

export default NodeRecordWidget
