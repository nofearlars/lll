import React from 'react'
import { lazy } from 'xadmin-ui'
import _, { omit } from 'lodash'
import { initLayout, defaultSchema } from '../common/base'
import { Cascader } from 'antd';
import { options } from "./src/mapCascader"
import { textCommonStyle, shadowStyle, borderStyle } from '../common/option'
import MapSelect from '../common/MapSelect';

const MapComponent = lazy(() => import('./Mapcomponent'))

const choose = {
  mapName: {
    type: 'string',
    title: _r('选择城市')
  },
  visualMap: {
    title: _r('图例'),
    type: 'object',
    properties: {
      show: {
        title: _r('显示图例'),
        type: 'boolean',
      },
      type: {
        title: _r('类型'),
        type: 'string',
        enum: ['continuous', 'piecewise'],
        enum_title: [_r('连续型'), _r('分段型')]
      },
      color: {
        type: 'array',
        title: _r('颜色'),
        items: {
          type: 'string',
          fieldType: 'color',
        }
      },
      min: {
        title: _r('最小值'),
        type: 'number',
      },
      max: {
        title: _r('最大值'),
        type: 'number',
      },
      text: {
        type: 'array',
        title: _r('文本'),
        items: [
          {
            type: 'string',
          },
          {
            type: 'string',
          }
        ],
      },
      textStyle: {
        type: 'object',
        title: _r('文本样式'),
        properties: {
          color: {
            title: _r('字体颜色'),
            type: 'string',
            fieldType: 'color'
          },
          fontSize: {
            title: _r('字体大小'),
            type: 'number',
          },

        }
      },
      calcuable: {
        title: _r("显示拖拽手柄"),
        type: 'boolean'
      }
    }
  },
  geo: {
    title: _r('地图坐标器'),
    type: 'object',
    properties: {
      normal: {
        title: _r('正常状态'),
        type: 'object',
        properties: {
          areaColor: {
            title: _r("区域颜色"),
            type: "string",
            fieldType: 'color',
            field: {
              gradient: true
            }
          },
          borderColor: {
            type: 'string',
            title: _r('边框颜色'),
            fieldType: 'color',
          },
          borderWidth: {
            type: 'number',
            title: _r('边框线宽')
          },
          borderType: {
            type: 'string',
            title: _r('类型'),
            enum: ['solid', 'dashed', 'dotted'],
            enum_title: [_r('实线'), _r('虚线'), _r('点虚线')]
          },
          ...shadowStyle
        }
      },
      emphasis: {
        title: _r('高亮状态'),
        type: 'object',
        properties: {
          areaColor: {
            title: _r("区域颜色"),
            type: "string",
            fieldType: 'color'
          },
          borderColor: {
            type: 'string',
            title: _r('边框颜色'),
            fieldType: 'color',
          },
          borderWidth: {
            type: 'number',
            title: _r('边框线宽')
          },
          borderType: {
            type: 'string',
            title: _r('类型'),
            enum: ['solid', 'dashed', 'dotted'],
            enum_title: [_r('实线'), _r('虚线'), _r('点虚线')]
          },
          ...shadowStyle
        }
      }
    }
  }
}

const seriesOption = {
  base:{
    title: _r('基础'),
    type: 'object',
    properties: {
      name: {
        title: _r('名字'),
        type: 'string',
        description: _r('系列名称，用于tooltip的显示，legend 的图例筛选'),
      },
      datasetIndex: {
        title: _r('数据集编号'),
        type: 'number',
        description: _r('选定外层数据容器或者自身数据的某个数据集进行数据展示')
      },
      encode: {
        title: _r('数据映射'),
        type: 'object',
        properties: {
          value: {
            title: _r('映射字段'),
            type: 'number',
            field: {
              component: MapSelect
            }
          },
          itemId: {
            title: _r('数据项ID'),
            type: 'number'
          },
          itemName: {
            title: _r('数据项名字'),
            type: 'number'
          }
        }
      }
    }
  },
  itemStyle: {
    title: _r('区域'),
    type: 'object',
    properties: {
      normal: {
        title: _r('正常状态'),
        type: 'object',
        properties: {
          areaColor: {
            title: _r("区域颜色"),
            type: "string",
            fieldType: 'color'
          },
          borderColor: {
            type: 'string',
            title: _r('边框颜色'),
            fieldType: 'color',
          },
          borderWidth: {
            type: 'number',
            title: _r('边框线宽')
          },
          borderType: {
            type: 'string',
            title: _r('类型'),
            enum: ['solid', 'dashed', 'dotted'],
            enum_title: [_r('实线'), _r('虚线'), _r('点虚线')]
          },
          ...shadowStyle
        }
      },
      emphasis: {
        title: _r('高亮状态'),
        type: 'object',
        properties: {
          areaColor: {
            title: _r("区域颜色"),
            type: "string",
            fieldType: 'color'
          },
          borderColor: {
            type: 'string',
            title: _r('边框颜色'),
            fieldType: 'color',
          },
          borderWidth: {
            type: 'number',
            title: _r('边框线宽')
          },
          borderType: {
            type: 'string',
            title: _r('类型'),
            enum: ['solid', 'dashed', 'dotted'],
            enum_title: [_r('实线'), _r('虚线'), _r('点虚线')]
          },
          ...shadowStyle
        }
      }

    }

  },
  label: {
    title: _r('文本样式'),
    type: 'object',
    properties: {
      normal: {
        title: _r('正常状态'),
        type: 'object',
        properties: {
          show: {
            title: _r('显示文本'),
            type: 'boolean',
          },
          position: {
            type: 'string',
            title: _r('位置'),
            enum: ['top ', 'left ', 'right ', 'bottom ', 'inside'],
            enum_title: [_r('上部'), _r('左部'), _r('右部'), _r('下部'), _r('内部')]
          },
          formatter: {
            title: _r('模板'),
            type: 'string',
            enum: ['{a}', '{b}', '{c}'],
            enum_title: [_r('系列名'), _r('区域名'), _r('合并数值')]
          },
          ...textCommonStyle.properties
        }
      },
      emphasis: {
        title: _r('高亮状态'),
        type: 'object',
        properties: {
          show: {
            title: _r('显示文本'),
            type: 'boolean',
          },
          position: {
            type: 'string',
            title: _r('位置'),
            enum: ['top ', 'left ', 'right ', 'bottom ', 'inside'],
            enum_title: [_r('上部'), _r('左部'), _r('右部'), _r('下部'), _r('内部')]
          },
          formatter: {
            title: _r('模板'),
            type: 'string',
            enum: ['{a}', '{b}', '{c}'],
            enum_title: [_r('系列名'), _r('区域名'), _r('合并数值')]
          },
          ...textCommonStyle.properties
        }
      },
    }
  }
}

const formToOption = (subType, val, oldSeries = {}) => {
  let result = {}
  if (subType === 'base') { // 标记
    result = { ...oldSeries, ...val }
  } else if (subType === 'itemStyle') {
    result = { ...oldSeries, itemStyle: val }
  } else if (subType === 'label') {
    result = { ...oldSeries, label: val }
  }
  return result
}

const optionToForm = (subType, option = {}) => {
  let form ={}
  if (subType === 'base') { // 标记
    form = option
  } else if (subType  === 'itemStyle') { // 基础
    form = option.itemStyle
  } else if (subType === 'label') { // 标记
    form = option.label
  }
  return form
}

const chart_map = {
  title: _r('地图'),
  category: [_r('数据图表'), _r('地图')],
  icon: require('../../svg/newIcons/地图.svg'),
  component: MapComponent,
  initLayout,
  initParam: {
    mapName: [_r('中国'), _r('中国'), _r('中国')],
    option: {
      visualMap: {},
      geo: {
        itemStyle: {
          normal: {},
          emphasis: {}
        }
      },
      series: [{ type: 'map' }],
    }
  },
  echartOption: {
    seriesOption,
    formToOption,
    optionToForm
  },
  paramSchema: {
    type: 'object',
    properties: {
      ...defaultSchema,
      ...choose
    },
    form: ['*',
      {
        key: 'mapName', component: ({ input }) =>
          <Cascader 
            allowClear={false}
            options={options}
            value={input.value}
            onChange={input.onChange}
            placeholder={_t1("请选择")} />
      }]
  }
}

export default chart_map

