import React from 'react'
import { C } from 'xadmin-ui'
import _ from 'lodash'
import useChart from '../../components/useChart'
import { initLayout, defaultSchema } from '../common/base'
import MapSelect from '../common/MapSelect'

const radar = {
  shape: {
    title: _r('形状'),
    type: 'string',
    enum: ['polygon', 'circle'],
    enum_title: [_r('方形'), _r('圆形')]
  },
}

const seriesOption = {
  base: {
    title: _r('基础'),
    type: 'object',
    properties: {
      name: {
        title: _r('名字'),
        type: 'string',
        description: _r('系列名称，用于tooltip的显示，legend 的图例筛选'),
      },
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color'
      },
      indicator: {
        title: _r('维度'),
        type: 'array',
        items: {
          type: 'object',
          properties: {
            name: {
              title: _r('名称'),
              type: 'string'
            },
            max: {
              title: _r('最大值'),
              type: 'number'
            }
          }
        }
      },
      areaStyle: {
        title: _r('区域填充颜色'),
        type: 'object',
        fieldType: 'color_shadow',
        flag: 'palette_obj',
        properties: {}
      },
      datasetIndex: {
        title: _r('数据集编号'),
        type: 'number',
        description: _r('选定外层数据容器或者自身数据的某个数据集进行数据展示')
      },
      encode: {
        title: _r('数据映射'),
        type: 'object',
        properties: {
          value: {
            title: _r('映射字段'),
            type: 'number',
            field: {
              component: MapSelect
            }
          },
          itemId: {
            title: _r('数据项ID'),
            type: 'number'
          },
          itemName: {
            title: _r('数据项名字'),
            type: 'number'
          }
        }
      }
    }
  },
  symbol: {
    title: _r('标记'),
    type: 'object',
    properties: {
      showSymbol: {
        title: _r('显示标记'),
        type: 'boolean',
      },
      symbol: {
        title: _r('标记图形'),
        type: 'string',
        enum: ['emptyCircle', 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'],
        enum_title: [_r('空心圆'), _r('圆'), _r('方形'), _r('圆角方形'), _r('三角形'), _r('菱形'), 
          _r('点'), _r('箭头'), _r('无')],
        description: _r('设定数据点的标记处显示的形状')
      },
      symbolSize: {
        title: _r('标记尺寸'),
        type: 'number'
      },
      symbolRotate: {
        type: 'number',
        title: _r('旋转角度')
      },
      legendHoverLink: {
        title: _r('悬浮高亮'),
        type: 'boolean'
      },
      hoverAnimation: {
        title: _r('拐点动画'),
        type: 'boolean',
        description: _r('开启后标记图形会出现放大效果')
      }
    }
  },
}

const formToOption = (subType, val, oldSeries = {}, oldOption) => {
  let result = {}
  if (subType === 'base') { // 基础
    result = {
      ...oldSeries,
      ..._.omit(val, ['areaStyle', 'color']),
      areaStyle: _.isEmpty(val.areaStyle) ? null : {
        color: val.areaStyle
      },
      lineStyle: {
        color: val.color
      }
    }
    if (val.indicator) oldOption.radar = { indicator: val.indicator }
  } else if (subType === 'symbol') { // 标记
    result = { ...oldSeries, ...val }
  }
  return result
}

const optionToForm = (subType, option = {}, allOption) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = {
      ..._.omit(option, ['areaStyle']),
      areaStyle: option.areaStyle?.color,
      color: option.lineStyle?.color,
      indicator: allOption.radar?.indicator
    }
  } else if (subType === 'symbol') { // 标记
    form = option
  }
  return form
}

const chart_radar = {
  title: _r('雷达图'),
  category: [_r('数据图表'), _r('雷达图')],
  icon: require('../../svg/newIcons/雷达图.svg'),
  component: props => {
    const res = {
      ...props,
      option: {
        ...(props.option || {}),
        radar: _.isArray(props.option?.radar) ? 
          props.option?.radar.map(r => ({ ...r, shape: props.shape }))
          : {
          ...(props.option?.radar || {}),
          shape: props.shape
        }
      }
    }
    return useChart(res)
  },
  initLayout,
  initParam: {
    option: {
      radar: {
        indicator: [
          { name: 'a', max: 100 },
          { name: 'b', max: 100 },
          { name: 'c', max: 100 },
          { name: 'd', max: 100 },
          { name: 'e', max: 100 },
        ],
      },
      series: [{
        type: 'radar',
        data: [{ value: [50, 65, 80, 60, 70] }]
      }],
    }
  },
  echartOption: {
    seriesOption,
    formToOption,
    optionToForm
  },
  paramSchema: {
    type: 'object',
    properties: {
      ...defaultSchema,
      ...radar
    }
  }
}

export default chart_radar
export { seriesOption, formToOption, optionToForm }
