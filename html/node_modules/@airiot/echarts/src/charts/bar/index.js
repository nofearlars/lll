import React from 'react'
import { C } from 'xadmin-ui'
import _ from 'lodash'
import useChart from '../../components/useChart'
import { initLayout, chartDafaultData, defaultSchema } from '../common/base'
import { borderStyle } from '../common/option'
import MapSelect from '../common/MapSelect'

const seriesOption = {
  base: {
    title: _r('基础'),
    type: 'object',
    properties: {
      name: {
        title: _r('名字'),
        type: 'string',
        description: _r('系列名称，用于tooltip的显示，legend 的图例筛选'),
      },
      barWidth: {
        title: _r('柱条宽度'),
        type: 'string',
        fieldType: 'unit'
      },
      showBackground: {
        title: _r('柱条背景'),
        type: 'boolean'
      },
      barMinHeight: {
        title: _r('最小高度'),
        type: 'number'
      },
      barCategoryGap: {
        title: _r('柱间距离'),
        type: 'string',
        fieldType: 'unit',
        field: {
          unitOptions: ['%']
        }
      },
      barGap: {
        title: _r('系列柱距离'),
        type: 'string',
        fieldType: 'unit',
        field: {
          unitOptions: ['%']
        }
      },
      stack: {
        title: _r('堆叠标识'),
        type: 'string',
        description: _r('堆叠标识相同的折线会堆叠放置')
      },
      datasetIndex: {
        title: _r('数据集编号'),
        type: 'number',
        description: _r('选定外层数据容器或者自身数据的某个数据集进行数据展示')
      },
      encode: {
        title: _r('数据映射'),
        type: 'object',
        properties: {
          value: {
            title: _r('映射字段'),
            type: 'number',
            field: {
              component: MapSelect
            }
          },
          itemId: {
            title: _r('数据项ID'),
            type: 'number'
          },
          itemName: {
            title: _r('数据项名字'),
            type: 'number'
          }
        }
      }
    }
  },
  itemStyle: {
    title: _r('柱条样式'),
    type: 'object',
    properties: {
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color',
        field: {
          gradient: true
        }
      },
      ...borderStyle,
      emphasis: {
        title: _r('高亮样式'),
        type: 'object',
        properties: {
          color: {
            title: _r('颜色'),
            type: 'string',
            fieldType: 'color'
          },
          ...borderStyle
        }
      }
    }
  },
  label: {
    title: _r('文本样式'),
    type: 'object',
    properties: {
      show: {
        title: _r('显示文本'),
        type: 'boolean',
      },
      position: {
        type: 'string',
        title: _r('位置'),
        enum: ['top', 'left', 'right', 'bottom', 'inside'],
        enum_title: [_r('上部'), _r('左部'), _r('右部'), _r('下部'), _r('内部')]
      },
      formatter: {
        title: _r('模板'),
        type: 'string',
        enum: ['{a}', '{b}', '{c}'],
        enum_title: [_r('系列名'), _r('区域名'), _r('合并数值')]
      },
      color: {
        type: 'string',
        title: _r('文字颜色'),
        fieldType: 'color'
      },
      fontSize: {
        type: 'number',
        title: _r('文字大小')
      },
      fontWeight: {
        type: 'number',
        title: _r('字体粗细')
      },
      emphasis: {
        title: _r('高亮状态'),
        type: 'object',
        properties: {
          show: {
            title: _r('显示文本'),
            type: 'boolean',
          },
          position: {
            type: 'string',
            title: _r('位置'),
            enum: ['top', 'left', 'right', 'bottom', 'inside'],
            enum_title: [_r('上部'), _r('左部'), _r('右部'), _r('下部'), _r('内部')]
          },
          formatter: {
            title: _r('模板'),
            type: 'string',
            enum: ['{a}', '{b}', '{c}'],
            enum_title: [_r('系列名'), _r('区域名'), _r('合并数值')]
          },
          color: {
            type: 'string',
            title: _r('文字颜色'),
            fieldType: 'color'
          },
          fontSize: {
            type: 'number',
            title: _r('文字大小')
          },
          fontWeight: {
            type: 'number',
            title: _r('字体粗细')
          },
        }
      }
    }
  }
}
const formToOption = (subType, val, oldSeries = {}) => {
  let result = {}
  if (subType === 'base') { // 基础
    result = {
      ...oldSeries,
      ..._.omit(val, ['color']),
      backgroundStyle: {
        color: val.color
      }
    }
  } else if (subType === 'itemStyle') { // 柱条样式
    result = { ...oldSeries, itemStyle: val }
  } else if (subType === 'label') { // 文本样式
    result = {
      ...oldSeries,
      label: {
        ..._.omit(val, ['color', 'fontSize', 'fontWeight', 'emphasis']),
        textStyle: {
          color: val.color,
          fontSize: val.fontSize,
          fontWeight: val.fontWeight
        }
      }
    }
    if (val.emphasis) { // 如果有高亮
      result.label.emphasis = {
        ..._.omit(val.emphasis, ['color', 'fontSize', 'fontWeight']),
        textStyle: {
          color: val.emphasis.color,
          fontSize: val.emphasis.fontSize,
          fontWeight: val.emphasis.fontWeight
        }
      }
    }
  }
  return result
}

const optionToForm = (subType, option) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = {
      ..._.omit(option, ['color']),
      color: option.backgroundStyle?.color
    }
  } else if (subType === 'itemStyle') { // 柱条样式
    form = option.itemStyle
  } else if (subType === 'label') { // 文本样式
    form = {
      ..._.omit(option.label, ['textStyle', 'emphasis']),
      color: option.label?.textStyle?.color,
      fontSize: option.label?.textStyle?.fontSize,
      fontWeight: option.label?.textStyle?.fontWeight
    }
    if (option.label?.emphasis) { // 如果有高亮
      form.emphasis = {
        ..._.omit(option.label.emphasis, ['textStyle']),
        color: option.label.emphasis.textStyle?.color,
        fontSize: option.label.emphasis.textStyle?.fontSize,
        fontWeight: option.label.emphasis.textStyle?.fontWeight
      }
    }
  }
  return form
}

const echartOption = {
  seriesOption,
  formToOption,
  optionToForm
}

const chart_bar = {
  title: _r('柱状图'),
  category: [_r('数据图表'), _r('柱状图')],
  icon: require('../../svg/newIcons/柱状图.svg'),
  component: props => useChart({ ...props }),
  initLayout,
  initParam: {
    option: {
      series: [{ type: 'bar' }],
      xAxis: { show: true, type: 'category', axisLine: { lineStyle: { color: '#333' } } },
      yAxis: { show: true, type: 'value', axisLine: { lineStyle: { color: '#333' } } },
      dataset: chartDafaultData
    }
  },
  echartOption,
  paramSchema: {
    type: 'object',
    properties: {
      ...defaultSchema
    }
  }
}

export default chart_bar
export { seriesOption, formToOption, optionToForm, echartOption }
