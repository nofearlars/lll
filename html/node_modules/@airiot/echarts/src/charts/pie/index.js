import React from 'react'
import { C } from 'xadmin-ui'
import _ from 'lodash'
import useChart from '../../components/useChart'
import { initLayout, chartDafaultData, defaultSchema } from '../common/base'
import { shadowStyle, lineStyle } from '../common/option'
import { EchartArray } from '../common/components'
import { PositionComponent } from '../../components/EchartSchemaForm/schema'
import MapSelect from '../common/MapSelect'

const seriesOption = {
  base: {
    title: _r('基础'),
    type: 'object',
    properties: {
      name: {
        title: _r('名字'),
        type: 'string',
        description: _r('系列名称，用于tooltip的显示，legend 的图例筛选'),
      },
      center: {
        type: 'array',
        title: _r('圆心坐标'),
        items: {},
        showUnit: true,
        field: { component: EchartArray }
      },
      radius: {
        type: 'array',
        title: _r('半径'),
        hold: 'pieRadius',
        showUnit: true,
        items: {},
        field: { component: EchartArray }
      },
      startAngle: {
        type: 'number',
        title: _r('起始角度')
      },
      position: {
        title: _r('位置'),
        type: 'object',
        properties: {},
        field: {
          component: PositionComponent
        }
      },
      datasetIndex: {
        title: _r('数据集编号'),
        type: 'number',
        description: _r('选定外层数据容器或者自身数据的某个数据集进行数据展示')
      },
      encode: {
        title: _r('数据映射'),
        type: 'object',
        properties: {
          value: {
            title: _r('映射字段'),
            type: 'number',
            field: {
              component: MapSelect
            }
          },
          itemId: {
            title: _r('数据项ID'),
            type: 'number'
          },
          itemName: {
            title: _r('数据项名字'),
            type: 'number'
          }
        }
      }
    }
  },
  label: {
    type: 'object',
    title: _r('标签'),
    properties: {
      show: {
        type: 'boolean',
        title: _r('显示标签')
      },
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color',
      },
      formatter: {
        title: _r('模板'),
        type: 'string',
        enum: [ '{a}', '{b}', '{c}', '{d}%', '{b}: {c}' ],
        enum_title: [ _r('系列名'), _r('数据名'), _r('数值'), _r('百分比'), _r('名称：数值') ]
      },
      fontSize: {
        type: 'number',
        title: _r('字体大小')
      },
      position: {
        type: 'string',
        title: _r('位置'),
        enum: [ 'outside', 'center', 'inside' ],
        enum_title: [ _r('外部'), _r('居中'), _r('内部') ]
      }
    }
  },
  labelLine: {
    type: 'object',
    title: _r('标识线'),
    properties: {
      show: {
        type: 'boolean',
        title: _r('标识线')
      },
      length: {
        type: 'number',
        title: _r('引导线长度')
      },
      smooth: {
        type: 'boolean',
        title: _r('是否平滑')
      },
      lineStyle: {
        type: 'object',
        title: _r('线设置'),
        properties: {
          ...lineStyle.properties,
          ...shadowStyle
        }
      }
    }
  }
}

const formToOption = (subType, val, oldSeries = {}) => {
  let result = {}
  if (subType === 'base') { // 基础
    result = { ...oldSeries, ...val }
  } else if (subType === 'label') { // 标签
    result = { ...oldSeries, label: val }
  } else if (subType === 'labelLine') { // 标识线
    result = { ...oldSeries, labelLine: val }
  }
  return result
}

const optionToForm = (subType, option) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = option
  } else if (subType === 'label') { // 标签
    form = option.label
  } else if (subType === 'labelLine') { // 标识线
    form = option.labelLine
  }
  return form
}

const echartOption = {
  seriesOption,
  formToOption,
  optionToForm
}

const chart_pie = {
  title: _r('饼图'),
  category: [_r('数据图表'), _r('饼图')],
  icon: require('../../svg/newIcons/饼图.svg'),
  component: props => useChart({ ...props }),
  initLayout,
  initParam: { option: {
    series: [ { type: 'pie' } ],
    tooltip: { show: true },
    dataset: chartDafaultData
  } },
  echartOption,
  paramSchema: {
    type: 'object',
    properties: {
      ...defaultSchema
    }
  }
}

export default chart_pie
export { seriesOption, formToOption, optionToForm, echartOption }
