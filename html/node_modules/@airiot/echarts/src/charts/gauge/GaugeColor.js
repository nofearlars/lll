import React from 'react'
import _ from 'lodash'
import { Button, Input } from 'antd'
import { Icon } from 'xadmin-ui'
import { SketchPicker } from 'react-color'
import reactCSS from 'reactcss'

const styles = reactCSS({
  'default': {
    color: {
      width: '36px',
      height: '16px',
      borderRadius: '2px',
    },
    swatch: {
      margin: '0 4px',
      background: '#fff',
      borderRadius: '1px',
      display: 'inline-block',
      cursor: 'pointer',
    },
    popover: {
      position: 'absolute',
      zIndex: '999',
      right: '20px',
      width: '250px'
    },
    cover: {
      position: 'fixed',
      top: '0px',
      right: '0px',
      bottom: '0px',
      left: '0px',
    },
  },
});

const ColorGauge = props => {
  const { input: { value, onChange } } = props 
  const [ data, setData ] = React.useState([])
  const [dcp, setDcp] = React.useState([])
  const [ initColor, setInitColor ] = React.useState([[1, '#e6ebf8']])
  const { t: _t1 } = useI18n()

  React.useEffect(() => {
    data && data.length && onChange(data)
  }, [data])

  React.useEffect(() => {
    if(value) {
      setData(value)
      let dcpArr = value.length && value.map(item => false)
      setDcp(dcpArr)
    }else {
      setData(initColor)
      let dcpArr = initColor.map(item => false)
      setDcp(dcpArr)
    }
  }, [initColor, value])

  const addColorArr = index => {
    let arr = [1, 'rgb(170,170,170)']
    let newData = [ ...data, arr ]
    let newDcp = [ ...dcp, false ]
    setData(newData)
    setDcp(newDcp)
  }

  const deleteColorArr = index => {
    let newData = _.cloneDeep(data)
    newData.splice(index, 1)
    if(newData.length == 0) {
      setData(initColor)
    }else {
      setData(newData)
    }
  }

  const handleChange = (color, index) => {
    const rgba = `rgba(${Object.values(color.rgb)})`
    let newData = _.cloneDeep(data)
    newData.forEach((item,i)=> {
      if(i == index) {
        newData[i] = [ item[0], rgba ]
      }
    })
    setData(newData)
  }

  const changeText = (e, index) => {
    const value = e.target.value
    let newData = _.cloneDeep(data)
    newData.forEach((item,i)=> {
      if(i == index) {
        newData[i] = [ value, item[1] ]
      }
    })
    setData(newData)
  }

  const handleClick = index => {
    let dcps = _.cloneDeep(dcp)
    dcps && dcps.length && dcps.forEach((item, i) => {
      if(index == i) {
        dcps[i] = !dcps[i]
      }
    })
    setDcp(dcps)
  }

  return (
    <>
      <div style={{ width: '100%' }}>
        <Button style={{ width: '100%' }} icon={<Icon type="plus" />} onClick={addColorArr}></Button>
      </div>
      <>
        { 
          data && data.length && data.map((item, index) => {
            return (
              <div style={{ margin: '2px auto' }}>
                <Input placeholder={_t1("数值")} type="text" style={{ width: 40 }} onChange={(e) => { changeText(e, index) }} value={item[0]} />
                {
                  <Button style={{ ...styles.swatch, border: 'none !important', verticalAlign: 'top' }} onClick={()=>handleClick(index)}>
                    <div style={{ ...styles.color, backgroundColor: item[1] }} />
                  </Button>
                }
                {dcp && dcp.length && dcp[index] ? <div style={styles.popover}>
                  <div style={styles.cover} onClick={() =>handleClick(index)} />
                  <SketchPicker color={item[1] || 'rgb(170,170,170)'} onChange={(color) => handleChange(color, index) } />
                </div> : null}
                <Button style={{ width: 40, minWidth: 40 }} icon={<Icon type="delete" />} onClick={() => deleteColorArr(index) }></Button>
              </div>
            )
          })
        }
      </>
    </>
  )
}

export default ColorGauge
