import React from 'react'
import { C } from 'xadmin-ui'
import _ from 'lodash'
import useChart from '../../components/useChart'
import { initLayout, defaultSchema } from '../common/base'
import { textStyle } from '../../components/EchartSchemaForm/schema'
import { textCommonStyle, shadowStyle, lineStyle } from '../common/option'
import GaugeColor from './GaugeColor'

const show = {
  type: 'boolean',
  title: _r('显示')
}

const seriesOption = {
  base: {
    title: _r('基础'),
    type: 'object',
    properties: {
      data: {
        type: 'array',
        title: _r('数值'),
        items: {
          type: 'object',
          properties: {
            name: {
              type: 'string',
              title: _r('名字')
            },
            value: {
              type: 'number',
              title: _r('数值'),
              fieldType: 'compute'
            }
          }
        }
      },
      clockwise: {
        type: 'boolean',
        title: _r('顺时针增长')
      },
      radius: {
        type: 'string',
        title: _r('半径'),
        fieldType: 'unit',
        field: {
          unitOptions: ['px', '%']
        }
      },
      startAngle: {
        type: 'number',
        title: _r('起始角度')
      },
      endAngle: {
        type: 'number',
        title: _r('结束角度')
      },
      min: {
        type: 'number',
        title: _r('最小值')
      },
      max: {
        type: 'number',
        title: _r('最大值')
      },
      splitNumber: {
        type: 'number',
        title: _r('分割段数')
      }
    }
  },
  axisLine: {
    type: 'object',
    title: _r('轴线'),
    properties: {
      show,
      color: {
        type: 'array',
        title: _r('颜色'),
        items: {},
        description: _r('数值为0-1间的小数，且最大值为1'),
        field: { component: GaugeColor }
      },
      width: {
        type: 'number',
        title: _r('宽度')
      },
      ...shadowStyle
    }
  },
  splitLine: {
    type: 'object',
    title: _r('分割'),
    properties: {
      show,
      length: {
        type: 'number',
        title: _r('分割线长')
      },
      ...lineStyle.properties,
      ...shadowStyle
    }
  },
  axisTick: {
    type: 'object',
    title: _r('刻度'),
    properties: {
      show,
      splitNumber: {
        type: 'number',
        title: _r('分割数')
      },
      length: {
        type: 'number',
        title: _r('刻度线长度')
      }
    }
  },
  axisLabel: {
    type: 'object',
    title: _r('标签'),
    properties: {
      show,
      distance: {
        type: 'number',
        title: _r('刻度距离')
      },
      ...textCommonStyle.properties
    }
  },
  pointer: {
    type: 'object',
    title: _r('指针'),
    properties: {
      show,
      length: {
        type: 'string',
        title: _r('长度'),
        fieldType: 'unit',
        field: {
          unitOptions: ['px', '%']
        }
      },
      width: {
        type: 'string',
        title: _r('宽度'),
      }
    }
  },
  detail: {
    type: 'object',
    title: _r('数据'),
    properties: {
      show,
      ...textStyle.properties,
      ...textCommonStyle.properties
    }
  }
}

const formToOption = (subType, val, oldSeries = {}) => {
  let result = {}
  if (subType === 'base') { // 基础
    result = { ...oldSeries, ...val }
  } else if (subType === 'axisLine') { // 轴线
    result = {
      ...oldSeries,
      axisLine: {
        show: val.show,
        lineStyle: _.omit(val, ['show'])
      }
    }
  } else if (subType === 'splitLine') { // 分割线
    result = {
      ...oldSeries,
      splitLine: {
        show: val.show,
        length: val.length,
        lineStyle: _.omit(val, ['show', 'length'])
      }
    }
  } else if (subType === 'axisTick') { // 刻度
    result = { ...oldSeries, axisTick: val }
  } else if (subType === 'axisLabel') { // 标签
    result = { ...oldSeries, axisLabel: val }
  } else if (subType === 'pointer') { // 指针
    result = { ...oldSeries, pointer: val }
  } else if (subType === 'detail') { // 数据
    result = { ...oldSeries, detail: val }
  }
  return result
}

const optionToForm = (subType, option) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = option
  } else if (subType === 'axisLine') { // 轴线
    form = {
      show: option.axisLine?.show,
      ...(option.axisLine?.lineStyle || {})
    }
  } else if (subType === 'splitLine') { // 分割线
    form = {
      show: option.splitLine?.show,
      length: option.splitLine?.length,
      ...(option.splitLine?.lineStyle || {})
    }
  } else if (subType === 'axisTick') { // 刻度
    form = option.axisTick
  } else if (subType === 'axisLabel') { // 标签
    form = option.axisLabel
  } else if (subType === 'pointer') { // 指针
    form = option.pointer
  } else if (subType === 'detail') { // 数据
    form = option.detail
  }
  return form
}

const chart_gauge = {
  title: _r('仪表盘'),
  category: [_r('数据图表'),_r( '仪表盘')],
  icon: require('../../svg/newIcons/仪表盘.svg'),
  component: props => useChart({ ...props }),
  initLayout,
  initParam: { option: {
    series: [{
      type: 'gauge',
      pointer: { show: true },
      data: [{ value: 60 }]
    }],
    tooltip: { show: true }
  } },
  echartOption: {
    seriesOption,
    formToOption,
    optionToForm
  },
  paramSchema: {
    type: 'object',
    properties: {
      ...defaultSchema
    }
  }
}

export default chart_gauge
