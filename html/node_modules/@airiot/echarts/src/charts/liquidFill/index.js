import React from 'react'
import _ from 'lodash'
import useChart from '../../components/useChart'
import { initLayout, defaultSchema } from '../common/base'

const seriesOption = {
  base: {
    title: _r('基础'),
    type: 'object',
    properties: {
      data: {
        title: _r('数据'),
        type: 'array',
        items: {
          type: 'number'
        }
      },
      shape: {
        title: _r('形状'),
        type: 'string',
        enum: ['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'container'],
        enum_title: [_r('圆'), _r('方形'), _r('圆角方形'), _r('三角形'), _r('菱形'), _r('点'), 
          _r('箭头'), _r('装满容器')]
      },
      color: {
        title: _r('颜色'),
        type: 'array',
        items: {
          type: 'string',
          fieldType: 'color',
          field: {
            gradient: true
          }
        }
      },
      radius: {
        title: _r('尺寸'),
        type: 'string',
        fieldType: 'unit',
        field: {
          unitOptions: ['px', '%']
        }
      },
      waveAnimation: {
        title: _r('动态效果'),
        type: 'boolean'
      },
      amplitude: {
        title: _r('幅度'),
        type: 'string',
        fieldType: 'unit',
        field: {
          unitOptions: ['px', '%']
        }
      }
    }
  },
  backgroundStyle: {
    title: _r('背景样式'),
    type: 'object',
    properties: {
      borderWidth: {
        title: _r('边框宽度'),
        type: 'number'
      },
      borderColor: {
        title: _r('边框颜色'),
        type: 'string',
        unbind: true,
        fieldType: 'color',
        field: {
          gradient: true
        }
      },
      color: {
        title: _r('背景色'),
        type: 'string',
        unbind: true,
        fieldType: 'color',
        field: {
          gradient: true
        }
      }
    }
  },
  outline: {
    title: _r('外边框'),
    type: 'object',
    properties: {
      show: {
        title: _r('是否展示'),
        type: 'boolean'
      },
      borderDistance: {
        title: _r('边框距离'),
        type: 'string',
        fieldType: 'unit',
        field: {
          unitOptions: ['px', '%']
        }
      },
      itemStyle: {
        title: _r('样式'),
        type: 'object',
        properties: {
          color: {
            title: _r('背景色'),
            type: 'string',
            unbind: true,
            fieldType: 'color'
          },
          borderColor: {
            title: _r('边框颜色'),
            type: 'string',
            unbind: true,
            fieldType: 'color'
          },
          borderWidth: {
            title: _r('边框宽度'),
            type: 'number'
          }
        }
      }
    }
  },
  label: {
    title: _r('文字样式'),
    type: 'object',
    properties: {
      show: {
        title: _r('是否展示'),
        type: 'boolean'
      },
      fontSize: {
        title: _r('文字大小'),
        type: 'number'
      },
      color: {
        title: _r('水上颜色'),
        type: 'string',
        unbind: true,
        fieldType: 'color'
      },
      insideColor: {
        title: _r('水下颜色'),
        type: 'string',
        unbind: true,
        fieldType: 'color'
      }
    }
  }
}

const formToOption = (subType, val, oldSeries = {}) => {
  let result = {}
  if (subType === 'base') { // 基础
    result = { ...oldSeries, ...val }
  } else if (subType === 'backgroundStyle') { // 背景样式
    result = { ...oldSeries, backgroundStyle: val }
  } else if (subType === 'outline') { // 外边框
    result = { ...oldSeries, outline: val }
  } else if (subType === 'label') { // 文字样式
    result = { ...oldSeries, label: val }
  }
  return result
}

const optionToForm = (subType, option) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = option
  } else if (subType === 'backgroundStyle') { // 背景样式
    form = option.backgroundStyle
  } else if (subType === 'outline') { // 外边框
    form = option.outline
  } else if (subType === 'label') { // 文字样式
    form = option.label
  }
  return form
}

const chart_liquidFill = {
  title: _r('水球图'),
  category: [_r('数据图表'), _r('水球图')],
  icon: require('../../svg/newIcons/水球图.svg'),
  component: props => useChart({ ...props }),
  initLayout,
  initParam: {
    option: {
      series: [
        {
          type: 'liquidFill',
          data: [0.6],
          shape: 'circle',
          waveAnimation: true,
          amplitude: 10,
          color: ['#294D99'],
          backgroundStyle: {
            borderWidth: 0,
            color: '#E3F7FF'
          },
          outline: {
            show: true,
            borderDistance: 8,
            itemStyle: {
              color: '#fff',
              borderColor: '#294D99',
              borderWidth: 8,
            }
          },
          label: {
            show: true,
            color: '#294D99',
            insideColor: '#fff',
            fontSize: 50
          }
        }
      ]
    }
  },
  echartOption: {
    seriesOption,
    formToOption,
    optionToForm
  },
  paramSchema: {
    type: 'object',
    properties: {
      chartCode: defaultSchema.chartCode
    }
  }
}

export default chart_liquidFill
