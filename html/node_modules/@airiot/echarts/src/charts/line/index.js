import React from 'react'
import { C } from 'xadmin-ui'
import _ from 'lodash'
import useChart from '../../components/useChart'
import { initLayout, chartDafaultData, defaultSchema } from '../common/base'
import { shadowStyle } from '../common/option'
import MapSelect from '../common/MapSelect'


const seriesOption = {
  base: {
    title: _r('基础'),
    type: 'object',
    properties: {
      name: {
        title: _r('名字'),
        type: 'string',
        description: _r('系列名称，用于tooltip的显示，legend 的图例筛选'),
      },
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color',
        field: {
          gradient: true
        }
      },
      width: {
        title: _r('宽度'),
        type: 'number',
      },
      smooth: {
        title: _r('是否平滑'),
        type: 'boolean',
        description: _r('设定折线线段是否平滑')
      },
      step: {
        title: _r('阶梯线图'),
        type: 'boolean',
        description: _r('设定折线线段是否为梯图效果')
      },
      stack: {
        title: _r('堆叠标识'),
        type: 'string',
        description: _r('堆叠标识相同的折线会堆叠放置')
      },
      areaStyle: {
        title: _r('区域填充颜色'),
        type: 'object',
        fieldType: 'color_shadow',
        field: {
          gradient: true
        },
        flag: 'palette_obj',
        properties: {}
      },
      datasetIndex: {
        title: _r('数据集编号'),
        type: 'number',
        description: _r('选定外层数据容器或者自身数据的某个数据集进行数据展示')
      },
      encode: {
        title: _r('数据映射'),
        type: 'object',
        properties: {
          value: {
            title: _r('映射字段'),
            type: 'number',
            field: {
              component: MapSelect
            }
          },
          itemId: {
            title: _r('数据项ID'),
            type: 'number'
          },
          itemName: {
            title: _r('数据项名字'),
            type: 'number'
          }
        }
      }
    }
  },
  symbol: {
    title: _r('标记'),
    type: 'object',
    properties: {
      showSymbol: {
        title: _r('显示标记'),
        type: 'boolean',
      },
      symbol: {
        title: _r('标记图形'),
        type: 'string',
        enum: ['emptyCircle', 'circle', 'rect', 'roundRect', 'triangle', 'diamond', 'pin', 'arrow', 'none'],
        enum_title: [_r('空心圆'), _r('圆'), _r('方形'), _r('圆角方形'), _r('三角形'), _r('菱形'), 
          _r('点'), _r('箭头'), _r('无')],
        description: _r('设定数据点的标记处显示的形状')
      },
      symbolSize: {
        title: _r('标记尺寸'),
        type: 'number'
      },
      symbolRotate: {
        type: 'number',
        title: _r('旋转角度')
      },
      legendHoverLink: {
        title: _r('悬浮高亮'),
        type: 'boolean'
      },
      hoverAnimation: {
        title: _r('拐点动画'),
        type: 'boolean',
        description: _r('开启后标记图形会出现放大效果')
      }
    }
  },
  itemStyle: {
    title: _r('标记样式'),
    type: 'object',
    properties: {
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color'
      },
      borderColor: {
        type: 'string',
        title: _r('边框颜色'),
        fieldType: 'color',
      },
      borderWidth: {
        type: 'number',
        title: _r('边框线宽')
      },
      borderRadius: {
        type: 'number',
        title: _r('圆角半径')
      },
      ...shadowStyle,
    }
  },
}

const formToOption = (subType, val, oldSeries = {}) => {
  let result = {}
  if (subType === 'base') { // 基础
    result = {
      ...oldSeries,
      ..._.omit(val, ['areaStyle', 'color', 'width']),
      areaStyle: _.isEmpty(val.areaStyle) ? null : {
        color: val.areaStyle
      },
      lineStyle: {
        color: val.color,
        width: val.width,
      },

    }
  } else if (subType === 'symbol') { // 标记
    result = { ...oldSeries, ...val }
  } else if (subType === 'itemStyle') { // 标记样式
    result = { ...oldSeries, itemStyle: val }
  }
  return result
}

const optionToForm = (subType, option = {}) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = {
      ..._.omit(option, ['areaStyle']),
      areaStyle: option.areaStyle?.color,
      color: option.lineStyle?.color,
      width: option.lineStyle?.width,
    }
  } else if (subType === 'symbol') { // 标记
    form = option
  } else if (subType === 'itemStyle') { // 标记
    form = option.itemStyle
  }
  return form
}

const echartOption = {
  seriesOption,
  formToOption,
  optionToForm
}

const chart_line = {
  title: _r('折线图'),
  category: [_r('数据图表'), _r('折线图')],
  icon: require('../../svg/newIcons/折线图.svg'),
  component: props => useChart({ ...props }),
  initLayout,
  initParam: {
    option: {
      series: [{ type: 'line', itemStyle: { color: "pink" }, lineStyle: { color: "black" } }],
      xAxis: { show: true, type: 'category', axisLine: { lineStyle: { color: '#333' } } },
      yAxis: { show: true, type: 'value', axisLine: { "show":true, lineStyle: { color: '#333' } } },
      dataset: chartDafaultData
    }
  },
  echartOption,
  paramSchema: {
    type: 'object',
    properties: {
      ...defaultSchema
    }
  }
}

export default chart_line
export { seriesOption, formToOption, optionToForm, echartOption }