import _ from 'lodash'

// option 处理
const colorDeal = (option) => {
  let result = _.cloneDeep(option)
  if (_.isObject(result)) {
    for (let key in result) {
      if (_.isString(result[key]) && result[key].indexOf('-gradient') > -1) { // 颜色线性渐变
        result[key] = getGradientColor(_.cloneDeep(result[key]))
      } else if (_.isObject(result[key]) && !_.isFunction(result[key])) {
        result[key] = colorDeal(result[key])
      } else if (_.isArray(result[key])) {
        result[key] = result[key].map(item => colorDeal(item))
      }
    }
  }
  return result
}

const getGradientColor = (str) => {
  if (str.indexOf('linear-gradient') > -1) { // 线性渐变
    let str1 = str.substring(16, str.length - 1)
    let [deg, colorStr] = str1.split(', ')
    let radian = _.parseInt(deg.substring(0, deg.length - 3))/180*Math.PI // 弧度

    let colorList = getColorList(colorStr)
    if (colorList.length > 1) {
      return new echarts.graphic.LinearGradient(
        Math.sin(radian) < 0 ? -Math.sin(radian) : 0,
        Math.cos(radian) > 0 ? Math.cos(radian) : 0,
        Math.sin(radian) > 0 ? Math.sin(radian) : 0,
        Math.cos(radian) < 0 ? -Math.cos(radian) : 0,
        colorList
      )
    } else {
      return colorList?.[0]?.color
    }
  } else if (str.indexOf('radial-gradient') > -1) { // 径向渐变
    let str1 = str.substring(16, str.length - 1)
    let [circle, colorStr] = str1.split(', ')
    let l = circle.split(' ')?.map(s => _.parseInt(s.substring(0, s.length - 1))/100)

    let colorList = getColorList(colorStr)
    if (colorList.length > 1) {
      return new echarts.graphic.RadialGradient(l?.[3], l?.[4], (l?.[0] + l?.[1])/2, getColorList(colorStr))
    } else {
      return colorList?.[0]?.color
    }
  } else {
    return str
  }
}

const getColorList = (colorStr) => {
  let l = colorStr.split(',rgba')
  l[0] = l[0].substring(4)
  if (l?.[0]?.split(' ')?.[1]) {
    return l.map(item => ({
      offset: item.split(' ')?.[1] ? _.parseInt(item.split(' ')[1].replace('%', ''))/100 : 1,
      color: 'rgba' + item.split(' ')?.[0]
    }))
  } else {
    let offset = 1/(l.length - 1)
    return l.map((item, index) => ({
      offset: offset * index,
      color: 'rgba' + item.split(' ')?.[0]
    }))
  }
}

export { colorDeal }
