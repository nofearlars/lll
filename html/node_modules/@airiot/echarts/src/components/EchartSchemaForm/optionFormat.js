import _ from 'lodash'

// 表单 → option
// 使用 mergeParams 会引起属性删不掉问题，只能使用 saveParams 手动 merge
const FormToOption = (type, subType, val, oldOption = {}, formToOption) => {
  let option = {}
  if (type === 'chart') { // 图表配置
    if (subType === 'backBorder') { // 填充与线条
      option = { ..._.omit(oldOption, ['backgroundColor']), ...val }
    } else if (subType === 'base') { // 基础
      option = { ..._.omit(oldOption, ['grid']), ...val }
    }
  } else if (type === 'legend') { // 图例配置
    if (subType === 'base') { // 基础
      option = {
        ...oldOption,
        legend: {
          ..._.omit(val, ['position']),
          ...(val.position || {})
        }
      }
    } else if (subType === 'text') { // 文字样式
      option = {
        ...oldOption,
        legend: {
          ...(oldOption.legend || {}),
          textStyle: val
        }
      }
    }
  } else if (type === 'title') { // 标题配置
    if (subType === 'base') { // 基础
      option = {
        ...oldOption,
        title: {
          ..._.omit(val, ['position']),
          ...(val.position || {})
        }
      }
    }
    if (subType === 'text') { // 文字样式
      option = {
        ...oldOption,
        title: {
          ...(oldOption.title || {}),
          textStyle: _.omitBy(val, _.isNull)
        }
      }
    }
  } else if (type === 'dataZoom') { // 区域缩放
    if (subType === 'horizontal') { // 横向
      option = {
        ...oldOption,
        dataZoom: [
          { ...val, orient: 'horizontal' },
          oldOption.dataZoom?.[1] || { show: false, orient: 'vertical' }
        ]
      }
    } else if (subType === 'vertical') { // 纵向
      option = {
        ...oldOption,
        dataZoom: [
          oldOption.dataZoom?.[0] || { show: false, orient: 'horizontal' },
          { ...val, orient: 'vertical' }
        ]
      }
    }
  } else if (type === 'tooltip') { // 提示框配置
    if (subType === 'base') { // 基础
      option = {
        ...oldOption,
        tooltip: {
          ...(_.omit(oldOption.tooltip, ['show', 'trigger', 'formatter'])),
          ...val
        }
      }
    } else if (subType === 'backBorder') { // 填充与线条
      option = {
        ...oldOption,
        tooltip: {
          ...(_.omit(oldOption.tooltip, ['backgroundColor', 'borderColor', 'borderWidth', 'padding'])),
          ..._.omitBy(val, _.isNull)
        }
      }
    } else if (subType === 'text') { // 文字样式
      option = {
        ...oldOption,
        tooltip: {
          ...(_.omit(oldOption.tooltip, ['textStyle'])),
          textStyle: val
        }
      }
    }
  } else if (type === 'toolbox') { // 工具栏
    let feature = {}
    val.tool?.forEach(item => {
      if (item.toolType === 'dataZoom') { // 数据区域缩放
        feature[item.toolType] = { title: _.omit(item, ['toolType']) }
      } else {
        feature[item.toolType] = _.omit(item, ['toolType'])
      }
    })
    option = {
      ...oldOption,
      toolbox: {
        ..._.omitBy(_.omit(val, ['tool', 'position']), _.isNull),
        ...(val.position || {}),
        feature
      }
    }
  } else if (type === 'xAxis') { // X轴配置
    option = axisFormToOption(subType, val, oldOption, 'xAxis')
  } else if (type === 'yAxis') { // Y轴配置
    option = axisFormToOption(subType, val, oldOption, 'yAxis')
  } else if (type.indexOf('series') > -1) { // 系列配置
    const index = _.toNumber(type.split('series')[1]) // 系列几，编号
    let series = _.cloneDeep(oldOption.series)
    if (_.isFunction(formToOption)) {
      series[index - 1] = formToOption(subType, val, series[index - 1], oldOption)
    } else {
      series[index - 1] = val
    }
    option = { ...oldOption, series }
  }
  return option
}

const axisFormToOption = (subType, val, oldOption, t) => {
  let option = {}
  if (subType === 'base') { // 基础
    option = {
      ...oldOption,
      [t]: {
        ..._.omit(oldOption[t], ['show', 'type', 'min', 'max']),
        ..._.omit(val, ['show2', 'color', 'width', 'strType']),
        axisLine: {
          show: val.show2,
          lineStyle: {
            color: val.color,
            width: val.width,
            type: val.strType
          }
        }
      }
    }
  } else if (subType === 'name') { // 名称
    option = {
      ...oldOption,
      [t]: {
        ...(oldOption[t] || {}),
        name: val.name,
        nameLocation: val.nameLocation,
        nameRotate: val.nameRotate,
        nameGap: val.nameGap,
        nameTextStyle: _.omit(val, ['name', 'nameLocation', 'nameRotate', 'nameGap']),
      }
    }
  } else if (subType === 'axisLabel') { // 标签
    option = {
      ...oldOption,
      [t]: {
        ...(oldOption[t] || {}),
        axisLabel: {
          show: val.show,
          rotate: val.rotate,
          margin: val.margin,
          textStyle: _.omit(val, ['rotate', 'show', 'margin'])
        }
      }
    }
  } else if (subType === 'axisTick') { // 轴刻度
    option = {
      ...oldOption,
      [t]: {
        ...(oldOption[t] || {}),
        splitNumber: val.splitNumber,
        axisTick: {
          show: val.show,
          length: val.length,
          lineStyle: _.omit(val, ['splitNumber', 'show', 'length'])
        }
      }
    }
  }
  return option
}

// option → 表单
const OptionToForm = (type, subType, option = {}, optionToForm) => {
  let form = {}
  if (type === 'chart') { // 图表配置
    if (subType === 'backBorder') { // 填充与线条
      form = option
    } else if (subType === 'base') { // 基础
      form = option
    }
  } else if (type === 'legend') { // 图例配置
    if (subType === 'base') { // 基础
      form = {
        ..._.omit(option.legend, ['top', 'right', 'left', 'bottom']),
        position: {
          top: option.legend?.top,
          right: option.legend?.right,
          left: option.legend?.left,
          bottom: option.legend?.bottom
        }
      }
    } else if (subType === 'text') { // 文字样式
      form = option.legend?.textStyle
    }
  } else if (type === 'title') { // 标题配置
    if (subType === 'base') { // 基础
      form = {
        ..._.omit(option.title, ['top', 'right', 'left', 'bottom']),
        position: {
          top: option.title?.top,
          right: option.title?.right,
          left: option.title?.left,
          bottom: option.title?.bottom
        }
      }
    }
    if (subType === 'text') { // 文字样式
      form = option.title?.textStyle
    }
  } else if (type === 'dataZoom') { // 区域缩放
    if (subType === 'horizontal') { // 横向
      form = option.dataZoom?.[0]
    } else if (subType === 'vertical') { // 纵向
      form = option.dataZoom?.[1]
    }
  } else if (type === 'tooltip') { // 提示框配置
    if (subType === 'base') { // 基础
      form = option.tooltip
    } else if (subType === 'backBorder') { // 填充与线条
      form = option.tooltip
    } else if (subType === 'text') { // 文字样式
      form = option.tooltip?.textStyle
    }
  } else if (type === 'toolbox') { // 工具栏
    let tool = []
    let fea = option.toolbox?.feature || {}
    for (let key in fea) {
      if (key === 'undefined') {
      } else if (key === 'dataZoom') { // 数据区域缩放
        tool.push({ toolType: key, ...(fea[key].title || {}) })
      } else {
        tool.push({ toolType: key, ...fea[key] })
      }
    }
    
    form = {
      ..._.omit(option.toolbox, ['feature', 'top', 'right', 'left', 'bottom']),
      position: {
        top: option.toolbox?.top,
        right: option.toolbox?.right,
        left: option.toolbox?.left,
        bottom: option.toolbox?.bottom
      },
      tool
    }
  } else if (type === 'xAxis') { // X轴配置
    form = axisOptionToForm(subType, option, 'xAxis')
  } else if (type === 'yAxis') { // Y轴配置
    form = axisOptionToForm(subType, option, 'yAxis')
  } else if (type.indexOf('series') > -1) { // 系列配置
    const index = _.toNumber(type.split('series')[1]) // 系列几，编号
    const op = option.series?.[index-1]
    form = op
    if (_.isFunction(optionToForm)) form = optionToForm(subType, op, option)
  }
  return _.cloneDeep(form)
}
const axisOptionToForm = (subType, option, t) => {
  let form = {}
  if (subType === 'base') { // 基础
    form = {
      ..._.omit(option[t], ['axisLine']),
      show2: option[t]?.axisLine?.show,
      color: option[t]?.axisLine?.lineStyle?.color,
      width: option[t]?.axisLine?.lineStyle?.width,
      strType: option[t]?.axisLine?.lineStyle?.type
    }
  } else if (subType === 'name') { // 名称
    form = {
      ..._.omit(option[t], ['nameTextStyle']),
      ...option[t]?.nameTextStyle
    }
  } else if (subType === 'axisLabel') { // 标签
    form = {
      show: option[t]?.axisLabel?.show,
      rotate: option[t]?.axisLabel?.rotate,
      margin: option[t]?.axisLabel?.margin,
      ...(option[t]?.axisLabel?.textStyle || {})
    }
  } else if (subType === 'axisTick') { // 轴刻度
    form = {
      splitNumber: option[t]?.splitNumber,
      show: option[t]?.axisTick?.show,
      length: option[t]?.axisTick?.length,
      ...(option[t]?.axisTick?.lineStyle || {})
    }
  }
  return form
}

export { FormToOption, OptionToForm }
