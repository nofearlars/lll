import React from 'react'
import { Select, Divider, Radio, Modal, Input, Row, Col, Tooltip } from 'antd'
import { QuestionCircleOutlined } from '@ant-design/icons'
import { C } from 'xadmin-ui'
import _ from 'lodash'

const SelectBtn = (props)  => {
  const options = props.schema?.enum?.map((item, index) => ({
    value: item,
    label: props.schema?.enum_title?.[index]
  }))
  return <Radio.Group options={options} optionType="button" {...props.input} />
}

const show = {
  type: 'boolean',
  title: _r('显示')
}

const dataZoomSchema = {
  type: 'object',
  properties: {
    show,
    type: {
      title: _r('类型'),
      type: 'string',
      enum: ['inside', 'slider'],
      enum_title: [_r('图形内拖拽'), _r('滑块')],
    },
    backgroundColor: {
      title: _r('背景色'),
      type: 'string',
      fieldType: 'color',
      field: {
        gradient: true
      }
    },
    zoomLock: {
      title: _r('锁定区域'),
      type: 'boolean',
    },
    start: {
      title: _r('开始百分比'),
      type: 'number',
    },
    end: {
      title: _r('结束百分比'),
      type: 'number',
    }
  }
}

const textStyle = {
  fontSize: {
    type: 'number',
    title: _r('文字大小')
  },
  color: {
    type: 'string',
    title: _r('文字颜色'),
    fieldType: 'color'
  },
  backgroundColor: {
    type: 'string',
    title: _r('背景颜色'),
    fieldType: 'color',
  },
  lineHeight: {
    type: 'number',
    title: _r('行高')
  },
  fontStyle: {
    type: 'string',
    title: _r('字体风格'),
    enum: ['normal', 'italic'],
    enum_type: 'tab',
    field: {
      titleMap: [
        { name: { title: _r('正常') }, value: 'normal' },
        { name: { title: _r('斜体') }, value: 'italic' }]
    }
  },
  align: {
    type: 'string',
    title: _r('水平对齐'),
    enum: ['left', 'center', 'right'],
    enum_type: 'tab',
    field: {
      titleMap: [
        { name: { title: _r('左对齐'), icon: 'AlignLeft' }, value: 'left' },
        { name: { title: _r('中心对齐'), icon: 'AlignCenter' }, value: 'center' },
        { name: { title: _r('右对齐'), icon: 'AlignRight' }, value: 'right' }]
    }
  },
  verticalAlign: {
    type: 'string',
    title: _r('垂直对齐'),
    enum: ['top', 'middle', 'bottom'],
    enum_type: 'tab',
    field: {
      titleMap: [
        { name: { title: _r('顶部对齐'), icon: 'VerticalAlignTop' }, value: 'top' },
        { name: { title: _r('中间对齐'), icon: 'VerticalAlignMiddle' }, value: 'middle' },
        { name: { title: _r('底部对齐'), icon: 'VerticalAlignBottom' }, value: 'bottom' }]
    }
  }
}

const textShadowStyle = {
  textBorderColor: {
    type: 'string',
    title: _r('描边颜色'),
    fieldType: 'color'
  },
  textBorderWidth: {
    type: 'number',
    title: _r('描边宽度')
  },
  textShadowColor: {
    type: 'string',
    title: _r('阴影颜色'),
    fieldType: 'color'
  },
  textShadowBlur: {
    type: 'number',
    title: _r('阴影长度')
  },
  textShadowOffsetX: {
    type: 'number',
    title: _r('阴影X偏移')
  },
  textShadowOffsetY: {
    type: 'number',
    title: _r('阴影Y偏移')
  }
}

const FormatterComponent = props => {
  const { input: { value, onChange } } = props
  const [visible, setVisible] = React.useState(false)
  const [code, setCode] = React.useState(value || '//params是对象类型示例 (params) => { return `${params.marker} ${params.seriesName}: ${params.value[1]}` }' +
    '//params是数组类型示例 (params) => { return params.map(item => { return `${item.marker} ${item.seriesName}: ${item.value[1]}`}).join(`<br />`) }'
  )
  const data = [
    { key: _t1('系列名称'), value: '{a}' },
    { key: _t1('数值'), value: '{c}' },
    { key: _t1('名称：数值'), value: '{a}: {c}' }
  ]

  const options = {
    roundedSelection: false,
    readOnly: false,
    minimap: { enabled: false },
    cursorStyle: 'line',
    automaticLayout: false
  }
  const tip = `${_t1('异步实现')}：\r
(params, ticket, callback) => {
  setTimeout(() => {
    callback(ticket, 'data')
  }, 1000)
  return 'loading'
}`


  return (
    <>
      <Select
        allowClear
        value={value}
        onChange={onChange}
        style={{ width: 160 }}
        dropdownRender={menu => (
          <div>
            {menu}
            <Divider style={{ margin: '4px 0' }} />
            <div style={{ display: 'flex', flexWrap: 'nowrap', padding: 8 }}>
              <a style={{ flex: 'none', display: 'block', cursor: 'pointer' }} onClick={() => setVisible(true)}>
                {_t1('自定义')}
              </a>
              <Tooltip title={tip}>
                <QuestionCircleOutlined style={{ lineHeight: '26px' }} />
              </Tooltip>
            </div>
          </div>
        )}
      >
        {
          data.map(item => (
            <Option key={item.value}>{item.key}</Option>
          ))
        }
      </Select>
      <Modal
        title={_t1("编写脚本")}
        visible={visible}
        maskClosable={false}
        width="80%"
        onOk={e => {
          onChange(code)
          setVisible(false)
        }}
        onCancel={e => setVisible(false)}
      >
        <C is="CodeEditor"
          language={'javascript'}
          value={code}
          width="100%"
          height="600"
          options={options}
          onChange={value => setCode(value)}
        />
      </Modal>
    </>
  )
}

const PositionComponent = props => {
  const { input: { value, onChange } } = props
  return <Row gutter={[6, 8]}>
    <Tooltip title={_t1('上')}>
      <Col span={12} offset={6}>
        <Input value={value.top} placeholder={_t1('上')} onChange={v => onChange({ ...value, top: v.target.value })} />
      </Col>
    </Tooltip>
    <Tooltip title={_t1('左')}>
      <Col span={12}>
        <Input value={value.left} placeholder={_t1('左')} onChange={v => onChange({ ...value, left: v.target.value })} />
      </Col>
    </Tooltip>
    <Tooltip title={_t1('右')}>
      <Col span={12}>
        <Input value={value.right} placeholder={_t1('右')} onChange={v => onChange({ ...value, right: v.target.value })} />
      </Col>
    </Tooltip>
    <Tooltip title={_t1('下')}>
      <Col span={12} offset={6}>
        <Input value={value.bottom} placeholder={_t1('下')} onChange={v => onChange({ ...value, bottom: v.target.value })} />
      </Col>
    </Tooltip>
  </Row>
}

const axisSchema = {
  base: {
    type: 'object',
    properties: {
      base: {
        title: _r('基础'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      show,
      type: {
        type: 'string',
        title: _r('类型'),
        enum: ['time', 'category', 'value'],
        enum_title: [_r('时间轴'), _r('类目轴'), _r('数值轴')]
      },
      boundaryGap: {
        type: 'boolean',
        title: _r('两侧留白')
      },
      min: {
        type: 'number',
        title: _r('最小值')
      },
      max: {
        type: 'number',
        title: _r('最大值')
      },
      style: {
        title: _r('线样式'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      show2: {
        type: 'boolean',
        title: _r('显示')
      },
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color'
      },
      width: {
        title: _r('宽度'),
        type: 'number'
      },
      strType: {
        type: 'string',
        title: _r('类型'),
        enum: ['solid', 'dashed', 'dotted'],
        enum_title: [_r('实线'), _r('虚线'), _r('点虚线')]
      }
    }
  },
  name: {
    type: 'object',
    properties: {
      base: {
        title: _r('基础'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      name: {
        type: 'string',
        title: _r('名称')
      },
      nameLocation: {
        type: 'string',
        title: _r('位置'),
        enum: ['start', 'center', 'end'],
        enum_title: [_r('开始'), _r('中间'), _r('末端')]
      },
      nameRotate: {
        type: 'number',
        title: _r('旋转'),
      },
      nameGap: {
        type: 'number',
        title: _r('距离')
      },
      style: {
        title: _r('文字样式'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      ...textStyle
    }
  },
  axisLabel: {
    type: 'object',
    properties: {
      base: {
        title: _r('基础'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      show,
      rotate: {
        type: 'number',
        title: _r('旋转')
      },
      margin: {
        type: 'number',
        title: _r('与轴线距离')
      },
      style: {
        title: _r('文字样式'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      ...textStyle
    }
  },
  axisTick: {
    type: 'object',
    properties: {
      base: {
        title: _r('基础'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      show,
      splitNumber: {
        type: 'number',
        title: _r('分割段数')
      },
      length: {
        type: 'number',
        title: _r('长度')
      },
      style: {
        title: _r('线样式'),
        type: 'object',
        fieldType: 'fieldset_card'
      },
      color: {
        title: _r('颜色'),
        type: 'string',
        fieldType: 'color'
      },
      width: {
        title: _r('宽度'),
        type: 'number'
      },
      type: {
        type: 'string',
        title: _r('类型'),
        enum: ['solid', 'dashed', 'dotted'],
        enum_title: [_r('实线'), _r('虚线'), _r('点虚线')]
      }
    }
  }
}

const schema = {
  chart: {
    base: {
      type: 'object',
      properties: {
        grid: {
          title: _r('位置'),
          type: 'object',
          properties: {},
          field: {
            component: PositionComponent
          }
        }
      }
    },
    backBorder: {
      type: 'object',
      properties: {
        backgroundColor: {
          title: _r('背景色'),
          type: 'string',
          fieldType: 'color',
          initColor: true,
          field: {
            gradient: true
          }
        }
      }
    }
  },
  legend: {
    base: {
      type: 'object',
      properties: {
        show,
        type: {
          title: _r('类型'),
          type: 'string',
          enum: ['plain', 'scroll'],
          enum_title: [_r('平铺展示'), _r('滚动翻页')],
          field: { component: SelectBtn }
        },
        orient: {
          title: _r('布局'),
          type: 'string',
          enum: ['vertical', 'horizontal'],
          enum_title: [_r('垂直'), _r('水平')],
          field: { component: SelectBtn }
        },
        icon: {
          title: _r('图标类型'),
          type: 'string',
          enum: ['circle', 'rect', 'roundRect', 'triangle', 'diamond', 'arrow'],
          enum_title: [_r('圆形'), _r('矩形'), _r('圆角矩形'), _r('三角形'), _r('菱形'), _r('箭头')]
        },
        itemGap: {
          title: _r('图例间隔'),
          type: 'number'
        },
        position: {
          title: _r('位置'),
          type: 'object',
          properties: {},
          field: {
            component: PositionComponent
          }
        }
      }
    },
    text: {
      type: 'object',
      properties: textStyle
    }
  },
  title: {
    base: {
      type: 'object',
      properties: {
        show,
        text: {
          title: _r('标题文本'),
          type: 'string'
        },
        position: {
          title: _r('位置'),
          type: 'object',
          properties: {},
          field: { component: PositionComponent }
        },
        link: {
          title: _r('标题文本连接'),
          type: 'string',
          description: _r('手动输入地址需要写http://或https://')
        },
        target: {
          title: _r('指定窗口打开'),
          type: 'string',
          enum: ['self', 'blank'],
          enum_title: [_r('当前窗口'), _r('新窗口')]
        }
      }
    },
    text: {
      type: 'object',
      properties: {
        ..._.omit(textStyle, ['backgroundColor', 'lineHeight']),
        ...textShadowStyle
      }
    }
  },
  xAxis: axisSchema,
  yAxis: axisSchema,
  dataZoom: {
    horizontal: dataZoomSchema,
    vertical: dataZoomSchema
  },
  tooltip: {
    base: {
      type: 'object',
      properties: {
        show,
        trigger: {
          type: 'string',
          title: _r('触发位置'),
          enum: ['item', 'axis'],
          enum_title: [_r('图形'), _r('坐标轴')],
          field: { component: SelectBtn }
        },
        formatter: { // 字段好像是关键字，mergeParams 会有问题
          type: 'string',
          title: _r('内容格式器'),
          field: { component: FormatterComponent }
        }
      }
    },
    backBorder: {
      type: 'object',
      properties: {
        backgroundColor: {
          title: _r('背景色'),
          type: 'string',
          fieldType: 'color',
          field: {
            gradient: true
          }
        },
        borderColor: {
          type: 'string',
          title: _r('边框颜色'),
          fieldType: 'color'
        },
        borderWidth: {
          type: 'number',
          title: _r('边框宽')
        },
        padding: {
          type: 'number',
          title: _r('内边距')
        }
      }
    },
    text: {
      type: 'object',
      properties: {
        ...textStyle,
        ...textShadowStyle
      }
    }
  },
  toolbox: {
    type: 'object',
    properties: {
      tool: {
        title: _r('工具'),
        type: 'array',
        items: {
          title: _r('工具'),
          type: 'object',
          properties: {
            toolType: {
              title: _r('类型'),
              type: 'string',
              enum: ['saveAsImage', 'restore', 'dataView', 'dataZoom'],
              enum_title: [_r('保存图片'), _r('配置项还原'), _r('数据视图工具'), _r('数据区域缩放')],
              field: {
                effect: ({ value }, form, field) => {
                  let key = field.key.substr(0, field.key.lastIndexOf('.'))
                  setTimeout(() => {
                    form.setFieldData(`${key}.name`, { display: value === 'saveAsImage' })
                    form.setFieldData(`${key}.backgroundColor`, { display: value === 'saveAsImage' })
                    form.setFieldData(`${key}.type`, { display: value === 'saveAsImage' })
                    form.setFieldData(`${key}.zoom`, { display: value === 'dataZoom' })
                    form.setFieldData(`${key}.back`, { display: value === 'dataZoom' })
                  })
                }
              }
            },
            name: {
              type: 'string',
              title: _r('名称')
            },
            backgroundColor: {
              title: _r('背景色'),
              type: 'string',
              fieldType: 'color',
              field: {
                gradient: true
              }
            },
            type: {
              type: 'string',
              title: _r('图片格式'),
              enum: ['png', 'jpeg']
            },
            zoom: {
              title: _r('缩放标题'),
              type: 'string'
            },
            back: {
              title: _r('还原标题'),
              type: 'string'
            }
          }
        },
        field: {
          ButtonBody: ({ index, input, inputName }) => {
            let obj = { saveAsImage: _t1('保存图片'), restore: _t1('配置项还原'),
              dataView: _t1('数据视图工具'), dataZoom: _t1('数据区域缩放') }
            let val = input?.value?.[index]?.toolType
            return <div>{obj[val] || inputName}</div>
          }
        }
      },
      itemSize: {
        type: 'number',
        title: _r('icon大小')
      },
      orient: {
        type: 'string',
        title: _r('布局'),
        enum: ['horizontal', 'vertical'],
        enum_title: [_r('水平'), _r('垂直')]
      },
      itemGap: {
        title: _r('图标间隔'),
        type: 'number'
      },
      position: {
        title: _r('位置'),
        type: 'object',
        properties: {},
        field: {
          component: PositionComponent
        }
      }
    }
  }
}

export { schema, PositionComponent, SelectBtn, textStyle }
