import React from 'react'
import { app, use } from 'xadmin'
import { C } from 'xadmin-ui';
import { Dropdown, Menu, Space, Radio, message, Popover, Select } from 'antd'
import { DownOutlined, DeleteOutlined } from '@ant-design/icons';
// import { FieldGroup } from '../../../../editor/components/PropsSchemaForm';
// import { form_fields } from '../../../../editor/form';
import { schema } from './schema'
import { FormToOption, OptionToForm } from './optionFormat';
import './EchartSchemaForm.css'
import _ from 'lodash';

const typeItems = (widget, _t1) => {
  if (['折线图', '柱状图', '散点图', '混合图', '象形柱图'].find(h => widget.title.indexOf(h) > -1)) {
    return [
      { key: 'chart', label: _t1('图表基础配置') },
      { key: 'legend', label: _t1('图例配置') },
      { key: 'title', label: _t1('标题配置') },
      { key: 'tooltip', label: _t1('提示框配置') },
      { key: 'xAxis', label: _t1('X轴配置') },
      { key: 'yAxis', label: _t1('Y轴配置') },
      { key: 'dataZoom', label: _t1('区域缩放') },
      { key: 'toolbox', label: _t1('工具栏') }
    ]
  } else if (['水球图', '仪表盘', '地图', '雷达图'].find(h => widget.title.indexOf(h) > -1)) {
    return [
      { key: 'chart', label: _t1('图表基础配置') },
      { key: 'title', label: _t1('标题配置') },
      { key: 'tooltip', label: _t1('提示框配置') },
      { key: 'toolbox', label: _t1('工具栏') }
    ]
  } else {
    return [
      { key: 'chart', label: _t1('图表基础配置') },
      { key: 'legend', label: _t1('图例配置') },
      { key: 'title', label: _t1('标题配置') },
      { key: 'tooltip', label: _t1('提示框配置') },
      { key: 'toolbox', label: _t1('工具栏') }
    ]
  }
}

const optionList = (_t1) => [
  { value: 'line', label: _t1('折线图') },
  { value: 'bar', label: _t1('柱状图') },
  { value: 'pie', label: _t1('饼图') },
  { value: 'scatter', label: _t1('散点图') }
]

const subTypeItems = (_t1) => ({
  chart: [
    { label: _t1('基础'), value: 'base' },
    { label: _t1('填充与线条'), value: 'backBorder' }
  ],
  legend: [
    { label: _t1('基础'), value: 'base' },
    { label: _t1('文本样式'), value: 'text' }
  ],
  title: [
    { label: _t1('基础'), value: 'base' },
    { label: _t1('文本样式'), value: 'text' },
  ],
  dataZoom: [
    { label: _t1('横向'), value: 'horizontal' },
    { label: _t1('纵向'), value: 'vertical' }
  ],
  tooltip: [
    { label: _t1('基础'), value: 'base' },
    { label: _t1('填充与线条'), value: 'backBorder' },
    { label: _t1('文本样式'), value: 'text' }
  ],
  xAxis: [
    { label: _t1('基础'), value: 'base' },
    { label: _t1('名称'), value: 'name' },
    { label: _t1('标签'), value: 'axisLabel' },
    { label: _t1('轴刻度'), value: 'axisTick' }
  ],
  yAxis: [
    { label: _t1('基础'), value: 'base' },
    { label: _t1('名称'), value: 'name' },
    { label: _t1('标签'), value: 'axisLabel' },
    { label: _t1('轴刻度'), value: 'axisTick' }
  ]
})

const getSchema = (type, subType, seriesOption, option) => {
  if (schema[type]) {
    if (schema[type][subType]) {
      let s = _.cloneDeep(schema[type][subType]) // 其他配置，有两级
      if (!option.xAxis) delete s.properties.trigger // 无坐标轴图标，提示框触发位置默认图形
      return s
    } else {
      return schema[type] // toolbox 工具栏配置，只有一级
    }
  } else {
    return seriesOption[subType] || { type: 'object', properties: {} } // 组件自己的配置项 schema
  }
}

const SubType = (props) => {
  const { subTypeList, type } = props
  return subTypeList[type] ? <Radio.Group
    style={{ marginBottom: 10 }}
    options={subTypeList[type]}
    optionType="button"
    {...props}
  /> : null
}

const getSeriesType = (value, type) => {
  if (type.indexOf('series') > -1) { // 系列配置
    const index = _.toNumber(type.split('series')[1]) // 系列几，编号
    const op = value.series?.[index-1]
    return op?.type || 'line'
  }
  return 'line'
}

const ESchemaForm = ({ widget, baseValue, setBaseValue, selectkey, bindVar=true }) => {
  const [type, setType] = React.useState('chart') // 一级类型
  const [subType, setSubType] = React.useState('base') // 二级类型
  const [open, setOpen] = React.useState(false)
  const { t: _t1 } = useI18n()

  // 格式化 value, onChange
  const value = baseValue?.option || {}
  const onChange = val => {
    // if (!_.isEqual(val, baseValue?.option)) {
      setBaseValue(before => ({ ...before, option: val }))
    // }
  }

  // 分析基础信息
  const ifMix = widget?.title?.indexOf(_t1('混合图')) > -1 // 混合图表
  const t = getSeriesType(value, type) // 当前系列类型（折线/柱状）
  const { seriesOption, formToOption, optionToForm } = ifMix ? 
    widget.echartOption[t] : widget.echartOption

  // 动态系列配置
  const typeList = [
    ...typeItems(widget, _t1),
    ...(_.isArray(value?.series) ? value.series.map((item, index) => {
      const t = optionList(_t1).find(o => o.value === item.type)?.label || item.type
      const label = ifMix ? `${_t1('系列')}${index + 1}-${t}` : `${_t1('系列')}${index + 1}`
      return {
        key: 'series' + (index + 1),
        label: (<span>
          { label }
          <DeleteOutlined style={{ marginLeft: 30 }} onClick={e => delSeries(e, index)} />
        </span>)
      }
    }) : [])
  ]
  if (ifMix) { // 混合图表
    const typeSelect = <Select style={{ width: 100 }} options={optionList(_t1)} onChange={v => {
      let result = _.cloneDeep(value)
      result.series.push({ type: v })
      onChange(result)
      setOpen(false)
    }}/>
    typeList.push({
      label: <Popover
        content={typeSelect}
        trigger="click"
        open={open}
        onOpenChange={setOpen}
        placement="right"
      >+ {_t1('系列')}</Popover>,
      key: 'addMixSeries'
    })
  } else if (!['水球图', '雷达图'].some(h => widget.title.indexOf(h) > -1)) { // 水球图、雷达图不能增加系列
    typeList.push({ key: 'addSeries', label: '+ ' + _t1('系列') })
  }
  let subTypeList = subTypeItems(_t1)
  typeList.forEach(t => {
    if (t.key.indexOf('series') > -1) {
      let subTypeItem = []
      for (let key in seriesOption) {
        subTypeItem.push({ label: _t1(seriesOption[key].title), value: key })
      }
      subTypeList[t.key] = subTypeItem
    }
  })

  React.useEffect(() => {
    if (baseValue?.optionType && baseValue.optionType !== type) {
      setSubType(subTypeList[baseValue.optionType]?.[0]?.value || 'base')
      setType(baseValue.optionType)
    }
  }, [baseValue?.optionType])

  React.useEffect(() => {
    setSubType(subTypeList[baseValue.optionType]?.[0]?.value || 'base')
  }, [selectkey+type])

  const handleChange = val => {
    const op = FormToOption(type, subType, val, value, formToOption)
    onChange(_.cloneDeep(op))
  }

  const menuClick = v => {
    if (v.key === 'addMixSeries') { // 增加混合表系列
    } else if (v.key === 'addSeries') { // 增加系列
      let result = _.cloneDeep(value)
      let type = value.series[0].type
      result.series.push({ type })
      onChange(result)
    } else {
      setBaseValue(before => ({ ...before, optionType: v.key }))
    }
  }

  const delSeries = (e, index) => { // 删除系列
    e.stopPropagation()
    if (value.series?.length > 1) {
      let result = _.cloneDeep(value)
      result.series.splice(index, 1)
      setBaseValue(before => ({ ...before, option: result, optionType: 'series1' }))
    } else {
      message.error(_t1('最少保留一个系列配置'))
    }
  }

  return <div className='echart-schemaform dashboard-param-form'>
    <div className="right-sider-title">
    <Dropdown overlay={<Menu
      onClick={menuClick}
      items={typeList}
    />}>
      <Space>
        { typeList.find(item => item.key === type)?.label }
        <DownOutlined />
      </Space>
    </Dropdown>
    </div>
    <SubType type={type} subTypeList={subTypeList} value={subType} onChange={e => setSubType(e.target.value)} />
    {
      React.useMemo(() => {
        return <C
          is='Dashboard.PropForm'
          formKey={'echart-schema-' + type + subType + selectkey}
          schema={getSchema(type, subType, seriesOption, value)}
          initialValues={OptionToForm(type, subType, value, optionToForm)}
          onChange={handleChange}
          component={({ children }) => children}
          bindVar={bindVar}
        />
      }, [type, subType, selectkey])
    }
    
  </div>
}

const EchartSchemaForm = (props) => {
  const { selectkey, bindVar } = props
  const widgets = app.get('dashboardWidgets')
  const widgetType = use('cell.structure.value', `${selectkey}.type`)
  // const [ baseValue, setBaseValue ] = use('cell.params', selectkey, 'base')
  const widget = props?.widget || widgets[widgetType]
  let value = {}
  let setValue = () => null
  try{
    const [ baseValue, setBaseValue ] = use('cell.params', selectkey, 'base')
    value = props?.baseValue || baseValue
    setValue =  props?.setBaseValue || setBaseValue
  }catch(err) {

  }

  // 只有图表组件有该配置
  return widget?.echartOption ? 
    <ESchemaForm widget={widget} baseValue={value} setBaseValue={setValue} selectkey={selectkey} bindVar={bindVar} /> : null
}

export default EchartSchemaForm
