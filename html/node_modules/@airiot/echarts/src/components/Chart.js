import * as echarts from 'echarts';
import '../charts/liquidFill/src/liquidFill';
import React from 'react'
import elementResizeEvent from 'element-resize-event'
import _ from 'lodash';
// import { defaultTheme, getTheme } from './util'
import ecStat from 'echarts-stat'
echarts.registerTransform(ecStat.transform.regression);

// 判断 dataset 格式是否正确
const dataValid = (data) => {
  if (_.isEmpty(data)) return true
  if (data.source) return true
  if (data[0]?.source) return true
  return false
}

const BaseChart = (props) => {
  const { size, theme, option, chartCode } = props

  const echartDom = React.useRef()
  const resizeDOM = React.useRef()

  const [error, setError] = React.useState(null)

  const getEchartsInstance = () => echarts.getInstanceByDom(echartDom.current) || echarts.init(echartDom.current, theme)

  React.useEffect(() => {
    let echartObj = getEchartsInstance()
    if (echartObj) {
      echartObj.dispose()
    }
    let newEchartObj = getEchartsInstance()
    try {
      if (dataValid(option?.dataset)) {
        option && newEchartObj.setOption(option)
      } else {
        setError(option?.dataset)
      }
    } catch(e) {
      console.error(error)
    }
  }, [JSON.stringify(theme)])

  React.useEffect(() => () => {
    echartDom?.current && echarts.dispose(echartDom?.current)
  }, [])

  React.useLayoutEffect(() => {
    elementResizeEvent(resizeDOM.current, () => {
      let echartObj = getEchartsInstance()
      try { echartObj && echartObj.resize() } catch (err) { console.log(err) }
    })
  }, [])

  React.useLayoutEffect(() => {
    if (option) {
      try {
        let myChart = getEchartsInstance()
        let dataset = props.option?.dataset
        let codeOption = {}
        if (!_.isEmpty(chartCode)) {
          codeOption = eval(chartCode)
        }
        let op = {
          ..._.merge(option, codeOption),
          // lodash 的 merge，当两个 dataset 类型不同时，无法覆盖
          dataset: codeOption?.dataset || option?.dataset
        }
        if (dataValid(op.dataset)) {
          myChart.setOption(op)
          myChart.resize()
          setError(null)
        } else {
          setError(op.dataset)
        }
      } catch (error) {
        console.error(error)
      }
    }
  }, [JSON.stringify(option) + chartCode])

  let err
  if (error) {
    console.error('图表dataset格式有误：', error)
    err = <span style={{ color: 'red' }}>图表dataset格式有误</span>
  }
  return (
    <>
      { err }
      <div ref={resizeDOM} style={{ width: '100%', height: '100%' }}>
        <div ref={echartDom} style={size ? size : { width: '100%', height: '100%' }} />
      </div>
    </>
  )
}

const Chart = props => {

  // const themeData = getTheme(_.merge(defaultTheme, props.theme || {}))

  const newProps = _.omit(props, ['theme'])

  return <BaseChart {...newProps} theme={{}} />
}

export default Chart
