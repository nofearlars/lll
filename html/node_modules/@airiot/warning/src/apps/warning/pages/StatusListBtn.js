import React from 'react';
import { Button, Modal, Layout, Card, Tooltip, Popconfirm, message } from 'antd';
import { C, Page, Loading, Icon } from 'xadmin-ui'
import { app, use, api } from 'xadmin'
import { Model } from 'xadmin-model'
import { ModelBlock } from 'xadmin-model'
import StatusListExport from './StatusListExport'
import _ from 'lodash'

const { Content, Sider } = Layout

const DeleteRecord = ({ item }) => {
  const { t:_t1, i18n } = useI18n()
  const { getItems } = use('model.getItems')

  const handleDelete = () => {
    api({ name: `core/t/${item?.tableInfo?.id}/d/${item?.tableData?.id}` })
      .fetch('', { method: 'DELETE' }).then(({ json }) => {
        message.success(_t1(`删除${ item?.tableData?.name || item?.tableData?.id }成功`))
        getItems()
      })
  }
  return <Popconfirm
    title={_t1("确认删除？")}
    onConfirm={handleDelete}
    onCancel={() => {}}
    okText={_t1("确认")}
    cancelText={_t1("取消")}
  >
    <Button danger icon={<Icon type="delete" />}></Button>
  </Popconfirm>
}

const StatusListBtn = ({ model }) => {
  const { t:_t1, i18n } = useI18n()
  const [ visible, setVisible ] = React.useState(false)
  const [ deviceModel, setDeviceModel ] = React.useState([])
  const NodeItemActions = []//_.clone(app.get('models')['Node']['itemActions']) //需要调试
  // NodeItemActions.splice(1, 1)
  
  const onClose = () => setVisible(false)

  const onShow = () => {
    api({ name: 'core/t/schema' })
      .query({ fields: [ 'device', 'function' ] }, { where: { device: { "$not": { "$regex": { driver: 'test' }, "$exists": true } } }})
      .then(({ items }) => {
        if (items) {
          setDeviceModel(items.map(item => item.id))
          setTimeout(() => setVisible(true), 500)
        }
      })
  }


  return (
    <>
      <Tooltip title={_t1("掉线报警统计")}><Button onClick={onShow}> {_t1('无通讯')} </Button></Tooltip>
      <Modal visible={visible} width={'80%'} onCancel={onClose} bodyStyle={{ padding: 0 }} destroyOnClose>
        <Card title={_t1("无通讯状态统计")} >
          {
            deviceModel && deviceModel.length > 0 ?
              <Model name="tRecord" key={'tRecord' + Math.random() * 10}
                props={{
                  title: _r('无通讯状态统计'),
                  filters: { submenu: [ 'name', 'id' ] },
                  permission: {
                    view: true,
                    add: false,
                    edit: false,
                    delete: false,
                  },
                  initialValues: { wheres: { filters: {  tableInfoId: { '$in': deviceModel } } } },
                  listFields: [ 'tableInfo', 'tableData', 'status', 'connectTime', 'online' ],
                  blocks: {
                    'model.list.submenu.btngroup': (props) => ([
                      <StatusListExport />
                    ]),
                  },
                  batchActions: null,
                  fieldRender: {
                    tableData: ({ item }) => item?.tableData?.name || item?.tableData?.id || '空',
                    tableInfo: ({ item }) => item?.tableInfo?.title || item?.tableInfo?.name || item?.tableInfo?.id || '空',
                  },
                  itemActions: [ 
                    ({ item }) => <DeleteRecord item={item}/>
                  ]
                }}
              >
              <StatusListTable deviceModel={deviceModel} model={model}/>
            </Model>
              : < C is="NoData" />
          }
        </Card>
      </Modal>
    </>
  )
}

const StatusListTable = ({ model, deviceModel }) => {
  const { getItems } = use('model.getItems')

  let interval = setInterval(() => (getItems()), 1000 * 60 * 3)

  const getTRecord = () => {
    return api({ name: 'core/t/record' }).query({ fields: [ 'name', 'title', 'id', 'table', 'tableData', 'tableInfo', 'parent', 'status', 'connectTime', 'online' ] }, { wheres: 
      { tableInfoId: { '$in': deviceModel } } }).then(({ items }) => {
      return items
    })
  }

  React.useEffect(() => { 
    return () => clearInterval(interval)
  }, [])

  const ItemsComponent = C('Model.DataTable')
  const GridComponents = [
    <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
      <C is="Model.Pagination" />
      <C is="Model.ListSubMenu" />
    </div>,
    <ItemsComponent key="model-list-grid" />,
    <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
      <C is="Model.ActionBar" />
      <C is="Model.Pagination" />
    </div>
  ]
  return (
    <>
      <ModelBlock name="model.list.submenu" />
      <ModelBlock name="model.list.sidemenu" >
        {sideMenu => (
          <ModelBlock name="model.list.sidepanel" >
            {sidePanel => (sideMenu || sidePanel) ? (
              <Layout style={{ backgroundColor: 'transparent' }}>
                {sideMenu ? <Sider width={200} style={{ backgroundColor: 'transparent', marginRight: '.5rem' }}>{sideMenu}</Sider> : null}
                <Content>{GridComponents}</Content>
                {sidePanel ? <Sider width={200} style={{ backgroundColor: 'transparent', marginLeft: '.5rem' }}>{sidePanel}</Sider> : null}
              </Layout>
            ) : GridComponents}
          </ModelBlock>
        )}
      </ModelBlock>
    </>
  )
}

export default StatusListBtn
