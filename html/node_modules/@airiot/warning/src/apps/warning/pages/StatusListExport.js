import { saveAs } from 'file-saver';
import _ from 'lodash';
import React from 'react';
import { Button } from 'antd';
import { Icon } from 'xadmin-ui';
import XLSX from 'xlsx';
import { api, use } from 'xadmin'
import { atom, selector, RecoilRoot, selectorFamily, useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'

/* see Browser download file example in docs */
function s2ab(s/*:string*/)/*:ArrayBuffer*/ {
  const buf = new ArrayBuffer(s.length)
  const view = new Uint8Array(buf)
  for (let i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF
  return buf
}

const StatusListExport = props => {
  const { t:_t1, i18n } = useI18n()
  const { model, atoms } = use('model')
  const [ ids, setIds ] = useRecoilState(atoms.ids)
  const [ fields, setFields ] = useRecoilState(atoms.fields)
  const [ items, setItems ] = useRecoilState(atoms.items)
  const [ loading, setLoading ] = React.useState(false)

  // const itemsData = React.useMemo(() => {
  //   return ids?.map(id => items[id]).filter(item => !_.isNil(item))
  // }, [ ids, items ])

  const onExport = async () => {
    setLoading(true)
    /* convert state to workbook */
    const properties = model?.properties
    const title = model?.title
    const validateFields = fields.filter(f => properties[f])
    const header = validateFields.map(f => properties[f] && properties[f].title)
   
    const rows = items && items.length > 0 ? items.map(item => {
      return validateFields.map(f => {
        const field = properties[f]
        const value = item[f]
        const type = field?.type
        if (type == 'string' && field.enum && field.enum.length > 0) {
          const index = field.enum.indexOf(value)
          if (field.enum_title && field.enum_title.length > 0) {
            return field.enum_title[index]
          } else {
            return value
          }
        } else if (type == 'object') {
          // 导出附件不处理
          if (field.fieldType == 'attachment') {
            return _t1('空')
          } else if (field.relate && field.relate.fields) {
            const key = field.relate.fields[0].key
            return value[key]
          } else {
            return value?.name || value?.id
          }
        } else if (type == 'boolean') {
          return value ? 'true' : 'false'
        } else if (type == 'array') {
          if (value && value.length > 0 && value[0].name) { // 所属设备
            return value.map(item => item.name).join('，')
          } else {
            return ''
          }
        } else if (field.format === 'date-time') { // 日期时间
          let formatStr = 'YYYY-MM-DD HH:mm:ss' 
          return value ? moment(value).format(formatStr) : ''
        } else {
          return value
        }
      })
    }) : []

    const ws = XLSX.utils.aoa_to_sheet([header, ...rows])

    // 根据配置的宽度生成表格宽度
    // ws['!cols'] = report.columns.filter(Boolean).map(col => ({ wpx: col.width ? col.width : 100 }))
    const wb = XLSX.utils.book_new()
    // XLSX.utils.sheet_add_aoa(ws, [[title]], { origin: 'A1' })

    XLSX.utils.book_append_sheet(wb, ws, title)

    setLoading(false)
    /* generate XLSX file */
    const wbout = XLSX.write(wb, { type: 'binary', bookType: 'xlsx' })
    /* send to client */
    saveAs(new Blob([s2ab(wbout)], { type: 'application/octet-stream' }), `导出-${title}.xlsx`)
  }

  const active = !!(!loading && items)
  return (
    <Button onClick={onExport} disabled={!active} style={{ marginRight: 2.5 }}>
      <Icon type={loading ? 'loading' : 'download'} /> {_t1('导出')} 
    </Button>
  )
}

export default StatusListExport;
