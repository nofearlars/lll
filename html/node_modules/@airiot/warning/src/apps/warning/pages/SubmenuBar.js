import React from 'react'
import { app, use, api, RESTBaseAPI } from 'xadmin'
import { ModelBlock, apps } from 'xadmin-model'
import { Page, C, Icon, Loading } from 'xadmin-ui'
import { Tabs, Button, Pagination, Badge, Checkbox, message, Layout, Radio, Row, Col, Form, Card } from 'antd';
import { Model } from 'xadmin-model'
import { _t } from 'xadmin-i18n'
import _ from 'lodash'
const { Content, Sider } = Layout

const DefaultLayout = props => {
  const { t:_t1, i18n } = useI18n()
  const { children, invalid, handleSubmit, submitting, options, resetFilter, tab } = props;
  const { _t } = app.context;
  const [expand, setExpand] = React.useState(false)
  let menu = children
  if (tab?.handle) menu = children.filter(item => (item.key != 'processed'))

  const getFields = (menus) => {
    const count = expand ? menus?.length : 4;
    let allMenu = menus.slice(0, count)
    return allMenu
  }

  return (
    <Form className="ant-advanced-search-form" onFinish={handleSubmit}>
      <Card style={{ marginBottom: '.5rem' }} bodyStyle={{ paddingBottom: 0 }}>
        {/* <Row>{ menu }</Row> */}
        <Row gutter={24}>{getFields(menu)}</Row>
        {options && options.submitOnChange ? null : (
          <Row style={{ marginBottom: '.5rem' }}>
            <Col span={24} style={{ textAlign: 'center' }}>
              <Button disabled={invalid || submitting} type="primary" onClick={handleSubmit}>{_t1('搜索')}</Button>
              {' '}
              <Button disabled={submitting} onClick={resetFilter}>{_t1('重置')}</Button>
              <a style={{ fontSize: 14, marginLeft: '1rem' }} onClick={() => { setExpand(!expand) }}>
                {expand ? _t1('收起') : _t1('展开')}
              </a>
            </Col>
          </Row>
        )}
      </Card>
    </Form>
  )
}

const FieldGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && meta.error
  const extra = field.description || field.help
  const size = { labelCol: { sm: { span: 8 } }, wrapperCol: { sm: { span: 16 } } }
  const groupProps = { extra, ...size, required: field.required, labelAlign: 'right' }
  if (error) {
    groupProps['validateStatus'] = 'error'

    groupProps['help'] = error
  }
  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Col span={8} sm={12} xs={24} md={12} lg={8} xl={8} xxl={6}>
      <Form.Item colon={false} label={label} {...groupProps}>
        {controlComponent}
      </Form.Item>
    </Col>
  )
}

const SubmenuBar = ({ tab }) => {
  let ops = {
    name: 'submenu',
    component: props => <DefaultLayout {...props} tab={tab} />,
    group: FieldGroup
  }
  return <C is="Model.BaseFilter" {...ops} />
}

export default SubmenuBar
