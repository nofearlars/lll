import React from 'react'
import { app, use, api, RESTBaseAPI } from 'xadmin'
import { ModelBlock } from 'xadmin-model'
import { Page, C, Icon, Loading } from 'xadmin-ui'
import { Tabs, Button, Pagination, Badge, Checkbox, message, Layout, Radio } from 'antd';
import { Model } from 'xadmin-model'
import DataTable from './WarningDataTable'
import { _t } from 'xadmin-i18n'
import _ from 'lodash'
const { Content, Sider } = Layout
import SubmenuBar from './SubmenuBar'
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'
import Store from './../../../Store'

const BadgeCountContext = React.createContext()

const DefaultAddButton = ({ onAdd, children }) => (
  <Button type="primary" onClick={onAdd}>{children}</Button>
)

const RankTag = ({ activeKey, setLevel, level, types, setActiveKey }) => {
  const levels = [_t1('全部'), _t1('高'), _t1('中'), _t1('低')]
  const { atoms } = use('model')
  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  let filters = wheres?.tabs?.filters
  const [checked, setChecked] = React.useState(level || _t1('全部'))

  const onChange = e => {
    setChecked(e.target.value)
    setLevel(e.target.value)
    let filter = e.target.value == _t1('全部') ? _.omit({ type: { '$regex': activeKey } }, ['level']) : {
      type: { '$regex': activeKey },
      ...filters,
      'level': e.target.value,
    }
    if (filters && filters.type) {
      setActiveKey(filters.type)
    }
    //全部报警
    if (activeKey == 'xcl') filter = _.omit({ ...filter, 'handle': true, processed: _t1('未处理') }, ['type'])
    if (activeKey == 'quanbu') filter = _.omit({ ...filter, }, ['type', 'handle'])

    setWheres({ tabs: filter })

  }

  return (
    <Radio.Group value={checked} buttonStyle="solid" onChange={onChange}>
      {levels.map(item => (<Radio.Button value={item} >{item}</Radio.Button>))}
    </Radio.Group>
  )
}

const WarningPage = props => {

  const { model: preModel } = use('model')
  const { modelI18n: model } = use('model.transI18n', { model: preModel })
  const { canAdd } = use('model.permission')
  const { onAdd } = use('model.event')
  const { settings } = use('settings')
  let warning = settings?.warning
  const type = settings?.warning?.warningkind || []
  let types = _.clone(type)
  const [tab, setTab] = React.useState(null)
  const schema = app.get('models').Warning
  const newSchema = use('warning.warningExpand', { schema })

  if (warning && warning.show_need) {
    types.unshift({ name: '需处理报警', id: 'xcl', show: true })
  }
  if (warning && warning.show_all) {
    types.unshift({ name: '全部报警', id: 'quanbu', show: true })
  }
  if (warning && warning.show_recovery) {
    types.splice(1, 0, { name: '报警恢复', id: 'huifu', show: true })
  }
  const title = model?.title
  let icon = model?.icon || model.name
  if (_.isString(icon)) icon = <Icon name={icon} />

  const renderActions = () => {
    const AddButton = (model.components && model.components.AddButton) || C('Model.AddButton') || DefaultAddButton
    return (<>
      <ModelBlock name="model.list.navbtn" />
      {canAdd ?
        (<AddButton onAdd={onAdd}><Icon name="plus" /> {_t('Add {{object}}', { object: model.title })}</AddButton>) : null
      }
    </>)
  }

  return <Model schema={model}>
    <Page className={`xadmin-model-list-${model.key}`}
      title={(<span>{icon} {title}</span>)}
      subTitle={<ModelBlock name="model.list.nav" />}
      actions={renderActions()}>
      <SubmenuBar tab={tab}></SubmenuBar>
      {types && types.length > 0 ? (<WarningInfoTabs types={types} changeTags={(activeTab) => setTab(activeTab)} />) : (
        // <Model name="Warning" modelKey={'Warning'} >
        <Model schema={newSchema} modelKey={'Warning'} >
          <ModelBlock name="model.list.sidemenu" >
            {sideMenu => (
              <ModelBlock name="model.list.sidepanel" >
                {sidePanel => (sideMenu || sidePanel) ? (
                  <Layout>
                    {sideMenu ? <Sider width={200} style={{ backgroundColor: 'transparent', marginRight: '.5rem' }}>{sideMenu}</Sider> : null}
                    <Content>{GridComponents}</Content>
                    {sidePanel ? <Sider width={200} style={{ backgroundColor: 'transparent', marginLeft: '.5rem' }}>{sidePanel}</Sider> : null}
                  </Layout>
                ) : GridComponents}
              </ModelBlock>
            )}
          </ModelBlock>
        </Model>
      )}
    </Page>
  </Model>
}

const Paginations = props => {
  const { emptyComponent, items, activePage, maxButtons = 6, changePage, ...propss } = use('model.pagination', props)
  if (items == 0) return null
  return (
    <Pagination showSizeChanger={false} showQuickJumper={items > 10} current={activePage}
      size={props.size == 'sm' ? 'small' : ''} className={props.className}
      pageSize={1} total={items} onChange={changePage} {...propss}
    />
  )
}

const GridComponents = (props) => [
  <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
    <RankTag style={{ marginLeft: 20 }} {...props} />
    <C is="Model.ListSubMenu" />
  </div>,
  <DataTable />,
  <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
    <C is="Model.ActionBar" />
    <Paginations showSizeChanger={false} />
  </div>
]

const WarningInfoTabs = ({ types: warTypes, changeTags }) => {
  const { t: _t1 } = useI18n()
  const { atoms, model } = use('model')
  const [loading, setLoading] = React.useState(false)

  const defaultTypeList = ['quanbu', 'huifu', 'xcl']

  const [wheres, setWheres] = useRecoilState(atoms.wheres)
  let [fields, setFields] = useRecoilState(atoms.fields)
  const setOrder = useSetRecoilState(atoms.order)
  const setSkip = useSetRecoilState(atoms.skip)
  const setLimit = useSetRecoilState(atoms.limit)
  fields = fields || model?.listFields
  let filters = wheres?.tabs?.filters
  let { user } = use('auth.user')
  // const { getItems } = use('model.getItems')
  // console.log(atoms, fields, 9898)
  const [arr, setArr] = React.useState(null)
  const [activeKey, setActiveKey] = React.useState(warTypes[0]['id'])
  const [level, setLevel] = React.useState(_t1('全部'))
  const [tabLading, setTabLading] = React.useState(true)
  const [typeObj, setTypeObj] = React.useState(warTypes[0])
  // let [types, setTypes] = React.useState(warTypes.filter(item => item && item['show']))
  const types = warTypes.filter(item => item && item['show'])

  const getCloneFilter = (activeKey) => {
    let cloneFilter = _.cloneDeep(fields)
    let index = cloneFilter?.indexOf('recoveryTime')
    if (activeKey != 'huifu') {
      if (index > -1) cloneFilter?.splice(index, 1)
    } else {
      if (index == -1) {
        cloneFilter?.splice(1, 0, 'recoveryTime')
      }
    }
    return cloneFilter
  }

  const queryDefaultFilter = async (ws) => {
    const { pageSetting } = await api({ name: 'core/user' }).getOrigin(`/${user?.userId} `).then(info => info)
    let str = {
      skip: 0, limit: 10000,
      project: { name: 1, permission: 1, params: 1, showMode: 1, chartMode: 1, creator: 1, default: 1, settings: 1 },
      filter: { type: 'warning' },
      withCount: true
    }
    api({ name: 'core/dataRecord' })
      .fetch('?query=' + encodeURIComponent(JSON.stringify(str)), {})
      .then(({ json }) => {
        setTabLading(false)
        if (json.length) {
          const defaultFilter = json.filter(item => item?.settings?.default
            && item?.settings?.default.length > 0 && item?.settings?.default?.indexOf(user.userId) != -1)[0] || false
          if (defaultFilter && _.isObject(defaultFilter)) {
            // 根据保存的记录做默认查询
            // modelDispatch({ type: 'GET_ITEMS', wheres: { ...defaultFilter.params } })
            setWheres({ ...defaultFilter.params })
            return
          }
        }
        let cloneFilter = getCloneFilter(activeKey)
        if (pageSetting && pageSetting['warning']) {
          cloneFilter = Object.keys(pageSetting['warning']).reverse()
        }
        // modelDispatch({ type: 'GET_ITEMS', filter: { ...cloneFilter, skip: 0 }, wheres: { ...ws } })
        // console.log(cloneFilter, pageSetting, 9)
        setFields(cloneFilter)
        setWheres({ ...ws })
        setSkip(0)
        setLimit(15)
        setOrder({ time: 'DESC' })
      })
      .catch(err => message.error(err.message))
  }

  React.useEffect(() => {
    onTypesNumFn()
    // 跳转页面记录查询条件 再次返回默认查询
    let ws = {}
    if (wheres && JSON.stringify(wheres) == '{}') {
      // 首次加载tabs取第一个tab作为请求参数
      if (types && types.length > 0) {
        if (types[0] && types[0].id) {
          ws = { tabs: { 'type': { "$regex": types[0].id } } }
        } else {
          ws = { tabs: { 'handle': true, processed: '未处理' } }
        }
      }
      if (typeObj && typeObj.name == '全部报警') {
        ws = { tabs: {} }
      } else if (typeObj && typeObj.name == '需处理报警') {
        ws = { tabs: { 'handle': true, processed: '未处理' } }
      } else if (typeObj && typeObj.name == '报警恢复') {
        ws = { tabs: { recoveryTime: { "$exists": true } } }
      }
    } else {
      ws = wheres || {}
      if (ws && ws.tabs && ws.tabs.level) {
        setLevel(ws.tabs.level)
      }
      if (ws && ws.tabs && ws.tabs.handle) {
        if (warTypes?.length) {
          let xclArr = warTypes.filter(item => item.id == 'xcl')
          xclArr?.length && setActiveKey('xcl')
        }
      }
      if (ws && ws.tabs && ws.tabs.type) {
        setActiveKey(ws.tabs.type)
      }
    }
    queryDefaultFilter(ws)
  }, [])

  const typesFilterConvert = (kind) => {
    const defaultParams = { limit: 15, 'withoutBody': true }
    let typeFilter = {};
    if (kind.name == '全部报警') {
      typeFilter = { 'handle': true }
    } else if (kind.name == '需处理报警') {
      typeFilter = { 'handle': true, processed: '未处理' }
    } else if (kind.name == '报警恢复') {
      typeFilter = { recoveryTime: { "$exists": true } }
    } else {
      typeFilter = { 'type': { "$regex": kind.id } }
    }
    return Object.assign(defaultParams, { 'filter': typeFilter })
  }

  const onTypesNumFn = () => {
    const data = types
    if (data && data.length > 0) {
      const ps = []
      data.forEach(kind => {
        const notFindCount = _.isBoolean(kind.handle) && kind.handle == false
        if (!notFindCount) {
          const where = JSON.stringify(typesFilterConvert(kind))
          const f = api({ name: 'warning' }).fetch(`/warning?query=${where}`).then(({ headers }) => {
            return { id: kind.id, count: headers.count }
          })
          ps.push(f)
        }
      })
      Promise.all(ps).then((result) => {
        setArr(result.reduce((p, c) => ({ ...p, [c.id]: c.count }), {}))
      })
    }
  }

  const onChange = (activeKey) => {
    if (!activeKey) return
    if (loading) {
      message.loading('玩命加载中...', 3)
      return
    }

    const typeObj = _.find(types, opt => opt.id == activeKey)
    const filter = _.omit(wheres.filters, ['handle', 'type'])

    let cloneFilter = getCloneFilter(activeKey)
    setLevel(_t1('全部'))
    setTypeObj(typeObj)
    setActiveKey(activeKey)
    if (typeObj && typeObj.name == '需处理报警') {
      setWheres({ filters: filter, tabs: { 'handle': true, processed: '未处理' } })
      changeTags({ 'handle': true, processed: '未处理' })
    } else if (typeObj && typeObj.name == '全部报警') {
      setWheres({ filters: filter })
      changeTags(null)
    } else if (typeObj && typeObj.name == '报警恢复') {
      setWheres({ filters: filter, tabs: { recoveryTime: { "$exists": true } } })
      changeTags(null)
    } else {
      setWheres({ filters: filter, tabs: { type: { "$regex": activeKey } } })
      changeTags(null)
    }
    setFields(cloneFilter)
  }

  if (tabLading) return <Loading />

  return (
    <BadgeCountContext.Provider value={onTypesNumFn}>
      <Tabs activeKey={filters && filters.type || activeKey} onChange={onChange}  >
        {(types || []).map((kind) => {
          const showBadge = _.some(defaultTypeList, ele => ele == kind.id) || kind.handle
          const tab = <Badge showZero={showBadge} count={arr?.[kind.id] || '0'} offset={[1, -1]} style={{ backgroundColor: '#1790FF' }}>
            <div style={{ paddingTop: '10px' }}>{kind && _t1(kind.name)}</div>
          </Badge>
          return (<Tabs.TabPane key={kind && kind.id} defaultActiveKey="all" tab={tab}>
            <ModelBlock name="model.list.sidemenu" >
              {sideMenu => {
                return (
                  <ModelBlock name="model.list.sidepanel" >
                    {sidePanel => (sideMenu || sidePanel) ? (
                      <Layout>
                        {sideMenu ? <Sider width={200} style={{ backgroundColor: 'transparent', marginRight: '.5rem' }}>{sideMenu}</Sider> : null}
                        <Content><GridComponents key={kind && kind.id}
                          typeObj={typeObj} types={types}
                          level={level} activeKey={activeKey}
                          setLevel={setLevel}
                          setActiveKey={setActiveKey}
                        />
                        </Content>
                        {sidePanel ? <Sider width={200} style={{ backgroundColor: 'transparent', marginLeft: '.5rem' }}>{sidePanel}</Sider> : null}
                      </Layout>
                    ) : <GridComponents typeObj={typeObj} setActiveKey={setActiveKey} types={types} activeKey={activeKey} level={level} setLevel={setLevel} />}
                  </ModelBlock>
                )
              }
              }
            </ModelBlock>
          </Tabs.TabPane>)
        })}
      </Tabs >
    </BadgeCountContext.Provider>
  )
}

const WarningInfoPage = props => {
  return <Store><WarningPage {...props} /></Store>
}

export default WarningInfoPage

export { BadgeCountContext }
