import React, { useState, useEffect } from 'react'
import { SchemaForm } from 'xadmin-form'
import { app, use } from 'xadmin'
import { C } from 'xadmin-ui'
import { Table, Tag, Divider, Card, Row, Col, Button, Modal, Form } from 'antd'
import './../../style.css'
import { BgColorsOutlined } from '@ant-design/icons'


const DefaultLayout = props => {
  const { children, invalid, handleSubmit, onDelete, schema, submitting } = props;
  const { _t } = app.context;

  const formItemLayout = {
    labelCol: {
      span: 3,
    },
    wrapperCol: {
      span: 2,
    },
  }

  return (
    <form className="form-horizontal" onSubmit={handleSubmit}>
      <Card>
        {children}
      </Card>
    </form>
  );
}

const defaultColors = {
  bg: 'transparent',
  normal: '#000',
  timeout: '#8e7cc3',
  offline: '#e69138',
  warning1: '#4c2f0a',
  warning2: '#ff6347',
  warning3: '#f00',
  warning4: '#333'
}

const ColorSettings = props => {
  const { t:_t1, i18n } = useI18n()
  const [ visible, setVisible ] = useState(false)
  const [ example, setExample ] = useState(false)
  const { input: { value, onChange } } = props
  const [ initValue, setInitValue ] = useState(defaultColors)
  const { ctx } = use('dashboard.selected.ctx')

  const columns = [
    {
      title: _t1('名称'),
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: _t1('数值'),
      dataIndex: 'num',
      key: 'num',
    },
    {
      title: _t1('状态'),
      dataIndex: 'status',
      key: 'status',
    }
  ];
  
  const data = [
    {
      key: '0',
      name: _t1('0号设备'),
      num: '0.7',
      status: _t1('正常'),
      flag: 'normal'
    },
    {
      key: '1',
      name: _t1('1号设备'),
      num: '4',
      status: _t1('超时'),
      flagB: 'timeout'
    },
    {
      key: '2',
      name: _t1('2号设备'),
      num: '4',
      status: _t1('掉线'),
      flagB: 'offline'
    },
    {
      key: '3',
      name: _t1('3号设备'),
      num: '0.5',
      status: _t1('低级报警'),
      flag: 'warning1'
    },
    {
      key: '4',
      name: _t1('4号设备'),
      num: '8.25',
      status: _t1('中级报警'),
      flag: 'warning2'
    },
    {
      key: '5',
      name: _t1('5号设备'),
      num: '8.98',
      status: _t1('高级报警'),
      flag: 'warning3'
    },
    {
      key: '6',
      name: _t1('6号设备'),
      num: '8.2',
      status: _t1('报警恢复'),
      flag: 'warning4'
    }
  ];
  
  const tableSchema = {
    modelColor: {
      type: 'object',
      title: _r('颜色定义'),
      properties: {
        bg: {
          type: 'string',
          title: _r('背景色'),
          fieldType: 'color'
        },
        normal: {
          type: 'string',
          title: _r('正常'),
          fieldType: 'color'
        },
        timeout: {
          type: 'string',
          title: _r('超时'),
          fieldType: 'color'
        },
        offline: {
          type: 'string',
          title: _r('掉线'),
          fieldType: 'color'
        },
        warning1: {
          type: 'string',
          title: _r('报警低'),
          fieldType: 'color'
        },
        warning2: {
          type: 'string',
          title: _r('报警中'),
          fieldType: 'color'
        },
        warning3: {
          type: 'string',
          title: _r('报警高'),
          fieldType: 'color'
        },
        warning4: {
          type: 'string',
          title: _r('报警恢复'),
          fieldType: 'color'
        }
      }
    },
    tableColor: {
      type: 'object',
      title: _r('颜色定义'),
      properties: {
        bg: {
          type: 'string',
          title: _r('背景色'),
          fieldType: 'color'
        },
        color: {
          type: 'string',
          title: _r('文字颜色'),
          fieldType: 'color'
        }
      }
    }
  }

  // 判断是资产视图下，还是工作表视图下
  let schemaColor;
  schemaColor = props.type === 'table' ? tableSchema.tableColor : tableSchema.modelColor
  if(props.type == 'warning') {
    delete schemaColor.properties.bg
  }
  if(ctx?.consumerSchema?.name == 'log' && props.type !== 'table') {
    schemaColor = {
      type: 'object',
      title: _r('颜色定义'),
      properties: {
        bg: {
          type: 'string',
          title: _r('背景色'),
          fieldType: 'color'
        },
        normal: {
          type: 'string',
          title: _r('正常'),
          fieldType: 'color'
        }
      }
    }
  }
 
  useEffect(() => {
    value && setInitValue(value)
  }, [ value ])

  const onSubmit = (value) => {
    onChange(value)
  }
 
  return (
    <>
      <Row>
        <Col flex={2}>
          <Divider orientation="left">{_t1('颜色填充')}</Divider>
          <C is="I18nSchemaForm"
            formKey={'tableSchema'}
            schema={schemaColor}
            initialValues={value || initValue}
            component={DefaultLayout}
            onChange={(value) => onSubmit(value)}
          />
        </Col>
        <Col flex={3} style={{ paddingLeft: 20 }}>
          <Divider orientation="left">{_t1('预览')}</Divider>
          <table className="tableExample">
            <thead>
              <tr>
                {columns.map(item => {
                  return <td><b>{_t1(item.title)}</b></td>
                })}
              </tr>
            </thead>
            <tbody>
              {data.map(item => {
                return (
                  <tr style={{
                    color: value?.[item.flag] || value?.normal || value?.color
                  }}>
                    <td><span style={{ backgroundColor: value?.[item.flagB] }}>{_t1(item.name)}</span></td>
                    <td><span style={{ backgroundColor: value?.[item.flagB] }}>{_t1(item.num)}</span></td>
                    <td>{_t1(item.status)}</td>
                  </tr>
                )
              })}
            </tbody>
          </table>
        </Col>
      </Row>
    </>
  )
}

export default ColorSettings
