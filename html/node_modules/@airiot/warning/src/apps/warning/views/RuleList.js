import React from 'react'
import { app, use, api } from 'xadmin'
import { ModelBlock } from 'xadmin-model'
import { Page, C, Icon, Loading } from 'xadmin-ui'
import { Tabs, Button, Pagination, Badge, Checkbox, message, Layout, Radio, Modal } from 'antd';
import { Model } from 'xadmin-model'
import { _t } from 'xadmin-i18n'
import _ from 'lodash'
const { Content, Sider } = Layout
import { PlusOutlined, UserOutlined } from '@ant-design/icons'
import { HasPermission } from 'xadmin-auth'
import warningRule from '../model_rule'
import { SchemaForm } from 'xadmin-form'

const AddRulesBtn = props => {
  const { t: _t1, i18n } = useI18n()
  const { size = 'default', is_icon, type = 'primary' } = props
  const [visible, setVisible] = React.useState(false)
  const { saveItem } = use('model.save', props)
  const { getItems } = use('model.getItems', props)
  const { modelDispatch } = use('model')

  const schema = warningRule['Rule']

  const onSubSuccess = () => {
    setVisible(false)
    setTimeout(() => getItems(), 500)
  }

  const getwarnInterval = (count, unit) => {
    let value = count;
    if (unit == 'm') { value = count * 60 }
    return value
  }

  const handleSubmit = value => {
    let type = value?.type == '同数据报警' ? 'sameValueWarn' : value?.type == '长时间不上数报警' ? 'timeoutWarn' : ''
    let settings = {}
    if (type) {
      settings = {
        [type]: {
          show: true,
          ...value,
          range: {
            ...value?.range,
            tags: value?.range?.tags?.length ? value.range.tags.map(item => {
              return { ...item, table: _.isPlainObject(item?.table) ? item?.table : { id: item?.table } }
            }) : []
          },
          warnInterval: getwarnInterval(value?.warnIntervalObj?.count, value?.warnIntervalObj?.unit)
        }
      }
    }
    let newValue = {
      ...value,
      settings,
      range: {
        ...value?.range,
        tags: value?.range?.tags?.length ? value.range.tags.map(item => {
          return { ...item, table: _.isPlainObject(item?.table) ? item?.table : { id: item?.table } }
        }) : []
      }
    }
    saveItem(newValue)
    onSubSuccess()
  }

  return (
    <HasPermission FailureComponent={null} permission="rule.add">
      <Button onClick={() => setVisible(true)} type={type} icon={<Icon type="plus" />} onClicksize={size}>{is_icon ? null : _t1('添加规则')}</Button>
      <Modal
        title={_t1("添加规则")}
        destroyOnClose
        width={800}
        visible={visible}
        footer={null}
        onCancel={() => setVisible(false)}
      >
        {
          schema ?
            <C is="I18nSchemaForm"
              formKey="creat-model"
              schema={schema}
              onSubmit={handleSubmit}
            />
            : null
        }
      </Modal>
    </HasPermission >
  )
}

const WarningRuleList = props => {
  const { t: _t1, i18n } = useI18n()
  const { model: preModel } = use('model')
  const { modelI18n } = use('model.transI18n', { model: preModel })

  return <Model modelKey='Rule' schema={modelI18n}>
    <Page title={(<span> <Icon svg={require('./../../../icon/规则管理.svg')} />{_t1('报警规则管理')}</span>)} actions={<AddRulesBtn />} >
      <ModelBlock name="model.list.submenu" />
      <div key="model-list-subnav" style={{ display: 'flex', justifyContent: 'space-between', marginBottom: '.5rem' }}>
        <C is="Model.Pagination" /> <C is="Model.ListSubMenu" />
      </div>
      <C is="Model.DataTable" />
      <div key="model-list-downnav" style={{ display: 'flex', justifyContent: 'space-between', marginTop: '.5rem' }}>
        <C is="Model.ActionBar" />
        <C is="Model.Pagination" />
      </div>
    </Page>
  </Model>
}

export default WarningRuleList