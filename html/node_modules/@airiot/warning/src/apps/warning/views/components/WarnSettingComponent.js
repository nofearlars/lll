import { Badge, Menu, Card, Tag, Select, Checkbox, Spin, Form, Divider, Row, Col, Button, message, Modal, InputNumber } from 'antd';
import React from 'react';
import { app, api, use } from 'xadmin';
import _ from 'lodash';
import { SchemaForm } from 'xadmin-form'
import { C } from 'xadmin-ui'

const soundCheckbox = ({ input, label, field }) => {
  return <Checkbox value={input.value} checked={input.value} onChange={e => input.onChange(e.target.checked)} ></Checkbox>
}

const cardCheckbox = ({ input, label, field }) => {
  return <Checkbox value={input.value} checked={input.value} onChange={e => input.onChange(e.target.checked)} ></Checkbox>
}

const warCheckbox = ({ input, label, field }) => {
  React.useEffect(() => {
    if (input.value === '') input.onChange(true)
  }, [])
  return <Checkbox value={input.value} checked={!!input.value} onChange={e => input.onChange(e.target.checked)} ></Checkbox>
}

const SelectMultiples = props => {
  const { t:_t1, i18n } = useI18n()
  const { field: { schema }, input: { value, onChange } } = props
  const enum_key = schema && schema.enums || []
  const enum_title = schema && schema.enum_title || []
  const values_type = (schema && schema.values_type) ? schema.values_type == 'object' : false
  const ops = enum_key.map((key, i) => ({ id: key, name: enum_title ? enum_title[i] : key }))

  function handleChange(value) {
    if (values_type && enum_title) {
      const vals = value.map(key => (ops.filter(item => item.id == key)[0]))
      onChange(vals)
    } else {
      onChange(value)
    }
  }

  return (
    <Select
      mode="multiple"
      onChange={handleChange}
      style={{ width: '100%' }}
      placeholder={_t1('请选择级别')}
      value={((values_type && value) ? value.map(item => item.id) : value) || undefined}
    >
      {ops.map((item) => (<Option key={item.id}>{item.name}</Option>))}
    </Select>
  )
}

const PlacementSelect = props => {
  const { field: { schema }, input: { value, onChange } } = props
  const data = [{ key: 'topLeft', name: '左上' }, { key: 'topRight', name: '右上' }, { key: 'bottomLeft', name: '左下' }, { key: 'bottomRight', name: '右下' }]

  function handleChange(value) {
    onChange(value)
  }

  return (
    <Select
      allowClear
      onChange={handleChange}
      style={{ width: '100%' }}
      value={value || undefined}
    >
      {
        data.map(item => (<Option key={item.key}>{item.name}</Option>))
      }
    </Select>
  )
}

const LimitInput = props => {
  const { input: { onChange, value } } = props
  return <InputNumber min={1} onChange={e => { onChange(e) }} value={value || 30} />
}


const DefaultAlarm = props => {
  const { children, invalid, handleSubmit, showCode, submitting } = props;
  const { _t } = app.context;
  const { t:_t1, i18n } = useI18n()
  return (
    <Form onSubmit={handleSubmit} >
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333' }}>
        {children}
        <Row style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          {/* <Button type="primary" loading={submitting} onClick={handleSubmit} htmlType="submit">{_t('提交')}</Button> */}
          <Button type="primary" loading={submitting} onClick={handleSubmit} htmlType="submit">{_t1('确定')}</Button>
        </Row>
      </Card>
    </Form>
  )
}

const AlarmModal = ({ tabKey, setInitValues }) => {
  const { t:_t1, i18n } = useI18n()

  const [isModalVisible, setIsModalVisible] = React.useState(false)
  const { settings } = use('settings')
  let warning = settings?.warning
  const store = app.context.store
  // 设备表设备调试
  const alarmSchema = {
    type: 'object',
    properties: {
      show: {
        type: 'boolean',
        title: _r('显示实时报警弹窗'),
      },
      limit: {
        type: 'number',
        title: _r('显示数量')
      },
      statusTime: {
        type: 'number',
        title: _r('停留时间'),
        description: _r('S，默认30s')
      },
      department: {
        type: 'array',
        title: _r('部门'),
        fieldType: 'tableData',
        field: {
          func: 'dataAuth',
          style: {
            minWidth: 130
          },
          placeholder: _r('选择部门'),
        },
        items: {},
        width: 130
      },
      table: {
        type: 'array',
        title: _r('设备表'),
        fieldType: 'table',
        field: {
          func: 'device'
        },
        items: {},
        description: _r('不选则为全部设备表'),
      },
      tableData: {
        type: 'array',
        title: _r('设备'),
        items: { },
        fieldType: 'tableData',
        field: {
          func: 'device',
          depend: 'table'
        }
      },
      level: {
        title: _r('级别'),
        type: 'array',
        items: {},
        enums: [ '低', '中', '高' ],
        enum_title: [ _r('低'), _r('中'), _r('高') ]
      },
      show_fields: {
        type: 'boolean',
        title: _r('显示报警数值'),
      },
      show_handle: {
        type: 'boolean',
        title: _r('显示处理操作'),
      },
      show_confirm: {
        type: 'boolean',
        title: _r('显示确认操作'),
      },
      placement: {
        type: 'string',
        title: _r('弹出位置'),
        enum_title: [ _r('左上'), _r('右上'), _r('左下'), _r('右下') ],
        enum: [ 'topLeft', 'topRight', 'bottomLeft', 'bottomRight' ]
      }
    },
    form: ['show', { key: 'limit', component: LimitInput }, { key: 'statusTime', component: LimitInput },
      '*', { key: 'level', component: props => <SelectMultiples {...props} /> }, 'show_fields', 'show_handle', 'show_confirm']
  }

  const onSubmit = value => {
    // api({ name: 'core/setting' })
    //   .fetch('', {
    //     method: 'PATCH', body: JSON.stringify({
    //       warning: {
    //         ...warning,
    //         alarmModal: value
    //       }
    //     })
    //   })
    //   .then(({ json }) => {
    //     message.success('系统设置保存成功')
    //     store.dispatch({ type: '@@iot/SAVE_SETTINGS', payload: { ...settings, warning: { ...settings.warning, alarmModal: value } }, success: true })
    //     store.dispatch({ type: '@@iot/GET_SETTINGS' })
    //     setIsModalVisible(false)
    //   })
    setInitValues({ ...settings, warning: { ...settings.warning, alarmModal: value }  }) 
    setIsModalVisible(false)
  }

  return (
    <>
      <Modal title={_t1("显示配置")} visible={isModalVisible} onCancel={() => setIsModalVisible(false)} footer={null}>
        {
          React.useMemo(() => {
            return alarmSchema ? <C is='I18nSchemaForm'
              formKey={`warning-${tabKey}`}
              schema={alarmSchema}
              onSubmit={onSubmit}
              component={DefaultAlarm}
              initialValues={warning?.alarmModal}
            /> : null
          }, [tabKey, alarmSchema, warning])
        }
      </Modal>
      <Button type="primary" onClick={() => { setIsModalVisible(true) }}>{_t1('显示配置')}</Button>
    </>
  )
}

export { AlarmModal, warCheckbox, cardCheckbox, soundCheckbox }