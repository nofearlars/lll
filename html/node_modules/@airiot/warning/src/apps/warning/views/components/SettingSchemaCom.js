import { Badge, Menu, Card, Tag, Select, Checkbox, Spin, Form, Divider, Row, Col, Button, message, Modal, InputNumber } from 'antd';
import React from 'react';
import { app, api, use } from 'xadmin';
import _ from 'lodash';
import { SchemaForm } from 'xadmin-form'
import { C } from 'xadmin-ui'

const DefaultLayout = props => {
  const { children, invalid, handleSubmit, showCode, submitting } = props;
  const { _t } = app.context;
  const { t:_t1, i18n } = useI18n()
{/* <Row gutter={24}>{getFields(menu)}</Row> */}
  return (
    <Form onSubmit={handleSubmit} labelCol={{ span: 4 }}>
      <Card style={{ marginTop: 0, borderTop: 'none', color: '#333' }}>
        {/* <div style={{ background: '#f0f2f5', margin: '0 0 10px 0', padding: '10px' }}>报警声音</div>
        {children.filter(c => c?.props?.field?.schema?.divider == 'audio')}
        <div style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>报警展示</div>
        {children.filter(c => c?.props?.field?.schema?.divider == 'show_tab')}
        <div style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>报警类型</div>
        {children.filter(c => c?.props?.field?.schema?.divider == 'kind')}
        <div style={{ background: '#f0f2f5', margin: '10px 0px', padding: '10px' }}>报警分组</div>
        {children.filter(c => c?.props?.field?.schema?.divider == 'grouping')} */}
        { children }
        <Row style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>
          <Button type="primary" loading={submitting} onClick={handleSubmit} htmlType="submit">{_t1('提交')}</Button>
        </Row>
      </Card>
    </Form>
  )
}

export default (props) => {
  const { t:_t1, i18n } = useI18n()
  const store = app.context.store
  const { settings } = use('settings')
  const { tabKey, newWarn, initValues } = props
 
  const onSubmit = value => {
    api({ name: 'core/setting' })
      .fetch('', { method: 'PATCH', body: JSON.stringify({ warning: value }) })
      .then(({ json }) => {
        store.dispatch({ type: '@@iot/SAVE_SETTINGS', payload: { ...settings, warning: value }, success: true })
        store.dispatch({ type: '@@iot/GET_SETTINGS' })
        message.success(_t1('保存成功'))
      })
  }

  return React.useMemo(() => {
    return <>
      <C is='I18nSchemaForm'
        formKey={`warning-${tabKey}`}
        schema={newWarn}
        component={DefaultLayout}
        onSubmit={onSubmit}
        initialValues={initValues?.warning}
      />
    </>
  }, [ newWarn, initValues ])
    
}