import React, { useEffect, useState } from 'react'
import { use, api, app } from 'xadmin'
import _, { filter } from 'lodash'
import { SchemaForm } from 'xadmin-form'
import { Icon, C } from 'xadmin-ui'
import { Popover, message, Button, Table, Tooltip, Popconfirm, Form, Modal, Checkbox,Empty } from 'antd'
import { DndProvider, DragSource, DropTarget } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';
import { CheckCircleTwoTone, CloseCircleFilled } from '@ant-design/icons';

import './../../style.css'
let dragingIndex = -1;

class BodyRow extends React.Component {
  render() {
    const { isOver, connectDragSource, connectDropTarget, moveRow, ...restProps } = this.props;
    const style = { ...restProps.style, cursor: 'move' };

    let { className } = restProps;
    if (isOver) {
      if (restProps.index > dragingIndex) {
        className += ' drop-over-downward';
      }
      if (restProps.index < dragingIndex) {
        className += ' drop-over-upward';
      }
    }

    return connectDragSource(
      connectDropTarget(<tr {...restProps} className={className} style={style} />),
    );
  }
}

const rowSource = {
  beginDrag(props) {
    dragingIndex = props.index;
    return {
      index: props.index,
    };
  },
};

const rowTarget = {
  drop(props, monitor) {
    const dragIndex = monitor.getItem().index;
    const hoverIndex = props.index;

    // Don't replace items with themselves
    if (dragIndex === hoverIndex) {
      return;
    }

    // Time to actually perform the action
    props.moveRow(dragIndex, hoverIndex);

    // Note: we're mutating the monitor item here!
    // Generally it's better to avoid mutations,
    // but it's good here for the sake of performance
    // to avoid expensive index searches.
    monitor.getItem().index = hoverIndex;
  },
};

const DragableBodyRow = DropTarget('row', rowTarget, (connect, monitor) => ({
  connectDropTarget: connect.dropTarget(),
  isOver: monitor.isOver(),
}))(
  DragSource('row', rowSource, connect => ({
    connectDragSource: connect.dragSource(),
  }))(BodyRow),
);

class DragSortingTable extends React.Component {


  constructor(props) {
    super(props);
    this.state = {
      data: props.dataSource,
    }
  }

  components = {
    body: {
      row: DragableBodyRow,
    },
  };

  static getDerivedStateFromProps(props, state) {
    const { dataSource } = props
    if (dataSource != state.data) {
      return { data: dataSource }
    }
  }

  swapArr = (arr, index1, index2) => {
    arr.splice(index2, 0, arr.splice(index1, 1)[0])
    return arr;
  }

  moveRow = (dragIndex, hoverIndex) => {
    // console.log(dragIndex, hoverIndex)
    const { data } = this.state;
    const updates = this.swapArr([...data], dragIndex, hoverIndex)
    this.props.setDataSources([...updates] || [])
    this.setState({ data: [...updates] });
  }

  render() {
    const element = <Table {...this.props} className="DragSortingTable warning-table"
      columns={this.props.columns}
      dataSource={this.state.data}
      components={this.components}
      onRow={(record, index) => ({
        index,
        moveRow: this.moveRow,
      })}
      locale={{ emptyText: <Empty description={_t1("暂无数据")} image={require('../../../../imgs/报警管理空.png')}  /> }}
      // scroll={{ x: 1000, y: 500 }}
    />
    return (
      <>
        {
          this.props?.warnSetting ? element : <DndProvider backend={HTML5Backend} key={`${this.props?.type}_${Math.random()}`}>
            { element }
          </DndProvider>
        }
      </>
    );
  }
}

function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

const warCheckbox = ({ input, label, field }) => {
  // useEffect(() => {
  //   if (input.value === '') {
  //     input.onChange(true)
  //   }
  // }, [])
  return <Checkbox value={input.value} checked={input.value} onChange={e => input.onChange(e.target.checked)} >
    <span style={{ color: 'rgba(0, 0, 0, 0.45)' }}>{field?.descriptions}</span>
  </Checkbox>
}


const kindSchema = {
  type: 'object',
  properties: {
    name: {
      title: _r('类型名称'),
      type: 'string',
      description: _r('定义报警类型的名称')
    },
    audio: {
      title: _r('报警声音'),
      type: 'string',
      description: _r('仅支持MP3、WAV格式'),
      fieldType: 'media_modal',
      field: {
        uploadType: 'audio',
      }
    },
    alert: {
      title: _r('报警提醒'),
      type: 'boolean',
      description: _r('勾选后报警产生会进行声音提醒及数量增加')
    },
    handle: {
      title: _r('报警处理'),
      type: 'boolean',
      description: _r('勾选报警消息可进行报警确认及处理的操作')
    },
    show: {
      title: _r('是否显示'),
      type: 'boolean',
      description: _r('勾选后报警类型显示在页面中，否则不显示')
    },
    processed: {
      title: _r('处理状态'),
      type: 'string',
      enum: ['已处理', '未处理', 'null'],
      enum_title: [ _r('已处理'), _r('未处理'), _r('不选择') ],
    },
    status: {
      title: _r('确认状态'),
      type: 'string',
      enum: ['已确认', '未确认', 'null'],
      enum_title: [ _r('已确认'), _r('未确认'), _r('不选择') ],

    },
    isimpact: {
      title: _r('作用范围'),
      type: 'boolean',
    }
  },
  form: ['name', 'audio',
    { key: 'alert', component: warCheckbox },
    { key: 'show', component: warCheckbox },
    { key: 'handle', component: warCheckbox },
    // { key: 'isimpact', component: warCheckbox, descriptions: '应用于全部规则' },
    // { key: 'status', type: 'radiobtn' },
    // { key: 'processed', type: 'radiobtn' },

  ],
  // formEffect: form => {
  //   form.useField('handle', state => {
  //     if (state?.value) {
  //       form.setFieldData('status', { display: true })
  //       form.setFieldData('processed', { display: true })
  //       form.setFieldData('isimpact', { display: true })
  //     } else {
  //       form.setFieldData('status', { display: false })
  //       form.setFieldData('processed', { display: false })
  //       form.setFieldData('isimpact', { display: false })
  //     }
  //   })
  // },
  required: ['name']
}
const filterSchema = {
  type: 'object',
  properties: {
    name: {
      title: _r('分组名称'),
      type: 'string',
      description: '定义报警分组的名称'
    },
    table: {
      type: 'array',
      title: _r('设备表'),
      fieldType: 'table',
      field: {
        func: 'device'
      },
      items: {},
      description: '不选则为全设备表',
    },
    tableData: {
      type: 'array',
      title: _r('设备'),
      items: { },
      fieldType: 'tableData',
      field: {
        func: 'device',
        depend: 'table'
      }
    },
  },
  form: [ '*', 'name', 'table', 'tableData' ],
  required: ['name']
}

const WarningKind = props => {
  const { input: { onChange }, type,  hiddenTable, style={}, warnSetting=false } = props
  const { t:_t1, i18n } = useI18n()
  const { store } = app.context
  const [visible, setVisible] = React.useState(false)
  const [initData, setInitData] = React.useState(null)
  const [editData, setEditData] = React.useState(null)
  const { settings } = use('settings')
  let warning = settings?.warning
  const log = settings?.log
  const xi18n = settings?.i18n

  let init;
  switch(type) {
    case 'warningKind': 
      init = warning?.warningkind
      break;
    case 'warningFilter': 
      init = warning?.warningFilter
      break;  
    case 'logLevel':
      init = log?.logLevel
      break;
    case 'lanageManage':
      init = xi18n?.lanageManage
      break; 
    default:  
      init = warning?.warningkind 
      break
  }
  const [dataSource, setDataSources] = React.useState(init || [])

  React.useEffect(()=>{
    let data;
    switch(type) {
      case 'warningKind': 
        data = warning?.warningkind
        break;
      case 'warningFilter': 
        data = warning?.warningFilter
        break;  
      case 'logLevel': 
        data = log?.logLevel
        break;
      case 'lanageManage':
        data = xi18n?.lanageManage
        break; 
      default:  
        data = warning?.warningkind 
        break
    }
    setDataSources(data)

  }, [ type, JSON.stringify(warning), JSON.stringify(log), JSON.stringify(xi18n) ])

  let columns;
  if(type == 'warningKind') { columns = [
    {
      title: _t1('类型名称'),
      dataIndex: 'name',
      editable: true,
      width: 120
    },
    {
      title: _t1('报警提醒'),
      dataIndex: 'alert',
      render: (text) => text ? _t1('提醒') : _t1('不提醒'),
      width: 80
    },
    {
      title: _t1('报警处理'),
      dataIndex: 'handle',
      render: (text) => text ? _t1('需处理') : _t1('无需处理'),
      width: 80
    }, {
      title: _t1('是否显示'),
      dataIndex: 'show',
      render: (text) => text ? _t1('显示') : _t1('不显示'),
      width: 80
    },
    {
      title: _t1('报警声音'),
      dataIndex: 'audio',
      render: (text, record) => {
        return <span style={{ display: 'inline-block',  overflow: 'hidden', textOverflow: 'ellipsis' }}>{text}</span>
      },
      width: 120
    },
    {
      title: _t1('操作'),
      dataIndex: 'operation',
      render: (text, record) => {
        return (
          <div style={{ textAlign: 'center', width: '3rem' }}>
            <a style={{ marginRight: '1rem' }} onClick={() => onEdit(record)}><Icon type="edit" /></a>
            {
              record.fix ? <Tooltip title={_t1("内置种类不可删除")}> <Icon type="delete" /> </Tooltip>
                : (
                  <Popconfirm title={_t1("确认删除?")} onConfirm={() => handleDelete(record.id)}>
                    <a><Icon type="delete" /></a>
                  </Popconfirm>
                )
            }
          </div>
        )
      },
      // fixed: 'right',
      width: 80
    }
  ] } else if (type == 'warningFilter'){ columns = [
    {
      title: _t1('分组名称'),
      dataIndex: 'name',
      editable: true,
      width: 150
    },
    {
      title: _t1('设备表'),
      dataIndex: 'table',
      render: (text) => {
        return text?.length ? text.map(item=>item?.name || item?.title).join('，') : ''
      },
      width: 150
    },
    {
      title: _t1('设备'),
      dataIndex: 'tableData',
      render: (text) => {
        return text?.length ? text.map(item=>item?.name || item?.title || item?.id).join('，') : ''
      },
      width: 150
    }, 
    {
      title: _t1('操作'),
      dataIndex: 'operation',
      render: (text, record) => {
        return (
          <div style={{ textAlign: 'center' }}>
            <a style={{ marginRight: '1rem' }} onClick={() => onEdit(record)}><Icon type="edit" /></a>
            {
              record.fix ? <Tooltip title={_t1("内置种类不可删除")}> <Icon type="delete" /> </Tooltip>
                : (
                  <Popconfirm title={_t1("确认删除?")} onConfirm={() => handleDelete(record.id)}>
                    <a><Icon type="delete" /></a>
                  </Popconfirm>
                )
            }
          </div>
        )
      },
      width: 80
    }
  ] } else if (type == 'logLevel') {
    columns = [
      {
        title: _t1('日志级别'),
        dataIndex: 'name',
        editable: true,
      },
      {
        title: _t1('日志类型'),
        dataIndex: 'logType',
        render: (text, record) => {
          let arr = []
          text && Object.entries(text).forEach(item => { if(item[1]) { arr = [ ...arr, item[0] ] } } )
          return text? <Tooltip title={arr.join('，')}>
            <div style={{ 
               width: '500px',
               overflow: 'hidden',
               whiteSpace: 'nowrap',
               textOverflow: 'ellipsis'
            }}>{ arr.join('，') }</div>
          </Tooltip> : ''
        }
      },
      {
        title: _t1('操作'),
        dataIndex: 'operation',
        render: (text, record) => {
          return (
            <div style={{ textAlign: 'center' }}>
              <a style={{ marginRight: '1rem' }} onClick={() => onEdit(record)}><Icon type="edit" /></a>
              <Popconfirm title={_t1("确认删除?")} onConfirm={() => { 
                handleDelete(record.id);
                _.isFunction(props?.getAction) && props.getAction(record)
              }}>
                <a><Icon type="delete" /></a>
              </Popconfirm>
            </div>
          )
        }
      }
    ]
  }  else if (type == 'lanageManage') {
    columns = [
      {
        title: _t1('序号'),
        editable: true,
        render: (text, record, index) => {
          return <span>{index + 1}</span>;
        },
      },
      {
        title: _t1('语言'),
        dataIndex: 'changelanguage',
      },
      {
        title: _t1('显示名称'),
        dataIndex: 'name',
      },
      {
        title: _t1('默认语言'),
        dataIndex: 'commonlanguage',
        render: (text, record) => {
          return text ? <CheckCircleTwoTone /> : <CloseCircleFilled />
        }
      },
      {
        title: _t1('配置语言'),
        dataIndex: 'contentlanguage',
        render: (text, record) => {
          return text ? <CheckCircleTwoTone /> : <CloseCircleFilled />
        }
      },
      {
        title: _t1('操作'),
        dataIndex: 'operation',
        render: (text, record) => {
          return (
            <div style={{ textAlign: 'center' }}>
              <a style={{ marginRight: '1rem' }} onClick={() => onEdit(record)}><Icon type="edit" /></a>
              <Popconfirm title={_t1("确认删除?")} onConfirm={() => { 
                handleDelete(record.id);
                _.isFunction(props?.getAction) && props.getAction(record)
              }}>
                <a><Icon type="delete" /></a>
              </Popconfirm>
            </div>
          )
        }
      }
    ]
  }

  useEffect(() => onChange(dataSource), [dataSource])

  const handleDelete = (id) => setDataSources(dataSource.filter(item => item.id !== id))

  const onEdit = (record) => {
    setVisible(true)
    setEditData(record)
    setInitData(record)
    _.isFunction(props?.getAction) && props.getAction(record)
  }

  const addWarningKind = (values) => {
    let newData = _.clone(dataSource) || []
    if (editData) {
      let indexs = _.findIndex(newData, (item) => (item.id == editData.id))
      newData[indexs] = values
      setDataSources(newData)
    } else {
      newData.push({ id: guid(), ...values })
      setDataSources(newData)
      setEditData(null)
      if(hiddenTable) {
        api({ name: 'core/setting' })
          .fetch('', {
            method: 'PATCH',
            body: JSON.stringify({ warning: { ...warning, warningkind: newData } })
          })
          .then(({ json }) => {
            message.success(_t1('添加成功'))
            store.dispatch({ type: '@@iot/GET_SETTINGS' })
          })
          .catch(err => { message.error(err.message) })
          }
    }
  }

  const onClick = () => {
    setVisible(true)
    setInitData(null)
    setEditData(null)
    if(type == 'logLevel'|| type == 'lanageManage') _.isFunction(props?.getAction) && props.getAction({})
  }

  let title
  switch(type) {
    case 'warningKind': 
      title = _t1('添加报警类型')
      break;
    case 'warningFilter': 
      title = _t1('添加报警分组')
      break;  
    case 'logLevel': 
      title = _t1('添加日志级别')
      break;  
    case 'lanageManage':
      title = _t1('添加语言')
      break;  
    default:  
      title = _t1('添加报警类型')
      break
  }

  return (
      <div>
        <Button type="primary" onClick={onClick} style={{ ...style, marginBottom: 10 }}>{title}</Button>
        {
          type && !hiddenTable ? <DragSortingTable warnSetting={warnSetting} size="small" type={type}  bordered setDataSources={setDataSources}
              dataSource={dataSource} columns={columns}
              pagination={false}
          /> : null
        }
        <KindModal
          initData={initData}
          setEditData={setEditData}
          visible={visible}
          setVisible={setVisible}
          data={dataSource}
          addWarningKind={addWarningKind}
          type={type}
          schema={props?.schema}
        />
      </div>
  )
}

const KindModal = ({ visible, setVisible, addWarningKind, initData, setEditData, data, type, schema }) => {
  const { t:_t1, i18n } = useI18n()
  const [values, setValue] = useState(null)
  const [disabled, setDisabled] = useState(false)

  const handleOk = () => {
    if (values && values.name) {
      setVisible(false)
      // null 处理去除
      const vals = Object.keys(values).reduce((prev, curr) => {
        if (values[curr] != 'null') {
          prev[curr] = values[curr]
        }
        return prev
      }, {})
      addWarningKind(vals)
    }
  }

  const onChange = (values) => {
    if (type !== 'lanageManage' ? !values.name || values.name.indexOf(' ') != -1 : !values.name) {
      setDisabled(true)
    } else {
      //名称重复验证
      const datas = data?.length ? data.filter(item => item.name == values.name) : []
      if (initData && initData.name == values.name) {
        setDisabled(false)
        setValue(values)
      } else {
        if (datas.length > 0) {
          if(type == 'warningKind') {
            message.error(_t1('报警类型名称已存在'))
          } else if (type == 'warningFilter'){
            message.error(_t1('报警分组名称已存在'))
          } else if (type == 'logLevel') {
            message.error(_t1('日志级别名称已存在'))
          } else if (type == 'lanageManage') {
            message.error(_t1('语言显示名称已存在'))
          }
          setDisabled(true)
        } else {
          setDisabled(false)
          setValue(values)
        }
      }
    }
  }

  const onCancel = () => {
    setVisible(false)
    setEditData(null)
  }
  let title, formKey, formSchema
  switch(type) {
    case 'warningKind': 
      title = _t1('种类信息')
      formKey = 'WarningKind'
      formSchema = kindSchema
      break;
    case 'warningFilter': 
      title = _t1('分组信息')
      formKey = 'WarningFilter'
      formSchema = filterSchema
      break;  
    case 'logLevel': 
      title = _t1('日志级别')
      formKey = 'logLevel',
      formSchema = schema
      break;   
    case 'lanageManage':
      title = _t1('添加语言')
      formKey = 'lanageManage',
      formSchema = schema
      break;  
    default:  
      title = _t1('种类信息')
      formKey = 'WarningKind',
      formSchema = schema
      break
  }
  return (
    <Modal
      title={title}
      visible={visible}
      onOk={handleOk}
      destroyOnClose
      okButtonProps={{ disabled }}
      onCancel={onCancel}
      width={'70%'}
    >
      { 
        type && formSchema ? <C is="I18nSchemaForm" formKey={formKey} schema={formSchema}
          onChange={onChange}
          initialValues={initData}
          component={FormLayout}
        /> : null
      }
    </Modal>
  )
}

const FormLayout = (props) => {
  const { children, handleSubmit } = props
  return <Form onSubmit={handleSubmit}> {children} </Form>
}


export default WarningKind
