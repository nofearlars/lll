import { Checkbox, Col, Form, Tabs, Card, message } from 'antd';
import React from 'react';
import { api, use } from 'xadmin';
import { Page, Icon, C } from 'xadmin-ui';
import Store from './../../../Store';
import ExampleTable from './components/ExampleTable';
import SettingSchemaCom from './components/SettingSchemaCom';
import WarningKind from './components/WarningKind';
import { AlarmModal, cardCheckbox, soundCheckbox, warCheckbox } from './components/WarnSettingComponent';
import { DndProvider, DragSource, DropTarget } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';


import './../style.css'

const { TabPane } = Tabs

const FieldFilter = ({ input: { value, onChange } }) => {
  const { t: _t1, i18n } = useI18n()

  const onChecked = (key, e) => {
    onChange({ ...value, [key]: e.target.checked })
  }
  return (
    <>
      <Checkbox checked={value['status']} onChange={e => onChecked('status', e)}>{_t1('已确认')}</Checkbox>
      <Checkbox checked={value['processed']} onChange={e => onChecked('processed', e)}>{_t1('已处理')}</Checkbox>
    </>
  )
}

const HideLabel = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && meta.error
  const extra = field.description || field.help
  const size = { labelCol: { sm: { span: 0 } }, wrapperCol: { sm: { span: 24 } } }
  const groupProps = { extra, ...size, required: field.required, labelAlign: 'right' }
  if (error) {
    groupProps['validateStatus'] = 'error'

    groupProps['help'] = error
  }
  const controlComponent = children ? children : (<Input {...input} {...attrs} />)

  return (
    <Col>
      <Form.Item colon={false} label={<></>} {...groupProps}>
        {controlComponent}
      </Form.Item>
    </Col>
  )
}

const WarnExpand = (props) => {
  const { settings, saveSettings } = use('settings')
  const warningExpand = settings?.warning?.warningExpand
  const [value, setValue] = React.useState(warningExpand)

  const onChange = (value) => {
    setValue(value)
    saveSettings({ ...settings, warning: { ...settings?.warning, warningExpand: value } })
    message.success(_t1('系统设置保存成功！'))
  }

  return <Card className='warning-plugin-tab'>
    <C
      is="SchemaEditor"
      ignoreConfig={['fieldScript', 'createShow', 'editShow', 'listFields', 'editableFields', 'batchChangeFields', 'filterByRes', 'canOrder', 'disabled', 'tableFixed', 'metricStore']}
      schema={value}
      input={{ onChange }}
    />
  </Card>
}

const WarnSetting = props => {
  const { t: _t1, i18n } = useI18n()

  const tablist = [{ key: 'warningkind', title: _t1('报警类型') }, { key: 'warningFilter', title: _t1('报警分组') }, { key: 'otherWarn', title: _t1('其他配置') },
  { key: 'warningStatus', title: _t1('报警状态') }, { key: 'warningExpand', title: _t1('报警扩展') }]
  const [activeKey, setActiveKey] = React.useState('warningkind')
  const { settings } = use('settings')
  const [initValues, setInitValues] = React.useState(settings)
  const [warnSchema, setWarnSchema] = React.useState()

  const initSetting = () => {
    api({ name: 'core/setting' }).fetch('').then(({ json }) => { setInitValues(json) })
  }

  React.useEffect(() => { initSetting() }, [])

  React.useEffect(() => {
    let newWarn;
    if (activeKey == 'warningkind') {
      newWarn = {
        type: 'object',
        properties: {
          warningkind: {
            title: _r('报警类型'),
            type: 'array',
            items: {
              type: 'object',
              properties: {
                id: { title: 'id', type: 'string' },
                name: { title: _r('报警名称'), type: 'string' },
                alert: { title: _r('报警提醒'), type: 'boolean' }
              }
            }
          }
        },
        form: [{ key: 'warningkind', component: (props) => <WarningKind warnSetting={true} {...props} type="warningKind" /> }]
      }
    }
    if (activeKey == 'warningFilter') {
      newWarn = {
        type: 'object',
        properties: {
          warningFilter: {
            title: _r('报警分组'),
            type: 'array',
            items: {
              type: 'object',
              properties: {
                id: { title: 'id', type: 'string' },
                name: { title: _r('分组名称'), type: 'string' },
                table: {
                  type: 'array',
                  title: _r('设备表'),
                  fieldType: 'table',
                  field: {
                    func: 'device'
                  },
                  items: {},
                  description: _r('不选则为全部设备表'),
                },
                tableData: {
                  type: 'array',
                  title: _r('设备'),
                  items: {},
                  fieldType: 'tableData',
                  field: {
                    func: 'device',
                    depend: 'table'
                  }
                }
              }
            }
          }
        },
        form: [{ key: 'warningFilter', component: props => <WarningKind warnSetting={true} {...props} type="warningFilter" /> }]
      }
    }
    if (activeKey == 'otherWarn') {
      newWarn = {
        type: 'object',
        properties: {
          audio: {
            type: 'string',
            title: _r('报警声音地址'),
            description: _r('整体报警提醒消息的声音配置，仅支持MP3、WAV格式'),
            divider: 'audio',
            fieldType: 'media_modal',
            field: {
              uploadType: 'audio',
            }
          },
          low_audio: {
            type: 'string',
            title: _r('低级报警声音'),
            description: _r('低级报警提醒消息的声音配置，仅支持MP3、WAV格式, 建议上传mp3格式，wav格式比特率高于128kbs时无法播放'),
            divider: 'audio',
            fieldType: 'media_modal',
            field: {
              uploadType: 'audio',
            }
          },
          middle_audio: {
            type: 'string',
            title: _r('中级报警声音'),
            description: _r('中级报警提醒消息的声音配置，仅支持MP3、WAV格式, 建议上传mp3格式，wav格式比特率高于128kbs时无法播放'),
            divider: 'audio',
            fieldType: 'media_modal',
            field: {
              uploadType: 'audio',
            }
          },
          tall_audio: {
            type: 'string',
            title: _r('高级报警声音'),
            description: _r('高级报警提醒消息的声音配置，仅支持MP3、WAV格式, 建议上传mp3格式，wav格式比特率高于128kbs时无法播放'),
            divider: 'audio',
            fieldType: 'media_modal',
            field: {
              uploadType: 'audio',
            }
          },
          alarm_sound: {
            type: 'boolean',
            title: _r('报警声音启用状态'),
            description: _r('勾选后显示报警声音开关按钮'),
            divider: 'audio'
          },
          show_all: {
            type: 'boolean',
            title: _r('显示全部报警页'),
            description: _r('勾选后显示全部报警分类页'),
            divider: 'show_tab'
          },
          show_need: {
            type: 'boolean',
            title: _r('显示需处理报警页'),
            description: _r('勾选后显示需处理报警分类页'),
            divider: 'show_tab'
          },
          show_recovery: {
            type: 'boolean',
            title: _r('显示报警恢复页'),
            description: _r('勾选后显示报警恢复分类页'),
            divider: 'show_tab'
          },
          alarm_card: {
            type: 'boolean',
            title: _r('实时报警卡片'),
            description: _r('勾选后显示实时报警卡片'),
            divider: 'show_tab'
          },
          barlistFilter: {
            type: 'object',
            title: _r('实时报警列表数据过滤'),
            field: { component: FieldFilter },
            properties: {}
          },
          alarm_modal: {
            type: 'boolean',
            title: _r('显示实时报警弹窗'),
            description: _r('勾选后显示实时报警弹窗'),
            divider: 'show_tab'
          }
        },
        form: [
          'audio', 'low_audio', 'middle_audio', 'tall_audio',
          { key: 'alarm_sound', component: soundCheckbox },
          { key: 'show_all', component: warCheckbox },
          { key: 'show_need', component: warCheckbox },
          { key: 'show_recovery', component: warCheckbox },
          { key: 'alarm_card', component: cardCheckbox },
          'barlistFilter',
          { key: 'alarm_modal', component: props => <AlarmModal {...props} tabKey={activeKey} setInitValues={setInitValues} /> }
        ]
      }
    }
    if (activeKey == 'warningStatus') {
      newWarn = {
        type: 'object',
        properties: {
          colors: {
            type: 'object',
            title: _r('表格配置'),
            properties: {}
          }
        },
        form: [{ key: 'colors', group: HideLabel, component: props => <ExampleTable type="warning" {...props} /> }]
      }
    }
    setWarnSchema(newWarn)
    initSetting()
  }, [activeKey])

  return <Page className="warn-base-setting" title={(<span> <Icon svg={require('./../../../icon/通用配置.svg')} />{_t1("通用配置")}</span>)}>
    <DndProvider backend={HTML5Backend} key={`warningsetting_`}>
      <Tabs defaultActiveKey={tablist[0]?.key} onChange={value => { setActiveKey(value) }}>
        {
          tablist.map(item => {
            return <TabPane tab={item.title} key={item?.key}>
              {activeKey == 'warningExpand' ? <WarnExpand {...props} /> :
                <SettingSchemaCom tabKey={activeKey} newWarn={warnSchema} initValues={initValues} />
              }
            </TabPane>
          })
        }
      </Tabs>
    </DndProvider>
  </Page>
}

const WarningSetting = props => {
  return <Store><WarnSetting {...props} /></Store>
}

export default WarningSetting