import React from 'react';
import { app, use, api } from 'xadmin';
import { Button, Popconfirm, Tooltip, Card, Empty, Space, Input, Select, Modal, Popover, Table, Radio } from 'antd';
import { Icon, C, App } from 'xadmin-ui';
import _ from 'lodash'
import { _t } from 'xadmin-i18n';
import { PlusOutlined, UserOutlined, EditOutlined } from '@ant-design/icons'
import  KindSelect  from '../../components/KindSelect'
import RuleList from './views/RuleList'

const RangeTable = ({ item, value, inList, wrap: WrapComponent }) => {
  const { t:_t1, i18n } = useI18n()

  const columns = [
    {
      title: _t1('数据点名称'),
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: _t1('数据点标识'),
      dataIndex: 'id',
      key: 'id',
    }
  ]

  if(value?.type == 'table') {
    columns.unshift({
      title: _t1('设备表名称'),
      dataIndex: 'table',
      key: 'table',
      render: text => <>{text?.name}</>
    })
  }
  if(value?.type == 'tableData') {
    columns.unshift({
      title: _t1('设备名称'),
      dataIndex: 'tableData',
      key: 'tableData',
      render: text => <>{text?.name}</>,
    })
  }

  return <WrapComponent>
      {
        inList ? <Popover placement="topLeft" content={<Table pagination={false} dataSource={value?.tags} columns={columns} />}>
          <div>{_t1('数据点')}{value?.tags?.length}{_t1('个')}</div>
        </Popover> :  <div>{_t1('数据点')}{value?.tags?.length}{_t1('个')}</div>
      }
  </WrapComponent>
}

const WarnInterval = props => {
  const { t:_t1, i18n } = useI18n()
  let { input: { value, onChange } } = props
  let optionTime = [{ key: _t1('分'), value: 'm' }, { key: _t1('秒'), value: 's' }]

  const handleChange = e => onChange({ ...value, count: Number(e.target.value) })
  const handleSelect = e => onChange({ ...value, unit: e })

  return <Space>
    <Input type="number" min={1} style={{ width: 160 }} placeholder={_t1("数值")}
      onChange={handleChange} value={value?.count || null} addonAfter={
        <Select style={{ width: 75 }} onChange={handleSelect} value={value?.unit}>
          {
            optionTime.map(item => {
              return <Select.Option value={item.value}>{item.key}</Select.Option>
            })
          }
        </Select>} />
  </Space>
}

const RangeTags = props => {
  const { t:_t1, i18n } = useI18n()
  const { input: { value, onChange }, field: { name: fieldName, schema = {} } } = props
  const [ data, setData ] = React.useState({ visible: false, data: [] })

  let type;
  if (schema?.type) {
    try {
      type = use('form', state => ({ type: state?.values?.range?.type }))['type']
    } catch (error) {
      console.log(error)
    }
  }

  const columns = [
    {
      title: _t1('数据点名称'),
      dataIndex: 'name',
      key: 'name',
    },
    {
      title: _t1('数据点标识'),
      dataIndex: 'id',
      key: 'id',
    }
  ]

  const processedData = (arr, str, type) => {
    let _arr = [], _t = [], _tmp;
    if (arr.length ){
        _tmp = arr?.[0]?.[type]?.[str];
    }
    for (let i in arr) {
      if(arr?.[i]?.[type]?.[str]) {
        if ( arr?.[i]?.[type]?.[str] === _tmp ){
          _t.push( arr[i] );
        } else {
            _tmp = arr[i][type][str];
            _arr.push( _t );
            _t = [ arr[i] ];
        }
      }
    }
    _arr.push( _t );
    return _arr;
  }

  React.useEffect(() => {
    let cardData;
    if(!_.isEmpty(value) && value?.length && type) {
      let newValue = _.cloneDeep(value)
      if(type == 'table') cardData = processedData(newValue, 'id', 'table')
      if(type == 'tableData') cardData = processedData(newValue, 'id', 'tableData')
    }

    setData({ ...data, data: cardData })
  }, [ value, type ])

  const renderCard = (type) => {
    return data.data.map(item => {
      return  <Popover content={<Table pagination={false} dataSource={item} columns={columns} />}>
      <div>{_t1(`${item?.[0]?.[type]?.name}数据点${item?.length}个`)}</div>
    </Popover>
    })
  }
  return <>
    {
      type ? <>
        <Button onClick={()=> setData({ ...data, visible: true })}>{_t1('选择')}</Button>
        <Modal visible={data.visible} width='80%' onCancel={()=> setData({ ...data, visible: false })} onOk={()=> setData({ ...data, visible: false })}>
          { type == 'table' ? <C is="ModelPointTable" fullLable={true} type="checkbox" noComputed={true} {...props} /> : null }
          { type == 'tableData' ? <C is="PointTable" fullLable={true} type="checkbox" noComputed={true} {...props} /> : null }
        </Modal>
        {
          !_.isEmpty(data.data) && data.data.length ? <Card>
            { type == 'table' ? <>{renderCard('table')}</> : null }
            { type == 'tableData' ? <>{renderCard('tableData')}</> : null }
          </Card> : null
        }
      </> : _t1('请先选择类型')
    }
  </>
}

const getwarnInterval = (count, unit) => {
  let value = count;
  if (unit == 'm') { value = count * 60 }
  return value
}

const saveRule = (value) => {
  let type = value?.type == '同数据报警' ? 'sameValueWarn' : value?.type == '长时间不上数报警' ? 'timeoutWarn' : ''
  let settings={}
  if(type) {
    settings = { [type] : { 
        show: true,
        ...value,
        range: {
          ...value?.range,
          tags: value?.range?.tags?.length ? value.range.tags.map(item=> {
            return { ...item, table: _.isPlainObject(item?.table) ? item?.table : { id: item?.table }}
          }) : []
        },
        warnInterval: getwarnInterval(value?.warnIntervalObj?.count, value?.warnIntervalObj?.unit)
    } }
  }
  let newValue = {
    ...value, 
    settings,
    range: {
      ...value?.range,
      tags: value?.range?.tags?.length ? value.range.tags.map(item=> {
        return { ...item, table: _.isPlainObject(item?.table) ? item?.table : { id: item?.table }}
      }) : []
    }
  }
  return api({ name: `warning/rule/${value.id}` }).fetch('', {
    method: 'PATCH',
    body: JSON.stringify(newValue)
  })
    .then(() => message.success('修改规则成功'))
}

const TypeSelect = props => {
  const { t:_t1, i18n } = useI18n()
  const { input: { onChange, value }, field, field: { key, option: { form } } } = props

  const onChangeRadio = e => {
    onChange(e.target.value)
    form.change('range', { type: e.target.value, tags: [] })
  }

  return  <Radio.Group value={value} onChange={onChangeRadio} style={{ marginRight: 10 }}>
    <Radio value="table">{_t1('设备表')}</Radio>
    <Radio value="tableData">{_t1('设备')}</Radio>
  </Radio.Group>
}

export default {
  Rule: {
    title: _r('报警规则管理'),
    type: 'object',
    initQuery: true,
    icon: <Icon svg={require('./../../icon/规则管理.svg')} />,
    name: 'rule',
    resource: 'warning/rule',
    permission: { view: true },
    rolePermission: [
      { key: 'rule.view', title: _r('查看') },
      { key: 'rule.add', title: _r('添加') },
      { key: 'rule.edit', title: _r('修改') },
      { key: 'rule.delete', title: _r('删除') },
    ],
    properties: {
      name: {
        type: 'string',
        title: _r('规则名称'),
        width: 180,
      },
      type: {
        title: _r('规则类型'),
        type: 'string',
        width: 120,
        enum: [ '同数据报警', '长时间不上数报警' ],
      },
      description: {
        type: 'string',
        title: _r('报警描述'),
        width: 130
      },
      level: {
        type: 'string',
        title: _r('报警级别'),
        enum: [ '低', '中', '高' ],
      },
      warnType: {
        title: _r('报警类型'),
        // type: 'array'
      },
      warnIntervalObj: {
        title: _r('时长'),
        type: 'object',
        properties: {
          count: { title: _r('数值'), type: 'number' },
          unit: { title: _r('单位'), type: 'string' }
        }
      },
      range: {
        title: _r('应用范围'),
        type: 'object',
        properties: {
          type: {
            title: _r('数据点类型'),
            type: 'string',
            enum: [ 'table', 'tableData' ],
            enum_title: [ _r('设备表数据点'), _r('设备数据点') ]
          },
          tags: {
            title: _r('数据'),
            type: 'array',
            items: {}
          }
        },
        form: [ '*', { key: 'type', component: TypeSelect }, { key: 'tags', component: props => <RangeTags {...props} field={
              { ...props.field, schema: { ...props.field.schema, logic: 'type' } }} /> }]
      }
    },
    listFields: [ 'name', 'type', 'range', 'description', 'level', 'warnType', 'warnIntervalObj', 'settings' ],
    orders: { time: 'DESC' },
    filters: { submenu: [ 'name' ] },
    fieldRender: {
      range: RangeTable,
      warnType: ({ value }) => {
        const { t:_t1, i18n } = useI18n()
        const { settings: { warning } } = use('settings')
        const type = warning && warning.warningkind || []
        if(value) {
          if(_.isString(value)) {
            const types = type.filter(item => item.id == value) || []
            const val = types && types.length > 0 ? types[0]['name'] : value
            return val && val.indexOf('-') > 0 ? '' : val || ''
          } else if(_.isArray(value) && _.isArray(type)) {
            let arr = type.filter(item => value.some(ele=> ele === item.id))
            return arr?.length ? arr.map(item=> item?.name).join(',') : ''
          }
        } else {
          return _t1('空')
        }
      },
      warnIntervalObj: ({ value }) => {
        const { t:_t1, i18n } = useI18n()
        let obj = { m : _t1('分钟'), s: _t1('秒') }
        return value?.count && value?.unit ? `${value?.count}${obj[value?.unit]}` : ''
      }
    },
    components: {
      DataEmpty: props =>  <Empty description={_t1("暂无数据")} image={require('../../imgs/报警管理空.png')}  />,
      ListPage: RuleList,
      DataForm: props => {
        const { saveItem } = use('model.save', props)
        return props.id ? <C is="Model.TabsForm" {...props} saveItem={saveRule} /> : null//<UserModel saveItem={saveItem} />
      },
    },
    permission: { view: true, add: true, edit: true, delete: true },
    projectFields: [ 'name' ],
    required: [ 'name', 'type', 'description', 'level', 'warnType', 'warnIntervalObj', 'range' ],
    form: [ "*", 'name', 'type', 'description', 'level', { key: 'warnType', component: KindSelect }, 
      { key: 'warnIntervalObj', component: WarnInterval }, 'range' ],
      itemActions: [ 'edit', 'delete' ]   
  }
}
