import React from 'react';
import { ModelWrap } from 'xadmin-model';
import { app, use, api } from 'xadmin';
import { Button, Popconfirm, Tooltip, Card, Empty, Modal, Form, message, Layout, Menu, Input, Dropdown, Col, Select, Checkbox } from 'antd';
import WarningFields from './../../components/WarningFields'
import WarningStat from './pages/WarningStat';
import WarningKindPage from './pages//WarningInfoPage';
import WarningLog from './pages/WarningLog'
import DatePickerFilter from './pages/DatePickerFilter'
import KindSelect from '../../components/KindSelect'
import { Icon, C, Loading } from 'xadmin-ui';
import { HasPermission } from 'xadmin-auth';
import EditRemark from './pages/Remark'
import _ from 'lodash'
import { _t } from 'xadmin-i18n';
import StatusListBtn from './pages/StatusListBtn'
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'
import BatchConfrim from './components/BatchConfrim'
import ConditionSelect from './components/ConditionSelect'
import WarningProcessedBtn from './components/WarningProcessedBtn'
import WarningConfirmBtn from './components/WarningConfirmBtn'
import BatchSolve from './components/BatchSolve'
import WarningRestrainBtn from './components/WarningRestrainBtn'
import WarningExportBtn from './components/WarningExportBtn'
import ArchiveDropdown, { ArchiveSchema, getOneSchema } from './components/ArchiveDropdown'
import NodeListSelect from './components/NodeListSelect'

const FieldGroup = ({ label, meta, input, field, children }) => {
  const attrs = field.attrs || {}
  const error = meta.touched && meta.error
  const extra = field.description || field.help
  const size = { labelCol: { sm: { span: 5 } }, wrapperCol: { sm: { span: 19 } } }

  const groupProps = { extra, ...size, required: field.required, labelAlign: 'right' }

  if (error) {
    groupProps['validateStatus'] = 'error'

    groupProps['help'] = error
  }

  const controlComponent = children ? children : (<Input {...input} {...attrs} />)
  return (
    <Form.Item colon={false} label={label} {...groupProps}>
      {controlComponent}
    </Form.Item>
  )
}


const ClearWarning = () => {
  const OneASchema = getOneSchema(ArchiveSchema)
  // const { modelDispatch } = use('model')

  return <C is="ClearLogBtn" //modelDispatch={modelDispatch} 
    btnModule="warning" onceSchema={OneASchema} cycleSchema={ArchiveSchema} />
}

export default {
  Warning: {
    title: _r('报警信息'),
    type: 'object',
    initQuery: false,
    userPageFields: true,
    noLocalStorageFilter: true,
    icon: <Icon svg={require('./../../icon/报警处理.svg')} />,
    name: 'warning',
    resource: 'warning/warning',
    permission: { view: true, edit: true, delete: true },
    rolePermission: [
      { key: 'warning.view', title: _r('查看') },
      { key: 'warning.edit', title: _r('确认/处理') },
      { key: 'warning.export', title: _r('导出') },
    ],
    blocks: {
      'model.list.navbtn': ({ model }) => [
        <C is="FiltersHistory" defaultFilterFlag />,
        <HasPermission FailureComponent={null} permission="warningarchive.view">
          <ArchiveDropdown />
        </HasPermission>,
        <ClearWarning />,
        <WarningStat />,
        <StatusListBtn />,
      ],
      'model.list.submenu.btngroup': ({ model }) => <WarningExportBtn />,
    },
    batchActions: [item => <BatchConfrim {...item} />, item => <BatchSolve {...item} />],
    properties: {
      id: {
        type: 'string',
        title: _r('报警ID'),
        width: 180,
      },
      table: {
        title: _r('设备表'),
        type: 'object',
        fieldType: 'table',
        properties: {},
        width: 120,
        field: {
          func: 'device'
        }
      },
      department: {
        type: 'array',
        title: _r('所属部门'),
        fieldType: 'tableData',
        field: {
          func: 'dataAuth',
          style: {
            minWidth: 130
          },
          placeholder: _r('选择部门')
        },
        items: {},
        width: 130,
        related: 'department'
      },
      tableData: {
        title: _r('设备'),
        type: 'object',
        fieldType: 'tableData',
        properties: {},
        width: 130,
        field: {
          func: 'device'
        }
      },
      tableDataId: {
        'type': 'string',
        'title': _r('设备编号'),
        width: 100,
      },
      time: {
        type: 'string',
        format: 'date-time',
        title: _r('报警时间'),
        width: 180,
      },
      type: {
        'type': 'string',
        'title': _r('报警类型'),
        transform: value => {
          const reduxState = app?.context?.store?.getState()
          const warningkind = reduxState?.settings?.warning?.warningkind || []
          const kind = warningkind.reduce((p, c) => ({ ...p, [c.id]: c.name }), {})
          let newValue = value
          try {
            const parser = JSON.parse(value)
            newValue = parser.map(p => kind[p] ? kind[p] : p).join(',')
          } catch (error) {
            // console.log(error)
          }
          return newValue
        },
        width: 100
      },
      processed: {
        'type': 'string',
        'title': _r('处理动作'),
        'enum': [
          _r('未处理'),
          _r('已处理')
        ],
        'enumColor': [
          'warning',
          'success'
        ],
        width: 95
      },
      status: {
        'type': 'string',
        'title': _r('确认动作'),
        'enum': [
          _r('未确认'),
          _r('已确认')
        ],
        'enumColor': [
          'warning',
          'success'
        ],
        width: 95
      },
      desc: {
        'type': 'string',
        'title': _r('报警描述'),
        width: 200
      },
      remark: {
        'type': 'string',
        'title': _r('报警处理'),
        width: 250,
      },
      level: {
        'type': 'string',
        'title': _r('级别'),
        'enum': [
          _r('低'),
          _r('中'),
          _r('高')
        ],
        width: 70
      },
      confirmTime: {
        type: 'string',
        format: 'date-time',
        title: _r('确认时间'),
        width: 200,
      },
      confirmUser: {
        type: 'object',
        title: _r('确认人'),
        relateTo: 'User',
        properties: {},
        width: 100,
      },
      handleTime: {
        type: 'string',
        format: 'date-time',
        title: _r('处理时间'),
        width: 200,
      },
      handleUser: {
        type: 'object',
        title: _r('处理人'),
        relateTo: 'User',
        properties: {},
        width: 100,
      },
      fields: {
        type: 'array',
        title: _r('报警数值'),
        items: {
          title: _r('数值'),
          type: 'object',
          properties: {}
        },
        width: 180,
      }
    },
    listFields: ['time', 'table', 'tableData', 'tableDataId', 'department', 'fields', 'level', 'type', 'confirmUser',
      'confirmTime', 'handleTime', 'handleUser', 'desc', 'remark' ],
    orders: { time: 'DESC' },
    filters: {
      nav: [
        'id',
        'time',
        'table',
        'tableData',
        { key: 'department', component: props => {
          return <C is="Common.SelectTableRecord" {...props}
            filter={{ function: { '$regex': 'dataAuth' } }}
          />}
        },
        'confirmUser',
        'desc',
      ],
      submenu: [
        'id',
        'time',
        'status',
        'processed',
        'tableDataId',
        'desc'
      ]
    },
    // editableFields: [ 'remark' ],
    fieldRender: {
      fields: WarningFields,
      type: ({ value }) => {
        const { settings } = use('settings')
        const { t:_t1, i18n } = useI18n()
        const type = settings?.warning?.warningkind || []
        if (value) {
          if (_.isString(value)) {
            const types = type.filter(item => item.id == value) || []
            const val = types && types.length > 0 ? types[0]['name'] : value
            return val && val.indexOf('-') > 0 ? '' : val || ''
          } else if (_.isArray(value) && _.isArray(type)) {
            let arr = type.filter(item => value.some(ele => ele === item.id))
            return arr?.length ? arr.map(item => item?.name).join(',') : ''
          }
        } else {
          return _t1('空')
        }
      },
      tableDataId: ({ item }) => { 
        const { t:_t1, i18n } = useI18n()
        return item?.tableData?.id || _t1('空') },
      table: ({ item }) => {
        const { t:_t1, i18n } = useI18n()
        return item?.table?.title || item?.table?.name || item?.table?.id || _t1('空')
      },
      department: ({ item }) => {
        const _department = item?.tableData?._department
        if(!_.isEmpty(_department) && _.isPlainObject(_department) && !_.isEmpty(Object.values(_department))) {
          return _.flattenDeep(Object.values(_department)).map(item => item?.name).join('')
        }
        return _t1('空') 
      },
      remark: EditRemark
    },
    components: {
      DataEmpty: props =>  <Empty description={_t1("暂无数据")} image={require('../../imgs/报警管理空.png')}  />,
      ListPage: props => /Android|webOS|iPhone|iPod|BlackBerry/i.test(navigator.userAgent) && C('Mobile.Nodes') ?
        <C is='Mobile.Warning' {...props} ></C> :
        <WarningKindPage {...props}></WarningKindPage>,
    },
    projectFields: [ 'status', 'processed', 'tableData', 'tableData._settings', 'handle' ],
    form: ['*'],
    batchChangeFields: ['status', 'processed'],
    itemActions: [
      'warning_submit',
      'warning_processed',
      'warning_log',
      'warning_display',
      'warning_record',
    ],
    refresh: { submenu: [3, 5, 10] },
    defaultPageSize: 15
  }
}

const modelActions = {
  'warning_submit': {
    component: ({ item }) => <WarningConfirmBtn item={item} />,
    description: _r('确认')
  },
  'warning_processed': {
    component: ({ item }) => <WarningProcessedBtn item={item} />,
    description: _r('处理')
  },
  'warning_log': {
    component: ({ item }) => <WarningLog item={item} />,
    description: _r('记录')
  },
  'warning_display': {
    component: ({ item }) => <WarningRestrainBtn item={item} />,
    description: _r('抑制报警')
  },
  'warning_record': {
    component: ({ item }) => {
      const { t:_t1, i18n } = useI18n()
      return (item && item.tableData) ? <Button onClick={() => app.go(`/app/table/${item?.table?.id}/${item?.tableData?.id}/edit`)}>{_t1('设备')}</Button> : null
    },
    description: _r('设备')
  }
}

export { WarningConfirmBtn, WarningProcessedBtn, WarningLog, WarningRestrainBtn, WarningExportBtn, modelActions }


