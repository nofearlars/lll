import React from 'react';
import { app, use, api } from 'xadmin';
import { Button, Popconfirm, Tooltip, Card, Empty, Modal, Form, message } from 'antd';
import WarningFields from '../../components/WarningFields'
import WarningLog from '../warning/pages/WarningLog'
import { Icon, C } from 'xadmin-ui';
import _ from 'lodash'
import { _t } from 'xadmin-i18n';
import WarningArchivePage from '../warning/pages/WarningArchivePage'
import { ArrowLeftOutlined } from '@ant-design/icons'
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'

const RecoverBtn = ({ item }) => {
  const { modelDispatch, atoms } = use('model')
  const { getItems } = use('model.getItems')
  const { t:_t1, i18n } = useI18n()

  const onClick = () => {
    if (!(item && item.id)) return
    api({ name: 'warning' }).fetch(`/warning/archive/restore/${item.id}`, {
      method: 'PATCH',
    }).then(({ json }) => {
      message.success(_t1('恢复成功'))
      getItems()
    })
  }
  return (<Button type="primary" onClick={onClick}>{_t1('恢复')}</Button>)
}

const BatchRecover = props => {
  const { modelDispatch, atoms } = use('model')
  const { selected } = use('model.select')
  const setSelected = useSetRecoilState(atoms.selected)
  const { getItems } = use('model.getItems')

  const disabled = selected && !_.isEmpty(selected)
  const onClick = () => {
    if (disabled) {
      Promise.all(selected.map(item => {
        return api({ name: 'warning' }).fetch(`/warning/archive/restore/${item.id}`, { method: 'PATCH', })
          .then(({ json }) => json)
      })).then((result) => {
        message.success(_t1('批量恢复成功'))
        // modelDispatch({ type: 'SELECT_CLEAR' })
        // modelDispatch({ type: 'GET_ITEMS' })
        setSelected([])
        getItems()
      })
    }
  }
  return (
    <Button type="primary" onClick={onClick} style={{ margin: '5px 10%', width: '80%' }} disabled={!disabled}>
      {_t1('批量恢复报警')}
    </Button>
  )
}

const BatchDelete = props => {
  const { t:_t1, i18n } = useI18n()
  const { modelDispatch, atoms } = use('model')
  const { selected } = use('model.select')
  const setSelected = useSetRecoilState(atoms.selected)
  const { getItems } = use('model.getItems')

  const disabled = selected && !_.isEmpty(selected)
  const onClick = () => {
    if (disabled) {
      Promise.all(selected.map(item => {
        // const querystr = encodeURIComponent(JSON.stringify({ archive: true }))
        return api({ name: 'warning' }).fetch(`/warning/${item.id}?archive=true`, { method: 'DELETE' })
          .then(({ json }) => json)
      })).then((result) => {
        message.success(_t1('批量删除成功'))
        // modelDispatch({ type: 'SELECT_CLEAR' })
        // modelDispatch({ type: 'GET_ITEMS' })
        setSelected([])
        getItems()
      })
    }
  }
  return (
    <Button type="primary" onClick={onClick} style={{ margin: '5px 10%', width: '80%' }} disabled={!disabled}>
      {_t1('批量删除报警')}
    </Button>
  )
}

export default {
  WarningArchive: {
    title: _r('报警归档信息'),
    type: 'object',
    initQuery: false,
    userPageFields: true,
    noLocalStorageFilter: true,
    forceGetItem: true,
    icon: <>
      <ArrowLeftOutlined onClick={() => history.back()} />
      <Icon svg={require('./../../icon/warning.svg')} />
    </>,
    name: 'warningarchive',
    resource: 'warning/warning/archive',
    permission: { view: true },
    rolePermission: [
      { key: 'warningarchive.view', title: _r('查看') },
      { key: 'warningarchive.add', title: _r('添加') },
      { key: 'warningarchive.edit', title: _r('修改') },
      { key: 'warningarchive.delete', title: _r('删除') },
      { key: 'warningarchive.onearchive', title: _r('一键归档') },
    ],
    properties: {
      id: {
        type: 'string',
        title: _r('报警ID'),
        width: 180,
      },
      table: {
        title: _r('设备表'),
        type: 'object',
        fieldType: 'table',
        properties: {
          title: {
            type: 'string',
            title: _r('表名称')
          }
        },
        width: 120
      },
      department: {
        type: 'array',
        title: _r('所属部门'),
        fieldType: 'tableData',
        field: {
          func: 'dataAuth',
          style: {
            minWidth: 130
          },
          placeholder: _r('选择部门')
        },
        items: {},
        width: 130,
        related: 'department'
      },
      tableData: {
        title: _r('设备'),
        type: 'object',
        fieldType: 'tableData',
        properties: {
          warning: {
            type: 'object',
            properties: {}
          },
          name: {
            type: 'string',
            title: _r('名称'),
            fieldType: 'node-link',
          },
          uid: {
            type: 'string',
            title: _r('编号'),
            fieldType: 'node-link',
          },
        },
        width: 130
      },
      time: {
        type: 'string',
        format: 'date-time',
        title: _r('报警时间'),
        width: 180,
      },
      tableDataId: {
        'type': 'string',
        'title': _r('设备编号'),
        width: 100,
      },
      type: {
        'type': 'string',
        'title': _r('报警类型'),
        width: 100
      },
      processed: {
        'type': 'string',
        'title': _r('处理动作'),
        'enum': [
          '未处理',
          '已处理'
        ],
        'enumColor': [
          'warning',
          'success'
        ],
        width: 95
      },
      status: {
        'type': 'string',
        'title': _r('确认动作'),
        'enum': [
          '未确认',
          '已确认'
        ],
        'enumColor': [
          'warning',
          'success'
        ],
        width: 95
      },
      desc: {
        'type': 'string',
        'title': _r('报警描述'),
        width: 200
      },
      remark: {
        'type': 'string',
        'title': _r('报警处理'),
        width: 250,
      },
      level: {
        'type': 'string',
        'title': _r('级别'),
        'enum': [
          '低',
          '中',
          '高'
        ],
        width: 70
      },
      confirmTime: {
        type: 'string',
        format: 'date-time',
        title: _r('确认时间'),
        width: 200,
      },
      confirmUser: {
        type: 'object',
        title: _r('确认人'),
        relateTo: 'User',
        properties: {},
        width: 100,
      },
      handleTime: {
        type: 'string',
        format: 'date-time',
        title: _r('处理时间'),
        width: 200,
      },
      handleUser: {
        type: 'object',
        title: _r('处理人'),
        relateTo: 'User',
        properties: {},
        width: 100,
      },
      fields: {
        type: 'array',
        title: _r('报警数值'),
        items: {
          title: _r('数值'),
          type: 'object',
          properties: {}
        },
        width: 180,
      }
    },
    listFields: ['time', 'table', 'tableData', 'department', 'fields', 'level', 'type', 'confirmUser',
      'confirmTime',  'handleTime', 'handleUser', 'desc', 'remark'],
    orders: { time: 'DESC' },
    filters: {
      nav: [
        'id',
        'time',
        'table',
        'department',
        'tableData',
        'tableDataId',
        'confirmUser',
        'desc'
      ],
      submenu: [
        'id',
        'level',
        'status',
        'processed',
        'time',
        'tableDataId',
        'desc'
      ]
    },
    fieldRender: {
      fields: WarningFields,
      type: ({ value }) => {
        const { settings } = use('settings')
        const { t:_t1, i18n } = useI18n()
        const type = settings?.warning?.warningkind || []
        if (value) {
          if (_.isString(value)) {
            const types = type.filter(item => item.id == value) || []
            const val = types && types.length > 0 ? types[0]['name'] : value
            return val && val.indexOf('-') > 0 ? '' : val || ''
          } else if (_.isArray(value) && _.isArray(type)) {
            let arr = type.filter(item => value.some(ele => ele === item.id))
            return arr?.length ? arr.map(item => item?.name).join(',') : ''
          }
        } else {
          return _t1('空')
        }
      },
      table: ({ item }) => {
        const { t:_t1, i18n } = useI18n()
        return item?.table?.title || item?.table?.name || item?.table?.id || _t1('空')
      },
      department: ({ item }) => {
        const _department = item?.tableData?._department
        if(!_.isEmpty(_department) && _.isPlainObject(_department) && !_.isEmpty(Object.values(_department))) {
          return _.flattenDeep(Object.values(_department)).map(item => item?.name).join('')
        }
        return _t1('空') 
      },
      tableDataId: ({ item }) => {
        const { t:_t1, i18n } = useI18n()
        item?.tableData?.uid || item?.tableData?.id || _t1('空')
      },
    },
    components: {
      DataEmpty: props =>  <Empty description={_t1("暂无数据")} image={require('../../imgs/报警管理空.png')}  />,
      ListPage: WarningArchivePage,
      AddButton: () => null
    },
    projectFields: [ 'tableData._settings', 'status', 'processed', 'tableDataId', 'handle' ],
    form: [ '*' ],
    itemActions: [
      ({ item }) => <RecoverBtn item={item} />,
      ({ item }) => <WarningLog item={item} />,
      ({ item }) => {
        const { t:_t1, i18n } = useI18n()
        return !!item.tableData && <Button onClick={() => app.go(`/app/table/${item?.table?.id}/${item?.tableData?.id}/edit`)}>{_t1('设备')}</Button>
      }
    ],
    batchActions: [item => <BatchRecover {...item} />, item => <BatchDelete {...item} />],
    batchChangeFields: ['status', 'processed'],
    refresh: { submenu: [3, 5, 10] },
    defaultPageSize: 15
  }
}
