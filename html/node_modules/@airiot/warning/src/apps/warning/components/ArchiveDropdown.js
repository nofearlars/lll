import React from 'react';
import { ModelWrap } from 'xadmin-model';
import { app, use, api } from 'xadmin';
import { Button, Popconfirm, Tooltip, Card, Empty, Modal, Form, message, Layout, Menu, Input, Dropdown, Col, Select, Checkbox } from 'antd';
import DatePickerFilter from '../pages/DatePickerFilter'
import KindSelect from '../pages/KindSelect'
import { Icon, C, Loading } from 'xadmin-ui';
import { HasPermission } from 'xadmin-auth';
import _ from 'lodash'
import { SchemaForm } from 'xadmin-form'
import { _t } from 'xadmin-i18n';
const { Header, Footer, Sider, Content } = Layout
import { StopOutlined, DeleteOutlined, } from '@ant-design/icons'
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'
import ConditionSelect from './ConditionSelect'
import NodeListSelect from './NodeListSelect'

const DescInput = props => {
  const { t:_t1, i18n } = useI18n()
  const { input: { value, onChange }, input, field: { name: fieldName, schema = {} } } = props
  let [data, setData] = React.useState({ data: [], loading: false })
  let obj = { 'table': _t1('设备表'), 'tableData': _t1('设备'), 'globalRule': _t1('全局规则'), 'tableTag': _t1('设备表数据点'), 'tableDataTag': _t1('设备数据点') }

  let descSetting;
  if (schema?.descSetting) {
    try {
      descSetting = use('form', state => ({ descSetting: state.values.descSetting }))['descSetting']
    } catch (error) {
      console.log(error)
    }
  }

  React.useEffect(() => {
    if (descSetting?.length) { onChange(descSetting) }
  }, [JSON.stringify(descSetting)])

  React.useEffect(() => {
    api({ name: 'warning/warning/desc' }).fetch('', {}).then(({ json }) => {
      setData({ data: json, loading: false })
    }).catch(err => { setData({ ...data, loading: false }) })
  }, [])

  const handleMultipleChange = value => {
    onChange(value.map(item => item?.value))
  }

  return <Select allowClear mode="multiple" labelInValue
    loading={data.loading}
    style={{ width: '100%' }}
    placeholder={_t1("请选择报警描述")}
    optionFilterProp='label'
    value={input?.value?.length ? input.value : undefined}
    showSearch
    onChange={handleMultipleChange}
    filterOption={(input, option) => (
      option.value.toLowerCase().indexOf(input.toLowerCase()) >= 0
    )}
  >
    {
      data?.data?.length && data.data.map(item => {
        return <Select.Option key={`${item?.id}-${Math.random()}`} value={`${item?.id}-${item?.title}-${item?.type}-${item.description}`} label={item.description}>
          <span style={{ color: '#999' }}>{item?.title}/</span>{obj?.[item?.type]}/{item?.description}</Select.Option>
      })
    }
  </Select>
}



const ArchiveDefinitionBtn = () => {
  const { t:_t1, i18n } = useI18n()

  const [visible, setVisible] = React.useState(false)
  const [loading, setLoading] = React.useState(false)
  const [initData, setInitData] = React.useState(null)
  const [search_value, setSearch_value] = React.useState(null)
  const [menuData, setMenuData] = React.useState([])
  const [data, setdata] = React.useState([])
  const [currentKey, setCurrentKey] = React.useState(null)
  const [conentLoading, setConentLoading] = React.useState(false)

  const showModal = (e) => {
    querydata()
    setVisible(true)
    setInitData({})
    setCurrentKey(null)
  }

  const IconOnClick = (key, item) => {
    if (key === 'stop') {
      item['disabled'] = !item.disabled
      api({ name: 'warning/warning' }).fetch('/archiveSetting/' + item.id, {
        method: 'PATCH',
        body: JSON.stringify(item)
      }).then(({ status }) => {
        if (status == 200) {
          querydata()
          message.success(_t1(`${item.disabled ? '禁用' : '启用'}成功`))
        }
      })
    } else {
      api({ name: '/warning/warning/archiveSetting' })
        .delete(item.id)
        .then((json) => {
          if (json.status == "OK") {
            message.success(_t1('删除成功'))
            querydata()
            setMenuData([])
            setCurrentKey(null)
            setInitData({})
          }
        })
    }
  }

  const onSelect = ({ item, key }) => {
    setCurrentKey(key)
    setConentLoading(true)
    api({ name: 'warning/warning' }).fetch('/archiveSetting/' + key, {}).then(({ json }) => {
      setInitData(json)
      setConentLoading(false)
    })
  }

  const querydata = (id) => {
    const querys = { project: { disabled: 1 } }
    Object.keys(ArchiveSchema.properties).forEach(key => { querys.project[key] = 1 })
    const querystr = encodeURIComponent(JSON.stringify(querys))
    setLoading(true)
    api({ name: 'warning/warning' }).fetch('/archiveSetting?query=' + querystr, {})
      .then(({ json }) => {
        setdata(json)
        const data = search_value && json.filter(item => item.name.indexOf(search_value) !== -1) || json
        setMenuData(data)
        setLoading(false)
      })
  }

  const onSubmit = (value) => {
    if (value) {
      if (value?.condition?.length) {
        // processed 处理  status确认
        if (value.condition.indexOf('已处理') > -1) value['processed'] = '已处理'
        if (value.condition.indexOf('已确认') > -1) value['status'] = '已确认'
      }
      if (value?.desc?.length) {
        value['descSetting'] = value?.desc
        // value['desc'] = { '$in': value.desc.map(item => item.substr(item.lastIndexOf('-')+1)) }
        value['desc'] = value.desc.map(item => item.substr(item.lastIndexOf('-') + 1))
      }
      if (value?.department?.length) { 
        const _depart = handlerDatas(value?.department)
        _depart.forEach(val => {
          value[`${val.id}Id`] = { '$in': val.children.map(item => item.id) }
        })
      }
      api({ name: 'warning/warning' }).fetch(`/archiveSetting${value.id ? '/' + value.id : ''}`, {
        method: value.id ? 'PATCH' : 'POST',
        body: JSON.stringify(value)
      }).then(({ status, json }) => {
        if (status == 200) {
          message.success(_t1('保存成功'))
          querydata()
          setCurrentKey([json.InsertedID || value.id])
          onSelect({ key: json.InsertedID || value.id })
        }
      })
        .catch(({ json }) => message.error(json.name))
    }
  }

  const onSearch = (e) => {
    const { value } = e.target
    setSearch_value(value)
    const newdata = data.filter(item => item.name.indexOf(value) !== -1)
    setMenuData(newdata)
  }

  return (<>
    <div onClick={showModal}>{_t1('周期归档定义')}</div>
    <ArchiveModel
      title={_t1("周期归档定义")}
      width="62%"
      visible={visible}
      currentKey={currentKey}
      setCurrentKey={setCurrentKey}
      onSelect={onSelect}
      IconOnClick={IconOnClick}
      menuData={menuData}
      schema={ArchiveSchema}
      onSubmit={onSubmit}
      setInitData={setInitData}
      initData={initData}
      onSearch={onSearch}
      setVisible={setVisible}
      loading={loading}
      conentLoading={conentLoading}
    />
  </>
  )
}


const FormLayout = ({ children, change, invalid, handleSubmit, submitting, onCancel, limits, schema, currentValue, setVisible }) => {
  const { t:_t1, i18n } = useI18n()
  const { form, values: { id } } = use('form', state => ({ values: state && state.values }))
  React.useEffect(() => { schema.formEffect && schema.formEffect(form) }, [schema])

  return (
    <Form onSubmit={handleSubmit}>
      <div style={{ width: '80%', margin: '20px auto' }}>{children}</div>
      <div style={{ textAlign: 'right', margin: '40px 50px 0px 0px' }}>
        <Form.Item><br />
          {
            currentValue?.current && currentValue?.current?.condition?.length == 0 ? <Popconfirm title={_t1("当前归档条件为空，将忽略确认及处理操作的状态，对满足其他条件的报警进行归档，为了防止出现失误，请谨慎操作！")}
              overlayStyle={{ width: 300 }}
              onConfirm={handleSubmit} okText={_t1("确定")} cancelText={_t1("取消")}
            >
              <Button type="primary" loading={submitting} disabled={invalid}>
                {id ? _t1('修改') : _t1('添加')}
              </Button>
            </Popconfirm> : <Button type="primary" onClick={handleSubmit} loading={submitting} disabled={invalid}>
              {id ? _t1('修改') : _t1('添加')}
            </Button>
          }
          <Button style={{ marginLeft: 15 }} onClick={() => setVisible(false)}>{_t('Cancel')}</Button>
        </Form.Item>
      </div><br />
    </Form>
  )
}

const ArchiveSchema = {
  type: 'object',
  properties: {
    name: {
      title: _r('周期名称'),
      type: 'string'
    },
    interval: {
      title: _r('归档周期'),
      type: 'number',
      description: _r('以天为单位,可自定义天数'),
    },
    type: {
      title: _r('归档类型'),
      type: 'array',
      items: {},
      fieldType: 'warningType',
      description: _r('不选则为全部类型'),
    },
    range: {
      title: _r('归档范围'),
      type: 'string',
      enum: ['dept', 'table', 'tableData', 'desc'],
      enum_title: [ _r('部门'), _r('设备表'), _r('设备'), _r('描述') ],
    },
    department: {
      type: 'array',
      title: _r('部门'),
      fieldType: 'tableData',
      field: {
        func: 'dataAuth',
        style: {
          minWidth: 200
        },
        placeholder: _r('选择部门')
      },
      items: {}
    },
    table: {
      type: 'array',
      title: _r('设备表'),
      fieldType: 'table',
      field: {
        func: 'device'
      },
      items: {},
      description: _r('不选则为全部设备表'),
    },
    tableData: {
      type: 'array',
      title: _r('设备'),
      items: {},
      fieldType: 'tableData',
      field: {
        func: 'device'
      }
    },
    desc: {
      title: _r('报警描述'),
      // 'type': 'string',
      width: 200,
      field: {
        component: props => <DescInput {...props} field={
          { ...props.field, schema: { ...props.field.schema, descSetting: 'descSetting' } }} />
      }
    },
    condition: {
      type: 'array',
      title: _r('归档条件'),
      items: {}
    }
  },
  formEffect: form => {
    form.useField('range', state => {
      let rangeArr = ['table', 'department', 'tableData', 'desc']
      rangeArr.forEach(val => form.setFieldData(val, { display: false }))
      if (state.value === 'dept') {
        form.setFieldData('department', { display: true })
        rangeArr.filter(item => (item != 'department')).forEach(val => form.change(val, null))
      } else if (state.value === 'table') {
        form.setFieldData('table', { display: true })
        rangeArr.filter(item => (item != 'table')).forEach(val => form.change(val, null))
      } else if (state.value === 'tableData') {
        form.setFieldData('tableData', { display: true })
        rangeArr.filter(item => (item != 'tableData')).forEach(val => form.change(val, null))
      } else if (state.value == 'desc') {
        form.setFieldData('desc', { display: true })
        rangeArr.filter(item => (item != 'desc')).forEach(val => form.change(val, null))
      }
    })
  },
  form: [
    { key: 'name', validate: (value) => value && value.length > 10 ? '归档周期名字不得超过10个字符' : null },
    { key: 'interval', validate: (value) => (value < 1 || value && value.toString().indexOf('.') != -1) ? '归档周期不能是负数或0或小数' : null },
    '*', { key: 'condition', component: ConditionSelect }
  ],
  required: ['name', 'interval']
}

const ArchiveModel = ({ setVisible, onSubmit, IconOnClick, onSelect, onAdd, setInitData, onSearch, ...props }) => {
  const { t:_t1, i18n } = useI18n()
  const { title, width, menuData, visible, schema, initData, loading, currentKey, setCurrentKey, conentLoading } = props
  const currentValue = React.useRef()

  const style = {
    padding: '15px',
    color: '#E38A0F',
    textAlign: 'center',
    background: '#F2EAD7',
    borderRadius: '4px'
  }

  const addPeriodic = () => {
    setInitData({ condition: ['已处理', '已确认'] }); setCurrentKey(null)
  }

  return (
    <>
      <Modal
        title={title}
        visible={visible}
        footer={null}
        destroyOnClose
        width={width}
        // height={950}
        className="ArchiveModel"
        onCancel={() => {
          setVisible(false)
          setInitData && setInitData({})
        }}
      >
        {title == _t1('周期归档定义') ?
          <Layout style={{ padding: 10, height: 550 }} className="warn-archive-model">
            <Sider width={250} style={{ borderRight: '1px solid #f0f0f0', overflow: 'auto' }}>
              <div style={{ width: '220px', margin: '10px auto' }}>
                <Input placeholder={_t1("模糊搜索周期名称...")} onChange={onSearch} />
              </div>
              {loading ? <Loading /> :
                <Menu mode="inline" onSelect={onSelect} selectedKeys={currentKey}>
                  {menuData.map(item => (
                    <Menu.Item key={item.id} >
                      <span style={{ display: 'flex', justifyContent: 'space-between' }}>
                        {_t1(item.name) || 'xxx'}
                        <span style={{ lineHeight: '40px' }}>
                          <Popconfirm
                            title={_t1(`确认${item.disabled ? '启用' : '禁用'}当前归档周期？请谨慎操作`)}
                            overlayStyle={{ width: 230 }}
                            onConfirm={() => IconOnClick('stop', item)} okText={_t1("确定")} cancelText={_t1("取消")}>
                            <StopOutlined style={{ color: item.disabled ? 'red' : '#36af57', cursor: 'pointer' }} />
                          </Popconfirm>
                          <HasPermission FailureComponent={null} permission="warningarchive.delete">
                            <Popconfirm
                              title={_t1("确认删除当前归档周期？请谨慎操作")}
                              overlayStyle={{ width: 230 }}
                              onConfirm={() => IconOnClick('delete', item)} okText={_t1("确定")} cancelText={_t1("取消")}>
                              <DeleteOutlined style={{ cursor: 'pointer' }} />
                            </Popconfirm>
                          </HasPermission>
                        </span>
                      </span>
                    </Menu.Item>
                  ))}
                </Menu>
              }
            </Sider>
            <Layout >
              <Content style={{ padding: 10 }}>
                {conentLoading ? <Loading /> : <>
                  <Button type="primary" style={{ marginBottom: 10 }} onClick={() => { addPeriodic() }}>{_t1('添加定义')}</Button>
                  {_.isEmpty(initData) ? <div style={{ textAlign: 'center', marginTop: 30 }}>
                    <span style={style}>
                      <Icon svg={require('../../../icon/warningTip.svg')} />
                      <span style={{ marginLeft: 5 }}>{_t1('快去添加周期归档或者选择已有周期归档进行编辑')}</span>
                    </span>
                    <C is="NoData" />
                  </div> : <C is="I18nSchemaForm" formKey={'ArchiveDefinition' + JSON.stringify(initData)} schema={schema}
                    initialValues={initData}
                    component={props => <FormLayout {...props} currentValue={currentValue} setVisible={setVisible} />}
                    onSubmit={value => { onSubmit(value); currentValue.current = null }}
                    onChange={value => currentValue.current = value}
                  />
                  }
                </>
                }
              </Content>
            </Layout>
          </Layout> : <C is="I18nSchemaForm" formKey={'ArchiveDefinition'} schema={schema}
            initialValues={initData}
            component={props => <FormLayout {...props} currentValue={currentValue} setVisible={setVisible} />}
            onSubmit={value => { onSubmit(value); currentValue.current = null }}
            onChange={value => currentValue.current = value}
          />}

      </Modal>
    </>

  )
}

const getOneSchema = ArchiveSchema => {
  const OneASchema = _.cloneDeep(ArchiveSchema)
  OneASchema.properties = _.omit(OneASchema.properties, 'interval')
  OneASchema.properties = _.omit(OneASchema.properties, 'name')

  OneASchema.properties['time'] = {
    type: 'object',
    title: _r('归档时间'),
    format: 'date-time',
    description: _r('若只选择一个时间点，默认将时间点之前的报警信息全部归档'),
    properties: {}
  }
  OneASchema.properties['condition'] = {
    type: 'array',
    title: _r('归档条件'),
    items: {}
  }

  OneASchema.form = [{ key: 'time', component: DatePickerFilter }, { key: 'type', component: KindSelect }, '*', { key: 'condition', component: ConditionSelect }]
  OneASchema.required = ['time']
  return OneASchema
}

const handlerDatas = (arr) => {
  const obj = {};
   arr.forEach((item, index) => {
     const { table: { id } } = item; //解构赋值
     if (!obj[id]) {
       obj[id] = {
        id,
        children: []
       }
     }
     obj[id].children.push(item);
   });
  const data = Object.values(obj); // 最终输出
  return data
}

const OneClickArchive = () => {
  const { t:_t1, i18n } = useI18n()
  const [visible, setVisible] = React.useState(false)
  const { getItems } = use('model.getItems')
  const currentValue = React.useRef()
  const showModal = () => setVisible(true)

  const onSubmit = (value) => {
    const filter = {}
    if (value) {
      if (value?.department?.length) { 
        const _depart = handlerDatas(value?.department)
        let arr = []
        _depart.forEach(val => {
          arr = [ ...arr, { [`${val.id}Id`]: { '$in': val.children.map(item => item.id) } } ]
        })
        if(arr?.length) filter['$or'] = arr
      }
      if (value?.table?.length) filter['tableId'] = { '$in': value.table.map(item => item.id) }
      if (value?.tableData?.length) filter['tableDataId'] = { '$in': value.tableData }
      if (value?.type?.length) filter['type'] = { '$in': value.type }
      if (value?.desc?.length) filter['desc'] = { '$in': value.desc.map(item => item.substr(item.lastIndexOf('-') + 1)) }

      if (value?.time) {
        if (Object.keys(value.time).length < 2) {
          filter['time'] = { '$lte': value.time.lte }
        } else {
          filter['time'] = { '$gte': value.time.gte, '$lte': value.time.lte }
        }
      }
      if (value?.condition?.length) {
        // processed 处理  status确认
        if (value.condition.indexOf('已处理') > -1) filter['processed'] = '已处理'
        if (value.condition.indexOf('已确认') > -1) filter['status'] = '已确认'
      }
    }
    api({ name: 'warning/warning' }).fetch('/instantArchive?query=' + JSON.stringify({ filter }), {})
      .then(({ json }) => {
        message.success(json)
        setVisible(false)
        setTimeout(() => getItems(), 800)
      })
  }

  const OneASchema = getOneSchema(ArchiveSchema)

  return (
    <>
      <div onClick={showModal}>{_t1('一键归档')}</div>
      {
        OneASchema ? <ArchiveModel
          title={_t1("一键归档")}
          visible={visible}
          schema={OneASchema}
          setVisible={setVisible}
          component={props => <FormLayout {...props} currentValue={currentValue} setVisible={setVisible} />}
          onSubmit={value => { onSubmit(value); currentValue.current = null }}
          onChange={value => currentValue.current = value}
        /> : null
      }

    </>
  )
}

const ArchiveDropdown = () => {
  const { t:_t1, i18n } = useI18n()
  const menu = (
    <Menu >
      <Menu.Item key="one" >
        <OneClickArchive />
      </Menu.Item>
      <Menu.Item key="def">
        <ArchiveDefinitionBtn />
      </Menu.Item>
    </Menu>
  );
  return (
    <Dropdown.Button type="primary" style={{ marginLeft: 0, marginRight: 10 }} className="warningArchive"
      onClick={() => app.go('/app/model/WarningArchive/list')} overlay={menu}>
      <Tooltip placement="bottomRight" title={_t1('对于已处理的报警可以进行一键归档或者周期归档的操作，减少报警管理页面的数据量')}>
        <span>
          {_t1('归档信息')}
        </span>
      </Tooltip>
    </Dropdown.Button>
  )
}

export default ArchiveDropdown

export { ArchiveSchema, getOneSchema }