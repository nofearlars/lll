import React from 'react';
import { ModelWrap } from 'xadmin-model';
import { app, use, api } from 'xadmin';
import { Select } from 'antd';
import _ from 'lodash'
import { _t } from 'xadmin-i18n';
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'

const NodeListSelect = ({ input, field, multip, ...props }) => {
  const { t:_t1, i18n } = useI18n()
  const { table, department } = use('form', state => ({
    table: state.values && state.values.table,
    department: state.values && state.values.department
  }))
  const [data, setData] = React.useState(null)

  React.useEffect(() => {
    filterNode()
  }, [ table, department ])

  const filterNode = () => {
    let filter = {}
    filter.tableId = table?.id
    filter.departmentId = department?.id
    const querys = { filter }
    const querystr = encodeURIComponent(JSON.stringify(querys))
    // api({ name: `core/t/${}/d` })
    //   .fetch('?query=' + querystr, {})
    //   .then(({ json }) => {
    //     setData(json)
    //   })
  }

  const handleChange = val => {
    if (val && val.length === 0) {
      input.onChange(null)
    } else {
      input.onChange(val)
    }
  }

  const handleMultipleChange = val => {
    let newVal = val?.length ? val.map(item=> ({ id: item?.value, name: item?.label })) : undefined
    input.onChange(newVal)
  }

  return (
    <>
      {
        multip ? <Select allowClear mode="multiple" labelInValue
        style={{ width: '100%' }}
        placeholder={_t1("请选择设备")}
        optionFilterProp='label'
        value={input?.value?.length ? input.value.map(item=> item.id) : undefined}
        showSearch
        onChange={handleMultipleChange}
      >
        {
          data && data.length && data.map(item => {
            return <Select.Option value={item.id} label={item.name}>{item.name}</Select.Option>
          })
        }
      </Select> : <Select allowClear
        style={{ width: '100%' }}
        placeholder={_t1("请选择设备")}
        optionFilterProp='label'
        value={input.value || undefined}
        showSearch
        onChange={handleChange}
      >
        {
          data && data.length && data.map(item => {
            return <Select.Option value={item.id} label={item.name}>{item.name}</Select.Option>
          })
        }
      </Select>
      }
    </>
  )
}

export default NodeListSelect
