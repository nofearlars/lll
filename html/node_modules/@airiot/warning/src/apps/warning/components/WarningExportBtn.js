import React from 'react';
import { app, use, api } from 'xadmin';
import { Button, Menu, Input, Dropdown } from 'antd';
import { Icon, C, Loading } from 'xadmin-ui'
import { HasPermission } from 'xadmin-auth';

import _ from 'lodash'
import { _t } from 'xadmin-i18n';
import { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil'

const WarningExportBtn = props => {
  const { t: _t1, i18n } = useI18n()
  const { model, filter, atoms } = use('model', state => ({ filter: state.filter, wheres: state.wheres }))
  const wheres = useRecoilValue(atoms.wheres)
  const order = useRecoilValue(atoms.order)
  const skip = useRecoilValue(atoms.skip)
  const limit = useRecoilValue(atoms.limit)
  const { selected, fields } = use('model.fields', props)
  const [url, setUrl] = React.useState('')

  const getObj = (data) => {
    let obj = {}
    if (data) {
      for (const item in data) {
        if (data[item] == 'DESC') { obj = { [item]: -1 } } else { obj = { [item]: 1 } }
      }
    }
    return obj
  }

  React.useEffect(() => {
    const apiFilter = _.omit({ ...filter }, 'limit', 'skip')
    const apiObj = api(model)

    const where = apiObj.convert_where(wheres)
    const f = apiObj.convert(apiFilter)
    if (Object.keys(where).length > 0) {
      f['filter'] = where
    }
    f['sort'] = getObj(order)
    f['skip'] = skip
    // f['limit'] = limit
    selected?.length ? selected.map(item => f.project[item] = 1) : []

    let filter_string = encodeURIComponent(JSON.stringify(f))

    let url = apiObj.getHost() + apiObj.resource + `?query=${filter_string}&format=xls`
    url += '&token=' + encodeURIComponent(apiObj.getHeaders()['Authorization'])
    if (!_.isEmpty(_.omit(api({ name: 'media' }).getHeaders(), 'Content-Type')['x-request-project'])) {
      url = url + '&x-request-project=' + _.omit(api({ name: 'media' }).getHeaders(), 'Content-Type')['x-request-project']
    }
    if (app?.module !== 'front') {
      url = url + '&x-access-path=admin'
    }
    setUrl(url)

  }, [model, filter, wheres, selected])

  const pdfUrl = url?.replace('format=xls', 'format=pdf')
  const menu = (
    <Menu
      items={[
        {
          key: '1',
          label: (
            <a target="_blank" href={pdfUrl}>
              {_t1('导出PDF')}
            </a>
          ),
        },
      ]}
    />
  )

  return (
    <HasPermission FailureComponent={null} permission="warning.export">
      <Dropdown overlay={menu} placement="bottomLeft"  >
        <Button href={url} disabled={!url} style={{ marginRight: 2.5 }} target="_blank">
          <Icon name="download" /> {_t1('导出报警')}
        </Button>
      </Dropdown >
    </HasPermission>
  )
}

export default WarningExportBtn