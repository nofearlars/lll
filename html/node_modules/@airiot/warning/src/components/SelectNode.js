import { Select, Spin, Empty } from 'antd';
import React from 'react';
import { api } from 'xadmin';
import debounce from 'lodash/debounce';
import _ from 'lodash'
const Option = Select.Option;

const NodeSelect = ({ input, field: { department, multiple, model, placeholder }, project = [], defaultValue }) => {
  const { t:_t1, i18n } = useI18n()

  const [nodes, setNodes] = React.useState([])
  const [defaultNodes, setDefaultNodes] = React.useState([])

  const [loading, setLoading] = React.useState(false)
  const [uid, onSearch] = React.useState(null)

  React.useEffect(() => {
    api('Node').query().then(({ items }) => { setDefaultNodes(items) })
  }, [])

  React.useEffect(() => {
    setLoading(true)
    const where = {}

    if (department) where['department'] = department
    if (model) where['model'] = model
    if (uid) where['or'] = [{ uid: { like: uid } }, { name: { like: uid } }]
    if (nodes && nodes.length > 0) {
      if (input.value && nodes.filter(n => n.id != input.value).length > 0) {
        setNodes([])
      }
    }
    api('Node').query({ fields: project || [] }, { where })
      .then(({ items }) => {
        setLoading(false)
        if (items.length > 0) {
          setNodes(items)
        } else {
          setNodes([])
        }
      }).catch(err => {
        setLoading(false)
      })
  }, [department, model, uid])

  const onChange = (vs) => {
    let vals = vs && vs.length > 0 && vs.map((v) => ({ id: v.value || '', name: v.label || '' })) || []
    if (_.isPlainObject(vs)) {
      vals = _.intersectionBy(defaultNodes, [{ ...vs, id: vs.value }], 'id')
    } else if (_.isArray(input.value)) {
      vals = _.intersectionBy(defaultNodes, vs.map(item => ({ ...item, id: item.value || item.key })), 'id')
    }
    input.onChange(vals)
    onSearch(null)
  }

  const prop = {}

  if (input.value && _.isPlainObject(input.value)) {
    prop['value'] = { label: input?.value?.name, value: input?.value?.id }
  } else if (input.value && _.isArray(input.value)) {
    prop['value'] = input.value.map(item => ({ label: item.label || item.name, value: item.id || item.key }))

  }


  return (
    <Select
      showSearch
      style={{ minWidth: 160, width: '100%' }}
      placeholder={_t1(placeholder || "请选择设备")}
      onChange={onChange}
      onSearch={debounce(onSearch, 700)}
      notFoundContent={loading ? <div style={{ textAlign: 'center' }}><Spin size="small" /></div> : null}
      filterOption={false}
      labelInValue
      loading={loading}
      allowClear={true}
      mode={multiple && "multiple"}
      defaultValue={defaultValue}
      {...prop}
    >
      {nodes.map(node => <Option value={node.id}>{node.name}</Option>)}
    </Select>
  )

}

export default NodeSelect
