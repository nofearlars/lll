import React from 'react';
import _ from 'lodash'
import { api, use } from 'xadmin'
import { Icon } from 'xadmin-ui'
import { Button, Upload, message, Input, Select, Space } from 'antd';

const VoxUpload = ({ input, field: { name: fieldName, schema = {} } }) => {
  const { t:_t1, i18n } = useI18n()
  const { settings: { warning } } = use('settings')
  let index = fieldName && fieldName.substring(fieldName.indexOf('[') + 1, fieldName.lastIndexOf(']'))

  let type;
  if (schema?.type) {
    try {
      type = use('form', state => ({ type: state.values.rules && _.get(state.values.rules[index], schema.type) }))['type']
    } catch (error) {
      console.log(error)
    }
  }
  const [errorFileList, setErrorFileList] = React.useState({})
  const [warningkind, setWarningkind] = React.useState([])
  const [loading, setLoading] = React.useState(false)

  const props = {
    name: 'file',
    accept: '.mp3,.wav',
    action: api({ name: 'media' }).getHost() + ('core/media/warning'),
    headers: _.omit(api({ name: 'media' }).getHeaders(), 'Content-Type'),
  };

  const onChange = ({ file }) => {
    if (file.status === 'removed') {
      input.onChange()
      setLoading(false)
      return
    }
    setLoading(true)
    if (file.status !== 'uploading') {
    }
    if (file.status === 'done') {
      setLoading(false)
      message.success(`${file.name} ${_t1('上传成功')}`);
      const res = file.response
      // res && res.url && input.onChange({ select: input?.value?.select, url: "/rest" + res.url })
      res && res.url && input.onChange("/rest" + res.url)

    } else if (file.status === 'error') {
      setLoading(false)
      const infoStr = `${file.name} ${file?.response?.message || _t1('上传失败！')}`
      // 错误信息提示修改
      setErrorFileList({
        fileList: [{
          uid: file?.originFileObj?.uid,
          name: file?.originFileObj?.name,
          status: file?.status,
          response: infoStr,
        }]
      })
      message.error(infoStr);
    }
  }
  const isValue = input?.value
  let show = !isValue

  if (isValue) {
    if (warningkind?.length && warningkind.filter(item => item.audio == isValue)?.length) {
      _.omitBy(props, ['fileList'])
      show = true
    } else {
      props['fileList'] = [{ name: isValue, status: 'success' }]
    }
  } else {
    _.omitBy(props, ['fileList'])
  }

  React.useEffect(() => {
    let warningkind = warning?.warningkind
    if (warningkind?.length && _.isArray(type) && type?.length) {
      let arr = warningkind.filter(item => type.some(ele => ele === item.id)).filter(item => item.audio)
      setWarningkind(arr)
    }
  }, [type, warning?.warningkind])

  return React.useMemo(() => (
    <div style={{ display: 'flex', alignItems: 'center' }}>
      {
        type && _.isArray(type) && warningkind?.length && warningkind.filter(item => item.audio == isValue)?.length || type && _.isArray(type) && _.isEmpty(isValue) ?
          <Select allowClear style={{ width: 200 }} value={input?.value} onChange={value => { input.onChange(value) }}>
            {
              warningkind.map(item => <Select.Option value={item?.audio}>{item?.name}</Select.Option>)
            }
          </Select>
          : null
      }
      <div style={ type ? { marginLeft: '1rem' } : {}}>
        <Upload {...props} {...errorFileList} onChange={onChange}>
          {show && <Button loading={loading}>
            <Icon type="upload" /> {_t1('上传报警声音')}
          </Button>}
        </Upload>
      </div>
    </div>
  ), [isValue, warningkind, show, errorFileList])
}
export default VoxUpload