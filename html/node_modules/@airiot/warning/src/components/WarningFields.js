import React from 'react'
import _ from 'lodash'
import { use, api } from 'xadmin'
import { message } from 'antd'
import { Icon } from 'xadmin-ui'

const toFixed = (Dight, How = 2) => {
  return _.isNumber(Dight) ? Math.round(Dight * Math.pow(10, How)) / Math.pow(10, How) : Dight
}

const toValue = (value, fixed) => {
  return _.isBoolean(value) ?
    (value ? 1 : 0) :
    (_.isNumber(value) ?
      toFixed(value, fixed !== undefined ? fixed : 3) :
      (value ? value.toString() : '-')
    )
}

const WarningFields = (props) => {
  // const { dispatch } = use('redux')
  const dataContext = use('data.context')
  const { t:_t1, i18n } = useI18n()

  const { item, value, wrap: WrapComponent, callback } = props
  let tableData = item?.tableData, table = item?.table, time = item?.time, fields = item?.fields

  const onShow = ({ time, tableData, tag }) => {
    if (tableData) {
      // dispatch({ type: '@@iot/CHANGE_DATA_MODAL', payload: { time, tableData, tag, show: true } })
    }
  }

  const renderValue = value ? value.map(item => {
    const value = toValue(item.value, item?.fixed) + `${item?.unit || ''}`

    return (item?.name && item?.value != undefined) ? <span style={{ marginRight: 5, cursor: 'pointer' }} onClick={() => {
      if (tableData) {
        onShow({ time, tableData, tag: item })
      }
    }}>{item.name}:{value}</span> : ''
  }).filter(Boolean) : ''

  // 打开历史数据查看 modal
  const showDataContext = () => {
    const tag = fields?.[0]
    if (!tag) return
    _.isFunction(callback) && callback()
    if (dataContext && !_.isEmpty(dataContext)) {
      const { setParams, showModal } = dataContext
      setParams({
        timeRange: {
          type: 'between',
          range: {
            gte: moment(time).subtract(15, 'minutes'),
            lte: moment(time).add(15, 'minutes')
          }
        },
        tags: [{
          data: {
            name: `${tableData.name || tableData?.id}.${tag.name}`,
            value: `${tableData.id}.${tag.id}`,
            origin: { ...tag, node: tableData, table: item?.table?.id, tableData }
          },
          tableData,
          fixed: 3
        }]
      })
      showModal(true)
    } else {
      message.error(_t1('未加载数据分析模块'))
    }
  }

  return renderValue ? <WrapComponent>
    <span onClick={showDataContext}>{renderValue}</span>
  </WrapComponent> : ''
}

export default WarningFields
