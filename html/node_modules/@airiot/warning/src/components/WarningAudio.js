import React, { useEffect, useLayoutEffect, useState, useRef } from 'react'
import { use } from 'xadmin'
import _ from 'lodash'
import { Popover, Switch } from 'antd'
import { Icon } from 'xadmin-ui';
import WarningMain from './WarningMain';
import { useRecoilState, useRecoilValue, useSetRecoilState, RecoilRoot } from 'recoil'
import WarningButton from './WarningButton';

// n 记录当前报警播放了几次
let n = 0

// 页面挂载是获取报警信息决定是否播放报警声音
const WarningAudio = props => {
  const { t: _t1, i18n } = useI18n()

  const ls = window.localStorage
  const { settings } = use('settings')
  const [muted, setMuted] = useState(false)
  const audioUrl = settings?.warning?.audio
  const audioTypeSound = settings?.warning?.warningkind
  // const { count } = use('redux', state => {
  //   const unread = state && state.warning && state.warning.unread
  //   const count = unread && unread.length
  //   return { count: count || 0 }
  // })
  const warning_data = use('warning.data')
  const [unread, setUnread] = use('warning.unread')
  let count = unread?.length || 0

  React.useEffect(() => {
    switch (warning_data?.state) {
      case 'hasValue':
        setUnread(warning_data.contents.items)
        return
      case 'loading':
        return
      case 'hasError':
        throw _t1('出错了')
    }
  }, [warning_data])

  const audioRef = useRef(null)
  const audioDom = audioRef.current
  // const { items } = use('wsNewUnread')
  const items = unread
  const [playing, setPlaying] = React.useState(false)

  // times播放次数默认值1 url声音地址 audioUrl默认声音地址
  const playTimes = (elem, timesOfPlay, audio, type) => {
    const times = timesOfPlay || 1
    let warningSound, audioSound
    if (_.isString(type)) {
      let warningAudioData = audioTypeSound?.length ? audioTypeSound.filter(item => (item?.id == type)) : []
      warningSound = warningAudioData?.length ? warningAudioData[0]?.audio : ''
    } else if (_.isArray(type) && type?.length) {
      let audioData = audioTypeSound?.length ? audioTypeSound.filter(item => type.some(ele => ele === item.id)).filter(item => item.audio) : []
      warningSound = audioData?.length ? audioData[0].audio : ''
    }
    if (_.isString(audio)) { audioSound = audio } else if (_.isObject(audio)) {
      if (audio?.url) { audioSound.audio } else if (audio?.select) {
        audioSound = audio?.select
      }
    }

    const url = audioSound || warningSound || audioUrl
    return new Promise((resolve, reject) => {
      let start = 0;
      elem.src = url
      elem.autoplay = true
      elem.addEventListener("ended", function () {
        start++;
        if (start != times) elem.play().catch(() => { })
        if (start == times) {
          elem.pause()
          return resolve(true)
        }
      })
    })
  }

  useEffect(() => {
    const lsValue = ls.getItem("muted")
    if (lsValue && lsValue == 'false') {
      setMuted(false)
    }
    if (lsValue && lsValue == 'true') {
      setMuted(true)
    }
  }, [])


  if (!muted && play) {
    audioDom.play();
  }


  React.useEffect(() => {
    // items 为 ws新产生的报警 n初始化为0 用playing判断是否往下执行 n++
    if (audioDom && items.length > 0 && playing === false) {
      const curWarn = items.slice(n, n + 1)[0]
      setPlaying(true)
      // 有新的就响 没有就不响  2021.12.13 丽娜确认
      if (curWarn) {
        // 根据报警级别播放不同的报警声音 报警规则的优先级最高
        if (curWarn?.level && !curWarn?.audio) {
          const LEVEL = { '低': 'low_audio', '中': 'middle_audio', '高': 'tall_audio' }
          const curAudio = LEVEL[curWarn?.level]
          curWarn['audio'] = settings?.warning?.[curAudio] || audioUrl
          curWarn['timesOfPlay'] = 1
        }
        playTimes(audioDom, curWarn?.timesOfPlay, curWarn?.audio, curWarn?.type)
          .then((res) => {
            if (res) {
              n += 1
              setPlaying(false)
            }
          })
          .catch((err) => {
            setPlaying(false)
          })
      } else {
        setPlaying(false)
      }
    }
  }, [items?.length, JSON.stringify(items), playing])

  React.useEffect(() => {
    if (items && items?.length && audioDom) {
      audioDom.play()
    }
  }, [items?.length])

  const onClick = (v) => {
    ls.setItem('muted', !muted)
    setMuted(!muted)
    if (v) audioDom.play();
  }

  let play = count > 0
  // 点击页面后播放audio
  // body.onclick = () => {
  //   if (!muted && play && audioRef.current) {
  //     audioRef.current.play();
  //   }
  // }

  const content = (
    <div style={{ width: 100, height: 25, display: 'flex', alignItems: 'center', }}>
      <Icon type='sound' style={{ fontSize: 20, marginRight: 10 }} />
      <Switch checkedChildren={_t1("开")} unCheckedChildren={_t1("关")} size="small" checked={!muted} onClick={onClick} />
    </div>
  )

  const style = {
    position: 'fixed',
    right: 0,
    display: 'flex',
    alignItems: 'center',
    textAlign: 'left',
    width: 25,
    color: '#fff',
    paddingLeft: 9,
    background: 'lightcoral',
    height: 50,
    lineHeight: 50,
    top: 80,
    borderRadius: '25px 0 0 25px',
    zIndex: 999,
    overflow: 'hidden'
  }

  return settings?.warning?.alarm_sound ? (
    <div style={style}>
      {/* 画面声音组件单独订阅 */}
      {props?.editMode === false && <WarningMain />}
      <Popover title={_t1('报警声音开关')} placement="left" content={content} trigger="click">
        <Icon type="setting" />
      </Popover>
      <audio id="audio" ref={audioRef} muted={muted} />
    </div>
  ) : null
}

export default WarningAudio

