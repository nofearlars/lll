import moment from 'moment';
import React from 'react';
import { Card, Popover } from 'antd';
import { CSSTransition, TransitionGroup } from 'react-transition-group';
import { use } from 'xadmin';
import { Icon } from 'xadmin-ui';
import WarningPopover from './WarningPopover';

class WarningTime extends React.Component {
  componentDidMount() {
    this.timer = setInterval(() => this.forceUpdate(), 60000)
  }
  componentWillUnmount() {
    if (this.timer) clearInterval(this.timer)
  }
  render() {
    return <span>{moment(this.props.time).fromNow()}</span>
  }
}

const Fade = ({ children, ...props }) => (
  <CSSTransition
    {...props}
    timeout={1000}
    classNames="warning"
  >
    {children}
  </CSSTransition>
)

const ACTION_CLASS = {
  '未确认': 'unconfirm',
  '已确认': 'confirmed'
}

const ListFilter = ({ items }) => {
  const { settings } = use('settings')
  const barlistFilter = settings?.warning?.barlistFilter
  return items.filter(item => {
    return !item.recoveryTime && (barlistFilter?.status ? item.status != '已确认' : true) && (barlistFilter?.processed ? item.processed != '已处理' : true)
  }).map(item => <Fade key={item.id}><WarningBarItem id={item.id} item={item}/></Fade>)
}

class WarningBarItem extends React.Component {
  render() {
    const { item, id } = this.props
    const department = item && item.department && item.department
    const node = item && item.tableData || null
    const departmentName = department && department.map(item => item.name).toString()
    const t = ACTION_CLASS?.[item?.status] || ''
    const s = { '低': 'info', '中': 'warning', '高': 'danger' }[item?.level || '中']
    return (
      <Card>
        <Popover trigger="click" placement="top" content={<WarningPopover item={item} />}>
          <div className={`content ${t} ${s}`}>
            <div className="time"><WarningTime time={item?.time} /></div>
            <div className="department">{departmentName}</div>
            <div className="node"><a>{node && node.name}</a></div>
            <div className="desc">{item?.desc}</div>
          </div>
        </Popover>
      </Card>
    )
  }

}

const WarningBarList = props => {
  let [state, setState] = React.useState({ left: 0 })
  let step = (120 + 8) * 4
  const { loading, items, fields } = use('model.list')
  const container = React.useRef()

  const changeLeft = (d) => () => {
    const c = container.current
    const l = c.querySelectorAll('.warning-bar-list')[0]
    setState({
      left:
        Math.max(
          c.clientWidth - l.clientWidth - 100,
          Math.min(0, state.left + step * d)
        )
    })
  }

  let minLeft = -100
  const c = container.current
  if (c) {
    const l = c.querySelectorAll('.warning-bar-list')[0]
    minLeft = c.clientWidth - l.clientWidth - 100
  }

  if (loading) {
    return <div className="text-center" style={{ padding: 10 }}><Icon name="spinner fa-spin fa-4x" /></div>
  } else {
    return (
      <div className="warning-bar-an" style={{ display: 'flex', flexDirection: 'row', height: '120px', alignItems: 'center' }}>
        <div className={'arr-icon' + (state.left >= 0 ? ' disable' : '')} onClick={changeLeft(1)}>
          <Icon name="left" />
        </div>
        <div className="warning-bar-list-container" ref={container}>
          <TransitionGroup className="warning-bar-list" style={{ left: state.left }}>
            <ListFilter items={items} />
          </TransitionGroup>
        </div>
        <div className={'arr-icon' + (state.left <= minLeft ? ' disable' : '')} onClick={changeLeft(-1)}>
          <Icon name="right" />
        </div>
      </div>
    )
  }

}

export default WarningBarList
