import React, { useEffect } from 'react'
import { Badge, Popover } from 'antd'
import { app, use } from 'xadmin'
import { C, Icon } from 'xadmin-ui';
import { useRecoilState, useRecoilValue, useSetRecoilState, RecoilRoot, selector,
  useRecoilValueLoadable } from 'recoil'

const WarningButton = props => {
  const navigate = use('navigate')
 
  const onClick = () => {
    if (props?.editMode) {
      return
    } else {
      app.go('/app/model/Warning/list')
    }
  }
  return (
      <div style={{ width: 50, textAlign: 'center' }}>
        <a onClick={onClick} style={{ display: 'block', height: 55, }}>
          <WaringBadge {...props} />
        </a>
      </div>
  )
}

const WaringBadge = props => {
  const { t:_t1, i18n } = useI18n()
  // const { dispatch, processedCount, typeCount, count } = use('redux', state => {
  //   const typeCount = state.warning.typeCount
  //   const count = state.warning?.count
  //   const processedCount = state.warning?.processedCount
  //   return { processedCount, typeCount, count }
  // })

  const warning_data = use('warning.data')

  const [ typeCount, setTypeCount ]  = use('warning.typeCount')
  const [ count, setCount ]  = use('warning.count')
  const [ processedCount, setProcessedCount ]  = use('warning.processedCount')

  // React.useEffect(() => {
  //   switch (warning_data?.state) {
  //     case 'hasValue':
  //       setTypeCount(warning_data.contents.typeCount)
  //       setCount(warning_data.contents.count)
  //       setProcessedCount(warning_data.contents.processedCount)
  //       return 
  //     case 'loading':
  //       return 
  //     case 'hasError':
  //       throw '出错了'
  //   }
  // }, [ warning_data ])

  // useEffect(() => {
  //   dispatch({ type: '@@oilive/UNREAD_WARNING' })
  // }, [])

  const {
    isAlarm, noAlarm, warnTypeNum,
    offsetX = -20, offsetY = -20,
    width = 50, height = 50,
    badgeX = -10, badgeY = 0
  } = props

  const content = (
    <>
      <div>{_t1('需处理报警条数')}:<span style={{ color: 'red' }}>{processedCount}</span></div>
      <div>{_t1('报警信息总条数')}:<span style={{ color: 'red' }}>{count}</span></div>
      <div>{_t1('不同设备/报警规则报警条数')}:<span style={{ color: 'red' }}>{typeCount}</span></div>
    </>
  )

  const imgUrl = typeCount > 0 ? isAlarm : noAlarm
  const iconStyle = { color: typeCount > 0 ? 'red' : '#fff', fontSize: width - 20, marginTop: offsetY, marginLeft: offsetX, width: width + 'px', height: height + 'px' }
  const imgStyle = { marginTop: offsetY, marginLeft: offsetX, width: width + 'px', height: height + 'px' }

  let iconComponent = <Icon type="bell" style={iconStyle} />
  if (isAlarm || noAlarm) {
    iconComponent = <img style={imgStyle} src={imgUrl} />
  }
  if (typeCount <= 0 && !noAlarm) {
    iconComponent = <Icon type="bell" style={iconStyle} />
  }
  // 自定义显示报警数 默认为类型数
  let badgeCount = typeCount
  // 'type', 'processed', 'all'
  if (warnTypeNum) {
    if (warnTypeNum == 'processed') {
      badgeCount = processedCount
    }
    if (warnTypeNum == 'all') {
      badgeCount = count
    }
  }

  return (
    <Popover placement='bottom' content={content} >
      <div style={{ height: 48, }}>
        <Badge size="small" count={badgeCount} offset={[badgeX, badgeY]} >
          {iconComponent}
        </Badge>
      </div>
    </Popover>
  )
}

export default WarningButton
