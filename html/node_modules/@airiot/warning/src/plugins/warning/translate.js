const typeList = { 6: '年', 5: '月', 4: '周', 3: '日', 2: '时', 1: '分', 0: '秒' }
const _typeList = ['年', '月', '星期', '日', '时', '分', '秒']
const translate = data => {
    const { executionType: { execution = {}, specifyConditions = {} } } = data
    const cycleArr = ['secondCycle', 'minuteCycle', 'hourCycle', 'dayCycle', 'weekCycle', 'monthCycle', 'yearCycle']
    const cronExpression = []
    cycleArr.reduce((prev, next, index) => {
        if (specifyConditions[next]) {
            if (index == 1) {
                cronExpression.push(specifyConditions[prev] || execution[prev] || '*')
                cronExpression.push(specifyConditions[next] || execution[next] || '*')
                return next
            }
            cronExpression.push(specifyConditions[next])
            return next
        } else if (!!specifyConditions[prev] && index == 1) {
            cronExpression.push(specifyConditions[prev] || '*')
            cronExpression.push(specifyConditions[next] || execution[next] || '*')
            return next
        } else {
            if (index == 1) {
                if (!execution[prev] && !execution[next]) {
                    cronExpression.push('*')//prev
                    cronExpression.push('*')//next
                    return next
                } else {
                    cronExpression.push(execution[prev] || '*')
                    cronExpression.push(execution[next] || '*')
                    return next
                }
            }
            if (!execution[cycleArr[index - 1]] && cycleArr[index] != 'yearCycle') {
                cronExpression.push(execution[next] || '*')
                return ''
            }
            cronExpression.push(execution[next] || '*')
            return next
        }
    })
    const _cronExpression = []
    cronExpression.map(item => _cronExpression.unshift(item))
    let text = _cronExpression.map((item, index) => {
      const typeName = _t1(_typeList[index])
      if (item.indexOf(',') > -1) {
          return item.split(',').join(`${typeName}、`) + typeName
      }

      if (item.indexOf('-') > -1) {
          return _t1('从') + item + typeName
      }
      if ((item + typeName) == _t1('*星期')) return ''
      if (item == '*') return _t1('每') + typeName
      if (typeName == _t1('星期')) {
          return typeName + item
      }
      return item + typeName
  })

    return text.join(' ')
}

const event = data => {
    const { executionType: { execution={}, specifyConditions={} }, planSetting } = data
    const cycleArr = ['secondCycle', 'minuteCycle', 'hourCycle', 'dayCycle', 'monthCycle', 'weekCycle', 'yearCycle'],
      weekOps = ['MON', 'TUE', 'WED', 'THUR', 'FRI', 'SAT', 'SUN']
    const cronExpression = []

    specifyConditions  && cycleArr.reduce((prev, next, index) => {
      if (specifyConditions && specifyConditions[next]) {
        if (index == 1) {
          cronExpression.push(specifyConditions[prev] || execution[prev] || '*')
          cronExpression.push(specifyConditions[next] || execution[next] || '*')
          return next
        }
        cronExpression.push(specifyConditions[next])
        return next
      } else if (specifyConditions && !!specifyConditions[prev] && index == 1) {
        cronExpression.push(specifyConditions[prev] || '*')
        cronExpression.push(specifyConditions[next] || execution[next] || '*')
        return next
      } else {
        if (index == 1) {
          if (!execution[prev] && !execution[next]) {
            cronExpression.push('*')//prev
            cronExpression.push('*')//next
            return next
          } else {
            cronExpression.push(execution[prev] || '*')
            cronExpression.push(execution[next] || '*')
            return next
          }
        }
        if (!execution[cycleArr[index - 1]] && cycleArr[index] != 'yearCycle') {
          cronExpression.push(execution[next] || '*')
          return ''
        }
        cronExpression.push(execution[next] || '*')
        return next
      }
    })

    if (!_.isEmpty(cronExpression)) {
      data['cronExpression'] = cronExpression.reduce((prev, next, index) => {
        if (index == 5 && cronExpression[index - 2] != '*') {
          return prev + ' ?'
        } else if (index == 5 && next == '*') {
          return prev + ' ?'
        } 
        return prev + ' ' + next
      })
    }
    
    if(_.isEmpty(execution) && _.isEmpty(specifyConditions)) {
      data['cronExpression'] = '* * * * * ? *'
    }
  
    return data
  }

export { translate, event }