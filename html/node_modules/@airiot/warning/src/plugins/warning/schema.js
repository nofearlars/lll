import React from 'react';
import app, { use, api } from 'xadmin';
import { SchemaForm } from 'xadmin-form'
import { C } from 'xadmin-ui';
import _ from 'lodash';
import { Card, Tag, Select, Checkbox, Tooltip, Typography, InputNumber, Form, Button } from 'antd';
import WarningVoxUpload from '../../components/WarningVoxUpload'
import { FieldNameSelect, getVarTag } from './components/FieldNameSelect'
import { PropListPane } from './components/PropListPane'
import TypeSelect from './../../apps/warning/pages/KindSelect'
import WarningKind from './../../apps/warning/views/components/WarningKind'
import WarnRulesRender from './components/WarnRulesRender'
import DelayFull from './components/DelayFull';
import { translate, event } from './translate'

const { Option, OptGroup } = Select


function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    let r = Math.random() * 16 | 0,
      v = c == 'x' ? r : (r & 0x3 | 0x8);
    return v.toString(16);
  });
}

const IDField = ({ input }) => {
  React.useEffect(() => {
    if (!input.value || input.value == '') {
      input.onChange(guid())
    }
  }, [])
  return null
}

IDField.useGroup = false

const AHCheckbox = ({ input, label, field }) => {
  const { name, option } = field
  const onChange = (e) => {
    input.onChange(e.target.checked)
  }
  return <Checkbox value={input.value} checked={input.value} onChange={onChange} ></Checkbox>
}

const CardText = (disable, str, error) => (
  disable ? <Tooltip title={'已禁用'}>
    <span style={{ color: textColor }}>{str || ''}</span>
  </Tooltip> : (str || '')
)

const tagColors = { '低': 'blue', '中': 'orange', '高': 'red' }
const textColor = 'rgb(170, 167, 167)'

const rulesField = {
  key: 'rules',
  itemsRender: C.lazy('Form.Items.Card'),
  cardRender: ({ title, item, actions, error }) => {
    const CardTitle = error ? <Tooltip title={error}>
      <Typography.Text type="danger">
        {CardText(item?.disable, item?.warningname, error)}
      </Typography.Text>
    </Tooltip> : (item.name || title)
    return (
      <Card
        title={CardTitle}
        extra={<Tag color={tagColors[item.level]}>{item.level || '-'}</Tag>}
        actions={actions}
      >
        <div style={{ overflow: 'hidden', wordBreak: 'keep-all', whiteSpace: 'nowrap', textOverflow: 'ellipsis', color: item?.disable ? textColor : '' }}>
          {CardText(item?.disable, item?.description) || _t1('未填写..')}
        </div>
      </Card>
    )
  },
  searchEnable: true,
  searchFields: ['warningname', 'description'],
  group: C.lazy('Form.CollapseGroup')
}

const WarnDefalt = props => {
  const { field: { schema, key, option: { form } }, input: { value, onChange } } = props
  const { settings } = use('settings')
  const ops = settings?.warning?.warningkind || []
  const fields = key && key.split('.')[0]

  const handleChange = (value) => {
    onChange(value)
    if (fields) {
      form.change(fields + '.alert', true)
      form.change(fields + '.handle', true)
    }
  }

  return <div style={{ display: 'flex' }}><Select
    mode="multiple"
    value={value || undefined}
    style={{ maxWidth: 300 }}
    placeholder={_t1(schema.title) + '...'}
    onChange={handleChange}
    options={ops?.length ? ops.map(op => ({ label: op.name, value: op.id })) : []}
  >
  </Select>
    <WarningKind input={{ onChange: () => { } }} type="warningKind" hiddenTable={true} style={{ marginLeft: '10px' }} />
  </div>
}

export default (data, record) => {
  const { id: table } = data

  let schema = {
    name: 'warning',
    title: _r('报警信息'),
    type: 'object',
    properties: {
      rules: {
        title: _r('报警规则'),
        description: _r('可定义报警逻辑、报警描述、报警类型，上传报警声音等详细信息'),
        type: 'array',
        field: {
          validate: (value = []) => {
            let set = [], err = false
            const ret = value?.length && value.map(r => {
              if (set.indexOf(r.warningname) != -1) {
                err = true
                return _r('报警规则名称不能重复')
              } else {
                set.push(r.warningname)
                return null
              }
            })
            return err ? ret : null
          }
        },
        items: {
          type: 'object',
          properties: {
            id: { title: 'ID', type: 'string', export: false },
            warningname: {
              title: _r('报警规则名称'),
              type: 'string',
              field: {
                validate: (value, values, meta) => {
                  return (values.rules || []).filter(r => r.warningname == value).length > 1 ? _r('报警规则名称不能重复') : null
                }
              },
              fieldType: 'xi18n_input',
              driver: 'base'
            },
            level: {
              title: _r('报警级别'),
              type: 'string',
              enum: ['低', '中', '高'],
              driver: 'base'
            },
            type: {
              title: _r('报警类型'),
              type: 'array',
              items: {},
              fieldType: 'warningType',
              export: {
                read: value => {
                  const { settings } = app.context.store.getState()
                  const kinds = settings?.warning?.warningkind || []
                  const option = _.find(kinds, opt => opt.id == value)
                  return option?.name || value
                },
                write: value => {
                  const { settings } = app.context.store.getState()
                  const kinds = settings?.warning?.warningkind || []
                  const option = _.find(kinds, opt => opt.name == value)
                  return option?.id || value
                }
              },

              field: {
                component: props => <WarnDefalt {...props} />
              },
              description: _r('按类型管理报警消息，类型支持用户在【通用配置】中自定义'),
              driver: 'base'
            },
            listType: {
              title: _r('范围限定'),
              type: 'string',
              description: '',
              enum: ['black', 'white'],
              enum_title: [_r('黑名单'), _r('白名单')],
              enum_type: 'tab',
              field: {
                effect: ({ name, value }, form) => {
                  const field_name = name?.split('.')[0] || ''
                  setTimeout(() => {
                    if (value == 'black') {
                      form.setFieldData(field_name + '.blackList', { display: true })
                      form.setFieldData(field_name + '.whiteList', { display: false })
                      form.change(field_name + '.whiteList', null)
                    } else if (value == 'white') {
                      form.setFieldData(field_name + '.whiteList', { display: true })
                      form.setFieldData(field_name + '.blackList', { display: false })
                      form.change(field_name + '.blackList', null)
                    } else {
                      form.setFieldData(field_name + '.whiteList', { display: false })
                      form.setFieldData(field_name + '.blackList', { display: false })
                    }
                  })
                },
              },
              driver: 'senior'
            },
            blackList: {
              title: _r('黑名单设备'),
              type: 'array',
              items: {
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' }
                }
              },
              fieldType: 'tableData',
              description: '报警规则针对选定的黑名单设备不生效',
              field: { table: table, depend: 'table', func: 'device', mode: 'multiple' },
              driver: 'senior'
            },
            whiteList: {
              title: _r('白名单设备'),
              type: 'array',
              items: {
                properties: {
                  id: { type: 'string' },
                  name: { type: 'string' }
                }
              },
              fieldType: 'tableData',
              field: { table: table, depend: 'table', func: 'device', mode: 'multiple' },
              driver: 'senior'
            },
            audio: {
              title: _r('报警声音'),
              type: 'string',
              description: _r('仅支持MP3、WAV格式'),
              field: {
                component: props => <WarningVoxUpload {...props} field={
                  { ...props.field, schema: { ...props.field.schema, type: 'type' } }} />
              },
              driver: 'tip'
            },
            timesOfPlay: {
              title: _r('播放次数'),
              type: 'number',
              minimum: 1,
              description: _r('报警声音播放次数，不填为仅一次'),
              driver: 'tip'
            },
            alert: {
              title: _r('报警提醒'),
              type: 'boolean',
              // field: { component: AHCheckbox },
              description: _r('开启后报警声音提醒及报警数据量的更新'),
              driver: 'tip'
            },
            handle: {
              title: _r('报警处理'),
              type: 'boolean',
              field: { component: AHCheckbox },
              description: _r('开启后可对报警信息进行报警确认及报警处理的操作'),
              driver: 'tip',
              field: {
                effect: ({ name, value }, form) => {
                  const field_name = name?.split('.')[0] || ''
                  setTimeout(() => {
                    if (value) {
                      form.setFieldData(field_name + '.timeoutSetting', { display: true })
                    } else {
                      form.setFieldData(field_name + '.timeoutSetting', { display: false })
                      form.change(field_name + '.timeoutSetting', null)
                    }
                  })
                }
              }
            },
            description: {
              title: _r('报警描述'),
              type: 'string',
              description: _r('若需要展示设备名称，请输入{{tableDataName}}'),
              field: {
                descriptionType: 'bottom',
              },
              fieldType: 'xi18n_input',
              driver: 'base'
            },
            interval: {
              title: _r('报警间隔(s)'),
              type: 'number',
              minimum: 1,
              description: _r('在定义的时间范围内，对同一设备同一条报警规则产生的报警进行合并，只展示一条报警消息'),
              driver: 'senior'
            },
            triggerLimit: {
              title: _r('报警次数'),
              type: 'number',
              minimum: 1,
              driver: 'senior',
              description: _r('配置报警次数后，触发报警条件产生的报警提示信息达到设定次数，将不会信的产生报警消息，当报警恢复后，重新计算次数')
            },
            deadZone: {
              title: _r('报警死区'),
              type: 'number',
              minimum: 1,
              description: _r('定义报警恢复数值与报警数值之间的波动范围'),
              driver: 'senior'
            },
            disable: {
              title: _r('禁用'),
              type: 'boolean',
              description: _t1('禁用后当前报警规则不生效'),
              driver: 'senior'
            },
            extraTags: {
              type: 'array',
              title: _r('关注数据'),
              description: _r('用于保存除报警规则数据点外，报警产生时其他数据点的实时值'),
              items: {
                title: _r('节点'),
                type: 'object',
                properties: {
                  id: {
                    type: 'string',
                    title: _r('数据点'),
                    fieldType: 'tags-select',
                    field: {
                      tableId: table,
                      tableDataId: record?.id
                    }
                  }
                },
                // form: [{ key: 'id', type: 'tagsselect',  tableId: table }]
              },
              driver: 'senior'
            },
            delayFull: {
              type: 'number',
              title: _r('报警触发周期'),
              field: {
                component: DelayFull
              },
              description: '周期内，每一次的报警满足报警条件，经过周期后的第一次上数仍然触发报警，才产生报警信息',
              driver: 'senior'
            },
            delay: {
              title: _r('延时提醒时长(s)'),
              // type: 'number',
              minimum: 1,
              description: _r('若设置延时提醒时长，产生报警，经过设定时长后进行第一次报警提醒'),
              field: {
                extendFlow: {
                  show: true,
                  limit: ['number'],
                  mode: 'single'
                },
                component: PropListPane
              },
              driver: 'senior'
            },
            logic: {
              title: _r('报警逻辑'),
              type: 'object',
              fieldType: 'model-logic',
              properties: {},
              field: {
                tableDataId: record?.id || null,
                tableId: record?._table || null,
                validate: (value) => {
                  // value = value?.type ? value.logic : value
                  // const str = JSON.stringify(value)
                  // if (value && str.indexOf('var.') == -1 && str.indexOf('node.') == -1) {
                  //   return _r('请选择数据点或资产属性其中一个值')
                  // } else {
                  //   return null
                  // }
                },
                effect: ({ name, value }, form) => {
                  value = value?.type ? value.logic : value
                  const field_name = name?.split('.')[0] || ''
                  setTimeout(() => {
                    let varTag = getVarTag(value, [])
                    let varTagArrs = varTag?.length ? varTag.filter(item => item.indexOf('var.') > -1) : []
                    let defaultValue = varTagArrs?.length ? varTagArrs.map(item => {
                      return item.substr(item.indexOf('.') + 1)
                    }) : undefined
                    if (defaultValue?.length) {
                      form.setFieldData(field_name + '.fieldName', { display: true })
                    } else {
                      form.setFieldData(field_name + '.fieldName', { display: false })
                      form.change(field_name + '.fieldName', null)
                    }
                  })
                }
              },
              driver: 'base'
            },
            fieldName: {
              title: _r('报警数值数据'),
              type: 'array',
              items: {},
              description: _r('自定义报警中报警数值列显示的数据点，默认显示报警逻辑中的所有数据点'),
              field: { table: table, func: 'device' },
              driver: 'base'
            },
            timeoutSetting: {
              title: _r('超时处理'),
              type: 'object',
              properties: {},
              field: {
                component: props => {
                  const { t: _t1, i18n } = useI18n()
                  return <C is="UserOverTime" {...props} initValue={false} customOption={
                    [{ key: _t1('天'), value: 'd' }, { key: _t1('小时'), value: 'h' }, { key: _t1('分'), value: 'm' }]
                  } />
                }
              },
              description: '产生的报警信息超过设定时间后，默认为已处理状态',
              driver: 'senior'
            },
            executionSetting: {
              title: _r('报警有效期'),
              type: 'object',
              properties: {
              },
              field: {
                component: props => {
                  const { t: _t1, i18n } = useI18n()
                  const { input } = props
                  const [execution, setExecution] = React.useState(input?.value?.executionType || {})

                  const resetExecution = value => {
                    let data = event({ executionType: value })
                    setExecution(data?.executionType)
                    input.onChange({ ...input?.value, ...data })
                  }

                  return <Card>
                    <div style={{ padding: '1rem 0' }}>
                      <Checkbox onChange={e => {
                        input.onChange({ ...input.value, disable: !e.target.checked })
                      }} checked={!input?.value.disable}>{_t1('启用')}</Checkbox>
                    </div>
                    <div style={!input?.value.disable ? {} : { display: 'none' }}>
                      <C is="ExecutionType" {...props} input={{ onChange: value => { resetExecution(value) }, value: execution }} />
                      <div style={{ marginTop: '1rem' }}>{translate({ executionType: execution })}</div>
                    </div>
                  </Card>
                }
              },
              driver: 'senior',
              description: _r('配置有效期后，只会在有效期间产生报警信息')
            },
            delayTriggerLimit: {
              title: _r('报警计次'),
              type: 'number',
              minimum: 1,
              driver: 'senior',
            }
          },
          form: ['warningname', 'level', 'type', 'description',
            {
              key: 'logic', resultType: 'boolean'
            },
            {
              key: 'fieldName',
              component: props => <FieldNameSelect {...props} field={
                { ...props.field, func: 'device', schema: { ...props.field.schema, logic: 'logic', device: 'device' } }} />,
            },
            'listType',
            'blackList',
            'whiteList',
            'audio', 'timesOfPlay',
            'alert', 'handle', 'extraTags', 'delayFull', 'delay', 'delayTriggerLimit', 'interval', 'deadZone', 'timeoutSetting', 'triggerLimit', 'executionSetting', 'disable'],
          required: ['level', 'type', 'logic', 'description', 'warningname'],
          formRender: (fields, option) => <WarnRulesRender fields={fields} option={option} />
        }
      }
    },
    listFields: !table ? ['restrainWarning'] : [],
    form: !table ? ['restrainWarning', rulesField] : [rulesField],
    formEffect: form => {
      form.useField('rules', ({ value }) => {
        if (value && value.length > 0) {
          let change = false
          const newValues = value.map(v => {
            if (!_.isEmpty(v) && !v.id) {
              change = true
              return { id: guid(), ...v }
            }
            return v
          })
          if (change) {
            form.change('rules', newValues)
          }
        }
      })
    }
  }

  if (!table) {
    schema.properties = {
      restrainWarning: {
        type: 'boolean',
        title: _r('抑制报警'),
        description: _r('对设备的所有报警规则进行抑制，报警规则抑制后，设备不会产生报警')
      },
      ...schema.properties
    }
  }

  return schema
}
