import React from 'react';
import app, { use, api } from 'xadmin';
import { SchemaForm } from 'xadmin-form'
import { C } from 'xadmin-ui';
import _ from 'lodash';
import { Card, Tag, Select, Checkbox, Tooltip, Typography, InputNumber, Form } from 'antd';
const { Option, OptGroup } = Select

const LogicEditor = props => {
  const { input: { value, onChange }, tags, model, loading } = props
  const [ selectData, setSelectData ] = React.useState([])


  // const nodeSchema = app.get('models')['Node']
  let defaultValue = props?.fieldValue?.length ? props?.fieldValue.filter(item => item.indexOf('var.') > -1).map(item => {
    return item.substr(item.indexOf('.') + 1)
  }) : undefined

  React.useEffect(() => {
    value ? onChange(value) : defaultValue && defaultValue?.length && onChange(defaultValue)
  }, [])

  const getData = (tags, defaultValue) => {
    let newTags = tags?.length ? tags.filter(item => {
      if (defaultValue?.length) {
        let index = defaultValue.findIndex(val => val == item.id)
        if (index > -1) { return item }
      }
    }) : []
    let data = {
      '数据点': newTags?.length ? newTags.reduce((p, t) => { p[t.name] = t.id; return p }, {}) : {},
    }
    return data
  }
  
  React.useEffect(() => {
    let data = getData(tags, defaultValue)
    setSelectData(data)
    onChange(defaultValue)
  }, [ JSON.stringify(tags), JSON.stringify(defaultValue) ])  

  const handleChange = (values) => {
    values?.length ? onChange(values) : defaultValue && defaultValue?.length && onChange(defaultValue)
  }

  const getOption = val => {
    if (!_.isEmpty(val) && _.isArray(val)) {
      if (_.isObject(val[1])) {
        getOption(val[1])
      } else {
        if (val[0] && _.isString(val[0]) && val[0].indexOf('prefix:') > -1) {
          let labelValue = `${val[0].substr(0, val[0].indexOf('prefix:'))}（${val[0].substr(val[0].indexOf('prefix:') + 7)}）`
          return <Option key={val[1]} value={val[1]}>{labelValue}</Option>
        } else {
          return <Option key={val[1]} value={val[1]}>{val[0]}</Option>
        }
      }
    }
  }

  return (<>
    <Select mode="multiple" value={!_.isEmpty(value) ? value : defaultValue} style={{ width: 300 }} onChange={handleChange}>
      {
        Object.entries(selectData).map(item => {
          return (
            <OptGroup key={item[0]} label={item[0]}>
              {
                _.isObject(item[1]) && !_.isEmpty(item[1]) ? Object.entries(item[1]).map(val => {
                  return getOption(val)
                }) : null
              }
            </OptGroup>
          )
        })
      }
    </Select>
  </>)
}

export { LogicEditor }