import React, { useLayoutEffect } from 'react'
import { StoreWrap, app, use, api } from 'xadmin'
import {
  Button, Popconfirm, Radio, Select, Modal, message, Table, Checkbox, Row, Col, Space, Input, Tooltip,
  Dropdown, Form, Switch, Tabs
} from 'antd'
import { C, Icon } from 'xadmin-ui'
import _ from 'lodash'

const WarningType = props => {
  const { settings } = use('settings')
  const warning = settings?.warning
  const { input: { onChange, value } } = props
  return (
    <Select allowClear onChange={value => { onChange(value) }} value={value}>
      {
        warning.warningkind.length && warning.warningkind.map(item => {
          return <Select.Option value={item.id}>{item.name}</Select.Option>
        })
      }
    </Select>
  )
}

const ProcessedSelect = props => {
  const { input: { value, onChange } } = props
  const processed = ['未处理', '已处理']
  return (
    <Select
      mode="multiple"
      allowClear
      style={{ width: '100%' }}
      onChange={value => { onChange(value) }}
      value={value || undefined}
    >
      {
        processed.map(item => {
          return <Select.Option key={item}>{item}</Select.Option>
        })
      }
    </Select>
  )
}

const StatusSelect = props => {
  const { input: { value, onChange } } = props
  const status = ['未确认', '已确认']
  return (
    <Select
      mode="multiple"
      allowClear
      style={{ width: '100%' }}
      onChange={value => { onChange(value) }}
      value={value || undefined}
    >
      {
        status.map(item => {
          return <Select.Option key={item}>{item}</Select.Option>
        })
      }
    </Select>
  )
}

const TimeRanges = props => {
  const { t:_t1, i18n } = useI18n()

  let { input: { onChange, value } } = props
  let optionTime = [{ key: _t1('天'), value: 'd' }, { key: _t1('周'), value: 'w' }, { key: _t1('分钟'), value: 'm' }, { key: _t1('小时'), value: 'h' }]
  const handleSelect = e => onChange({ count: value.count, unit: e })
  const handleChange = e => { if (e.target.value >= 0) { onChange({ unit: value.unit, count: parseInt(e.target.value) }) } }

  return (
    <Space>
      <Input style={{ width: 160 }} placeholder={_t1("数值")} type="number" onChange={handleChange} value={value.count || null}
        addonAfter={
          <Select style={{ width: 75 }} onChange={handleSelect} value={value.unit}>
            {
              optionTime.map(item => {
                return <Select.Option value={item.value}>{item.key}</Select.Option>
              })
            }
          </Select>} />
    </Space>
  )
}

export { WarningType, TimeRanges, ProcessedSelect, StatusSelect }
