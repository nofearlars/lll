import React from 'react'
import moment from 'moment'
import { C } from 'xadmin-ui'
import { Model, ModelWrap } from 'xadmin-model'
import { Button, notification, message } from 'antd'
import { api, use } from 'xadmin'
import _ from 'lodash'

const toFixed = (Dight, How = 2) => {
  return _.isNumber(Dight) ? Math.round(Dight * Math.pow(10, How)) / Math.pow(10, How) : Dight
}

const toValue = (value, tag) => {
  return _.isBoolean(value) ?
    (value ? 1 : 0) :
    (_.isNumber(value) ?
      toFixed(value, tag && tag.fixed !== undefined ? tag.fixed : 3) :
      (value ? value.toString() : '-')
    )
}

const WarningFields = (props) => {
  const { dispatch } = use('redux')
  const { item: { tableData, model, time }, value } = props

  const onShow = ({ time, tableData, tag }) => {
    if (tableData) {
      dispatch({ type: '@@iot/CHANGE_DATA_MODAL', payload: { time, tableData, tag, show: true } })
    }
  }

  const renderValue = value ? value.map(item => {
    const value = toValue(item.value)
    return (item.name && item.value != undefined) ? <span style={{ marginRight: 5, cursor: 'pointer' }} onClick={() => {
      if (tableData) {
        onShow({ time, tableData, tag: item })
      }
    }}>{item.name}:{value}</span> : ''
  }).filter(Boolean) : ''

  return renderValue ? renderValue : ''
}

const Confirm = props => {
  const { t:_t1, i18n } = useI18n()
  const setCount = use('warning.tabBadge')
  let getItems = () => null;
  let saveItem = () => null
  try {
    getItems = use('model.getItems')?.getItems
  } catch { }
  const { confirm, onProcessed } = use('warnings.confirm')
  const [ newItem, setNewItem ] = React.useState(props.item)
  const { settings } = use('settings')
  let warning = settings?.settings


  const handleConfirm = () => {
    confirm(newItem).then(res => {
      if (res) {
        getItems()
        message.success('报警信息已确认')
        props?.item?.processed == '已处理' && setCount && setCount()
        setNewItem({ ...newItem, status: '已确认'}) 
      }
      
    })
  }

  const handleProcessed = () => {
    onProcessed(newItem).then(res => { 
      if (res) {
        getItems();
        message.success('成功处理报警信息')
        props?.item?.status == '已确认' && setCount && setCount()
        setNewItem({ ...newItem, processed: '已处理'})
      }
    })
  }

  return (
    <>
      { warning?.alarmModal?.show_confirm ? ((newItem.status == '未确认' || !newItem.status)
        ? <Button size="small" type="primary" onClick={handleConfirm} style={{ marginLeft: '.2rem' }}>确认报警</Button>
        : <Button size="small" style={{ marginLeft: '.2rem' }} disabled>{_t1('报警已确认')}</Button>) :  null}
      { warning?.alarmModal?.show_handle ? ((newItem.processed == undefined || newItem.processed == '未处理') 
        ? <Button size="small" type="primary" onClick={handleProcessed} style={{ marginLeft: '.2rem' }} >{_t1('处理报警')}</Button> : <Button style={{ marginLeft: '.2rem' }} size="small" disabled>{_t1('报警已处理')}</Button>) : null }
    </>
  )
}

const DesCription = ({ itemTime, description }) => {
  const { time } = use('time')
  return <span style={{ marginRight: '.5rem' }}>{moment(itemTime).from(time)}{description}</span>
}

const WarnDescription = ({ item }) => {
  let point = item?.node?.hkvideo?.point
  const { settings } = use('settings')
  let warning = settings?.settings
  return (
    <div>
      <div style={{ marginBottom: '.5rem' }}>
        <DesCription itemTime={item.time} description={item.desc} />
        {
          warning?.alarmModal?.show_fields ? (
            <span style={{ padding: '0 0 1rem .5rem' }}>
              <WarningFields item={item} value={item.fields}/>
            </span> 
          ) : null
        }
        <div>
          <Confirm item={item} />
        </div>
      </div>
      { point ? <C is="StreamVideo" videoUid={point} styles={{ height: '300px' }} /> : null }
    </div>
  )
}
let timer;
const NotificationClass = props => {
  const [ warnData, setWarnData ] = React.useState([])
  const { subscribe, onData } = use('ws')
  const { settings } = use('settings')
  let warning = settings?.settings
  let limit = warning?.alarmModal?.limit || 5
  let firstWarn = []
  
  React.useEffect(() => {
    let tableId, tableDataId, departmentId, level;
    tableId = warning?.alarmModal?.table?.length ? warning.alarmModal.table.map(item=> item.id) : undefined
    tableDataId = warning?.alarmModal?.tableData?.length ? warning.alarmModal.tableData.map(item=> item.id) : undefined
    departmentId = warning?.alarmModal?.department?.length ? warning.alarmModal.department.map(item=> item.id) : undefined
    level = warning?.alarmModal?.level ? warning?.alarmModal?.level : undefined
    let str = {
      sort: { time: -1 },
      skip: 0,
      limit: warning?.alarmModal?.limit || 5,
      project: { status: 1, processed: 1, tableDataId: 1, uid: 1, handle: 1, time: 1, table: 1, tableData: 1, department: 1, parent: 1,
        fields: 1, level: 1, type: 1, confirmUser: 1, desc: 1, remark: 1, 'tableData._settings': 1, 'tableData.hkvideo': 1 },
        filter: { level, tableId, tableDataId, departmentId },
      withCount: true
    }
    let queryStr = encodeURIComponent(JSON.stringify(str))
    api({ name: `warning/warning?query=${queryStr}` })
      .fetch('', {})
          .then(({ json }) => {
            setWarnData([])
            return subscribe('warning', { 
              level: warning?.alarmModal?.level, tableId, tableDataId, departmentId
            })
          })
  }, [ warning ])

  onData(async data => {
      if (data && _.isPlainObject(data)) {
        if(!data?.recoveryTime) {
          if(firstWarn?.length<limit) {
            firstWarn.push(data.id)
            await openNotification(data)
          }else {
            let id = firstWarn[0]
            firstWarn.shift()
            await notification.close(id)
            firstWarn.push(data.id)
            await openNotification(data)
          }
          // if(timer) { clearTimeout(timer) }
          // timer = setTimeout(() => {
          //   firseWarn.forEach(item=> {
          //     notification.close(item)
          //   })
          //   firstWarn.length=0
          // }, statusTime*1000)
        }
      }
  })
  
  const openNotification = item => {
    item && notification.open({
      placement: warning?.alarmModal?.placement || 'topRight',
      key: `${item.id}`,
      style: { marginBottom: '10px' },
      message: (<div style={{ marginBottom: '.5rem' }}>
        <span style={{ marginRight: '.5rem'}}>{item?.table?.title}</span>
        <span style={{ marginRight: '.5rem'}}>{item?.tableData?.name}（{item?.tableData?.uid || item?.tableData?.id}）</span>
      </div>),
      description: <WarnDescription item={item} />,
      duration: warning?.alarmModal?.statusTime || 30, 
      onClose: () => {
        closeCurrentNotification(item)
      },
      top: 64
    })
  }

  const  closeCurrentNotification = (item) => {
    let index = firstWarn.indexOf(item.id)
    if(index != -1) firstWarn.splice(index, 1)
  }

  return null
}

const WarningModel = props => {
  const { settings } = use('settings')
  const warning = settings?.warning
  return <>{ warning?.alarmModal?.show ? <NotificationClass {...props} /> : null }</>
}

export default WarningModel
